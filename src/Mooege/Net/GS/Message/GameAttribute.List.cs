/*
 * Copyright (C) 2011 - 2012 mooege project - http://www.mooege.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

using System.Linq;

namespace Mooege.Net.GS.Message
{
    public partial class GameAttribute
    {
        public static readonly GameAttribute[] Attributes;

        static GameAttribute()
        {
            Attributes = typeof(GameAttribute).GetFields()
                .Where(a =>
                       a.IsStatic &&
                       (a.FieldType.Name == "GameAttributeI" ||
                        a.FieldType.Name == "GameAttributeF" ||
                        a.FieldType.Name == "GameAttributeB"))
                .Select(a => a.GetValue(null) as GameAttribute)
                .OrderBy(a => a.Id)
                .ToArray();

            ScriptedAttributeInitializer.ProcessAttributes(Attributes);

            // Have to manually add in some necessary keyed attribute dependents, as I don't know
            // of any proper list for all potential keys a given attribute will be used with.

            // add dependency so that all 7 resistances update when intelligence does
            for (int n = 0; n < 7; ++n)
            {
                Resistance_From_Intelligence.Dependents.Add(
                    new GameAttributeDependency(Resistance_Total, n, true, true));
            }
        }

        // Caution: Be advised, converting these attribs from Int to Float may crash d3 client or make it throw an error! Do it with caution if needed any! /raist.
        // Attack, Precision, Vitality, Defense


        // TODO: move into categories? will probably just end up as properties on actor objects
        public static readonly GameAttributeF Axe_Bad_Data = new GameAttributeF(0, 0, -1, 0, 0, "", "", "Axe_Bad_Data", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Attribute_Timer = new GameAttributeI(1, 0, 5, 0, 1, "", "", "Attribute_Timer", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Attribute_Pool = new GameAttributeI(2, 0, -1, 0, 1, "", "", "Attribute_Pool", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Death_Count = new GameAttributeI(3, 0, -1, 0, 1, "", "", "Death_Count", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI DualWield_Hand = new GameAttributeI(4, 0, -1, 0, 1, "", "", "DualWield_Hand", GameAttributeEncoding.IntMinMax, 1, 0, 2, 2);
        public static readonly GameAttributeI DualWield_Hand_Next = new GameAttributeI(5, 0, -1, 0, 1, "", "", "DualWield_Hand_Next", GameAttributeEncoding.IntMinMax, 1, 0, 2, 2);
        public static readonly GameAttributeB DualWield_Hands_Swapped = new GameAttributeB(6, 0, -1, 0, 1, "", "", "DualWield_Hands_Swapped", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeI Respawn_Game_Time = new GameAttributeI(7, 0, -1, 0, 1, "", "", "Respawn_Game_Time", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Backpack_Slots = new GameAttributeI(8, 0, -1, 0, 1, "", "", "Backpack_Slots", GameAttributeEncoding.IntMinMax, 1, 0, 128, 8);
        public static readonly GameAttributeI Shared_Stash_Slots = new GameAttributeI(9, 0, -1, 0, 1, "", "", "Shared_Stash_Slots", GameAttributeEncoding.IntMinMax, 1, 0, 210, 8);
        public static readonly GameAttributeF Strength = new GameAttributeF(10, 0, -1, 0, 0, "", "", "Strength", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Dexterity = new GameAttributeF(11, 0, -1, 0, 0, "", "", "Dexterity", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Intelligence = new GameAttributeF(12, 0, -1, 0, 0, "", "", "Intelligence", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Vitality = new GameAttributeF(13, 0, -1, 0, 0, "", "", "Vitality", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Strength_Total = new GameAttributeF(14, 0, -1, 0, 0, "", "((Strength + Stats_All_Bonus + Strength_Bonus + (Strength_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Strength_Bonus_Percent)) * (1 - Strength_Reduction_Percent)", "Strength_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Dexterity_Total = new GameAttributeF(15, 0, -1, 0, 0, "", "((Dexterity + Stats_All_Bonus + Dexterity_Bonus + (Dexterity_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Dexterity_Bonus_Percent)) * (1 - Dexterity_Reduction_Percent)", "Dexterity_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Intelligence_Total = new GameAttributeF(16, 0, -1, 0, 0, "", "((Intelligence + Stats_All_Bonus + Intelligence_Bonus + (Intelligence_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Intelligence_Bonus_Percent)) * (1 - Intelligence_Reduction_Percent)", "Intelligence_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Vitality_Total = new GameAttributeF(17, 0, -1, 0, 0, "", "((Vitality + Stats_All_Bonus + Vitality_Bonus + (Vitality_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Vitality_Bonus_Percent)) * (1 - Vitality_Reduction_Percent)", "Vitality_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Strength_Bonus = new GameAttributeF(18, 0, -1, 0, 0, "", "", "Strength_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Dexterity_Bonus = new GameAttributeF(19, 0, -1, 0, 0, "", "", "Dexterity_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Intelligence_Bonus = new GameAttributeF(20, 0, -1, 0, 0, "", "", "Intelligence_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Vitality_Bonus = new GameAttributeF(21, 0, -1, 0, 0, "", "", "Vitality_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Strength_Bonus_Percent = new GameAttributeF(22, 0, -1, 0, 0, "", "", "Strength_Bonus_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Dexterity_Bonus_Percent = new GameAttributeF(23, 0, -1, 0, 0, "", "", "Dexterity_Bonus_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Intelligence_Bonus_Percent = new GameAttributeF(24, 0, -1, 0, 0, "", "", "Intelligence_Bonus_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Vitality_Bonus_Percent = new GameAttributeF(25, 0, -1, 0, 0, "", "", "Vitality_Bonus_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Strength_Reduction_Percent = new GameAttributeF(26, 0, -1, 1, 0, "", "", "Strength_Reduction_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Dexterity_Reduction_Percent = new GameAttributeF(27, 0, -1, 1, 0, "", "", "Dexterity_Reduction_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Intelligence_Reduction_Percent = new GameAttributeF(28, 0, -1, 1, 0, "", "", "Intelligence_Reduction_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Vitality_Reduction_Percent = new GameAttributeF(29, 0, -1, 1, 0, "", "", "Vitality_Reduction_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeI Primary_Damage_Attribute = new GameAttributeI(30, -1, -1, 3, 1, "", "", "Primary_Damage_Attribute", GameAttributeEncoding.IntMinMax, 31, -1, 3, 3);
        public static readonly GameAttributeF Attack = new GameAttributeF(31, 0, -1, 0, 0, "", "", "Attack", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Precision = new GameAttributeF(32, 0, -1, 0, 0, "", "", "Precision", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Defense = new GameAttributeF(33, 0, -1, 0, 0, "", "", "Defense", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Attack_Total = new GameAttributeF(34, 0, -1, 0, 0, "", "((Attack + Stats_All_Bonus + Attack_Bonus) * (1 + Attack_Bonus_Percent)) * (1 - Attack_Reduction_Percent)", "Attack_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Precision_Total = new GameAttributeF(35, 0, -1, 0, 0, "", "((Precision + Stats_All_Bonus + Precision_Bonus) * (1 + Precision_Bonus_Percent)) * (1 - Precision_Reduction_Percent)", "Precision_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Defense_Total = new GameAttributeF(36, 0, -1, 0, 0, "", "((Defense + Stats_All_Bonus + Defense_Bonus) * (1 + Defense_Bonus_Percent)) * (1 - Defense_Reduction_Percent)", "Defense_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Attack_Bonus = new GameAttributeF(37, 0, -1, 0, 0, "", "", "Attack_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Precision_Bonus = new GameAttributeF(38, 0, -1, 0, 0, "", "", "Precision_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Defense_Bonus = new GameAttributeF(39, 0, -1, 0, 0, "", "", "Defense_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attack_Bonus_Percent = new GameAttributeF(40, 0, -1, 0, 0, "", "", "Attack_Bonus_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Precision_Bonus_Percent = new GameAttributeF(41, 0, -1, 0, 0, "", "", "Precision_Bonus_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Defense_Bonus_Percent = new GameAttributeF(42, 0, -1, 0, 0, "", "", "Defense_Bonus_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attack_Reduction_Percent = new GameAttributeF(43, 0, -1, 1, 0, "", "", "Attack_Reduction_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Precision_Reduction_Percent = new GameAttributeF(44, 0, -1, 1, 0, "", "", "Precision_Reduction_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Defense_Reduction_Percent = new GameAttributeF(45, 0, -1, 1, 0, "", "", "Defense_Reduction_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Armor = new GameAttributeF(46, 0, -1, 0, 0, "", "", "Armor", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Armor_Bonus_Percent = new GameAttributeF(47, 0, -1, 0, 0, "", "", "Armor_Bonus_Percent", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Armor_Item = new GameAttributeF(48, 0, -1, 0, 0, "", "0", "Armor_Item", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Armor_Bonus_Item = new GameAttributeF(49, 0, -1, 0, 0, "", "", "Armor_Bonus_Item", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Armor_Item_Percent = new GameAttributeF(50, 0, -1, 0, 0, "", "0", "Armor_Item_Percent", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Armor_Item_SubTotal = new GameAttributeF(51, 0, -1, 0, 0, "FLOOR((Armor_Item + Armor_Bonus_Item) * (Armor_Item_Percent + 1))", "", "Armor_Item_SubTotal", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Armor_Item_Total = new GameAttributeF(52, 0, -1, 0, 0, "(Armor_Item > 0)?(Max(Armor_Item_SubTotal, 1)):Armor_Item_SubTotal", "", "Armor_Item_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Armor_Total = new GameAttributeF(53, 0, -1, 0, 0, "", "FLOOR((Armor + Armor_Item_Total + Strength_Total) * (Armor_Bonus_Percent + 1))", "Armor_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeI Experience_Granted = new GameAttributeI(54, 0, -1, 0, 1, "", "", "Experience_Granted", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Experience_Next = new GameAttributeI(55, 0, -1, 0, 1, "", "", "Experience_Next", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Gold_Granted = new GameAttributeI(56, 0, -1, 0, 1, "", "", "Gold_Granted", GameAttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly GameAttributeI Gold = new GameAttributeI(57, 0, -1, 0, 1, "", "", "Gold", GameAttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly GameAttributeF Gold_Find = new GameAttributeF(58, 0, -1, 0, 0, "", "", "Gold_Find", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeI Level = new GameAttributeI(59, 0, -1, 0, 1, "", "", "Level", GameAttributeEncoding.IntMinMax, 31, -1, 127, 8);
        public static readonly GameAttributeI Level_Cap = new GameAttributeI(60, 0, -1, 0, 1, "", "", "Level_Cap", GameAttributeEncoding.IntMinMax, 1, -1, 127, 8);
        public static readonly GameAttributeF Magic_Find = new GameAttributeF(61, 0, -1, 0, 0, "", "", "Magic_Find", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeB Magic_And_Gold_Find_Suppressed = new GameAttributeB(62, 0, -1, 1, 1, "", "", "Magic_And_Gold_Find_Suppressed", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeF Treasure_Find = new GameAttributeF(63, 0, 14, 0, 0, "", "", "Treasure_Find", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeI Resource_Cost_Reduction_Amount = new GameAttributeI(64, 0, 10, 0, 1, "", "", "Resource_Cost_Reduction_Amount", GameAttributeEncoding.IntMinMax, 9, -4095, 16383, 15);
        public static readonly GameAttributeF Resource_Cost_Reduction_Total = new GameAttributeF(65, 0, 10, 0, 0, "", "Resource_Cost_Reduction_Amount", "Resource_Cost_Reduction_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resource_Set_Point_Bonus = new GameAttributeF(66, 0, 10, 0, 0, "", "", "Resource_Set_Point_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Faster_Healing_Percent = new GameAttributeF(67, 0, -1, 0, 0, "", "", "Faster_Healing_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Spending_Resource_Heals_Percent = new GameAttributeF(68, 0, 10, 0, 0, "", "", "Spending_Resource_Heals_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Bonus_Healing_Received_Percent = new GameAttributeF(69, 0, -1, 0, 0, "", "", "Bonus_Healing_Received_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Reduced_Healing_Received_Percent = new GameAttributeF(70, 0, -1, 0, 0, "", "", "Reduced_Healing_Received_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Experience_Bonus = new GameAttributeF(71, 0, -1, 0, 0, "", "", "Experience_Bonus", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus_Percent = new GameAttributeF(72, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Health_Globe_Bonus_Chance = new GameAttributeF(73, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Health_Globe_Bonus_Mult_Chance = new GameAttributeF(74, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Mult_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Health_Globe_Bonus_Health = new GameAttributeF(75, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Health", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Increased_Health_From_Globes_Percent = new GameAttributeF(76, 0, -1, 0, 0, "", "", "Increased_Health_From_Globes_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Increased_Health_From_Globes_Percent_Total = new GameAttributeF(77, 0, -1, 0, 0, "", "Increased_Health_From_Globes_Percent", "Increased_Health_From_Globes_Percent_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Bonus_Health_Percent_Per_Second_From_Globes = new GameAttributeF(78, 0, -1, 0, 0, "", "", "Bonus_Health_Percent_Per_Second_From_Globes", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Bonus_Health_Percent_Per_Second_From_Globes_Total = new GameAttributeF(79, 0, -1, 0, 0, "", "Bonus_Health_Percent_Per_Second_From_Globes", "Bonus_Health_Percent_Per_Second_From_Globes_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Mana_Gained_From_Globes_Percent = new GameAttributeF(80, 0, -1, 0, 0, "", "", "Mana_Gained_From_Globes_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Mana_Gained_From_Globes = new GameAttributeF(81, 0, -1, 0, 0, "", "", "Mana_Gained_From_Globes", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance = new GameAttributeF(82, 0, 0, 0, 0, "", "", "Resistance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Percent = new GameAttributeF(83, 0, 0, 0, 0, "", "", "Resistance_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Total = new GameAttributeF(84, 0, 0, 0, 0, "", "(Resistance + Resistance_All#NONE + Resistance_From_Intelligence#NONE) * ((Resistance_Percent_All#NONE + Resistance_Percent + 1))", "Resistance_Total", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeF Resistance_All = new GameAttributeF(85, 0, -1, 0, 0, "", "", "Resistance_All", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Percent_All = new GameAttributeF(86, 0, -1, 0, 0, "", "", "Resistance_Percent_All", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_From_Intelligence = new GameAttributeF(87, 0, -1, 0, 0, "", "(Intelligence_Total * 0.1)", "Resistance_From_Intelligence", GameAttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly GameAttributeF Class_Damage_Reduction_Percent = new GameAttributeF(88, 0, -1, 0, 0, "", "", "Class_Damage_Reduction_Percent", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeI Skill = new GameAttributeI(89, 0, 4, 0, 1, "", "", "Skill", GameAttributeEncoding.IntMinMax, 9, 0, 4095, 12);
        public static readonly GameAttributeI Skill_Total = new GameAttributeI(90, 0, 4, 0, 1, "", "Skill", "Skill_Total", GameAttributeEncoding.IntMinMax, 9, 0, 4095, 12);
        public static readonly GameAttributeI TeamID = new GameAttributeI(91, -1, -1, 1, 1, "", "", "TeamID", GameAttributeEncoding.IntMinMax, 31, -1, 23, 5);
        public static readonly GameAttributeI Team_Override = new GameAttributeI(92, -1, -1, 1, 1, "", "", "Team_Override", GameAttributeEncoding.IntMinMax, 31, -1, 23, 5);
        public static readonly GameAttributeB Invulnerable = new GameAttributeB(93, 0, -1, 1, 1, "", "", "Invulnerable", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Loading = new GameAttributeB(94, 0, -1, 1, 1, "", "", "Loading", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Loading_Player_ACD = new GameAttributeI(95, -1, -1, 3, 1, "", "", "Loading_Player_ACD", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Loading_Power_SNO = new GameAttributeI(96, -1, -1, 3, 1, "", "", "Loading_Power_SNO", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Loading_Anim_Tag = new GameAttributeI(97, -1, -1, 3, 1, "", "", "Loading_Anim_Tag", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeB Loading_NewGame = new GameAttributeB(98, 0, -1, 1, 1, "", "", "Loading_NewGame", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Auto_Porting_To_Save_Point = new GameAttributeB(99, 0, -1, 1, 1, "", "", "Auto_Porting_To_Save_Point", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB No_Damage = new GameAttributeB(100, 0, -1, 1, 1, "", "", "No_Damage", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB No_AutoPickup = new GameAttributeB(101, 0, -1, 1, 1, "", "", "No_AutoPickup", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeF Light_Radius_Percent_Bonus = new GameAttributeF(102, 0, 0, 0, 0, "", "", "Light_Radius_Percent_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Hitpoints_Cur = new GameAttributeF(103, 0, -1, 0, 0, "", "Min(Hitpoints_Cur.Agg, Hitpoints_Max_Total)", "Hitpoints_Cur", GameAttributeEncoding.Float32, 31, 0, 0, 32);
        public static readonly GameAttributeF Hitpoints_Factor_Level = new GameAttributeF(104, 0, -1, 0, 0, "", "", "Hitpoints_Factor_Level", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Factor_Vitality = new GameAttributeF(105, 0, -1, 0, 0, "", "", "Hitpoints_Factor_Vitality", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Total_From_Vitality = new GameAttributeF(106, 0, -1, 0, 0, "", "Vitality_Total * Hitpoints_Factor_Vitality", "Hitpoints_Total_From_Vitality", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Total_From_Level = new GameAttributeF(107, 0, -1, 0, 0, "", "(Level - 1) * Hitpoints_Factor_Level", "Hitpoints_Total_From_Level", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Granted = new GameAttributeF(108, 0, -1, 0, 0, "", "", "Hitpoints_Granted", GameAttributeEncoding.Float32, 31, 0, 0, 32);
        public static readonly GameAttributeI Hitpoints_Granted_Duration = new GameAttributeI(109, 0, -1, 0, 1, "", "", "Hitpoints_Granted_Duration", GameAttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly GameAttributeF Hitpoints_Max = new GameAttributeF(110, 0, -1, 0, 0, "", "", "Hitpoints_Max", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Max_Bonus = new GameAttributeF(111, 0, -1, 0, 0, "", "", "Hitpoints_Max_Bonus", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Max_Total = new GameAttributeF(112, 0, -1, 0, 0, "", "Max((Hitpoints_Max + Hitpoints_Total_From_Level + Hitpoints_Total_From_Vitality + Hitpoints_Max_Bonus) * (Hitpoints_Max_Percent_Bonus + Hitpoints_Max_Percent_Bonus_Item + 1), 1)", "Hitpoints_Max_Total", GameAttributeEncoding.Float32, 31, 0, 0, 32);
        public static readonly GameAttributeF Hitpoints_Percent = new GameAttributeF(113, 0, -1, 0, 0, "", "", "Hitpoints_Percent", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second = new GameAttributeF(114, 0, -1, 0, 0, "", "", "Hitpoints_Regen_Per_Second", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Max_Percent_Bonus = new GameAttributeF(115, 0, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeF Hitpoints_Max_Percent_Bonus_Item = new GameAttributeF(116, 0, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus_Item", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeF Hitpoints_Healed_Target = new GameAttributeF(117, 0, -1, 0, 0, "", "", "Hitpoints_Healed_Target", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeI Resource_Type_Primary = new GameAttributeI(118, -1, -1, 3, 1, "", "", "Resource_Type_Primary", GameAttributeEncoding.IntMinMax, 1, -1, 7, 4);
        public static readonly GameAttributeI Resource_Type_Secondary = new GameAttributeI(119, -1, -1, 3, 1, "", "", "Resource_Type_Secondary", GameAttributeEncoding.IntMinMax, 1, -1, 7, 4);
        public static readonly GameAttributeF Resource_Cur = new GameAttributeF(120, 0, 10, 0, 0, "", "Max(Resource_Cur.Agg, 0)", "Resource_Cur", GameAttributeEncoding.Float32, 1, 0, 0, 32);
        public static readonly GameAttributeF Resource_Max = new GameAttributeF(121, 0, 10, 0, 0, "", "", "Resource_Max", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeF Resource_Max_Bonus = new GameAttributeF(122, 0, 10, 0, 0, "", "", "Resource_Max_Bonus", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Resource_Max_Total = new GameAttributeF(123, 0, 10, 0, 0, "", "Max((Resource_Max + ((Level#NONE - 1) * Resource_Factor_Level) + Resource_Max_Bonus) * (Resource_Max_Percent_Bonus + 1), 0)", "Resource_Max_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Resource_Factor_Level = new GameAttributeF(124, 0, 10, 0, 0, "", "", "Resource_Factor_Level", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeF Resource_Granted = new GameAttributeF(125, 0, 10, 0, 0, "", "", "Resource_Granted", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeI Resource_Granted_Duration = new GameAttributeI(126, 0, 10, 0, 1, "", "", "Resource_Granted_Duration", GameAttributeEncoding.IntMinMax, 9, 0, 16777215, 24);
        public static readonly GameAttributeF Resource_Percent = new GameAttributeF(127, 0, 10, 0, 0, "", "", "Resource_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resource_Regen_Per_Second = new GameAttributeF(128, 0, 10, 0, 0, "", "", "Resource_Regen_Per_Second", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Resource_Regen_Bonus_Percent = new GameAttributeF(129, 0, 10, 0, 0, "", "", "Resource_Regen_Bonus_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resource_Regen_Total = new GameAttributeF(130, 0, 10, 0, 0, "", "Resource_Regen_Per_Second * (1 + Resource_Regen_Bonus_Percent) + (Resource_Regen_Percent_Per_Second * Resource_Max_Total)", "Resource_Regen_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resource_Max_Percent_Bonus = new GameAttributeF(131, 0, 10, 0, 0, "", "Resource_Percent", "Resource_Max_Percent_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resource_Capacity_Used = new GameAttributeF(132, 0, 10, 0, 0, "", "", "Resource_Capacity_Used", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Resource_Effective_Max = new GameAttributeF(133, 0, 10, 0, 0, "", "Resource_Max_Total - Resource_Capacity_Used", "Resource_Effective_Max", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Resource_Regen_Percent_Per_Second = new GameAttributeF(134, 0, 10, 0, 0, "", "", "Resource_Regen_Percent_Per_Second", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Resource_Degeneration_Stop_Point = new GameAttributeF(135, 0, 10, 0, 0, "", "", "Resource_Degeneration_Stop_Point", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Movement_Scalar = new GameAttributeF(136, 0, -1, 0, 0, "", "", "Movement_Scalar", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Walking_Rate = new GameAttributeF(137, 0, -1, 0, 0, "", "", "Walking_Rate", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Running_Rate = new GameAttributeF(138, 0, -1, 0, 0, "", "", "Running_Rate", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Sprinting_Rate = new GameAttributeF(139, 0, -1, 0, 0, "", "", "Sprinting_Rate", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Strafing_Rate = new GameAttributeF(140, 0, -1, 0, 0, "", "", "Strafing_Rate", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Walking_Rate_Total = new GameAttributeF(141, 0, -1, 0, 0, "", "Walking_Rate * Movement_Scalar_Total", "Walking_Rate_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Running_Rate_Total = new GameAttributeF(142, 0, -1, 0, 0, "", "Running_Rate * Movement_Scalar_Total", "Running_Rate_Total", GameAttributeEncoding.Float16, 41, 0, 0, 16);
        public static readonly GameAttributeF Last_Running_Rate = new GameAttributeF(143, 0, -1, 0, 0, "", "", "Last_Running_Rate", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Sprinting_Rate_Total = new GameAttributeF(144, 0, -1, 0, 0, "", "Sprinting_Rate * Movement_Scalar_Total", "Sprinting_Rate_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Strafing_Rate_Total = new GameAttributeF(145, 0, -1, 0, 0, "", "Strafing_Rate * Movement_Scalar_Total", "Strafing_Rate_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Movement_Bonus_Total = new GameAttributeF(146, 0, -1, -1, 0, "0", "Movement_Bonus_Run_Speed", "Movement_Bonus_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar_Subtotal = new GameAttributeF(147, 0, -1, 0, 0, "0", "Max(0.1, Movement_Scalar) * (1 + Movement_Bonus_Total) * (1 - Movement_Scalar_Reduction_Percent * (1 - Min(1, Movement_Scalar_Reduction_Resistance)))", "Movement_Scalar_Subtotal", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar_Capped_Total = new GameAttributeF(148, 0, -1, 0, 0, "0", "Min(1.25, Movement_Scalar_Subtotal)", "Movement_Scalar_Capped_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar_Uncapped_Bonus = new GameAttributeF(149, 0, -1, 0, 0, "", "", "Movement_Scalar_Uncapped_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar_Total = new GameAttributeF(150, 0, -1, 0, 0, "0", "Movement_Scalar_Capped_Total + Movement_Scalar_Uncapped_Bonus", "Movement_Scalar_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Movement_Bonus_Run_Speed = new GameAttributeF(151, 0, -1, 1, 0, "", "", "Movement_Bonus_Run_Speed", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Casting_Speed = new GameAttributeF(152, 0, -1, 0, 0, "", "", "Casting_Speed", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Casting_Speed_Bonus = new GameAttributeF(153, 0, -1, 0, 0, "", "", "Casting_Speed_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Casting_Speed_Total = new GameAttributeF(154, 0, -1, 0, 0, "", "(Casting_Speed + Casting_Speed_Bonus) * Max(0.1, 1 + Casting_Speed_Percent)", "Casting_Speed_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeB Always_Hits = new GameAttributeB(155, 0, -1, 1, 1, "", "", "Always_Hits", GameAttributeEncoding.IntMinMax, 3, 0, 1, 1);
        public static readonly GameAttributeF Hit_Chance = new GameAttributeF(156, 0, -1, 0, 0, "", "", "Hit_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attacks_Per_Second_Item = new GameAttributeF(157, 0, -1, 0, 0, "", "0", "Attacks_Per_Second_Item", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Percent = new GameAttributeF(158, 0, -1, 0, 0, "", "0", "Attacks_Per_Second_Item_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Subtotal = new GameAttributeF(159, 0, -1, 0, 0, "Attacks_Per_Second_Item * (1 + Attacks_Per_Second_Item_Percent)", "0", "Attacks_Per_Second_Item_Subtotal", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Bonus = new GameAttributeF(160, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Item_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Total = new GameAttributeF(161, 0, -1, 0, 0, "(Attacks_Per_Second_Item_Subtotal + Attacks_Per_Second_Item_Bonus)", "", "Attacks_Per_Second_Item_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second = new GameAttributeF(162, 0, -1, 0, 0, "0", "", "Attacks_Per_Second", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attacks_Per_Second_Bonus = new GameAttributeF(163, 0, -1, 0, 0, "0", "", "Attacks_Per_Second_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attacks_Per_Second_Total = new GameAttributeF(164, 0, -1, 0, 0, "0", "Max(0.01, (((Attacks_Per_Second_Item_CurrentHand > 0.0) ? Attacks_Per_Second_Item_CurrentHand : Attacks_Per_Second) + Attacks_Per_Second_Bonus + Attacks_Per_Second_Item_Bonus) * Max(0.1, (1 + Attacks_Per_Second_Percent)))", "Attacks_Per_Second_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Percent = new GameAttributeF(165, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Percent", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF AI_Cooldown_Reduction_Percent = new GameAttributeF(166, 0, -1, 0, 0, "0", "", "AI_Cooldown_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction_Percent = new GameAttributeF(167, 0, -1, 0, 0, "0", "", "Power_Cooldown_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Damage_Delta = new GameAttributeF(168, 0, 0, 0, 0, "", "", "Damage_Delta", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Delta_Total = new GameAttributeF(169, 0, 0, 0, 0, "", "Max(Damage_Delta - Damage_Bonus_Min + Damage_Weapon_Delta_Total_CurrentHand, 0)", "Damage_Delta_Total", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Min = new GameAttributeF(170, 0, 0, 0, 0, "", "", "Damage_Min", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Bonus_Min = new GameAttributeF(171, 0, 0, 0, 0, "", "", "Damage_Bonus_Min", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Min_Total = new GameAttributeF(172, 0, 0, 0, 0, "", "Damage_Min_Subtotal + Damage_Type_Percent_Bonus * Damage_Min_Subtotal#Physical", "Damage_Min_Total", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Min_Subtotal = new GameAttributeF(173, 0, 0, 0, 0, "", "Damage_Min + Damage_Bonus_Min + Damage_Weapon_Min_Total_CurrentHand", "Damage_Min_Subtotal", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Percent_All_From_Skills = new GameAttributeF(174, 0, -1, 0, 0, "", "", "Damage_Percent_All_From_Skills", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Delta = new GameAttributeF(175, 0, 0, 0, 0, "", "", "Damage_Weapon_Delta", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Delta_SubTotal = new GameAttributeF(176, 0, 0, 0, 0, "(Damage_Weapon_Delta > 0.0) ? (Max(1, Damage_Weapon_Delta - Damage_Weapon_Bonus_Min)) : Damage_Weapon_Delta", "", "Damage_Weapon_Delta_SubTotal", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Max = new GameAttributeF(177, 0, 0, 0, 0, "(Damage_Weapon_Min + Damage_Weapon_Delta)", "", "Damage_Weapon_Max", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Max_Total = new GameAttributeF(178, 0, 0, 0, 0, "(Damage_Weapon_Min_Total + Damage_Weapon_Delta_Total)", "", "Damage_Weapon_Max_Total", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Max_Total_All = new GameAttributeF(179, 0, -1, 0, 0, "(Damage_Weapon_Max_Total#Physical + Damage_Weapon_Max_Total#Fire + Damage_Weapon_Max_Total#Cold + Damage_Weapon_Max_Total#Lightning + Damage_Weapon_Max_Total#Poison + Damage_Weapon_Max_Total#Arcane + Damage_Weapon_Max_Total#Holy)", "", "Damage_Weapon_Max_Total_All", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total = new GameAttributeF(180, 0, 0, 0, 0, "Max((Damage_Weapon_Delta_SubTotal + Damage_Weapon_Bonus_Delta) * (1 + Damage_Weapon_Percent_Total), 0)", "", "Damage_Weapon_Delta_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_All = new GameAttributeF(181, 0, -1, 0, 0, "(Damage_Weapon_Delta_Total#Physical + Damage_Weapon_Delta_Total#Fire + Damage_Weapon_Delta_Total#Cold + Damage_Weapon_Delta_Total#Lightning + Damage_Weapon_Delta_Total#Poison + Damage_Weapon_Delta_Total#Arcane + Damage_Weapon_Delta_Total#Holy)", "", "Damage_Weapon_Delta_Total_All", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Bonus_Delta = new GameAttributeF(182, 0, 0, 0, 0, "", "", "Damage_Weapon_Bonus_Delta", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Min = new GameAttributeF(183, 0, 0, 0, 0, "", "", "Damage_Weapon_Min", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Min_Total = new GameAttributeF(184, 0, 0, 0, 0, "(Damage_Weapon_Min + Damage_Weapon_Bonus_Min) * (1 + Damage_Weapon_Percent_Total)", "", "Damage_Weapon_Min_Total", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_All = new GameAttributeF(185, 0, -1, 0, 0, "(Damage_Weapon_Min_Total#Physical + Damage_Weapon_Min_Total#Fire + Damage_Weapon_Min_Total#Cold + Damage_Weapon_Min_Total#Lightning + Damage_Weapon_Min_Total#Poison + Damage_Weapon_Min_Total#Arcane + Damage_Weapon_Min_Total#Holy)", "", "Damage_Weapon_Min_Total_All", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Bonus_Min = new GameAttributeF(186, 0, 0, 0, 0, "", "", "Damage_Weapon_Bonus_Min", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Percent_Bonus = new GameAttributeF(187, 0, 0, 0, 0, "", "", "Damage_Weapon_Percent_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Weapon_Percent_All = new GameAttributeF(188, 0, -1, 0, 0, "", "", "Damage_Weapon_Percent_All", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Weapon_Percent_Total = new GameAttributeF(189, 0, 0, 0, 0, "Damage_Weapon_Percent_Bonus + Damage_Weapon_Percent_All#NONE", "", "Damage_Weapon_Percent_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Type_Percent_Bonus = new GameAttributeF(190, 0, 0, 0, 0, "", "", "Damage_Type_Percent_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Percent_Bonus_Witchdoctor = new GameAttributeF(191, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Witchdoctor", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Percent_Bonus_Wizard = new GameAttributeF(192, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Wizard", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Crit_Percent_Base = new GameAttributeF(193, 0, -1, 0, 0, "", "", "Crit_Percent_Base", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Crit_Percent_Bonus_Capped = new GameAttributeF(194, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Capped", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Crit_Percent_Bonus_Uncapped = new GameAttributeF(195, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Uncapped", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Crit_Percent_Cap = new GameAttributeF(196, 0, -1, 0, 0, "", "", "Crit_Percent_Cap", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Crit_Damage_Percent = new GameAttributeF(197, 0, -1, 0, 0, "", "", "Crit_Damage_Percent", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeI Crit_Effect_Time = new GameAttributeI(198, 0, -1, 3, 1, "", "", "Crit_Effect_Time", GameAttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly GameAttributeF Pierce_Chance = new GameAttributeF(199, 0, -1, 0, 0, "", "", "Pierce_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Absorb_Percent = new GameAttributeF(200, 0, -1, 0, 0, "", "", "Damage_Absorb_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Reduction_Total = new GameAttributeF(201, 0, 0, 0, 0, "", "", "Damage_Reduction_Total", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Reduction_Current = new GameAttributeF(202, 0, 0, 0, 0, "", "", "Damage_Reduction_Current", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeI Damage_Reduction_Last_Tick = new GameAttributeI(203, 0, 0, 3, 1, "", "", "Damage_Reduction_Last_Tick", GameAttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly GameAttributeF Block_Chance = new GameAttributeF(204, 0, -1, 0, 0, "", "", "Block_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance_Total = new GameAttributeF(205, 0, -1, 0, 0, "", "Block_Chance + Block_Chance_Item_Total", "Block_Chance_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance_Bonus_Item = new GameAttributeF(206, 0, -1, 0, 0, "", "", "Block_Chance_Bonus_Item", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance_Item = new GameAttributeF(207, 0, -1, 0, 0, "", "0", "Block_Chance_Item", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance_Item_Total = new GameAttributeF(208, 0, -1, 0, 0, "Block_Chance_Item + Block_Chance_Bonus_Item", "", "Block_Chance_Item_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Block_Amount = new GameAttributeF(209, 0, -1, 0, 0, "", "", "Block_Amount", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount_Bonus_Percent = new GameAttributeF(210, 0, -1, 0, 0, "", "", "Block_Amount_Bonus_Percent", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount_Total_Min = new GameAttributeF(211, 0, -1, 0, 0, "", "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", "Block_Amount_Total_Min", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount_Total_Max = new GameAttributeF(212, 0, -1, 0, 0, "", "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Delta + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", "Block_Amount_Total_Max", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount_Item_Min = new GameAttributeF(213, 0, -1, 0, 0, "", "", "Block_Amount_Item_Min", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount_Item_Delta = new GameAttributeF(214, 0, -1, 0, 0, "", "", "Block_Amount_Item_Delta", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount_Item_Bonus = new GameAttributeF(215, 0, -1, 0, 0, "", "", "Block_Amount_Item_Bonus", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Dodge_Chance_Bonus = new GameAttributeF(216, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Dodge_Chance_Bonus_Melee = new GameAttributeF(217, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus_Melee", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Dodge_Chance_Bonus_Ranged = new GameAttributeF(218, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus_Ranged", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Get_Hit_Current = new GameAttributeF(219, 0, -1, 0, 0, "", "", "Get_Hit_Current", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Max_Base = new GameAttributeF(220, 0, -1, 0, 0, "", "", "Get_Hit_Max_Base", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Max_Per_Level = new GameAttributeF(221, 0, -1, 0, 0, "", "", "Get_Hit_Max_Per_Level", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Max = new GameAttributeF(222, 0, -1, 0, 0, "", "Get_Hit_Max_Base + (Get_Hit_Max_Per_Level * Level)", "Get_Hit_Max", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Recovery_Base = new GameAttributeF(223, 0, -1, 0, 0, "", "", "Get_Hit_Recovery_Base", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Recovery_Per_Level = new GameAttributeF(224, 0, -1, 0, 0, "", "", "Get_Hit_Recovery_Per_Level", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Recovery = new GameAttributeF(225, 0, -1, 0, 0, "", "Get_Hit_Recovery_Base + (Get_Hit_Recovery_Per_Level * Level)", "Get_Hit_Recovery", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Damage = new GameAttributeF(226, 0, -1, 0, 0, "", "", "Get_Hit_Damage", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Damage_Scalar = new GameAttributeF(227, 0, -1, 0, 0, "", "", "Get_Hit_Damage_Scalar", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeI Last_Damage_MainActor = new GameAttributeI(228, -1, -1, 3, 1, "", "", "Last_Damage_MainActor", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Last_ACD_Attacked = new GameAttributeI(229, -1, -1, 3, 1, "", "", "Last_ACD_Attacked", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeB Ignores_Critical_Hits = new GameAttributeB(230, 0, -1, 1, 1, "", "", "Ignores_Critical_Hits", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Immunity = new GameAttributeB(231, 0, 0, 1, 1, "", "", "Immunity", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Untargetable = new GameAttributeB(232, 0, -1, 1, 1, "", "", "Untargetable", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Immobolize = new GameAttributeB(233, 0, -1, 1, 1, "", "", "Immobolize", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeB Immune_To_Knockback = new GameAttributeB(234, 0, -1, 1, 1, "", "", "Immune_To_Knockback", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Immobilize = new GameAttributeB(235, 0, -1, 1, 1, "", "", "Power_Immobilize", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeF Stun_Chance = new GameAttributeF(236, 0, -1, 0, 0, "", "", "Stun_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Stun_Length = new GameAttributeF(237, 0, -1, 0, 0, "", "", "Stun_Length", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Stun_Recovery = new GameAttributeF(238, 0, -1, 0, 0, "", "", "Stun_Recovery", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Stun_Recovery_Speed = new GameAttributeF(239, 0, -1, 0, 0, "", "", "Stun_Recovery_Speed", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeB Stunned = new GameAttributeB(240, 0, -1, 1, 1, "", "", "Stunned", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Stun_Immune = new GameAttributeB(241, 0, -1, 1, 1, "", "", "Stun_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeF Poison_Length_Reduction = new GameAttributeF(242, 0, -1, 0, 0, "", "", "Poison_Length_Reduction", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeB Poisoned = new GameAttributeB(243, 0, -1, 1, 1, "", "", "Poisoned", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Bleeding = new GameAttributeB(244, 0, -1, 1, 1, "", "", "Bleeding", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeF Bleed_Duration = new GameAttributeF(245, 0, -1, 0, 0, "", "", "Bleed_Duration", GameAttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly GameAttributeB Chilled = new GameAttributeB(246, 0, -1, 1, 1, "", "", "Chilled", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeF Freeze_Length_Reduction = new GameAttributeF(247, 0, -1, 0, 0, "", "", "Freeze_Length_Reduction", GameAttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly GameAttributeB Freeze_Immune = new GameAttributeB(248, 0, -1, 1, 1, "", "", "Freeze_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Webbed = new GameAttributeB(249, 0, -1, 1, 1, "", "", "Webbed", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Slow = new GameAttributeB(250, 0, -1, 1, 1, "", "", "Slow", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB FireAura = new GameAttributeB(251, 0, -1, 1, 1, "", "", "FireAura", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB LightningAura = new GameAttributeB(252, 0, -1, 1, 1, "", "", "LightningAura", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB ColdAura = new GameAttributeB(253, 0, -1, 1, 1, "", "", "ColdAura", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB PoisonAura = new GameAttributeB(254, 0, -1, 1, 1, "", "", "PoisonAura", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Blind = new GameAttributeB(255, 0, -1, 1, 1, "", "", "Blind", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Enraged = new GameAttributeB(256, 0, -1, 1, 1, "", "", "Enraged", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Slowdown_Immune = new GameAttributeB(257, 0, -1, 1, 1, "", "", "Slowdown_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Gethit_Immune = new GameAttributeB(258, 0, -1, 1, 1, "", "", "Gethit_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeF Suffocation_Per_Second = new GameAttributeF(259, 0, -1, 0, 0, "", "", "Suffocation_Per_Second", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeF Suffocation_Unit_Value = new GameAttributeF(260, 0, -1, 1, 0, "", "", "Suffocation_Unit_Value", GameAttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly GameAttributeF Thorns_Percent = new GameAttributeF(261, 0, 0, 0, 0, "", "", "Thorns_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Thorns_Percent_All = new GameAttributeF(262, 0, -1, 0, 0, "", "", "Thorns_Percent_All", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Thorns_Percent_Total = new GameAttributeF(263, 0, 0, 0, 0, "", "Thorns_Percent + Thorns_Percent_All#NONE", "Thorns_Percent_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Thorns_Fixed = new GameAttributeF(264, 0, 0, 0, 0, "", "", "Thorns_Fixed", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Steal_Health_Percent = new GameAttributeF(265, 0, -1, 0, 0, "", "", "Steal_Health_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Steal_Mana_Percent = new GameAttributeF(266, 0, -1, 0, 0, "", "", "Steal_Mana_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resource_On_Hit = new GameAttributeF(267, 0, 10, 0, 0, "", "", "Resource_On_Hit", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Resource_On_Kill = new GameAttributeF(268, 0, 10, 0, 0, "", "", "Resource_On_Kill", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Resource_On_Crit = new GameAttributeF(269, 0, 10, 0, 0, "", "", "Resource_On_Crit", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_On_Hit = new GameAttributeF(270, 0, -1, 0, 0, "", "", "Hitpoints_On_Hit", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_On_Kill = new GameAttributeF(271, 0, -1, 0, 0, "", "", "Hitpoints_On_Kill", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_To_Mana = new GameAttributeF(272, 0, -1, 0, 0, "", "", "Damage_To_Mana", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeI Last_Proc_Time = new GameAttributeI(273, 0, -1, 3, 1, "", "", "Last_Proc_Time", GameAttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly GameAttributeF Damage_Power_Delta = new GameAttributeF(274, 0, 0, 0, 0, "", "", "Damage_Power_Delta", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Power_Min = new GameAttributeF(275, 0, 0, 0, 0, "", "", "Damage_Power_Min", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeI Rope_Overlay = new GameAttributeI(276, -1, -1, 3, 1, "", "", "Rope_Overlay", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI General_Cooldown = new GameAttributeI(277, -1, -1, 3, 1, "", "", "General_Cooldown", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Power_Cooldown = new GameAttributeI(278, -1, 4, 1, 1, "", "", "Power_Cooldown", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Power_Cooldown_Start = new GameAttributeI(279, -1, 4, 1, 1, "", "", "Power_Cooldown_Start", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Proc_Cooldown = new GameAttributeI(280, 0, -1, 1, 1, "", "", "Proc_Cooldown", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Emote_Cooldown = new GameAttributeI(281, 0, -1, 1, 1, "", "", "Emote_Cooldown", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeF Projectile_Speed = new GameAttributeF(282, 0, -1, 0, 0, "", "", "Projectile_Speed", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeF Projectile_Speed_Increase_Percent = new GameAttributeF(283, 0, -1, 0, 0, "", "", "Projectile_Speed_Increase_Percent", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeB Destroy_When_Path_Blocked = new GameAttributeB(284, 0, -1, 1, 1, "", "", "Destroy When Path Blocked", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Skill_Toggled_State = new GameAttributeB(285, 0, 4, 1, 1, "", "", "Skill_Toggled_State", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeI Act = new GameAttributeI(286, -1, -1, 3, 1, "", "", "Act", GameAttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly GameAttributeI Difficulty = new GameAttributeI(287, -1, -1, 3, 1, "", "", "Difficulty", GameAttributeEncoding.IntMinMax, 9, -1, 4, 3);
        public static readonly GameAttributeF Last_Damage_Amount = new GameAttributeF(288, -1, -1, 3, 0, "", "", "Last_Damage_Amount", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeB In_Knockback = new GameAttributeB(289, 0, -1, 1, 1, "", "", "In_Knockback", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeF Amplify_Damage_Type_Percent = new GameAttributeF(290, 0, 0, 0, 0, "", "", "Amplify_Damage_Type_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Amplify_Damage_Percent = new GameAttributeF(291, 0, -1, 0, 0, "", "", "Amplify_Damage_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Durability_Cur = new GameAttributeI(292, 0, -1, 0, 1, "", "", "Durability_Cur", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI Durability_Max = new GameAttributeI(293, 0, -1, 0, 1, "", "", "Durability_Max", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI Durability_Last_Damage = new GameAttributeI(294, 0, -1, 0, 1, "", "", "Durability_Last_Damage", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Item_Quality_Level = new GameAttributeI(295, -1, -1, 1, 1, "", "", "Item_Quality_Level", GameAttributeEncoding.IntMinMax, 8, -1, 11, 4);
        public static readonly GameAttributeF Item_Cost_Percent_Bonus = new GameAttributeF(296, 0, -1, 0, 0, "", "", "Item_Cost_Percent_Bonus", GameAttributeEncoding.Float16, 8, 0, 0, 16);
        public static readonly GameAttributeB Item_Equipped = new GameAttributeB(297, 0, -1, 1, 1, "", "", "Item_Equipped", GameAttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly GameAttributeF Requirement = new GameAttributeF(298, 0, 1, 1, 0, "FLOOR(Requirement.Agg * (1 + Requirements_Ease_Percent#NONE))", "", "Requirement", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Requirements_Ease_Percent = new GameAttributeF(299, 0, -1, 0, 0, "", "0", "Requirements_Ease_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Requirement_When_Equipped = new GameAttributeF(300, 0, 1, 1, 0, "", "", "Requirement_When_Equipped", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeI Sockets = new GameAttributeI(301, 0, -1, 0, 1, "", "0", "Sockets", GameAttributeEncoding.IntMinMax, 8, 0, 3, 2);
        public static readonly GameAttributeI Sockets_Filled = new GameAttributeI(302, 0, -1, 0, 1, "", "0", "Sockets_Filled", GameAttributeEncoding.IntMinMax, 8, 0, 3, 2);
        public static readonly GameAttributeF Stats_All_Bonus = new GameAttributeF(303, 0, -1, 0, 0, "", "", "Stats_All_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeI Item_Bound_To_ACD = new GameAttributeI(304, -1, -1, 3, 1, "", "0", "Item_Bound_To_ACD", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI Item_Locked_To_ACD = new GameAttributeI(305, -1, -1, 3, 1, "", "0", "Item_Locked_To_ACD", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI Item_Binding_Level_Override = new GameAttributeI(306, 0, -1, 1, 1, "", "0", "Item_Binding_Level_Override", GameAttributeEncoding.IntMinMax, 8, 0, 5, 3);
        public static readonly GameAttributeI ItemStackQuantityHi = new GameAttributeI(307, 0, -1, 4, 1, "", "", "ItemStackQuantityHi", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI ItemStackQuantityLo = new GameAttributeI(308, 0, -1, 4, 1, "", "", "ItemStackQuantityLo", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeF Run_Speed_Granted = new GameAttributeF(309, 0, -1, 0, 0, "", "", "Run_Speed_Granted", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeI Run_Speed_Duration = new GameAttributeI(310, 0, -1, 0, 1, "", "", "Run_Speed_Duration", GameAttributeEncoding.IntMinMax, 9, 0, 16777215, 24);
        public static readonly GameAttributeI IdentifyCost = new GameAttributeI(311, 0, -1, 0, 1, "", "", "IdentifyCost", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI Seed = new GameAttributeI(312, 0, -1, 4, 1, "", "0", "Seed", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeB IsCrafted = new GameAttributeB(313, 0, -1, 4, 1, "", "0", "IsCrafted", GameAttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly GameAttributeI DyeType = new GameAttributeI(314, 0, -1, 1, 1, "", "0", "DyeType", GameAttributeEncoding.IntMinMax, 8, -1, 30, 5);
        public static readonly GameAttributeI EnchantAffix = new GameAttributeI(315, -1, -1, 3, 1, "", "0", "EnchantAffix", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI EnchantRangeVal = new GameAttributeI(316, 0, -1, 4, 1, "", "0", "EnchantRangeVal", GameAttributeEncoding.IntMinMax, 8, 0, 255, 8);
        public static readonly GameAttributeI HighlySalvageable = new GameAttributeI(317, 0, -1, 1, 1, "", "0", "HighlySalvageable", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI ItemUnlockTimeHi = new GameAttributeI(318, 0, -1, 4, 1, "", "", "ItemUnlockTimeHi", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI ItemUnlockTimeLo = new GameAttributeI(319, 0, -1, 4, 1, "", "", "ItemUnlockTimeLo", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeB Always_Plays_GetHit = new GameAttributeB(320, 0, -1, 1, 1, "", "", "Always_Plays_GetHit", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Hidden = new GameAttributeB(321, 0, -1, 1, 1, "", "", "Hidden", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI RActor_Fade_Group = new GameAttributeI(322, -1, -1, 1, 1, "", "", "RActor_Fade_Group", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Quest_Range = new GameAttributeI(323, -1, -1, 3, 1, "", "", "Quest Range", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Attack_Cooldown_Min = new GameAttributeI(324, 0, -1, 0, 1, "", "", "Attack_Cooldown_Min", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Attack_Cooldown_Delta = new GameAttributeI(325, 0, -1, 0, 1, "", "", "Attack_Cooldown_Delta", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI InitialCooldownMinTotal = new GameAttributeI(326, 0, -1, 0, 1, "", "InitialCooldownMin / Attacks_Per_Second_Total", "InitialCooldownMinTotal", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI InitialCooldownDeltaTotal = new GameAttributeI(327, 0, -1, 0, 1, "", "InitialCooldownDelta / Attacks_Per_Second_Total", "InitialCooldownDeltaTotal", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Attack_Cooldown_Min_Total = new GameAttributeI(328, 0, -1, 0, 1, "", "Attack_Cooldown_Min / Attacks_Per_Second_Total", "Attack_Cooldown_Min_Total", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Attack_Cooldown_Delta_Total = new GameAttributeI(329, 0, -1, 0, 1, "", "Attack_Cooldown_Delta / Attacks_Per_Second_Total", "Attack_Cooldown_Delta_Total", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Closing_Cooldown_Min_Total = new GameAttributeI(330, 0, -1, 0, 1, "", "", "Closing_Cooldown_Min_Total", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Closing_Cooldown_Delta_Total = new GameAttributeI(331, 0, -1, 0, 1, "", "", "Closing_Cooldown_Delta_Total", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeB Quest_Monster = new GameAttributeB(332, 0, -1, 0, 1, "", "", "Quest_Monster", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Quest_Monster_Effect = new GameAttributeI(333, -1, -1, 3, 1, "", "", "Quest_Monster Effect", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Treasure_Class = new GameAttributeI(334, -1, -1, 3, 1, "", "", "Treasure_Class", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB Removes_Body_On_Death = new GameAttributeB(335, 0, -1, 1, 1, "", "", "Removes_Body_On_Death", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI InitialCooldownMin = new GameAttributeI(336, 0, -1, 0, 1, "", "", "InitialCooldownMin", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI InitialCooldownDelta = new GameAttributeI(337, 0, -1, 0, 1, "", "", "InitialCooldownDelta", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeF Knockback_Weight = new GameAttributeF(338, 0, -1, 0, 0, "", "", "Knockback_Weight", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeB UntargetableByPets = new GameAttributeB(339, 0, -1, 1, 1, "", "", "UntargetableByPets", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Damage_State_Current = new GameAttributeI(340, 0, -1, 0, 1, "", "", "Damage_State_Current", GameAttributeEncoding.IntMinMax, 31, 0, 15, 4);
        public static readonly GameAttributeI Damage_State_Max = new GameAttributeI(341, 0, -1, 0, 1, "", "", "Damage_State_Max", GameAttributeEncoding.IntMinMax, 31, 0, 15, 4);
        public static readonly GameAttributeB Is_Player_Decoy = new GameAttributeB(342, 0, -1, 1, 1, "", "", "Is_Player_Decoy", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeF Custom_Target_Weight = new GameAttributeF(343, 0, 3, 0, 0, "", "", "Custom_Target_Weight", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Gizmo_State = new GameAttributeI(344, -1, -1, 3, 1, "", "", "Gizmo_State", GameAttributeEncoding.IntMinMax, 4, -1, 30, 5);
        public static readonly GameAttributeI Gizmo_Charges = new GameAttributeI(345, 0, -1, 1, 1, "", "", "Gizmo_Charges", GameAttributeEncoding.IntMinMax, 4, -1, 30, 5);
        public static readonly GameAttributeB Chest_Open = new GameAttributeB(346, 0, 3, 0, 1, "", "", "Chest_Open", GameAttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly GameAttributeB Door_Locked = new GameAttributeB(347, 0, -1, 1, 1, "", "", "Door_Locked", GameAttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly GameAttributeI Door_Timer = new GameAttributeI(348, -1, -1, 3, 1, "", "", "Door_Timer", GameAttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly GameAttributeB Gizmo_Disabled_By_Script = new GameAttributeB(349, 0, -1, 1, 1, "", "", "Gizmo_Disabled_By_Script", GameAttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly GameAttributeI Gizmo_Operator_ACDID = new GameAttributeI(350, -1, -1, 3, 1, "", "", "Gizmo_Operator_ACDID", GameAttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly GameAttributeI Triggering_Count = new GameAttributeI(351, 0, -1, 0, 1, "", "", "Triggering_Count", GameAttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly GameAttributeF Gate_Position = new GameAttributeF(352, 0, -1, 0, 0, "", "", "Gate_Position", GameAttributeEncoding.Float16, 4, 0, 0, 16);
        public static readonly GameAttributeF Gate_Velocity = new GameAttributeF(353, 0, -1, 0, 0, "", "", "Gate_Velocity", GameAttributeEncoding.Float16, 4, 0, 0, 16);
        public static readonly GameAttributeB Gizmo_Has_Been_Operated = new GameAttributeB(354, 0, -1, 1, 1, "", "", "Gizmo_Has_Been_Operated", GameAttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly GameAttributeI Pet_Owner = new GameAttributeI(355, -1, -1, 3, 1, "", "", "Pet_Owner", GameAttributeEncoding.IntMinMax, 31, -1, 8, 4);
        public static readonly GameAttributeI Pet_Creator = new GameAttributeI(356, -1, -1, 3, 1, "", "", "Pet_Creator", GameAttributeEncoding.IntMinMax, 31, -1, 8, 4);
        public static readonly GameAttributeI Pet_Type = new GameAttributeI(357, -1, -1, 3, 1, "", "", "Pet_Type", GameAttributeEncoding.IntMinMax, 31, -1, 24, 5);
        public static readonly GameAttributeB DropsNoLoot = new GameAttributeB(358, 0, -1, 1, 1, "", "", "DropsNoLoot", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB GrantsNoXP = new GameAttributeB(359, 0, -1, 1, 1, "", "", "GrantsNoXP", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Hireling_Class = new GameAttributeI(360, 0, -1, 1, 1, "", "", "Hireling_Class", GameAttributeEncoding.IntMinMax, 31, 0, 4, 3);
        public static readonly GameAttributeI Summoned_By_SNO = new GameAttributeI(361, -1, -1, 3, 1, "", "", "Summoned_By_SNO", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB Is_NPC = new GameAttributeB(362, 0, -1, 1, 1, "", "", "Is_NPC", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB NPC_Is_Operatable = new GameAttributeB(363, 0, -1, 1, 1, "", "", "NPC_Is_Operatable", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB NPC_Is_Escorting = new GameAttributeB(364, 0, -1, 1, 1, "", "", "NPC_Is_Escorting", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB NPC_Has_Interact_Options = new GameAttributeB(365, 0, 12, 1, 1, "", "", "NPC_Has_Interact_Options", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Conversation_Icon = new GameAttributeI(366, -1, 12, 3, 1, "", "", "Conversation_Icon", GameAttributeEncoding.IntMinMax, 31, -1, 6, 3);
        public static readonly GameAttributeI Callout_Cooldown = new GameAttributeI(367, -1, 16, 1, 1, "", "", "Callout_Cooldown", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Banter_Cooldown = new GameAttributeI(368, -1, 16, 1, 1, "", "", "Banter_Cooldown", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Conversation_Heard_Count = new GameAttributeI(369, 0, 16, 1, 1, "", "", "Conversation_Heard_Count", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Last_Tick_Shop_Entered = new GameAttributeI(370, -1, -1, 3, 1, "", "", "Last_Tick_Shop_Entered", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB Is_Helper = new GameAttributeB(371, 0, -1, 1, 1, "", "", "Is_Helper", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeF Axe = new GameAttributeF(372, 0, -1, 0, 0, "", "", "Axe", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Axe2H = new GameAttributeF(373, 0, -1, 0, 0, "", "", "Axe2H", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF ThrowingAxe = new GameAttributeF(374, 0, -1, 0, 0, "", "", "ThrowingAxe", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF AxeAny = new GameAttributeF(375, 0, -1, 0, 0, "Pin(Axe + Axe2H + ThrowingAxe, 0, 1)", "Pin(Axe + Axe2H + ThrowingAxe, 0, 1)", "AxeAny", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Bow = new GameAttributeF(376, 0, -1, 0, 0, "", "", "Bow", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Crossbow = new GameAttributeF(377, 0, -1, 0, 0, "", "", "Crossbow", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF BowAny = new GameAttributeF(378, 0, -1, 0, 0, "Pin(Bow + Crossbow, 0, 1)", "Pin(Bow + Crossbow, 0, 1)", "BowAny", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Club = new GameAttributeF(379, 0, -1, 0, 0, "", "", "Club", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Club2H = new GameAttributeF(380, 0, -1, 0, 0, "", "", "Club2H", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF ClubAny = new GameAttributeF(381, 0, -1, 0, 0, "Pin(Club + Club2H, 0, 1)", "Pin(Club + Club2H, 0, 1)", "ClubAny", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Dagger = new GameAttributeF(382, 0, -1, 0, 0, "", "", "Dagger", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Mace = new GameAttributeF(383, 0, -1, 0, 0, "", "", "Mace", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Mace2H = new GameAttributeF(384, 0, -1, 0, 0, "", "", "Mace2H", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF MaceAny = new GameAttributeF(385, 0, -1, 0, 0, "Pin(Mace + Mace2H, 0, 1)", "Pin(Mace + Mace2H, 0, 1)", "MaceAny", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Sword = new GameAttributeF(386, 0, -1, 0, 0, "", "", "Sword", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Sword2H = new GameAttributeF(387, 0, -1, 0, 0, "", "", "Sword2H", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF SwordAny = new GameAttributeF(388, 0, -1, 0, 0, "Pin(Sword + Sword2H, 0, 1)", "Pin(Sword + Sword2H, 0, 1)", "SwordAny", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Polearm = new GameAttributeF(389, 0, -1, 0, 0, "", "", "Polearm", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Spear = new GameAttributeF(390, 0, -1, 0, 0, "", "", "Spear", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Wand = new GameAttributeF(391, 0, -1, 0, 0, "", "", "Wand", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF ColdStaff = new GameAttributeF(392, 0, -1, 0, 0, "", "", "ColdStaff", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF FireStaff = new GameAttributeF(393, 0, -1, 0, 0, "", "", "FireStaff", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF LightningStaff = new GameAttributeF(394, 0, -1, 0, 0, "", "", "LightningStaff", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF PoisonStaff = new GameAttributeF(395, 0, -1, 0, 0, "", "", "PoisonStaff", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF StaffAny = new GameAttributeF(396, 0, -1, 0, 0, "Pin(ColdStaff + FireStaff + LightningStaff + PoisonStaff, 0, 1)", "Pin(ColdStaff + FireStaff + LightningStaff + PoisonStaff, 0, 1)", "StaffAny", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Weapon1H = new GameAttributeF(397, 0, -1, 0, 0, "Pin(Axe + Club + Dagger + Mace + Sword + Wand, 0, 1)", "Pin(Axe + Club + Dagger + Mace + Sword + Wand, 0, 1)", "Weapon1H", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Weapon2H = new GameAttributeF(398, 0, -1, 0, 0, "Pin(Axe2H + BowAny + Club2H + Mace2H + Sword2H + Polearm + Spear + StaffAny, 0, 1)", "Pin(Axe2H + BowAny + Club2H + Mace2H + Sword2H + Polearm + Spear + StaffAny, 0, 1)", "Weapon2H", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF WeaponMelee = new GameAttributeF(399, 0, -1, 0, 0, "Pin(Axe + Axe2H + ClubAny + Dagger + MaceAny + SwordAny + Polearm + Spear + Wand + StaffAny, 0, 1)", "Pin(Axe + Axe2H + ClubAny + Dagger + MaceAny + SwordAny + Polearm + Spear + Wand + StaffAny, 0, 1)", "WeaponMelee", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF WeaponRanged = new GameAttributeF(400, 0, -1, 0, 0, "Pin(ThrowingAxe + BowAny, 0, 1)", "Pin(ThrowingAxe + BowAny, 0, 1)", "WeaponRanged", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Quiver = new GameAttributeF(401, 0, -1, 0, 0, "", "", "Quiver", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeI Reincarnation_Buff = new GameAttributeI(402, -1, -1, 3, 1, "", "", "Reincarnation_Buff", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Dead_Body_AnimTag = new GameAttributeI(403, -1, -1, 3, 1, "", "", "Dead_Body_AnimTag", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Spawned_by_ACDID = new GameAttributeI(404, -1, -1, 3, 1, "", "", "Spawned_by_ACDID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Summoned_By_ACDID = new GameAttributeI(405, -1, -1, 3, 1, "", "", "Summoned_By_ACDID", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Summoner_ID = new GameAttributeI(406, -1, -1, 3, 1, "", "", "Summoner_ID", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Banner_ACDID = new GameAttributeI(407, -1, -1, 3, 1, "", "", "Banner_ACDID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Breakable_Shield_HP = new GameAttributeF(408, 0, -1, 0, 0, "", "", "Breakable_Shield_HP", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeI Current_WeaponClass = new GameAttributeI(409, -1, -1, 3, 1, "", "", "Current_WeaponClass", GameAttributeEncoding.IntMinMax, 31, -1, 19, 5);
        public static readonly GameAttributeB Weapons_Sheathed = new GameAttributeB(410, 0, -1, 1, 1, "", "", "Weapons_Sheathed", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Held_In_OffHand = new GameAttributeB(411, 0, -1, 1, 1, "", "0", "Held_In_OffHand", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeF Attacks_Per_Second_Item_MainHand = new GameAttributeF(412, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Attacks_Per_Second_Item_Subtotal )", "", "Attacks_Per_Second_Item_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attacks_Per_Second_Item_OffHand = new GameAttributeF(413, 0, -1, 0, 0, "(Held_In_OffHand ? Attacks_Per_Second_Item_Subtotal : 0)", "", "Attacks_Per_Second_Item_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Total_MainHand = new GameAttributeF(414, 0, -1, 0, 0, "Attacks_Per_Second_Item_MainHand + Attacks_Per_Second_Item_Bonus", "", "Attacks_Per_Second_Item_Total_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Total_OffHand = new GameAttributeF(415, 0, -1, 0, 0, "Attacks_Per_Second_Item_OffHand + Attacks_Per_Second_Item_Bonus", "", "Attacks_Per_Second_Item_Total_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_MainHand = new GameAttributeF(416, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Min_Total )", "", "Damage_Weapon_Min_Total_MainHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_OffHand = new GameAttributeF(417, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? Damage_Weapon_Min_Total : 0)", "", "Damage_Weapon_Min_Total_OffHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_MainHand = new GameAttributeF(418, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Delta_Total )", "", "Damage_Weapon_Delta_Total_MainHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_OffHand = new GameAttributeF(419, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? Damage_Weapon_Delta_Total : 0)", "", "Damage_Weapon_Delta_Total_OffHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Attacks_Per_Second_Item_CurrentHand = new GameAttributeF(420, 0, -1, 0, 0, "", "(DualWield_Hand ? Attacks_Per_Second_Item_OffHand : Attacks_Per_Second_Item_MainHand)", "Attacks_Per_Second_Item_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_CurrentHand = new GameAttributeF(421, 0, 0, 0, 0, "", "(DualWield_Hand#NONE ? Damage_Weapon_Min_Total_OffHand : Damage_Weapon_Min_Total_MainHand)", "Damage_Weapon_Min_Total_CurrentHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_CurrentHand = new GameAttributeF(422, 0, 0, 0, 0, "", "(DualWield_Hand#NONE ? Damage_Weapon_Delta_Total_OffHand : Damage_Weapon_Delta_Total_MainHand)", "Damage_Weapon_Delta_Total_CurrentHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeI Has_Special_Death_AnimTag = new GameAttributeI(423, -1, -1, 1, 1, "", "", "Has_Special_Death_AnimTag", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Death_Type_Override = new GameAttributeI(424, -1, -1, 3, 1, "", "", "Death_Type_Override", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB In_Combat = new GameAttributeB(425, 0, -1, 1, 1, "", "", "In_Combat", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeB In_Conversation = new GameAttributeB(426, 0, -1, 3, 1, "", "", "In_Conversation", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Last_Tick_Potion_Used = new GameAttributeI(427, -1, -1, 3, 1, "", "", "Last_Tick_Potion_Used", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Potion_Dilution_Percent = new GameAttributeF(428, 0, -1, 0, 0, "", "", "Potion_Dilution_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Out_Of_Combat_Health_Regen_Percent = new GameAttributeF(429, 0, -1, 0, 0, "", "", "Out_Of_Combat_Health_Regen_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Out_Of_Combat_Mana_Regen_Percent = new GameAttributeF(430, 0, -1, 0, 0, "", "", "Out_Of_Combat_Mana_Regen_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Potion_Dilution_Duration = new GameAttributeI(431, -1, -1, 3, 1, "", "", "Potion_Dilution_Duration", GameAttributeEncoding.IntMinMax, 0, -1, 16777214, 24);
        public static readonly GameAttributeF Potion_Dilution_Scalar = new GameAttributeF(432, 0, -1, 0, 0, "", "", "Potion_Dilution_Scalar", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeB Feared = new GameAttributeB(433, 0, -1, 1, 1, "", "", "Feared", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Fear_Immune = new GameAttributeB(434, 0, -1, 1, 1, "", "", "Fear_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Last_Damage_ACD = new GameAttributeI(435, -1, -1, 3, 1, "", "", "Last_Damage_ACD", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Attached_To_ACD = new GameAttributeI(436, -1, -1, 3, 1, "", "", "Attached_To_ACD", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Attachment_ACD = new GameAttributeI(437, -1, -1, 3, 1, "", "", "Attachment_ACD", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Normal_Attack_Replacement_Power_SNO = new GameAttributeI(438, -1, -1, 3, 1, "", "", "Normal_Attack_Replacement_Power_SNO", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeF Damage_Type_Override = new GameAttributeF(439, 0, 0, 0, 0, "", "", "Damage_Type_Override", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Minion_Count_Bonus_Percent = new GameAttributeF(440, 0, -1, 0, 0, "", "", "Minion_Count_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Champion_Teleport_Next_Tick = new GameAttributeI(441, 0, -1, 0, 1, "", "", "Champion_Teleport_Next_Tick", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Champion_Teleport_Time_Min_In_Seconds = new GameAttributeF(442, 0, -1, 0, 0, "", "", "Champion_Teleport_Time_Min_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Teleport_Time_Delta_In_Seconds = new GameAttributeF(443, 0, -1, 0, 0, "", "", "Champion_Teleport_Time_Delta_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Champion_Clone_Next_Tick = new GameAttributeI(444, 0, -1, 0, 1, "", "", "Champion_Clone_Next_Tick", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Champion_Clone_Time_Min_In_Seconds = new GameAttributeF(445, 0, -1, 0, 0, "", "", "Champion_Clone_Time_Min_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Clone_Time_Delta_In_Seconds = new GameAttributeF(446, 0, -1, 0, 0, "", "", "Champion_Clone_Time_Delta_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Clone_Hitpoint_Bonus_Percent = new GameAttributeF(447, 0, -1, 0, 0, "", "", "Champion_Clone_Hitpoint_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Clone_Damage_Bonus_Percent = new GameAttributeF(448, 0, -1, 0, 0, "", "", "Champion_Clone_Damage_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Champion_Ghostly_Next_Tick = new GameAttributeI(449, 0, -1, 0, 1, "", "", "Champion_Ghostly_Next_Tick", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Champion_Ghostly_Inactive_Time_Min_In_Seconds = new GameAttributeF(450, 0, -1, 0, 0, "", "", "Champion_Ghostly_Inactive_Time_Min_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Ghostly_Inactive_Time_Delta_In_Seconds = new GameAttributeF(451, 0, -1, 0, 0, "", "", "Champion_Ghostly_Inactive_Time_Delta_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Ghostly_Active_Time_Min_In_Seconds = new GameAttributeF(452, 0, -1, 0, 0, "", "", "Champion_Ghostly_Active_Time_Min_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Ghostly_Active_Time_Delta_In_Seconds = new GameAttributeF(453, 0, -1, 0, 0, "", "", "Champion_Ghostly_Active_Time_Delta_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Ghostly_Saved_Dodge_Chance = new GameAttributeF(454, 0, -1, 0, 0, "", "", "Champion_Ghostly_Saved_Dodge_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeB Champion_Ghostly = new GameAttributeB(455, 0, -1, 1, 1, "", "", "Champion_Ghostly", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Base_Element = new GameAttributeI(456, -1, -1, 1, 1, "", "", "Base_Element", GameAttributeEncoding.IntMinMax, 0, -1, 7, 4);
        public static readonly GameAttributeF Projectile_Amount_Bonus_Percent = new GameAttributeF(457, 0, -1, 0, 0, "", "", "Projectile_Amount_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Projectile_Reflect_Chance = new GameAttributeF(458, 0, 0, 0, 0, "", "", "Projectile_Reflect_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Attack_Fear_Chance = new GameAttributeF(459, 0, -1, 0, 0, "", "", "Attack_Fear_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Attack_Fear_Time_Min = new GameAttributeF(460, 0, -1, 0, 0, "", "", "Attack_Fear_Time_Min", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Attack_Fear_Time_Delta = new GameAttributeF(461, 0, -1, 0, 0, "", "", "Attack_Fear_Time_Delta", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeB Buff_Visual_Effect = new GameAttributeB(462, 0, 9, 1, 1, "", "", "Buff_Visual_Effect", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Buff_Icon_Start_Tick0 = new GameAttributeI(463, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick0", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick1 = new GameAttributeI(464, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick1", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick2 = new GameAttributeI(465, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick2", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick3 = new GameAttributeI(466, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick3", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick4 = new GameAttributeI(467, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick4", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick5 = new GameAttributeI(468, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick5", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick6 = new GameAttributeI(469, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick6", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick7 = new GameAttributeI(470, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick7", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick0 = new GameAttributeI(471, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick0", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick1 = new GameAttributeI(472, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick1", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick2 = new GameAttributeI(473, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick2", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick3 = new GameAttributeI(474, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick3", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick4 = new GameAttributeI(475, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick4", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick5 = new GameAttributeI(476, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick5", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick6 = new GameAttributeI(477, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick6", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick7 = new GameAttributeI(478, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick7", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeB Could_Have_Ragdolled = new GameAttributeB(479, 0, -1, 1, 1, "", "", "Could_Have_Ragdolled", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Ambient_Damage_Effect_Last_Time = new GameAttributeI(480, 0, -1, 1, 1, "", "", "Ambient_Damage_Effect_Last_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Scale_Bonus = new GameAttributeF(481, 0, -1, 0, 0, "", "", "Scale_Bonus", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeB Deleted_On_Server = new GameAttributeB(482, 0, -1, 1, 1, "", "", "Deleted_On_Server", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Scripted_Fade_Time = new GameAttributeI(483, 0, -1, 1, 1, "", "", "Scripted_Fade_Time", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeB Does_No_Damage = new GameAttributeB(484, 0, -1, 1, 1, "", "", "Does_No_Damage", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Does_Fake_Damage = new GameAttributeB(485, 0, -1, 1, 1, "", "", "Does_Fake_Damage", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeF SlowTime_Debuff = new GameAttributeF(486, 0, -1, 0, 0, "", "", "SlowTime_Debuff", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeB Blocks_Projectiles = new GameAttributeB(487, 0, -1, 1, 1, "", "", "Blocks_Projectiles", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Frozen = new GameAttributeB(488, 0, -1, 1, 1, "", "", "Frozen", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeF Freeze_Damage_Percent_Bonus = new GameAttributeF(489, 0, -1, 0, 0, "", "", "Freeze_Damage_Percent_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeB Buff_Active = new GameAttributeB(490, 0, 4, 1, 1, "", "", "Buff_Active", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeF DualWield_BothAttack_Chance = new GameAttributeF(491, 0, -1, 0, 0, "", "", "DualWield_BothAttack_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Summon_Expiration_Tick = new GameAttributeI(492, 0, -1, 0, 1, "", "", "Summon_Expiration_Tick", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Summon_Count = new GameAttributeI(493, 0, -1, 0, 1, "", "", "Summon_Count", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB Uninterruptible = new GameAttributeB(494, 0, -1, 1, 1, "", "", "Uninterruptible", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Queue_Death = new GameAttributeB(495, 0, -1, 1, 1, "", "", "Queue Death", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB CantStartDisplayedPowers = new GameAttributeB(496, 0, -1, 1, 1, "", "", "CantStartDisplayedPowers", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Wizard_Slowtime_Proxy_ACD = new GameAttributeI(497, -1, -1, 3, 1, "", "", "Wizard_Slowtime_Proxy_ACD", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF DPS = new GameAttributeF(498, 0, -1, 1, 0, "", "", "DPS", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeI Resurrection_Power = new GameAttributeI(499, -1, -1, 3, 1, "", "", "Resurrection_Power", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Freeze_Damage = new GameAttributeF(500, 0, -1, 1, 0, "", "", "Freeze_Damage", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeF Freeze_Capacity = new GameAttributeF(501, 0, -1, 0, 0, "", "", "Freeze_Capacity", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Thaw_Rate = new GameAttributeF(502, 0, -1, 0, 0, "", "", "Thaw_Rate", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Chilled_Dur_Bonus_Percent = new GameAttributeF(503, 0, -1, 0, 0, "", "", "Chilled_Dur_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF DOT_DPS = new GameAttributeF(504, 0, -1, 0, 0, "", "", "DOT_DPS", GameAttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly GameAttributeF DamageCap_Percent = new GameAttributeF(505, 0, -1, 1, 0, "", "", "DamageCap_Percent", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeI Item_Time_Sold = new GameAttributeI(506, 0, -1, 1, 1, "", "", "Item_Time_Sold", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI Forced_Hireling_Power = new GameAttributeI(507, -1, -1, 3, 1, "", "", "Forced_Hireling_Power", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB IsRooted = new GameAttributeB(508, 0, -1, 1, 1, "", "", "IsRooted", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI RootTargetACD = new GameAttributeI(509, -1, -1, 3, 1, "", "", "RootTargetACD", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeF RootAutoDecayPerSecond = new GameAttributeF(510, 0, -1, 1, 0, "", "", "RootAutoDecayPerSecond", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeF RootUnitValue = new GameAttributeF(511, 0, -1, 1, 0, "", "", "RootUnitValue", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeI RootTotalTicks = new GameAttributeI(512, 0, -1, 1, 1, "", "", "RootTotalTicks", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB Hide_Affixes = new GameAttributeB(513, 0, -1, 1, 1, "", "", "Hide_Affixes", GameAttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly GameAttributeI Rune_A = new GameAttributeI(514, 0, 11, 0, 1, "", "", "Rune_A", GameAttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly GameAttributeI Rune_B = new GameAttributeI(515, 0, 11, 0, 1, "", "", "Rune_B", GameAttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly GameAttributeI Rune_C = new GameAttributeI(516, 0, 11, 0, 1, "", "", "Rune_C", GameAttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly GameAttributeI Rune_D = new GameAttributeI(517, 0, 11, 0, 1, "", "", "Rune_D", GameAttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly GameAttributeI Rune_E = new GameAttributeI(518, 0, 11, 0, 1, "", "", "Rune_E", GameAttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly GameAttributeF Resistance_Stun = new GameAttributeF(519, 0, -1, 0, 0, "", "", "Resistance_Stun", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Stun_Total = new GameAttributeF(520, 0, -1, 0, 0, "", "Resistance_Stun + Resistance_StunRootFreeze", "Resistance_Stun_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Root = new GameAttributeF(521, 0, -1, 0, 0, "", "", "Resistance_Root", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Root_Total = new GameAttributeF(522, 0, -1, 0, 0, "", "Resistance_Root + Resistance_StunRootFreeze", "Resistance_Root_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Freeze = new GameAttributeF(523, 0, -1, 0, 0, "", "", "Resistance_Freeze", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Freeze_Total = new GameAttributeF(524, 0, -1, 0, 0, "", "Resistance_Freeze + Resistance_StunRootFreeze", "Resistance_Freeze_Total", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_StunRootFreeze = new GameAttributeF(525, 0, -1, 0, 0, "", "", "Resistance_StunRootFreeze", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF CrowdControl_Reduction = new GameAttributeF(526, 0, -1, 7, 0, "", "", "CrowdControl_Reduction", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeB Displays_Team_Effect = new GameAttributeB(527, 0, -1, 1, 1, "", "", "Displays_Team_Effect", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Cannot_Be_Added_To_AI_Target_List = new GameAttributeB(528, 0, -1, 1, 1, "", "", "Cannot_Be_Added_To_AI_Target_List", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI SkillKit = new GameAttributeI(529, -1, -1, 3, 1, "", "", "SkillKit", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeB Immune_To_Charm = new GameAttributeB(530, 0, -1, 1, 1, "", "", "Immune_To_Charm", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Immune_To_Blind = new GameAttributeB(531, 0, -1, 1, 1, "", "", "Immune_To_Blind", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Damage_Shield = new GameAttributeB(532, 0, -1, 1, 1, "", "", "Damage_Shield", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Silenced = new GameAttributeB(533, 0, -1, 1, 1, "", "", "Silenced", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Diseased = new GameAttributeB(534, 0, -1, 1, 1, "", "", "Diseased", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Guard_Object_ACDID = new GameAttributeI(535, -1, -1, 3, 1, "", "", "Guard_Object_ACDID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Follow_Target_ACDID = new GameAttributeI(536, -1, -1, 3, 1, "", "", "Follow_Target_ACDID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Follow_Target_Type = new GameAttributeI(537, 0, -1, 3, 1, "", "", "Follow_Target_Type", GameAttributeEncoding.IntMinMax, 0, 0, 2, 2);
        public static readonly GameAttributeI Forced_Enemy_ACDID = new GameAttributeI(538, -1, -1, 1, 1, "", "", "Forced_Enemy_ACDID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI NPC_Talk_Target_ANN = new GameAttributeI(539, -1, -1, 3, 1, "", "", "NPC_Talk_Target_ANN", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI NPC_Conv_Target_ANN = new GameAttributeI(540, -1, -1, 3, 1, "", "", "NPC_Conv_Target_ANN", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Script_Target_ACDID = new GameAttributeI(541, -1, 3, 3, 1, "", "", "Script_Target_ACDID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Look_Target_Server_ANN = new GameAttributeI(542, -1, -1, 1, 1, "", "", "Look_Target_Server_ANN", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeF Look_Target_Broadcast_Intensity = new GameAttributeF(543, 0, -1, 0, 0, "", "", "Look_Target_Broadcast_Intensity", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeF Look_Target_Broadcast_Radius = new GameAttributeF(544, 0, -1, 0, 0, "", "", "Look_Target_Broadcast_Radius", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeB Stealthed = new GameAttributeB(545, 0, -1, 1, 1, "", "", "Stealthed", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI GemQuality = new GameAttributeI(546, 0, -1, 4, 1, "", "", "GemQuality", GameAttributeEncoding.IntMinMax, 8, 0, 14, 4);
        public static readonly GameAttributeI ItemBuffIcon = new GameAttributeI(547, 0, 4, 1, 1, "", "0", "ItemBuffIcon", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeF ScrollDuration = new GameAttributeF(548, 0, -1, 1, 0, "", "0", "ScrollDuration", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Gizmo_Actor_SNO_To_Spawn = new GameAttributeI(549, -1, -1, 3, 1, "", "", "Gizmo_Actor_SNO_To_Spawn", GameAttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly GameAttributeF Gizmo_Actor_To_Spawn_Scale = new GameAttributeF(550, 0, -1, 1, 0, "", "", "Gizmo_Actor_To_Spawn_Scale", GameAttributeEncoding.Float16, 4, 0, 0, 16);
        public static readonly GameAttributeI Death_Replacement_Power_SNO = new GameAttributeI(551, -1, -1, 3, 1, "", "", "Death_Replacement_Power_SNO", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB Attachment_Handled_By_Client = new GameAttributeB(552, 0, -1, 1, 1, "", "", "Attachment_Handled_By_Client", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB AI_In_Special_State = new GameAttributeB(553, 0, -1, 1, 1, "", "", "AI_In_Special_State", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AI_Used_Scripted_Spawn_Anim = new GameAttributeB(554, 0, -1, 1, 1, "", "", "AI_Used_Scripted_Spawn_Anim", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AI_Spawned_By_Inactive_Marker = new GameAttributeB(555, 0, -1, 1, 1, "", "", "AI_Spawned_By_Inactive_Marker", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Headstone_Player_ANN = new GameAttributeI(556, -1, -1, 3, 1, "", "", "Headstone_Player_ANN", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeF Resource_Cost_Reduction_Percent = new GameAttributeF(557, 0, 10, 0, 0, "", "", "Resource_Cost_Reduction_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Penetration = new GameAttributeF(558, 0, 0, 0, 0, "", "", "Resistance_Penetration", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Penetration_Total = new GameAttributeF(559, 0, 0, 0, 0, "", "(Resistance_Penetration + Resistance_Penetration_All#NONE) * (Resistance_Penetration_Percent_All#NONE + 1)", "Resistance_Penetration_Total", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Penetration_All = new GameAttributeF(560, 0, -1, 0, 0, "", "", "Resistance_Penetration_All", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Penetration_Percent_All = new GameAttributeF(561, 0, -1, 0, 0, "", "", "Resistance_Penetration_Percent_All", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Fury_Effect_Level = new GameAttributeI(562, 0, -1, 0, 1, "", "", "Fury_Effect_Level", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeF Health_Potion_Bonus_Heal_Percent = new GameAttributeF(563, 0, -1, 0, 0, "", "", "Health_Potion_Bonus_Heal_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Free_Cast = new GameAttributeI(564, 0, 4, 1, 1, "", "", "Free_Cast", GameAttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly GameAttributeB Free_Cast_All = new GameAttributeB(565, 0, -1, 1, 1, "", "", "Free_Cast_All", GameAttributeEncoding.IntMinMax, 9, 0, 1, 1);
        public static readonly GameAttributeF Movement_Scalar_Reduction_Percent = new GameAttributeF(566, 0, -1, 1, 0, "", "", "Movement_Scalar_Reduction_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar_Reduction_Resistance = new GameAttributeF(567, 0, -1, 0, 0, "", "", "Movement_Scalar_Reduction_Resistance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Absorb_Percent_All = new GameAttributeF(568, 0, -1, 0, 0, "", "", "Damage_Absorb_Percent_All", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeI World_Seed = new GameAttributeI(569, 0, -1, 0, 1, "", "", "World_Seed", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Kill_Count_Record = new GameAttributeI(570, 0, -1, 1, 1, "", "", "Kill_Count_Record", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Object_Destruction_Record = new GameAttributeI(571, 0, -1, 1, 1, "", "", "Object_Destruction_Record", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Single_Attack_Record = new GameAttributeI(572, 0, -1, 1, 1, "", "", "Single_Attack_Record", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Environment_Attack_Record = new GameAttributeI(573, 0, -1, 1, 1, "", "", "Environment_Attack_Record", GameAttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly GameAttributeB Root_Immune = new GameAttributeB(574, 0, -1, 1, 1, "", "", "Root_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeF Monster_Play_Get_Hit_Bonus = new GameAttributeF(575, 0, -1, 0, 0, "", "", "Monster_Play_Get_Hit_Bonus", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeI Stored_Contact_Frame = new GameAttributeI(576, 0, -1, 1, 1, "", "", "Stored_Contact_Frame", GameAttributeEncoding.IntMinMax, 0, 0, 4, 3);
        public static readonly GameAttributeI Buff_Icon_Count0 = new GameAttributeI(577, 0, 4, 0, 1, "", "", "Buff_Icon_Count0", GameAttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count1 = new GameAttributeI(578, 0, 4, 0, 1, "", "", "Buff_Icon_Count1", GameAttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count2 = new GameAttributeI(579, 0, 4, 0, 1, "", "", "Buff_Icon_Count2", GameAttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count3 = new GameAttributeI(580, 0, 4, 0, 1, "", "", "Buff_Icon_Count3", GameAttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count4 = new GameAttributeI(581, 0, 4, 0, 1, "", "", "Buff_Icon_Count4", GameAttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count5 = new GameAttributeI(582, 0, 4, 0, 1, "", "", "Buff_Icon_Count5", GameAttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count6 = new GameAttributeI(583, 0, 4, 0, 1, "", "", "Buff_Icon_Count6", GameAttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count7 = new GameAttributeI(584, 0, 4, 0, 1, "", "", "Buff_Icon_Count7", GameAttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly GameAttributeB Observer = new GameAttributeB(585, 0, -1, 1, 1, "", "", "Observer", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Resurrect_As_Observer = new GameAttributeB(586, 0, -1, 1, 1, "", "", "Resurrect_As_Observer", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Combo_Level = new GameAttributeI(587, 0, -1, 1, 1, "", "", "Combo_Level", GameAttributeEncoding.IntMinMax, 0, 0, 3, 2);
        public static readonly GameAttributeI Combo_Time_Last_Move = new GameAttributeI(588, 0, -1, 1, 1, "", "", "Combo_Time_Last_Move", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB Burrowed = new GameAttributeB(589, 0, -1, 1, 1, "", "", "Burrowed", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Death_Replacement_Effect_Group_SNO = new GameAttributeI(590, -1, -1, 3, 1, "", "", "Death_Replacement_Effect_Group_SNO", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Checkpoint_Resurrection_Allowed_Game_Time = new GameAttributeI(591, 0, -1, 0, 1, "", "", "Checkpoint_Resurrection_Allowed_Game_Time", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Checkpoint_Resurrection_Forced_Game_Time = new GameAttributeI(592, 0, -1, 0, 1, "", "", "Checkpoint_Resurrection_Forced_Game_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Controlling_TimedEvent_SNO = new GameAttributeI(593, -1, -1, 3, 1, "", "", "Controlling_TimedEvent_SNO", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Casting_Speed_Percent = new GameAttributeF(594, 0, -1, 0, 0, "", "", "Casting_Speed_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeB Using_Bossbar = new GameAttributeB(595, 0, -1, 1, 1, "", "", "Using_Bossbar", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect = new GameAttributeB(596, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect = new GameAttributeB(597, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect = new GameAttributeB(598, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect = new GameAttributeB(599, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect = new GameAttributeB(600, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect = new GameAttributeB(601, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect = new GameAttributeB(602, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect = new GameAttributeB(603, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Store_SNO = new GameAttributeI(604, 0, 0, 3, 1, "", "", "Store SNO", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeB Busy = new GameAttributeB(605, 0, -1, 1, 1, "", "", "Busy", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Afk = new GameAttributeB(606, 0, -1, 1, 1, "", "", "Afk", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Last_Action_Timestamp = new GameAttributeI(607, 0, -1, 1, 1, "", "", "Last Action Timestamp", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Portal_Next_Time = new GameAttributeI(608, 0, -1, 1, 1, "", "", "Portal Next Time", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeF Repair_Discount_Percent = new GameAttributeF(609, 0, -1, 0, 0, "", "", "Repair_Discount_Percent", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeB Resource_Degeneration_Prevented = new GameAttributeB(610, 0, -1, 1, 1, "", "", "Resource_Degeneration_Prevented", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Operatable = new GameAttributeB(611, 0, -1, 4, 1, "", "", "Operatable", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Look_Override = new GameAttributeI(612, 0, -1, 0, 1, "", "", "Look_Override", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Spawner_Concurrent_Count_ID = new GameAttributeI(613, -1, -1, 3, 1, "", "", "Spawner_Concurrent_Count_ID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB Disabled = new GameAttributeB(614, 0, -1, 1, 1, "", "", "Disabled", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Skill_Override = new GameAttributeI(615, -1, 3, 1, 1, "", "", "Skill_Override", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeB Skill_Override_Active = new GameAttributeB(616, 0, -1, 1, 1, "", "", "Skill_Override_Active", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Skill_Override_Ended = new GameAttributeB(617, 0, 4, 1, 1, "", "", "Skill_Override_Ended", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Skill_Override_Ended_Active = new GameAttributeB(618, 0, -1, 1, 1, "", "", "Skill_Override_Ended_Active", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Is_Power_Proxy = new GameAttributeB(619, 0, -1, 1, 1, "", "", "Is_Power_Proxy", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Force_No_Death_Animation = new GameAttributeB(620, 0, -1, 1, 1, "", "", "Force_No_Death_Animation", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Player_WeaponClass_Anim_Override = new GameAttributeI(621, -1, -1, 1, 1, "", "", "Player_WeaponClass_Anim_Override", GameAttributeEncoding.IntMinMax, 31, -1, 19, 5);
        public static readonly GameAttributeB Operatable_Story_Gizmo = new GameAttributeB(622, 0, -1, 1, 1, "", "", "Operatable_Story_Gizmo", GameAttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_None = new GameAttributeB(623, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_A = new GameAttributeB(624, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_B = new GameAttributeB(625, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_C = new GameAttributeB(626, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_D = new GameAttributeB(627, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_E = new GameAttributeB(628, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_None = new GameAttributeB(629, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_A = new GameAttributeB(630, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_B = new GameAttributeB(631, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_C = new GameAttributeB(632, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_D = new GameAttributeB(633, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_E = new GameAttributeB(634, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_None = new GameAttributeB(635, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_A = new GameAttributeB(636, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_B = new GameAttributeB(637, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_C = new GameAttributeB(638, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_D = new GameAttributeB(639, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_E = new GameAttributeB(640, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_None = new GameAttributeB(641, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_A = new GameAttributeB(642, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_B = new GameAttributeB(643, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_C = new GameAttributeB(644, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_D = new GameAttributeB(645, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_E = new GameAttributeB(646, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_None = new GameAttributeB(647, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_A = new GameAttributeB(648, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_B = new GameAttributeB(649, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_C = new GameAttributeB(650, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_D = new GameAttributeB(651, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_E = new GameAttributeB(652, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_None = new GameAttributeB(653, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_A = new GameAttributeB(654, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_B = new GameAttributeB(655, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_C = new GameAttributeB(656, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_D = new GameAttributeB(657, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_E = new GameAttributeB(658, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_None = new GameAttributeB(659, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_A = new GameAttributeB(660, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_B = new GameAttributeB(661, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_C = new GameAttributeB(662, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_D = new GameAttributeB(663, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_E = new GameAttributeB(664, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_None = new GameAttributeB(665, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_A = new GameAttributeB(666, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_B = new GameAttributeB(667, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_C = new GameAttributeB(668, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_D = new GameAttributeB(669, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_E = new GameAttributeB(670, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Walk_Passability_Power_SNO = new GameAttributeI(671, -1, -1, 1, 1, "", "", "Walk_Passability_Power_SNO", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Passability_Power_SNO = new GameAttributeI(672, -1, -1, 1, 1, "", "", "Passability_Power_SNO", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Flippy_ID = new GameAttributeI(673, -1, -1, 3, 1, "", "", "Flippy_ID", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI Summoning_Machine_Num_Casters = new GameAttributeI(674, 0, -1, 0, 1, "", "", "Summoning_Machine_Num_Casters", GameAttributeEncoding.IntMinMax, 0, 0, 255, 8);
        public static readonly GameAttributeI Summoning_Machine_Spawn_Count = new GameAttributeI(675, 0, 15, 0, 1, "", "", "Summoning_Machine_Spawn_Count", GameAttributeEncoding.IntMinMax, 0, 0, 4095, 12);
        public static readonly GameAttributeI Summoning_Machine_Next_Spawn_Ticks = new GameAttributeI(676, 0, -1, 0, 1, "", "", "Summoning_Machine_Next_Spawn_Ticks", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Summoning_Machine_Spawn_Team = new GameAttributeI(677, -1, -1, 1, 1, "", "", "Summoning_Machine_Spawn_Team", GameAttributeEncoding.IntMinMax, 0, -1, 23, 5);
        public static readonly GameAttributeF Screen_Attack_Radius_Constant = new GameAttributeF(678, 1114636288, -1, 3, 0, "", "", "Screen_Attack_Radius_Constant", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Damage_Done_Reduction_Percent = new GameAttributeF(679, 0, -1, 1, 0, "", "", "Damage_Done_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeI Set_Item_Count = new GameAttributeI(680, 0, 17, 0, 1, "", "", "Set_Item_Count", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeF Spawner_Countdown_Percent = new GameAttributeF(681, 0, -1, 1, 0, "", "", "Spawner_Countdown_Percent", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeB Attack_Slow = new GameAttributeB(682, 0, -1, 1, 1, "", "", "Attack_Slow", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Disabled = new GameAttributeB(683, 0, 4, 1, 1, "", "", "Power_Disabled", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Weapon_Effect_Override = new GameAttributeI(684, 0, -1, 1, 1, "", "", "Weapon_Effect_Override", GameAttributeEncoding.IntMinMax, 31, 0, 14, 4);
        public static readonly GameAttributeF Debuff_Duration_Reduction_Percent = new GameAttributeF(685, 0, -1, 0, 0, "", "", "Debuff_Duration_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeB Uses_PvP_Power_Tags = new GameAttributeB(686, 0, -1, 1, 1, "", "", "Uses_PvP_Power_Tags", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Trait = new GameAttributeI(687, 0, 4, 1, 1, "", "", "Trait", GameAttributeEncoding.IntMinMax, 31, -1, 30, 5);
        public static readonly GameAttributeI Last_ACD_Attacked_By = new GameAttributeI(688, -1, -1, 3, 1, "", "", "Last_ACD_Attacked_By", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Gold_PickUp_Radius = new GameAttributeF(689, 0, -1, 0, 0, "", "", "Gold_PickUp_Radius", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeI Client_Only_Effect = new GameAttributeI(690, 0, 12, 1, 1, "", "", "Client Only Effect", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeB Has_Doppelganger_Cloned = new GameAttributeB(691, 0, -1, 1, 1, "", "", "Has_Doppelganger_Cloned", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeF Resource_Gain_Bonus_Percent = new GameAttributeF(692, 0, 10, 0, 0, "", "", "Resource_Gain_Bonus_Percent", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeI Looping_Animation_Start_Time = new GameAttributeI(693, 0, -1, 1, 1, "", "", "Looping_Animation_Start_Time", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeI Looping_Animation_End_Time = new GameAttributeI(694, 0, -1, 1, 1, "", "", "Looping_Animation_End_Time", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeB Looping_Animation_Suppress_Item_Tooltips = new GameAttributeB(695, 0, -1, 1, 1, "", "", "Looping_Animation_Suppress_Item_Tooltips", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Heal_Effect_Last_Played_Tick = new GameAttributeI(696, -1, -1, 3, 1, "", "", "Heal_Effect_Last_Played_Tick", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Resource_Effect_Last_Played_tick = new GameAttributeI(697, -1, 10, 3, 1, "", "", "Resource_Effect_Last_Played_tick", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Thorns_Effect_Last_Played_tick = new GameAttributeI(698, -1, -1, 3, 1, "", "", "Thorns_Effect_Last_Played_tick", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI PVP_Kills = new GameAttributeI(699, 0, -1, 0, 1, "", "", "PVP_Kills", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI PVP_Deaths = new GameAttributeI(700, 0, -1, 0, 1, "", "", "PVP_Deaths", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI PVP_Assists = new GameAttributeI(701, 0, -1, 0, 1, "", "", "PVP_Assists", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI PVP_Progression_Points_Gained = new GameAttributeI(702, 0, -1, 0, 1, "", "", "PVP_Progression_Points_Gained", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI PVP_Current_Kill_Streak = new GameAttributeI(703, 0, -1, 0, 1, "", "", "PVP_Current_Kill_Streak", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI PVP_Current_Death_Streak = new GameAttributeI(704, 0, -1, 0, 1, "", "", "PVP_Current_Death_Streak", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI PVP_Longest_Kill_Streak = new GameAttributeI(705, 0, -1, 0, 1, "", "", "PVP_Longest_Kill_Streak", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI PVP_Longest_Death_Streak = new GameAttributeI(706, 0, -1, 0, 1, "", "", "PVP_Longest_Death_Streak", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeF Turn_Rate_Scalar = new GameAttributeF(707, 1065353216, -1, 5, 0, "", "", "Turn_Rate_Scalar", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeF Turn_Accel_Scalar = new GameAttributeF(708, 1065353216, -1, 5, 0, "", "", "Turn_Accel_Scalar", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeF Turn_Deccel_Scalar = new GameAttributeF(709, 1065353216, -1, 5, 0, "", "", "Turn_Deccel_Scalar", GameAttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly GameAttributeB No_Health_Drop = new GameAttributeB(710, 0, -1, 1, 1, "", "", "No_Health_Drop", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Leader = new GameAttributeB(711, 0, -1, 1, 1, "", "", "Leader", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB IsContentRestrictedActor = new GameAttributeB(712, 0, -1, 1, 1, "", "", "IsContentRestrictedActor", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB InBossEncounter = new GameAttributeB(713, 0, -1, 1, 1, "", "", "InBossEncounter", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeB God = new GameAttributeB(714, 0, -1, 1, 1, "", "", "God", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB MinimapActive = new GameAttributeB(715, 0, -1, 1, 1, "", "", "MinimapActive", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI MinimapIconOverride = new GameAttributeI(716, -1, -1, 0, 1, "", "", "MinimapIconOverride", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeB MinimapDisableArrow = new GameAttributeB(717, 0, -1, 1, 1, "", "", "MinimapDisableArrow", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeI Last_Blocked_ACD = new GameAttributeI(718, -1, -1, 3, 1, "", "", "Last_Blocked_ACD", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Last_Blocked_Time = new GameAttributeI(719, 0, -1, 1, 1, "", "", "Last_Blocked_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB Deactivate_Lure = new GameAttributeB(720, 0, -1, 1, 1, "", "", "Deactivate Lure", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Weapons_Hidden = new GameAttributeB(721, 0, -1, 1, 1, "", "", "Weapons_Hidden", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB Actor_Updates_Attributes_From_Owner = new GameAttributeB(722, 0, -1, 1, 1, "", "", "Actor_Updates_Attributes_From_Owner", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Taunt_Target_ACD = new GameAttributeI(723, -1, -1, 1, 1, "", "", "Taunt_Target_ACD", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF UI_Only_Percent_Damage_Increase = new GameAttributeF(724, 0, -1, 0, 0, "", "", "UI_Only_Percent_Damage_Increase", GameAttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly GameAttributeI Projectile_Effect_SNO = new GameAttributeI(725, -1, -1, 3, 1, "", "", "Projectile_Effect_SNO", GameAttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly GameAttributeF On_Hit_Fear_Proc_Chance = new GameAttributeF(726, 0, -1, 7, 0, "", "", "On_Hit_Fear_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Stun_Proc_Chance = new GameAttributeF(727, 0, -1, 7, 0, "", "", "On_Hit_Stun_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Blind_Proc_Chance = new GameAttributeF(728, 0, -1, 7, 0, "", "", "On_Hit_Blind_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Freeze_Proc_Chance = new GameAttributeF(729, 0, -1, 7, 0, "", "", "On_Hit_Freeze_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Chill_Proc_Chance = new GameAttributeF(730, 0, -1, 7, 0, "", "", "On_Hit_Chill_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Slow_Proc_Chance = new GameAttributeF(731, 0, -1, 7, 0, "", "", "On_Hit_Slow_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Immobilize_Proc_Chance = new GameAttributeF(732, 0, -1, 7, 0, "", "", "On_Hit_Immobilize_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Knockback_Proc_Chance = new GameAttributeF(733, 0, -1, 7, 0, "", "", "On_Hit_Knockback_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Bleed_Proc_Chance = new GameAttributeF(734, 0, -1, 7, 0, "", "", "On_Hit_Bleed_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Bleed_Proc_Damage_Base = new GameAttributeF(735, 0, -1, 0, 0, "", "", "On_Hit_Bleed_Proc_Damage_Base", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF On_Hit_Bleed_Proc_Damage_Delta = new GameAttributeF(736, 0, -1, 0, 0, "", "", "On_Hit_Bleed_Proc_Damage_Delta", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Ranged = new GameAttributeF(737, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Ranged", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Melee = new GameAttributeF(738, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Melee", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Reduction_Turns_Into_Heal = new GameAttributeF(739, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_Turns_Into_Heal", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Elites = new GameAttributeF(740, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Elites", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Type = new GameAttributeF(741, 0, 0, 7, 0, "", "", "Damage_Percent_Reduction_From_Type", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Percent_Bonus_Vs_Monster_Type = new GameAttributeF(742, 0, 18, 7, 0, "", "", "Damage_Percent_Bonus_Vs_Monster_Type", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Damage_Percent_Bonus_Vs_Elites = new GameAttributeF(743, 0, -1, 7, 0, "", "", "Damage_Percent_Bonus_Vs_Elites", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeI Item_Manipulation_Timeout = new GameAttributeI(744, 0, -1, 4, 1, "", "", "Item_Manipulation_Timeout", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Picked_Up_Time = new GameAttributeI(745, 0, -1, 4, 1, "", "", "Picked_Up_Time", GameAttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly GameAttributeI Unequipped_Time = new GameAttributeI(746, 1, 19, 4, 1, "", "", "Unequipped Time", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Last_ACD_Killed_Time = new GameAttributeI(747, 0, -1, 4, 1, "", "", "Last_ACD_Killed_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB CannotDieDuring = new GameAttributeB(748, 0, -1, 1, 1, "", "", "CannotDieDuring", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance = new GameAttributeF(749, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Fear_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance = new GameAttributeF(750, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Stun_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance = new GameAttributeF(751, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Blind_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance = new GameAttributeF(752, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Freeze_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance = new GameAttributeF(753, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Chill_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance = new GameAttributeF(754, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Slow_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance = new GameAttributeF(755, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Immobilize_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance = new GameAttributeF(756, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Knockback_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance = new GameAttributeF(757, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base = new GameAttributeF(758, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta = new GameAttributeF(759, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance_MainHand = new GameAttributeF(760, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Fear_Proc_Chance )", "", "Weapon_On_Hit_Fear_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance_OffHand = new GameAttributeF(761, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Fear_Proc_Chance : 0)", "", "Weapon_On_Hit_Fear_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance_CurrentHand = new GameAttributeF(762, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Fear_Proc_Chance_OffHand : Weapon_On_Hit_Fear_Proc_Chance_MainHand)", "Weapon_On_Hit_Fear_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance_MainHand = new GameAttributeF(763, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Stun_Proc_Chance )", "", "Weapon_On_Hit_Stun_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance_OffHand = new GameAttributeF(764, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Stun_Proc_Chance : 0)", "", "Weapon_On_Hit_Stun_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance_CurrentHand = new GameAttributeF(765, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Stun_Proc_Chance_OffHand : Weapon_On_Hit_Stun_Proc_Chance_MainHand)", "Weapon_On_Hit_Stun_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance_MainHand = new GameAttributeF(766, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Blind_Proc_Chance )", "", "Weapon_On_Hit_Blind_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance_OffHand = new GameAttributeF(767, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Blind_Proc_Chance : 0)", "", "Weapon_On_Hit_Blind_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance_CurrentHand = new GameAttributeF(768, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Blind_Proc_Chance_OffHand : Weapon_On_Hit_Blind_Proc_Chance_MainHand)", "Weapon_On_Hit_Blind_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance_MainHand = new GameAttributeF(769, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Freeze_Proc_Chance )", "", "Weapon_On_Hit_Freeze_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance_OffHand = new GameAttributeF(770, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Freeze_Proc_Chance : 0)", "", "Weapon_On_Hit_Freeze_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand = new GameAttributeF(771, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Freeze_Proc_Chance_OffHand : Weapon_On_Hit_Freeze_Proc_Chance_MainHand)", "Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance_MainHand = new GameAttributeF(772, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Chill_Proc_Chance )", "", "Weapon_On_Hit_Chill_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance_OffHand = new GameAttributeF(773, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Chill_Proc_Chance : 0)", "", "Weapon_On_Hit_Chill_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance_CurrentHand = new GameAttributeF(774, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Chill_Proc_Chance_OffHand : Weapon_On_Hit_Chill_Proc_Chance_MainHand)", "Weapon_On_Hit_Chill_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance_MainHand = new GameAttributeF(775, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Slow_Proc_Chance )", "", "Weapon_On_Hit_Slow_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance_OffHand = new GameAttributeF(776, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Slow_Proc_Chance : 0)", "", "Weapon_On_Hit_Slow_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance_CurrentHand = new GameAttributeF(777, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Slow_Proc_Chance_OffHand : Weapon_On_Hit_Slow_Proc_Chance_MainHand)", "Weapon_On_Hit_Slow_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance_MainHand = new GameAttributeF(778, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Immobilize_Proc_Chance )", "", "Weapon_On_Hit_Immobilize_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance_OffHand = new GameAttributeF(779, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Immobilize_Proc_Chance : 0)", "", "Weapon_On_Hit_Immobilize_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand = new GameAttributeF(780, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Immobilize_Proc_Chance_OffHand : Weapon_On_Hit_Immobilize_Proc_Chance_MainHand)", "Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance_MainHand = new GameAttributeF(781, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Knockback_Proc_Chance )", "", "Weapon_On_Hit_Knockback_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance_OffHand = new GameAttributeF(782, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Knockback_Proc_Chance : 0)", "", "Weapon_On_Hit_Knockback_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand = new GameAttributeF(783, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Knockback_Proc_Chance_OffHand : Weapon_On_Hit_Knockback_Proc_Chance_MainHand)", "Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance_MainHand = new GameAttributeF(784, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Bleed_Proc_Chance )", "", "Weapon_On_Hit_Bleed_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance_OffHand = new GameAttributeF(785, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Bleed_Proc_Chance : 0)", "", "Weapon_On_Hit_Bleed_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance_CurrentHand = new GameAttributeF(786, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Chance_OffHand : Weapon_On_Hit_Bleed_Proc_Chance_MainHand)", "Weapon_On_Hit_Bleed_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand = new GameAttributeF(787, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Bleed_Proc_Damage_Base )", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand = new GameAttributeF(788, 0, -1, 0, 0, "(Held_In_OffHand ? Weapon_On_Hit_Bleed_Proc_Damage_Base : 0)", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_CurrentHand = new GameAttributeF(789, 0, -1, 0, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand : Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand)", "Weapon_On_Hit_Bleed_Proc_Damage_Base_CurrentHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand = new GameAttributeF(790, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Bleed_Proc_Damage_Delta )", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand = new GameAttributeF(791, 0, -1, 0, 0, "(Held_In_OffHand ? Weapon_On_Hit_Bleed_Proc_Damage_Delta : 0)", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_CurrentHand = new GameAttributeF(792, 0, -1, 0, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand : Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand)", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_CurrentHand", GameAttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly GameAttributeF Power_Damage_Percent_Bonus = new GameAttributeF(793, 0, 4, 0, 0, "", "", "Power_Damage_Percent_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Power_Resource_Reduction = new GameAttributeF(794, 0, 4, 0, 0, "", "", "Power_Resource_Reduction", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction = new GameAttributeF(795, 0, 4, 0, 0, "", "", "Power_Cooldown_Reduction", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Power_Duration_Increase = new GameAttributeF(796, 0, 4, 0, 0, "", "", "Power_Duration_Increase", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Power_Crit_Percent_Bonus = new GameAttributeF(797, 0, 4, 0, 0, "", "", "Power_Crit_Percent_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_Crit_Chance = new GameAttributeF(798, 0, -1, 7, 0, "", "", "Weapon_Crit_Chance", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_Crit_Chance_MainHand = new GameAttributeF(799, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_Crit_Chance )", "", "Weapon_Crit_Chance_MainHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_Crit_Chance_OffHand = new GameAttributeF(800, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_Crit_Chance : 0)", "", "Weapon_Crit_Chance_OffHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Weapon_Crit_Chance_CurrentHand = new GameAttributeF(801, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_Crit_Chance_OffHand : Weapon_Crit_Chance_MainHand)", "Weapon_Crit_Chance_CurrentHand", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeF Strength_Item = new GameAttributeF(802, 0, -1, 0, 0, "", "", "Strength_Item", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Dexterity_Item = new GameAttributeF(803, 0, -1, 0, 0, "", "", "Dexterity_Item", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Intelligence_Item = new GameAttributeF(804, 0, -1, 0, 0, "", "", "Intelligence_Item", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeF Vitality_Item = new GameAttributeF(805, 0, -1, 0, 0, "", "", "Vitality_Item", GameAttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly GameAttributeI Item_Level_Requirement_Reduction = new GameAttributeI(806, 0, -1, 0, 1, "", "", "Item_Level_Requirement_Reduction", GameAttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly GameAttributeF Item_Durability_Percent_Bonus = new GameAttributeF(807, 0, -1, 0, 0, "", "", "Item_Durability_Percent_Bonus", GameAttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly GameAttributeB Item_Indestructible = new GameAttributeB(808, 0, -1, 1, 1, "", "", "Item_Indestructible", GameAttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly GameAttributeF Core_Attributes_From_Item_Bonus_Multiplier = new GameAttributeF(809, 1065353216, -1, 1, 0, "", "", "Core_Attributes_From_Item_Bonus_Multiplier", GameAttributeEncoding.Float32, 1, 0, 0, 32);
        public static readonly GameAttributeB Waiting_To_Accept_Resurrection = new GameAttributeB(810, 0, -1, 1, 1, "", "", "Waiting_To_Accept_Resurrection", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeB Ghosted = new GameAttributeB(811, 0, -1, 1, 1, "", "", "Ghosted", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeB Special_Inventory_Has_Sold = new GameAttributeB(812, 0, -1, 1, 1, "", "", "Special_Inventory_Has_Sold", GameAttributeEncoding.IntMinMax, 2, 0, 1, 1);
        public static readonly GameAttributeI Power_Channel_Lockout_Time = new GameAttributeI(813, 0, -1, 4, 1, "", "", "Power_Channel_Lockout_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Power_Buff_0_Lockout_Time = new GameAttributeI(814, 0, 4, 4, 1, "", "", "Power_Buff_0_Lockout_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Power_Buff_1_Lockout_Time = new GameAttributeI(815, 0, 4, 4, 1, "", "", "Power_Buff_1_Lockout_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Power_Buff_2_Lockout_Time = new GameAttributeI(816, 0, 4, 4, 1, "", "", "Power_Buff_2_Lockout_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Power_Buff_3_Lockout_Time = new GameAttributeI(817, 0, 4, 4, 1, "", "", "Power_Buff_3_Lockout_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Power_Buff_4_Lockout_Time = new GameAttributeI(818, 0, 4, 4, 1, "", "", "Power_Buff_4_Lockout_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Power_Buff_5_Lockout_Time = new GameAttributeI(819, 0, 4, 4, 1, "", "", "Power_Buff_5_Lockout_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Power_Buff_6_Lockout_Time = new GameAttributeI(820, 0, 4, 4, 1, "", "", "Power_Buff_6_Lockout_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Power_Buff_7_Lockout_Time = new GameAttributeI(821, 0, 4, 4, 1, "", "", "Power_Buff_7_Lockout_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Known_By_Owner = new GameAttributeI(822, -1, -1, 4, 1, "", "", "Known_By_Owner", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeB Never_Deactivates = new GameAttributeB(823, 0, -1, 1, 1, "", "", "Never_Deactivates", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Account_Under_Review = new GameAttributeB(824, 0, -1, 1, 1, "", "", "Account_Under_Review", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeI Projectile_Detonate_Time = new GameAttributeI(825, 0, -1, 4, 1, "", "", "Projectile_Detonate_Time", GameAttributeEncoding.Int, 64, 0, 0, 32);
    }
}
