// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.exchange_risk {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class ExchangeRiskTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_risk_ReportAuthorizeRiskVerdictRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange_risk.ReportAuthorizeRiskVerdictRequest, global::bnet.protocol.exchange_risk.ReportAuthorizeRiskVerdictRequest.Builder> internal__static_bnet_protocol_exchange_risk_ReportAuthorizeRiskVerdictRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_risk_ReportSettleRiskVerdictRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange_risk.ReportSettleRiskVerdictRequest, global::bnet.protocol.exchange_risk.ReportSettleRiskVerdictRequest.Builder> internal__static_bnet_protocol_exchange_risk_ReportSettleRiskVerdictRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_risk_DelaySettleRiskVerdictRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange_risk.DelaySettleRiskVerdictRequest, global::bnet.protocol.exchange_risk.DelaySettleRiskVerdictRequest.Builder> internal__static_bnet_protocol_exchange_risk_DelaySettleRiskVerdictRequest__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ExchangeRiskTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Ch5ibmV0L2V4Y2hhbmdlX3Jpc2tfdHlwZXMucHJvdG8SG2JuZXQucHJvdG9j" + 
          "b2wuZXhjaGFuZ2VfcmlzaxoTYm5ldC9leGNoYW5nZS5wcm90byKQAQohUmVw" + 
          "b3J0QXV0aG9yaXplUmlza1ZlcmRpY3RSZXF1ZXN0EjkKDHBhcnRpdGlvbl9p" + 
          "ZBgBIAIoCzIjLmJuZXQucHJvdG9jb2wuZXhjaGFuZ2UuUGFydGl0aW9uSWQS" + 
          "DwoHYXV0aF9pZBgCIAIoBBIOCgZyZXN1bHQYAyACKAQSDwoHdmVyZGljdBgE" + 
          "IAEoBCKPAQoeUmVwb3J0U2V0dGxlUmlza1ZlcmRpY3RSZXF1ZXN0EjkKDHBh" + 
          "cnRpdGlvbl9pZBgBIAIoCzIjLmJuZXQucHJvdG9jb2wuZXhjaGFuZ2UuUGFy" + 
          "dGl0aW9uSWQSEQoJc2V0dGxlX2lkGAIgAigEEg4KBnJlc3VsdBgDIAIoBBIP" + 
          "Cgd2ZXJkaWN0GAQgASgEIoMBCh1EZWxheVNldHRsZVJpc2tWZXJkaWN0UmVx" + 
          "dWVzdBI5CgxwYXJ0aXRpb25faWQYASACKAsyIy5ibmV0LnByb3RvY29sLmV4" + 
          "Y2hhbmdlLlBhcnRpdGlvbklkEhEKCXNldHRsZV9pZBgCIAIoBBIUCgxkZWxh" + 
          "eV9pbl9taW4YAyABKARCA4ABAA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_exchange_risk_ReportAuthorizeRiskVerdictRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_exchange_risk_ReportAuthorizeRiskVerdictRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange_risk.ReportAuthorizeRiskVerdictRequest, global::bnet.protocol.exchange_risk.ReportAuthorizeRiskVerdictRequest.Builder>(internal__static_bnet_protocol_exchange_risk_ReportAuthorizeRiskVerdictRequest__Descriptor,
                new string[] { "PartitionId", "AuthId", "Result", "Verdict", });
        internal__static_bnet_protocol_exchange_risk_ReportSettleRiskVerdictRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_exchange_risk_ReportSettleRiskVerdictRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange_risk.ReportSettleRiskVerdictRequest, global::bnet.protocol.exchange_risk.ReportSettleRiskVerdictRequest.Builder>(internal__static_bnet_protocol_exchange_risk_ReportSettleRiskVerdictRequest__Descriptor,
                new string[] { "PartitionId", "SettleId", "Result", "Verdict", });
        internal__static_bnet_protocol_exchange_risk_DelaySettleRiskVerdictRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_exchange_risk_DelaySettleRiskVerdictRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange_risk.DelaySettleRiskVerdictRequest, global::bnet.protocol.exchange_risk.DelaySettleRiskVerdictRequest.Builder>(internal__static_bnet_protocol_exchange_risk_DelaySettleRiskVerdictRequest__Descriptor,
                new string[] { "PartitionId", "SettleId", "DelayInMin", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.exchange.Exchange.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ReportAuthorizeRiskVerdictRequest : pb::GeneratedMessage<ReportAuthorizeRiskVerdictRequest, ReportAuthorizeRiskVerdictRequest.Builder> {
    private ReportAuthorizeRiskVerdictRequest() { }
    private static readonly ReportAuthorizeRiskVerdictRequest defaultInstance = new ReportAuthorizeRiskVerdictRequest().MakeReadOnly();
    private static readonly string[] _reportAuthorizeRiskVerdictRequestFieldNames = new string[] { "auth_id", "partition_id", "result", "verdict" };
    private static readonly uint[] _reportAuthorizeRiskVerdictRequestFieldTags = new uint[] { 16, 10, 24, 32 };
    public static ReportAuthorizeRiskVerdictRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReportAuthorizeRiskVerdictRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ReportAuthorizeRiskVerdictRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange_risk.ExchangeRiskTypes.internal__static_bnet_protocol_exchange_risk_ReportAuthorizeRiskVerdictRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReportAuthorizeRiskVerdictRequest, ReportAuthorizeRiskVerdictRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange_risk.ExchangeRiskTypes.internal__static_bnet_protocol_exchange_risk_ReportAuthorizeRiskVerdictRequest__FieldAccessorTable; }
    }
    
    public const int PartitionIdFieldNumber = 1;
    private bool hasPartitionId;
    private global::bnet.protocol.exchange.PartitionId partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public global::bnet.protocol.exchange.PartitionId PartitionId {
      get { return partitionId_ ?? global::bnet.protocol.exchange.PartitionId.DefaultInstance; }
    }
    
    public const int AuthIdFieldNumber = 2;
    private bool hasAuthId;
    private ulong authId_;
    public bool HasAuthId {
      get { return hasAuthId; }
    }
    public ulong AuthId {
      get { return authId_; }
    }
    
    public const int ResultFieldNumber = 3;
    private bool hasResult;
    private ulong result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public ulong Result {
      get { return result_; }
    }
    
    public const int VerdictFieldNumber = 4;
    private bool hasVerdict;
    private ulong verdict_;
    public bool HasVerdict {
      get { return hasVerdict; }
    }
    public ulong Verdict {
      get { return verdict_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPartitionId) return false;
        if (!hasAuthId) return false;
        if (!hasResult) return false;
        if (!PartitionId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _reportAuthorizeRiskVerdictRequestFieldNames;
      if (hasPartitionId) {
        output.WriteMessage(1, field_names[1], PartitionId);
      }
      if (hasAuthId) {
        output.WriteUInt64(2, field_names[0], AuthId);
      }
      if (hasResult) {
        output.WriteUInt64(3, field_names[2], Result);
      }
      if (hasVerdict) {
        output.WriteUInt64(4, field_names[3], Verdict);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, PartitionId);
        }
        if (hasAuthId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, AuthId);
        }
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Result);
        }
        if (hasVerdict) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, Verdict);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReportAuthorizeRiskVerdictRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReportAuthorizeRiskVerdictRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReportAuthorizeRiskVerdictRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReportAuthorizeRiskVerdictRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReportAuthorizeRiskVerdictRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReportAuthorizeRiskVerdictRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReportAuthorizeRiskVerdictRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ReportAuthorizeRiskVerdictRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ReportAuthorizeRiskVerdictRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReportAuthorizeRiskVerdictRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ReportAuthorizeRiskVerdictRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReportAuthorizeRiskVerdictRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ReportAuthorizeRiskVerdictRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ReportAuthorizeRiskVerdictRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ReportAuthorizeRiskVerdictRequest result;
      
      private ReportAuthorizeRiskVerdictRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ReportAuthorizeRiskVerdictRequest original = result;
          result = new ReportAuthorizeRiskVerdictRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ReportAuthorizeRiskVerdictRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange_risk.ReportAuthorizeRiskVerdictRequest.Descriptor; }
      }
      
      public override ReportAuthorizeRiskVerdictRequest DefaultInstanceForType {
        get { return global::bnet.protocol.exchange_risk.ReportAuthorizeRiskVerdictRequest.DefaultInstance; }
      }
      
      public override ReportAuthorizeRiskVerdictRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReportAuthorizeRiskVerdictRequest) {
          return MergeFrom((ReportAuthorizeRiskVerdictRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReportAuthorizeRiskVerdictRequest other) {
        if (other == global::bnet.protocol.exchange_risk.ReportAuthorizeRiskVerdictRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPartitionId) {
          MergePartitionId(other.PartitionId);
        }
        if (other.HasAuthId) {
          AuthId = other.AuthId;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasVerdict) {
          Verdict = other.Verdict;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_reportAuthorizeRiskVerdictRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _reportAuthorizeRiskVerdictRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.exchange.PartitionId.Builder subBuilder = global::bnet.protocol.exchange.PartitionId.CreateBuilder();
              if (result.hasPartitionId) {
                subBuilder.MergeFrom(PartitionId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PartitionId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasAuthId = input.ReadUInt64(ref result.authId_);
              break;
            }
            case 24: {
              result.hasResult = input.ReadUInt64(ref result.result_);
              break;
            }
            case 32: {
              result.hasVerdict = input.ReadUInt64(ref result.verdict_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPartitionId {
       get { return result.hasPartitionId; }
      }
      public global::bnet.protocol.exchange.PartitionId PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(global::bnet.protocol.exchange.PartitionId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder SetPartitionId(global::bnet.protocol.exchange.PartitionId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = builderForValue.Build();
        return this;
      }
      public Builder MergePartitionId(global::bnet.protocol.exchange.PartitionId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPartitionId &&
            result.partitionId_ != global::bnet.protocol.exchange.PartitionId.DefaultInstance) {
            result.partitionId_ = global::bnet.protocol.exchange.PartitionId.CreateBuilder(result.partitionId_).MergeFrom(value).BuildPartial();
        } else {
          result.partitionId_ = value;
        }
        result.hasPartitionId = true;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = null;
        return this;
      }
      
      public bool HasAuthId {
        get { return result.hasAuthId; }
      }
      public ulong AuthId {
        get { return result.AuthId; }
        set { SetAuthId(value); }
      }
      public Builder SetAuthId(ulong value) {
        PrepareBuilder();
        result.hasAuthId = true;
        result.authId_ = value;
        return this;
      }
      public Builder ClearAuthId() {
        PrepareBuilder();
        result.hasAuthId = false;
        result.authId_ = 0UL;
        return this;
      }
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public ulong Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(ulong value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0UL;
        return this;
      }
      
      public bool HasVerdict {
        get { return result.hasVerdict; }
      }
      public ulong Verdict {
        get { return result.Verdict; }
        set { SetVerdict(value); }
      }
      public Builder SetVerdict(ulong value) {
        PrepareBuilder();
        result.hasVerdict = true;
        result.verdict_ = value;
        return this;
      }
      public Builder ClearVerdict() {
        PrepareBuilder();
        result.hasVerdict = false;
        result.verdict_ = 0UL;
        return this;
      }
    }
    static ReportAuthorizeRiskVerdictRequest() {
      object.ReferenceEquals(global::bnet.protocol.exchange_risk.ExchangeRiskTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ReportSettleRiskVerdictRequest : pb::GeneratedMessage<ReportSettleRiskVerdictRequest, ReportSettleRiskVerdictRequest.Builder> {
    private ReportSettleRiskVerdictRequest() { }
    private static readonly ReportSettleRiskVerdictRequest defaultInstance = new ReportSettleRiskVerdictRequest().MakeReadOnly();
    private static readonly string[] _reportSettleRiskVerdictRequestFieldNames = new string[] { "partition_id", "result", "settle_id", "verdict" };
    private static readonly uint[] _reportSettleRiskVerdictRequestFieldTags = new uint[] { 10, 24, 16, 32 };
    public static ReportSettleRiskVerdictRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReportSettleRiskVerdictRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ReportSettleRiskVerdictRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange_risk.ExchangeRiskTypes.internal__static_bnet_protocol_exchange_risk_ReportSettleRiskVerdictRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReportSettleRiskVerdictRequest, ReportSettleRiskVerdictRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange_risk.ExchangeRiskTypes.internal__static_bnet_protocol_exchange_risk_ReportSettleRiskVerdictRequest__FieldAccessorTable; }
    }
    
    public const int PartitionIdFieldNumber = 1;
    private bool hasPartitionId;
    private global::bnet.protocol.exchange.PartitionId partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public global::bnet.protocol.exchange.PartitionId PartitionId {
      get { return partitionId_ ?? global::bnet.protocol.exchange.PartitionId.DefaultInstance; }
    }
    
    public const int SettleIdFieldNumber = 2;
    private bool hasSettleId;
    private ulong settleId_;
    public bool HasSettleId {
      get { return hasSettleId; }
    }
    public ulong SettleId {
      get { return settleId_; }
    }
    
    public const int ResultFieldNumber = 3;
    private bool hasResult;
    private ulong result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public ulong Result {
      get { return result_; }
    }
    
    public const int VerdictFieldNumber = 4;
    private bool hasVerdict;
    private ulong verdict_;
    public bool HasVerdict {
      get { return hasVerdict; }
    }
    public ulong Verdict {
      get { return verdict_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPartitionId) return false;
        if (!hasSettleId) return false;
        if (!hasResult) return false;
        if (!PartitionId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _reportSettleRiskVerdictRequestFieldNames;
      if (hasPartitionId) {
        output.WriteMessage(1, field_names[0], PartitionId);
      }
      if (hasSettleId) {
        output.WriteUInt64(2, field_names[2], SettleId);
      }
      if (hasResult) {
        output.WriteUInt64(3, field_names[1], Result);
      }
      if (hasVerdict) {
        output.WriteUInt64(4, field_names[3], Verdict);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, PartitionId);
        }
        if (hasSettleId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, SettleId);
        }
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Result);
        }
        if (hasVerdict) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, Verdict);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReportSettleRiskVerdictRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReportSettleRiskVerdictRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReportSettleRiskVerdictRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReportSettleRiskVerdictRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReportSettleRiskVerdictRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReportSettleRiskVerdictRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReportSettleRiskVerdictRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ReportSettleRiskVerdictRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ReportSettleRiskVerdictRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReportSettleRiskVerdictRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ReportSettleRiskVerdictRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReportSettleRiskVerdictRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ReportSettleRiskVerdictRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ReportSettleRiskVerdictRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ReportSettleRiskVerdictRequest result;
      
      private ReportSettleRiskVerdictRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ReportSettleRiskVerdictRequest original = result;
          result = new ReportSettleRiskVerdictRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ReportSettleRiskVerdictRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange_risk.ReportSettleRiskVerdictRequest.Descriptor; }
      }
      
      public override ReportSettleRiskVerdictRequest DefaultInstanceForType {
        get { return global::bnet.protocol.exchange_risk.ReportSettleRiskVerdictRequest.DefaultInstance; }
      }
      
      public override ReportSettleRiskVerdictRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReportSettleRiskVerdictRequest) {
          return MergeFrom((ReportSettleRiskVerdictRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReportSettleRiskVerdictRequest other) {
        if (other == global::bnet.protocol.exchange_risk.ReportSettleRiskVerdictRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPartitionId) {
          MergePartitionId(other.PartitionId);
        }
        if (other.HasSettleId) {
          SettleId = other.SettleId;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasVerdict) {
          Verdict = other.Verdict;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_reportSettleRiskVerdictRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _reportSettleRiskVerdictRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.exchange.PartitionId.Builder subBuilder = global::bnet.protocol.exchange.PartitionId.CreateBuilder();
              if (result.hasPartitionId) {
                subBuilder.MergeFrom(PartitionId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PartitionId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasSettleId = input.ReadUInt64(ref result.settleId_);
              break;
            }
            case 24: {
              result.hasResult = input.ReadUInt64(ref result.result_);
              break;
            }
            case 32: {
              result.hasVerdict = input.ReadUInt64(ref result.verdict_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPartitionId {
       get { return result.hasPartitionId; }
      }
      public global::bnet.protocol.exchange.PartitionId PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(global::bnet.protocol.exchange.PartitionId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder SetPartitionId(global::bnet.protocol.exchange.PartitionId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = builderForValue.Build();
        return this;
      }
      public Builder MergePartitionId(global::bnet.protocol.exchange.PartitionId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPartitionId &&
            result.partitionId_ != global::bnet.protocol.exchange.PartitionId.DefaultInstance) {
            result.partitionId_ = global::bnet.protocol.exchange.PartitionId.CreateBuilder(result.partitionId_).MergeFrom(value).BuildPartial();
        } else {
          result.partitionId_ = value;
        }
        result.hasPartitionId = true;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = null;
        return this;
      }
      
      public bool HasSettleId {
        get { return result.hasSettleId; }
      }
      public ulong SettleId {
        get { return result.SettleId; }
        set { SetSettleId(value); }
      }
      public Builder SetSettleId(ulong value) {
        PrepareBuilder();
        result.hasSettleId = true;
        result.settleId_ = value;
        return this;
      }
      public Builder ClearSettleId() {
        PrepareBuilder();
        result.hasSettleId = false;
        result.settleId_ = 0UL;
        return this;
      }
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public ulong Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(ulong value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0UL;
        return this;
      }
      
      public bool HasVerdict {
        get { return result.hasVerdict; }
      }
      public ulong Verdict {
        get { return result.Verdict; }
        set { SetVerdict(value); }
      }
      public Builder SetVerdict(ulong value) {
        PrepareBuilder();
        result.hasVerdict = true;
        result.verdict_ = value;
        return this;
      }
      public Builder ClearVerdict() {
        PrepareBuilder();
        result.hasVerdict = false;
        result.verdict_ = 0UL;
        return this;
      }
    }
    static ReportSettleRiskVerdictRequest() {
      object.ReferenceEquals(global::bnet.protocol.exchange_risk.ExchangeRiskTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DelaySettleRiskVerdictRequest : pb::GeneratedMessage<DelaySettleRiskVerdictRequest, DelaySettleRiskVerdictRequest.Builder> {
    private DelaySettleRiskVerdictRequest() { }
    private static readonly DelaySettleRiskVerdictRequest defaultInstance = new DelaySettleRiskVerdictRequest().MakeReadOnly();
    private static readonly string[] _delaySettleRiskVerdictRequestFieldNames = new string[] { "delay_in_min", "partition_id", "settle_id" };
    private static readonly uint[] _delaySettleRiskVerdictRequestFieldTags = new uint[] { 24, 10, 16 };
    public static DelaySettleRiskVerdictRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DelaySettleRiskVerdictRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DelaySettleRiskVerdictRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange_risk.ExchangeRiskTypes.internal__static_bnet_protocol_exchange_risk_DelaySettleRiskVerdictRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DelaySettleRiskVerdictRequest, DelaySettleRiskVerdictRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange_risk.ExchangeRiskTypes.internal__static_bnet_protocol_exchange_risk_DelaySettleRiskVerdictRequest__FieldAccessorTable; }
    }
    
    public const int PartitionIdFieldNumber = 1;
    private bool hasPartitionId;
    private global::bnet.protocol.exchange.PartitionId partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public global::bnet.protocol.exchange.PartitionId PartitionId {
      get { return partitionId_ ?? global::bnet.protocol.exchange.PartitionId.DefaultInstance; }
    }
    
    public const int SettleIdFieldNumber = 2;
    private bool hasSettleId;
    private ulong settleId_;
    public bool HasSettleId {
      get { return hasSettleId; }
    }
    public ulong SettleId {
      get { return settleId_; }
    }
    
    public const int DelayInMinFieldNumber = 3;
    private bool hasDelayInMin;
    private ulong delayInMin_;
    public bool HasDelayInMin {
      get { return hasDelayInMin; }
    }
    public ulong DelayInMin {
      get { return delayInMin_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPartitionId) return false;
        if (!hasSettleId) return false;
        if (!PartitionId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _delaySettleRiskVerdictRequestFieldNames;
      if (hasPartitionId) {
        output.WriteMessage(1, field_names[1], PartitionId);
      }
      if (hasSettleId) {
        output.WriteUInt64(2, field_names[2], SettleId);
      }
      if (hasDelayInMin) {
        output.WriteUInt64(3, field_names[0], DelayInMin);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, PartitionId);
        }
        if (hasSettleId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, SettleId);
        }
        if (hasDelayInMin) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, DelayInMin);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DelaySettleRiskVerdictRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DelaySettleRiskVerdictRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DelaySettleRiskVerdictRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DelaySettleRiskVerdictRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DelaySettleRiskVerdictRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DelaySettleRiskVerdictRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DelaySettleRiskVerdictRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DelaySettleRiskVerdictRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DelaySettleRiskVerdictRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DelaySettleRiskVerdictRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DelaySettleRiskVerdictRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DelaySettleRiskVerdictRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DelaySettleRiskVerdictRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DelaySettleRiskVerdictRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DelaySettleRiskVerdictRequest result;
      
      private DelaySettleRiskVerdictRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          DelaySettleRiskVerdictRequest original = result;
          result = new DelaySettleRiskVerdictRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DelaySettleRiskVerdictRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange_risk.DelaySettleRiskVerdictRequest.Descriptor; }
      }
      
      public override DelaySettleRiskVerdictRequest DefaultInstanceForType {
        get { return global::bnet.protocol.exchange_risk.DelaySettleRiskVerdictRequest.DefaultInstance; }
      }
      
      public override DelaySettleRiskVerdictRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DelaySettleRiskVerdictRequest) {
          return MergeFrom((DelaySettleRiskVerdictRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DelaySettleRiskVerdictRequest other) {
        if (other == global::bnet.protocol.exchange_risk.DelaySettleRiskVerdictRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPartitionId) {
          MergePartitionId(other.PartitionId);
        }
        if (other.HasSettleId) {
          SettleId = other.SettleId;
        }
        if (other.HasDelayInMin) {
          DelayInMin = other.DelayInMin;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_delaySettleRiskVerdictRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _delaySettleRiskVerdictRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.exchange.PartitionId.Builder subBuilder = global::bnet.protocol.exchange.PartitionId.CreateBuilder();
              if (result.hasPartitionId) {
                subBuilder.MergeFrom(PartitionId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PartitionId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasSettleId = input.ReadUInt64(ref result.settleId_);
              break;
            }
            case 24: {
              result.hasDelayInMin = input.ReadUInt64(ref result.delayInMin_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPartitionId {
       get { return result.hasPartitionId; }
      }
      public global::bnet.protocol.exchange.PartitionId PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(global::bnet.protocol.exchange.PartitionId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder SetPartitionId(global::bnet.protocol.exchange.PartitionId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = builderForValue.Build();
        return this;
      }
      public Builder MergePartitionId(global::bnet.protocol.exchange.PartitionId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPartitionId &&
            result.partitionId_ != global::bnet.protocol.exchange.PartitionId.DefaultInstance) {
            result.partitionId_ = global::bnet.protocol.exchange.PartitionId.CreateBuilder(result.partitionId_).MergeFrom(value).BuildPartial();
        } else {
          result.partitionId_ = value;
        }
        result.hasPartitionId = true;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = null;
        return this;
      }
      
      public bool HasSettleId {
        get { return result.hasSettleId; }
      }
      public ulong SettleId {
        get { return result.SettleId; }
        set { SetSettleId(value); }
      }
      public Builder SetSettleId(ulong value) {
        PrepareBuilder();
        result.hasSettleId = true;
        result.settleId_ = value;
        return this;
      }
      public Builder ClearSettleId() {
        PrepareBuilder();
        result.hasSettleId = false;
        result.settleId_ = 0UL;
        return this;
      }
      
      public bool HasDelayInMin {
        get { return result.hasDelayInMin; }
      }
      public ulong DelayInMin {
        get { return result.DelayInMin; }
        set { SetDelayInMin(value); }
      }
      public Builder SetDelayInMin(ulong value) {
        PrepareBuilder();
        result.hasDelayInMin = true;
        result.delayInMin_ = value;
        return this;
      }
      public Builder ClearDelayInMin() {
        PrepareBuilder();
        result.hasDelayInMin = false;
        result.delayInMin_ = 0UL;
        return this;
      }
    }
    static DelaySettleRiskVerdictRequest() {
      object.ReferenceEquals(global::bnet.protocol.exchange_risk.ExchangeRiskTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
