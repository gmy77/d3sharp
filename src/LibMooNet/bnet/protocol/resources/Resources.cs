// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.resources {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class Resources {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_resources_ContentHandleRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.resources.ContentHandleRequest, global::bnet.protocol.resources.ContentHandleRequest.Builder> internal__static_bnet_protocol_resources_ContentHandleRequest__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Resources() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CixzZXJ2aWNlL3Jlc291cmNlcy9kZWZpbml0aW9uL3Jlc291cmNlcy5wcm90" + 
            "bxIXYm5ldC5wcm90b2NvbC5yZXNvdXJjZXMaIWxpYi9wcm90b2NvbC9jb250" + 
            "ZW50X2hhbmRsZS5wcm90bxoRbGliL3JwYy9ycGMucHJvdG8iWQoUQ29udGVu" + 
            "dEhhbmRsZVJlcXVlc3QSEgoKcHJvZ3JhbV9pZBgBIAIoBxIRCglzdHJlYW1f" + 
            "aWQYAiACKAcSGgoGbG9jYWxlGAMgASgHOgoxNzAxNzI5NjE5MnIKCVJlc291" + 
            "cmNlcxJlChBHZXRDb250ZW50SGFuZGxlEi0uYm5ldC5wcm90b2NvbC5yZXNv" + 
            "dXJjZXMuQ29udGVudEhhbmRsZVJlcXVlc3QaHC5ibmV0LnByb3RvY29sLkNv" + 
            "bnRlbnRIYW5kbGUiBIC1GAFCA4ABAA==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_resources_ContentHandleRequest__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_resources_ContentHandleRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.resources.ContentHandleRequest, global::bnet.protocol.resources.ContentHandleRequest.Builder>(internal__static_bnet_protocol_resources_ContentHandleRequest__Descriptor,
                  new string[] { "ProgramId", "StreamId", "Locale", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bnet.protocol.Proto.ContentHandle.RegisterAllExtensions(registry);
          global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bnet.protocol.Proto.ContentHandle.Descriptor, 
            global::bnet.protocol.Rpc.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ContentHandleRequest : pb::GeneratedMessage<ContentHandleRequest, ContentHandleRequest.Builder> {
    private ContentHandleRequest() { }
    private static readonly ContentHandleRequest defaultInstance = new ContentHandleRequest().MakeReadOnly();
    private static readonly string[] _contentHandleRequestFieldNames = new string[] { "locale", "program_id", "stream_id" };
    private static readonly uint[] _contentHandleRequestFieldTags = new uint[] { 29, 13, 21 };
    public static ContentHandleRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ContentHandleRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ContentHandleRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.resources.Proto.Resources.internal__static_bnet_protocol_resources_ContentHandleRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ContentHandleRequest, ContentHandleRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.resources.Proto.Resources.internal__static_bnet_protocol_resources_ContentHandleRequest__FieldAccessorTable; }
    }
    
    public const int ProgramIdFieldNumber = 1;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public const int StreamIdFieldNumber = 2;
    private bool hasStreamId;
    private uint streamId_;
    public bool HasStreamId {
      get { return hasStreamId; }
    }
    public uint StreamId {
      get { return streamId_; }
    }
    
    public const int LocaleFieldNumber = 3;
    private bool hasLocale;
    private uint locale_ = 1701729619;
    public bool HasLocale {
      get { return hasLocale; }
    }
    public uint Locale {
      get { return locale_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProgramId) return false;
        if (!hasStreamId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _contentHandleRequestFieldNames;
      if (hasProgramId) {
        output.WriteFixed32(1, field_names[1], ProgramId);
      }
      if (hasStreamId) {
        output.WriteFixed32(2, field_names[2], StreamId);
      }
      if (hasLocale) {
        output.WriteFixed32(3, field_names[0], Locale);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, ProgramId);
        }
        if (hasStreamId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, StreamId);
        }
        if (hasLocale) {
          size += pb::CodedOutputStream.ComputeFixed32Size(3, Locale);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ContentHandleRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContentHandleRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContentHandleRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContentHandleRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContentHandleRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContentHandleRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ContentHandleRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ContentHandleRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ContentHandleRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContentHandleRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ContentHandleRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ContentHandleRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ContentHandleRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ContentHandleRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ContentHandleRequest result;
      
      private ContentHandleRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ContentHandleRequest original = result;
          result = new ContentHandleRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ContentHandleRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.resources.ContentHandleRequest.Descriptor; }
      }
      
      public override ContentHandleRequest DefaultInstanceForType {
        get { return global::bnet.protocol.resources.ContentHandleRequest.DefaultInstance; }
      }
      
      public override ContentHandleRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ContentHandleRequest) {
          return MergeFrom((ContentHandleRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ContentHandleRequest other) {
        if (other == global::bnet.protocol.resources.ContentHandleRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        if (other.HasStreamId) {
          StreamId = other.StreamId;
        }
        if (other.HasLocale) {
          Locale = other.Locale;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_contentHandleRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _contentHandleRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
            case 21: {
              result.hasStreamId = input.ReadFixed32(ref result.streamId_);
              break;
            }
            case 29: {
              result.hasLocale = input.ReadFixed32(ref result.locale_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
      
      public bool HasStreamId {
        get { return result.hasStreamId; }
      }
      public uint StreamId {
        get { return result.StreamId; }
        set { SetStreamId(value); }
      }
      public Builder SetStreamId(uint value) {
        PrepareBuilder();
        result.hasStreamId = true;
        result.streamId_ = value;
        return this;
      }
      public Builder ClearStreamId() {
        PrepareBuilder();
        result.hasStreamId = false;
        result.streamId_ = 0;
        return this;
      }
      
      public bool HasLocale {
        get { return result.hasLocale; }
      }
      public uint Locale {
        get { return result.Locale; }
        set { SetLocale(value); }
      }
      public Builder SetLocale(uint value) {
        PrepareBuilder();
        result.hasLocale = true;
        result.locale_ = value;
        return this;
      }
      public Builder ClearLocale() {
        PrepareBuilder();
        result.hasLocale = false;
        result.locale_ = 1701729619;
        return this;
      }
    }
    static ContentHandleRequest() {
      object.ReferenceEquals(global::bnet.protocol.resources.Proto.Resources.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class Resources : pb::IService {
    public abstract void GetContentHandle(
        pb::IRpcController controller,
        global::bnet.protocol.resources.ContentHandleRequest request,
        global::System.Action<global::bnet.protocol.ContentHandle> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.Resources.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.GetContentHandle(controller, (global::bnet.protocol.resources.ContentHandleRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.ContentHandle>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.resources.ContentHandleRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.ContentHandle.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.resources.Resources {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void GetContentHandle(
          pb::IRpcController controller,
          global::bnet.protocol.resources.ContentHandleRequest request,
          global::System.Action<global::bnet.protocol.ContentHandle> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.ContentHandle.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.ContentHandle, global::bnet.protocol.ContentHandle.Builder>(done, global::bnet.protocol.ContentHandle.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
