// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Descriptor {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_Path__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.Path, global::bnet.protocol.Path.Builder> internal__static_bnet_protocol_Path__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor DescriptorProp {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Descriptor() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Ch1saWIvcHJvdG9jb2wvZGVzY3JpcHRvci5wcm90bxINYm5ldC5wcm90b2Nv" + 
          "bCIbCgRQYXRoEhMKB29yZGluYWwYASADKA1CAhAB");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_Path__Descriptor = DescriptorProp.MessageTypes[0];
        internal__static_bnet_protocol_Path__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.Path, global::bnet.protocol.Path.Builder>(internal__static_bnet_protocol_Path__Descriptor,
                new string[] { "Ordinal", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Path : pb::GeneratedMessage<Path, Path.Builder> {
    private Path() { }
    private static readonly Path defaultInstance = new Path().MakeReadOnly();
    private static readonly string[] _pathFieldNames = new string[] { "ordinal" };
    private static readonly uint[] _pathFieldTags = new uint[] { 10 };
    public static Path DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Path DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Path ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.Descriptor.internal__static_bnet_protocol_Path__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Path, Path.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.Descriptor.internal__static_bnet_protocol_Path__FieldAccessorTable; }
    }
    
    public const int OrdinalFieldNumber = 1;
    private int ordinalMemoizedSerializedSize;
    private pbc::PopsicleList<uint> ordinal_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> OrdinalList {
      get { return pbc::Lists.AsReadOnly(ordinal_); }
    }
    public int OrdinalCount {
      get { return ordinal_.Count; }
    }
    public uint GetOrdinal(int index) {
      return ordinal_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pathFieldNames;
      if (ordinal_.Count > 0) {
        output.WritePackedUInt32Array(1, field_names[0], ordinalMemoizedSerializedSize, ordinal_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (uint element in OrdinalList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (ordinal_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          ordinalMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Path ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Path ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Path ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Path ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Path ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Path ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Path ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Path ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Path ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Path ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Path MakeReadOnly() {
      ordinal_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Path prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Path, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Path cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Path result;
      
      private Path PrepareBuilder() {
        if (resultIsReadOnly) {
          Path original = result;
          result = new Path();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Path MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.Path.Descriptor; }
      }
      
      public override Path DefaultInstanceForType {
        get { return global::bnet.protocol.Path.DefaultInstance; }
      }
      
      public override Path BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Path) {
          return MergeFrom((Path) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Path other) {
        if (other == global::bnet.protocol.Path.DefaultInstance) return this;
        PrepareBuilder();
        if (other.ordinal_.Count != 0) {
          result.ordinal_.Add(other.ordinal_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pathFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pathFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt32Array(tag, field_name, result.ordinal_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<uint> OrdinalList {
        get { return PrepareBuilder().ordinal_; }
      }
      public int OrdinalCount {
        get { return result.OrdinalCount; }
      }
      public uint GetOrdinal(int index) {
        return result.GetOrdinal(index);
      }
      public Builder SetOrdinal(int index, uint value) {
        PrepareBuilder();
        result.ordinal_[index] = value;
        return this;
      }
      public Builder AddOrdinal(uint value) {
        PrepareBuilder();
        result.ordinal_.Add(value);
        return this;
      }
      public Builder AddRangeOrdinal(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.ordinal_.Add(values);
        return this;
      }
      public Builder ClearOrdinal() {
        PrepareBuilder();
        result.ordinal_.Clear();
        return this;
      }
    }
    static Path() {
      object.ReferenceEquals(global::bnet.protocol.Descriptor.DescriptorProp, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
