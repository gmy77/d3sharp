// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.account {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class AccountTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_AccountId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountId, global::bnet.protocol.account.AccountId.Builder> internal__static_bnet_protocol_account_AccountId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_AccountLicense__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountLicense, global::bnet.protocol.account.AccountLicense.Builder> internal__static_bnet_protocol_account_AccountLicense__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_AccountCredential__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountCredential, global::bnet.protocol.account.AccountCredential.Builder> internal__static_bnet_protocol_account_AccountCredential__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_AccountBlob__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountBlob, global::bnet.protocol.account.AccountBlob.Builder> internal__static_bnet_protocol_account_AccountBlob__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_AccountBlobList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountBlobList, global::bnet.protocol.account.AccountBlobList.Builder> internal__static_bnet_protocol_account_AccountBlobList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_GameAccountHandle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.GameAccountHandle, global::bnet.protocol.account.GameAccountHandle.Builder> internal__static_bnet_protocol_account_GameAccountHandle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_GameAccountLink__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.GameAccountLink, global::bnet.protocol.account.GameAccountLink.Builder> internal__static_bnet_protocol_account_GameAccountLink__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_GameAccountBlob__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.GameAccountBlob, global::bnet.protocol.account.GameAccountBlob.Builder> internal__static_bnet_protocol_account_GameAccountBlob__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_GameAccountBlobList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.GameAccountBlobList, global::bnet.protocol.account.GameAccountBlobList.Builder> internal__static_bnet_protocol_account_GameAccountBlobList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_AccountReference__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountReference, global::bnet.protocol.account.AccountReference.Builder> internal__static_bnet_protocol_account_AccountReference__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_Wallet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.Wallet, global::bnet.protocol.account.Wallet.Builder> internal__static_bnet_protocol_account_Wallet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_Wallets__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.Wallets, global::bnet.protocol.account.Wallets.Builder> internal__static_bnet_protocol_account_Wallets__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_account_CurrencyRestriction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.CurrencyRestriction, global::bnet.protocol.account.CurrencyRestriction.Builder> internal__static_bnet_protocol_account_CurrencyRestriction__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static AccountTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChhibmV0L2FjY291bnRfdHlwZXMucHJvdG8SFWJuZXQucHJvdG9jb2wuYWNj" + 
          "b3VudCIXCglBY2NvdW50SWQSCgoCaWQYASACKAciLQoOQWNjb3VudExpY2Vu" + 
          "c2USCgoCaWQYASACKA0SDwoHZXhwaXJlcxgCIAEoBCItChFBY2NvdW50Q3Jl" + 
          "ZGVudGlhbBIKCgJpZBgBIAIoDRIMCgRkYXRhGAIgASgMIs0DCgtBY2NvdW50" + 
          "QmxvYhIKCgJpZBgCIAIoBxIOCgZyZWdpb24YAyACKA0SDQoFZW1haWwYBCAD" + 
          "KAkSDQoFZmxhZ3MYBSACKAQSFgoOc2VjdXJlX3JlbGVhc2UYBiABKAQSFwoP" + 
          "d2hpdGVsaXN0X3N0YXJ0GAcgASgEEhUKDXdoaXRlbGlzdF9lbmQYCCABKAQS" + 
          "EQoJZnVsbF9uYW1lGAogAigJEjcKCGxpY2Vuc2VzGBQgAygLMiUuYm5ldC5w" + 
          "cm90b2NvbC5hY2NvdW50LkFjY291bnRMaWNlbnNlEj0KC2NyZWRlbnRpYWxz" + 
          "GBUgAygLMiguYm5ldC5wcm90b2NvbC5hY2NvdW50LkFjY291bnRDcmVkZW50" + 
          "aWFsEj0KDWFjY291bnRfbGlua3MYFiADKAsyJi5ibmV0LnByb3RvY29sLmFj" + 
          "Y291bnQuR2FtZUFjY291bnRMaW5rEhIKCmJhdHRsZV90YWcYFyABKAkSGAoQ" + 
          "ZGVmYXVsdF9jdXJyZW5jeRgZIAEoBxIUCgxsZWdhbF9yZWdpb24YGiABKA0S" + 
          "FAoMbGVnYWxfbG9jYWxlGBsgASgHEhgKEGNhY2hlX2V4cGlyYXRpb24YHiAC" + 
          "KAQiQwoPQWNjb3VudEJsb2JMaXN0EjAKBGJsb2IYASADKAsyIi5ibmV0LnBy" + 
          "b3RvY29sLmFjY291bnQuQWNjb3VudEJsb2IiQAoRR2FtZUFjY291bnRIYW5k" + 
          "bGUSCgoCaWQYASACKAcSDwoHcHJvZ3JhbRgCIAIoBxIOCgZyZWdpb24YAyAC" + 
          "KA0iXwoPR2FtZUFjY291bnRMaW5rEj4KDGdhbWVfYWNjb3VudBgBIAIoCzIo" + 
          "LmJuZXQucHJvdG9jb2wuYWNjb3VudC5HYW1lQWNjb3VudEhhbmRsZRIMCgRu" + 
          "YW1lGAIgAigJIsgCCg9HYW1lQWNjb3VudEJsb2ISPgoMZ2FtZV9hY2NvdW50" + 
          "GAEgAigLMiguYm5ldC5wcm90b2NvbC5hY2NvdW50LkdhbWVBY2NvdW50SGFu" + 
          "ZGxlEg4KBG5hbWUYAiABKAk6ABIcChFyZWFsbV9wZXJtaXNzaW9ucxgDIAEo" + 
          "DToBMBIOCgZzdGF0dXMYBCACKA0SEAoFZmxhZ3MYBSABKAQ6ATASGAoNYmls" + 
          "bGluZ19mbGFncxgGIAEoDToBMBIYChBjYWNoZV9leHBpcmF0aW9uGAcgAigE" + 
          "Eh8KF3N1YnNjcmlwdGlvbl9leHBpcmF0aW9uGAogASgEEhcKD3VuaXRzX3Jl" + 
          "bWFpbmluZxgLIAEoDRI3CghsaWNlbnNlcxgUIAMoCzIlLmJuZXQucHJvdG9j" + 
          "b2wuYWNjb3VudC5BY2NvdW50TGljZW5zZSJLChNHYW1lQWNjb3VudEJsb2JM" + 
          "aXN0EjQKBGJsb2IYASADKAsyJi5ibmV0LnByb3RvY29sLmFjY291bnQuR2Ft" + 
          "ZUFjY291bnRCbG9iIo4BChBBY2NvdW50UmVmZXJlbmNlEgoKAmlkGAEgASgH" + 
          "Eg0KBWVtYWlsGAIgASgJEjgKBmhhbmRsZRgDIAEoCzIoLmJuZXQucHJvdG9j" + 
          "b2wuYWNjb3VudC5HYW1lQWNjb3VudEhhbmRsZRISCgpiYXR0bGVfdGFnGAQg" + 
          "ASgJEhEKBnJlZ2lvbhgKIAEoDToBMCKcAgoGV2FsbGV0Eg4KBnJlZ2lvbhgB" + 
          "IAIoDRIRCgl3YWxsZXRfaWQYAiACKAQSEwoLd2FsbGV0X3R5cGUYAyACKA0S" + 
          "EwoLZGVzY3JpcHRpb24YBCABKAkSEgoKY291bnRyeV9pZBgFIAIoDRINCgVz" + 
          "dGF0ZRgGIAEoCRIMCgRjaXR5GAcgASgJEhMKC3Bvc3RhbF9jb2RlGAggASgJ" + 
          "EhQKDHBheW1lbnRfaW5mbxgJIAEoDBILCgNiaW4YCiABKAkSEQoJbG9jYWxl" + 
          "X2lkGAsgASgJEg4KBnN0cmVldBgMIAEoCRISCgpmaXJzdF9uYW1lGA0gASgJ" + 
          "EhEKCWxhc3RfbmFtZRgOIAEoCRISCgpiaXJ0aF9kYXRlGA8gASgEIjkKB1dh" + 
          "bGxldHMSLgoHd2FsbGV0cxgBIAMoCzIdLmJuZXQucHJvdG9jb2wuYWNjb3Vu" + 
          "dC5XYWxsZXQiVAoTQ3VycmVuY3lSZXN0cmljdGlvbhIQCghjdXJyZW5jeRgB" + 
          "IAIoCRIZChFhdXRoZW50aWNhdG9yX2NhcBgCIAIoCRIQCghzb2Z0X2NhcBgD" + 
          "IAIoCQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_account_AccountId__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_account_AccountId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountId, global::bnet.protocol.account.AccountId.Builder>(internal__static_bnet_protocol_account_AccountId__Descriptor,
                new string[] { "Id", });
        internal__static_bnet_protocol_account_AccountLicense__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_account_AccountLicense__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountLicense, global::bnet.protocol.account.AccountLicense.Builder>(internal__static_bnet_protocol_account_AccountLicense__Descriptor,
                new string[] { "Id", "Expires", });
        internal__static_bnet_protocol_account_AccountCredential__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_account_AccountCredential__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountCredential, global::bnet.protocol.account.AccountCredential.Builder>(internal__static_bnet_protocol_account_AccountCredential__Descriptor,
                new string[] { "Id", "Data", });
        internal__static_bnet_protocol_account_AccountBlob__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_account_AccountBlob__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountBlob, global::bnet.protocol.account.AccountBlob.Builder>(internal__static_bnet_protocol_account_AccountBlob__Descriptor,
                new string[] { "Id", "Region", "Email", "Flags", "SecureRelease", "WhitelistStart", "WhitelistEnd", "FullName", "Licenses", "Credentials", "AccountLinks", "BattleTag", "DefaultCurrency", "LegalRegion", "LegalLocale", "CacheExpiration", });
        internal__static_bnet_protocol_account_AccountBlobList__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_account_AccountBlobList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountBlobList, global::bnet.protocol.account.AccountBlobList.Builder>(internal__static_bnet_protocol_account_AccountBlobList__Descriptor,
                new string[] { "Blob", });
        internal__static_bnet_protocol_account_GameAccountHandle__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_account_GameAccountHandle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.GameAccountHandle, global::bnet.protocol.account.GameAccountHandle.Builder>(internal__static_bnet_protocol_account_GameAccountHandle__Descriptor,
                new string[] { "Id", "Program", "Region", });
        internal__static_bnet_protocol_account_GameAccountLink__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bnet_protocol_account_GameAccountLink__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.GameAccountLink, global::bnet.protocol.account.GameAccountLink.Builder>(internal__static_bnet_protocol_account_GameAccountLink__Descriptor,
                new string[] { "GameAccount", "Name", });
        internal__static_bnet_protocol_account_GameAccountBlob__Descriptor = Descriptor.MessageTypes[7];
        internal__static_bnet_protocol_account_GameAccountBlob__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.GameAccountBlob, global::bnet.protocol.account.GameAccountBlob.Builder>(internal__static_bnet_protocol_account_GameAccountBlob__Descriptor,
                new string[] { "GameAccount", "Name", "RealmPermissions", "Status", "Flags", "BillingFlags", "CacheExpiration", "SubscriptionExpiration", "UnitsRemaining", "Licenses", });
        internal__static_bnet_protocol_account_GameAccountBlobList__Descriptor = Descriptor.MessageTypes[8];
        internal__static_bnet_protocol_account_GameAccountBlobList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.GameAccountBlobList, global::bnet.protocol.account.GameAccountBlobList.Builder>(internal__static_bnet_protocol_account_GameAccountBlobList__Descriptor,
                new string[] { "Blob", });
        internal__static_bnet_protocol_account_AccountReference__Descriptor = Descriptor.MessageTypes[9];
        internal__static_bnet_protocol_account_AccountReference__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.AccountReference, global::bnet.protocol.account.AccountReference.Builder>(internal__static_bnet_protocol_account_AccountReference__Descriptor,
                new string[] { "Id", "Email", "Handle", "BattleTag", "Region", });
        internal__static_bnet_protocol_account_Wallet__Descriptor = Descriptor.MessageTypes[10];
        internal__static_bnet_protocol_account_Wallet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.Wallet, global::bnet.protocol.account.Wallet.Builder>(internal__static_bnet_protocol_account_Wallet__Descriptor,
                new string[] { "Region", "WalletId", "WalletType", "Description", "CountryId", "State", "City", "PostalCode", "PaymentInfo", "Bin", "LocaleId", "Street", "FirstName", "LastName", "BirthDate", });
        internal__static_bnet_protocol_account_Wallets__Descriptor = Descriptor.MessageTypes[11];
        internal__static_bnet_protocol_account_Wallets__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.Wallets, global::bnet.protocol.account.Wallets.Builder>(internal__static_bnet_protocol_account_Wallets__Descriptor,
                new string[] { "Wallets_", });
        internal__static_bnet_protocol_account_CurrencyRestriction__Descriptor = Descriptor.MessageTypes[12];
        internal__static_bnet_protocol_account_CurrencyRestriction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.account.CurrencyRestriction, global::bnet.protocol.account.CurrencyRestriction.Builder>(internal__static_bnet_protocol_account_CurrencyRestriction__Descriptor,
                new string[] { "Currency", "AuthenticatorCap", "SoftCap", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountId : pb::GeneratedMessage<AccountId, AccountId.Builder> {
    private AccountId() { }
    private static readonly AccountId defaultInstance = new AccountId().MakeReadOnly();
    private static readonly string[] _accountIdFieldNames = new string[] { "id" };
    private static readonly uint[] _accountIdFieldTags = new uint[] { 13 };
    public static AccountId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountId, AccountId.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountId__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountIdFieldNames;
      if (hasId) {
        output.WriteFixed32(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountId result;
      
      private AccountId PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountId original = result;
          result = new AccountId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.AccountId.Descriptor; }
      }
      
      public override AccountId DefaultInstanceForType {
        get { return global::bnet.protocol.account.AccountId.DefaultInstance; }
      }
      
      public override AccountId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountId) {
          return MergeFrom((AccountId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountId other) {
        if (other == global::bnet.protocol.account.AccountId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasId = input.ReadFixed32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static AccountId() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountLicense : pb::GeneratedMessage<AccountLicense, AccountLicense.Builder> {
    private AccountLicense() { }
    private static readonly AccountLicense defaultInstance = new AccountLicense().MakeReadOnly();
    private static readonly string[] _accountLicenseFieldNames = new string[] { "expires", "id" };
    private static readonly uint[] _accountLicenseFieldTags = new uint[] { 16, 8 };
    public static AccountLicense DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountLicense DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountLicense ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountLicense__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountLicense, AccountLicense.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountLicense__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int ExpiresFieldNumber = 2;
    private bool hasExpires;
    private ulong expires_;
    public bool HasExpires {
      get { return hasExpires; }
    }
    public ulong Expires {
      get { return expires_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountLicenseFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[1], Id);
      }
      if (hasExpires) {
        output.WriteUInt64(2, field_names[0], Expires);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
        }
        if (hasExpires) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Expires);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountLicense ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountLicense ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountLicense ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountLicense ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountLicense ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountLicense ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountLicense ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountLicense ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountLicense ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountLicense ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountLicense MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountLicense prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountLicense, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountLicense cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountLicense result;
      
      private AccountLicense PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountLicense original = result;
          result = new AccountLicense();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountLicense MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.AccountLicense.Descriptor; }
      }
      
      public override AccountLicense DefaultInstanceForType {
        get { return global::bnet.protocol.account.AccountLicense.DefaultInstance; }
      }
      
      public override AccountLicense BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountLicense) {
          return MergeFrom((AccountLicense) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountLicense other) {
        if (other == global::bnet.protocol.account.AccountLicense.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasExpires) {
          Expires = other.Expires;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountLicenseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountLicenseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasExpires = input.ReadUInt64(ref result.expires_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasExpires {
        get { return result.hasExpires; }
      }
      public ulong Expires {
        get { return result.Expires; }
        set { SetExpires(value); }
      }
      public Builder SetExpires(ulong value) {
        PrepareBuilder();
        result.hasExpires = true;
        result.expires_ = value;
        return this;
      }
      public Builder ClearExpires() {
        PrepareBuilder();
        result.hasExpires = false;
        result.expires_ = 0UL;
        return this;
      }
    }
    static AccountLicense() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountCredential : pb::GeneratedMessage<AccountCredential, AccountCredential.Builder> {
    private AccountCredential() { }
    private static readonly AccountCredential defaultInstance = new AccountCredential().MakeReadOnly();
    private static readonly string[] _accountCredentialFieldNames = new string[] { "data", "id" };
    private static readonly uint[] _accountCredentialFieldTags = new uint[] { 18, 8 };
    public static AccountCredential DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountCredential DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountCredential ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountCredential__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountCredential, AccountCredential.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountCredential__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountCredentialFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[1], Id);
      }
      if (hasData) {
        output.WriteBytes(2, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountCredential ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountCredential ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountCredential ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountCredential ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountCredential ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountCredential ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountCredential ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountCredential ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountCredential ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountCredential ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountCredential MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountCredential prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountCredential, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountCredential cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountCredential result;
      
      private AccountCredential PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountCredential original = result;
          result = new AccountCredential();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountCredential MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.AccountCredential.Descriptor; }
      }
      
      public override AccountCredential DefaultInstanceForType {
        get { return global::bnet.protocol.account.AccountCredential.DefaultInstance; }
      }
      
      public override AccountCredential BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountCredential) {
          return MergeFrom((AccountCredential) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountCredential other) {
        if (other == global::bnet.protocol.account.AccountCredential.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountCredentialFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountCredentialFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static AccountCredential() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountBlob : pb::GeneratedMessage<AccountBlob, AccountBlob.Builder> {
    private AccountBlob() { }
    private static readonly AccountBlob defaultInstance = new AccountBlob().MakeReadOnly();
    private static readonly string[] _accountBlobFieldNames = new string[] { "account_links", "battle_tag", "cache_expiration", "credentials", "default_currency", "email", "flags", "full_name", "id", "legal_locale", "legal_region", "licenses", "region", "secure_release", "whitelist_end", "whitelist_start" };
    private static readonly uint[] _accountBlobFieldTags = new uint[] { 178, 186, 240, 170, 205, 34, 40, 82, 21, 221, 208, 162, 24, 48, 64, 56 };
    public static AccountBlob DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountBlob DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountBlob ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountBlob__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountBlob, AccountBlob.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountBlob__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int RegionFieldNumber = 3;
    private bool hasRegion;
    private uint region_;
    public bool HasRegion {
      get { return hasRegion; }
    }
    public uint Region {
      get { return region_; }
    }
    
    public const int EmailFieldNumber = 4;
    private pbc::PopsicleList<string> email_ = new pbc::PopsicleList<string>();
    public scg::IList<string> EmailList {
      get { return pbc::Lists.AsReadOnly(email_); }
    }
    public int EmailCount {
      get { return email_.Count; }
    }
    public string GetEmail(int index) {
      return email_[index];
    }
    
    public const int FlagsFieldNumber = 5;
    private bool hasFlags;
    private ulong flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public ulong Flags {
      get { return flags_; }
    }
    
    public const int SecureReleaseFieldNumber = 6;
    private bool hasSecureRelease;
    private ulong secureRelease_;
    public bool HasSecureRelease {
      get { return hasSecureRelease; }
    }
    public ulong SecureRelease {
      get { return secureRelease_; }
    }
    
    public const int WhitelistStartFieldNumber = 7;
    private bool hasWhitelistStart;
    private ulong whitelistStart_;
    public bool HasWhitelistStart {
      get { return hasWhitelistStart; }
    }
    public ulong WhitelistStart {
      get { return whitelistStart_; }
    }
    
    public const int WhitelistEndFieldNumber = 8;
    private bool hasWhitelistEnd;
    private ulong whitelistEnd_;
    public bool HasWhitelistEnd {
      get { return hasWhitelistEnd; }
    }
    public ulong WhitelistEnd {
      get { return whitelistEnd_; }
    }
    
    public const int FullNameFieldNumber = 10;
    private bool hasFullName;
    private string fullName_ = "";
    public bool HasFullName {
      get { return hasFullName; }
    }
    public string FullName {
      get { return fullName_; }
    }
    
    public const int LicensesFieldNumber = 20;
    private pbc::PopsicleList<global::bnet.protocol.account.AccountLicense> licenses_ = new pbc::PopsicleList<global::bnet.protocol.account.AccountLicense>();
    public scg::IList<global::bnet.protocol.account.AccountLicense> LicensesList {
      get { return licenses_; }
    }
    public int LicensesCount {
      get { return licenses_.Count; }
    }
    public global::bnet.protocol.account.AccountLicense GetLicenses(int index) {
      return licenses_[index];
    }
    
    public const int CredentialsFieldNumber = 21;
    private pbc::PopsicleList<global::bnet.protocol.account.AccountCredential> credentials_ = new pbc::PopsicleList<global::bnet.protocol.account.AccountCredential>();
    public scg::IList<global::bnet.protocol.account.AccountCredential> CredentialsList {
      get { return credentials_; }
    }
    public int CredentialsCount {
      get { return credentials_.Count; }
    }
    public global::bnet.protocol.account.AccountCredential GetCredentials(int index) {
      return credentials_[index];
    }
    
    public const int AccountLinksFieldNumber = 22;
    private pbc::PopsicleList<global::bnet.protocol.account.GameAccountLink> accountLinks_ = new pbc::PopsicleList<global::bnet.protocol.account.GameAccountLink>();
    public scg::IList<global::bnet.protocol.account.GameAccountLink> AccountLinksList {
      get { return accountLinks_; }
    }
    public int AccountLinksCount {
      get { return accountLinks_.Count; }
    }
    public global::bnet.protocol.account.GameAccountLink GetAccountLinks(int index) {
      return accountLinks_[index];
    }
    
    public const int BattleTagFieldNumber = 23;
    private bool hasBattleTag;
    private string battleTag_ = "";
    public bool HasBattleTag {
      get { return hasBattleTag; }
    }
    public string BattleTag {
      get { return battleTag_; }
    }
    
    public const int DefaultCurrencyFieldNumber = 25;
    private bool hasDefaultCurrency;
    private uint defaultCurrency_;
    public bool HasDefaultCurrency {
      get { return hasDefaultCurrency; }
    }
    public uint DefaultCurrency {
      get { return defaultCurrency_; }
    }
    
    public const int LegalRegionFieldNumber = 26;
    private bool hasLegalRegion;
    private uint legalRegion_;
    public bool HasLegalRegion {
      get { return hasLegalRegion; }
    }
    public uint LegalRegion {
      get { return legalRegion_; }
    }
    
    public const int LegalLocaleFieldNumber = 27;
    private bool hasLegalLocale;
    private uint legalLocale_;
    public bool HasLegalLocale {
      get { return hasLegalLocale; }
    }
    public uint LegalLocale {
      get { return legalLocale_; }
    }
    
    public const int CacheExpirationFieldNumber = 30;
    private bool hasCacheExpiration;
    private ulong cacheExpiration_;
    public bool HasCacheExpiration {
      get { return hasCacheExpiration; }
    }
    public ulong CacheExpiration {
      get { return cacheExpiration_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasRegion) return false;
        if (!hasFlags) return false;
        if (!hasFullName) return false;
        if (!hasCacheExpiration) return false;
        foreach (global::bnet.protocol.account.AccountLicense element in LicensesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.account.AccountCredential element in CredentialsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.account.GameAccountLink element in AccountLinksList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountBlobFieldNames;
      if (hasId) {
        output.WriteFixed32(2, field_names[8], Id);
      }
      if (hasRegion) {
        output.WriteUInt32(3, field_names[12], Region);
      }
      if (email_.Count > 0) {
        output.WriteStringArray(4, field_names[5], email_);
      }
      if (hasFlags) {
        output.WriteUInt64(5, field_names[6], Flags);
      }
      if (hasSecureRelease) {
        output.WriteUInt64(6, field_names[13], SecureRelease);
      }
      if (hasWhitelistStart) {
        output.WriteUInt64(7, field_names[15], WhitelistStart);
      }
      if (hasWhitelistEnd) {
        output.WriteUInt64(8, field_names[14], WhitelistEnd);
      }
      if (hasFullName) {
        output.WriteString(10, field_names[7], FullName);
      }
      if (licenses_.Count > 0) {
        output.WriteMessageArray(20, field_names[11], licenses_);
      }
      if (credentials_.Count > 0) {
        output.WriteMessageArray(21, field_names[3], credentials_);
      }
      if (accountLinks_.Count > 0) {
        output.WriteMessageArray(22, field_names[0], accountLinks_);
      }
      if (hasBattleTag) {
        output.WriteString(23, field_names[1], BattleTag);
      }
      if (hasDefaultCurrency) {
        output.WriteFixed32(25, field_names[4], DefaultCurrency);
      }
      if (hasLegalRegion) {
        output.WriteUInt32(26, field_names[10], LegalRegion);
      }
      if (hasLegalLocale) {
        output.WriteFixed32(27, field_names[9], LegalLocale);
      }
      if (hasCacheExpiration) {
        output.WriteUInt64(30, field_names[2], CacheExpiration);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, Id);
        }
        if (hasRegion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Region);
        }
        {
          int dataSize = 0;
          foreach (string element in EmailList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * email_.Count;
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt64Size(5, Flags);
        }
        if (hasSecureRelease) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, SecureRelease);
        }
        if (hasWhitelistStart) {
          size += pb::CodedOutputStream.ComputeUInt64Size(7, WhitelistStart);
        }
        if (hasWhitelistEnd) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, WhitelistEnd);
        }
        if (hasFullName) {
          size += pb::CodedOutputStream.ComputeStringSize(10, FullName);
        }
        foreach (global::bnet.protocol.account.AccountLicense element in LicensesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, element);
        }
        foreach (global::bnet.protocol.account.AccountCredential element in CredentialsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, element);
        }
        foreach (global::bnet.protocol.account.GameAccountLink element in AccountLinksList) {
          size += pb::CodedOutputStream.ComputeMessageSize(22, element);
        }
        if (hasBattleTag) {
          size += pb::CodedOutputStream.ComputeStringSize(23, BattleTag);
        }
        if (hasDefaultCurrency) {
          size += pb::CodedOutputStream.ComputeFixed32Size(25, DefaultCurrency);
        }
        if (hasLegalRegion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(26, LegalRegion);
        }
        if (hasLegalLocale) {
          size += pb::CodedOutputStream.ComputeFixed32Size(27, LegalLocale);
        }
        if (hasCacheExpiration) {
          size += pb::CodedOutputStream.ComputeUInt64Size(30, CacheExpiration);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountBlob ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountBlob ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountBlob ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountBlob ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountBlob ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountBlob ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountBlob ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountBlob ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountBlob ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountBlob ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountBlob MakeReadOnly() {
      email_.MakeReadOnly();
      licenses_.MakeReadOnly();
      credentials_.MakeReadOnly();
      accountLinks_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountBlob prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountBlob, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountBlob cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountBlob result;
      
      private AccountBlob PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountBlob original = result;
          result = new AccountBlob();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountBlob MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.AccountBlob.Descriptor; }
      }
      
      public override AccountBlob DefaultInstanceForType {
        get { return global::bnet.protocol.account.AccountBlob.DefaultInstance; }
      }
      
      public override AccountBlob BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountBlob) {
          return MergeFrom((AccountBlob) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountBlob other) {
        if (other == global::bnet.protocol.account.AccountBlob.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasRegion) {
          Region = other.Region;
        }
        if (other.email_.Count != 0) {
          result.email_.Add(other.email_);
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasSecureRelease) {
          SecureRelease = other.SecureRelease;
        }
        if (other.HasWhitelistStart) {
          WhitelistStart = other.WhitelistStart;
        }
        if (other.HasWhitelistEnd) {
          WhitelistEnd = other.WhitelistEnd;
        }
        if (other.HasFullName) {
          FullName = other.FullName;
        }
        if (other.licenses_.Count != 0) {
          result.licenses_.Add(other.licenses_);
        }
        if (other.credentials_.Count != 0) {
          result.credentials_.Add(other.credentials_);
        }
        if (other.accountLinks_.Count != 0) {
          result.accountLinks_.Add(other.accountLinks_);
        }
        if (other.HasBattleTag) {
          BattleTag = other.BattleTag;
        }
        if (other.HasDefaultCurrency) {
          DefaultCurrency = other.DefaultCurrency;
        }
        if (other.HasLegalRegion) {
          LegalRegion = other.LegalRegion;
        }
        if (other.HasLegalLocale) {
          LegalLocale = other.LegalLocale;
        }
        if (other.HasCacheExpiration) {
          CacheExpiration = other.CacheExpiration;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountBlobFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountBlobFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 21: {
              result.hasId = input.ReadFixed32(ref result.id_);
              break;
            }
            case 24: {
              result.hasRegion = input.ReadUInt32(ref result.region_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.email_);
              break;
            }
            case 40: {
              result.hasFlags = input.ReadUInt64(ref result.flags_);
              break;
            }
            case 48: {
              result.hasSecureRelease = input.ReadUInt64(ref result.secureRelease_);
              break;
            }
            case 56: {
              result.hasWhitelistStart = input.ReadUInt64(ref result.whitelistStart_);
              break;
            }
            case 64: {
              result.hasWhitelistEnd = input.ReadUInt64(ref result.whitelistEnd_);
              break;
            }
            case 82: {
              result.hasFullName = input.ReadString(ref result.fullName_);
              break;
            }
            case 162: {
              input.ReadMessageArray(tag, field_name, result.licenses_, global::bnet.protocol.account.AccountLicense.DefaultInstance, extensionRegistry);
              break;
            }
            case 170: {
              input.ReadMessageArray(tag, field_name, result.credentials_, global::bnet.protocol.account.AccountCredential.DefaultInstance, extensionRegistry);
              break;
            }
            case 178: {
              input.ReadMessageArray(tag, field_name, result.accountLinks_, global::bnet.protocol.account.GameAccountLink.DefaultInstance, extensionRegistry);
              break;
            }
            case 186: {
              result.hasBattleTag = input.ReadString(ref result.battleTag_);
              break;
            }
            case 205: {
              result.hasDefaultCurrency = input.ReadFixed32(ref result.defaultCurrency_);
              break;
            }
            case 208: {
              result.hasLegalRegion = input.ReadUInt32(ref result.legalRegion_);
              break;
            }
            case 221: {
              result.hasLegalLocale = input.ReadFixed32(ref result.legalLocale_);
              break;
            }
            case 240: {
              result.hasCacheExpiration = input.ReadUInt64(ref result.cacheExpiration_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasRegion {
        get { return result.hasRegion; }
      }
      public uint Region {
        get { return result.Region; }
        set { SetRegion(value); }
      }
      public Builder SetRegion(uint value) {
        PrepareBuilder();
        result.hasRegion = true;
        result.region_ = value;
        return this;
      }
      public Builder ClearRegion() {
        PrepareBuilder();
        result.hasRegion = false;
        result.region_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> EmailList {
        get { return PrepareBuilder().email_; }
      }
      public int EmailCount {
        get { return result.EmailCount; }
      }
      public string GetEmail(int index) {
        return result.GetEmail(index);
      }
      public Builder SetEmail(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.email_[index] = value;
        return this;
      }
      public Builder AddEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.email_.Add(value);
        return this;
      }
      public Builder AddRangeEmail(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.email_.Add(values);
        return this;
      }
      public Builder ClearEmail() {
        PrepareBuilder();
        result.email_.Clear();
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public ulong Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(ulong value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0UL;
        return this;
      }
      
      public bool HasSecureRelease {
        get { return result.hasSecureRelease; }
      }
      public ulong SecureRelease {
        get { return result.SecureRelease; }
        set { SetSecureRelease(value); }
      }
      public Builder SetSecureRelease(ulong value) {
        PrepareBuilder();
        result.hasSecureRelease = true;
        result.secureRelease_ = value;
        return this;
      }
      public Builder ClearSecureRelease() {
        PrepareBuilder();
        result.hasSecureRelease = false;
        result.secureRelease_ = 0UL;
        return this;
      }
      
      public bool HasWhitelistStart {
        get { return result.hasWhitelistStart; }
      }
      public ulong WhitelistStart {
        get { return result.WhitelistStart; }
        set { SetWhitelistStart(value); }
      }
      public Builder SetWhitelistStart(ulong value) {
        PrepareBuilder();
        result.hasWhitelistStart = true;
        result.whitelistStart_ = value;
        return this;
      }
      public Builder ClearWhitelistStart() {
        PrepareBuilder();
        result.hasWhitelistStart = false;
        result.whitelistStart_ = 0UL;
        return this;
      }
      
      public bool HasWhitelistEnd {
        get { return result.hasWhitelistEnd; }
      }
      public ulong WhitelistEnd {
        get { return result.WhitelistEnd; }
        set { SetWhitelistEnd(value); }
      }
      public Builder SetWhitelistEnd(ulong value) {
        PrepareBuilder();
        result.hasWhitelistEnd = true;
        result.whitelistEnd_ = value;
        return this;
      }
      public Builder ClearWhitelistEnd() {
        PrepareBuilder();
        result.hasWhitelistEnd = false;
        result.whitelistEnd_ = 0UL;
        return this;
      }
      
      public bool HasFullName {
        get { return result.hasFullName; }
      }
      public string FullName {
        get { return result.FullName; }
        set { SetFullName(value); }
      }
      public Builder SetFullName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFullName = true;
        result.fullName_ = value;
        return this;
      }
      public Builder ClearFullName() {
        PrepareBuilder();
        result.hasFullName = false;
        result.fullName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.account.AccountLicense> LicensesList {
        get { return PrepareBuilder().licenses_; }
      }
      public int LicensesCount {
        get { return result.LicensesCount; }
      }
      public global::bnet.protocol.account.AccountLicense GetLicenses(int index) {
        return result.GetLicenses(index);
      }
      public Builder SetLicenses(int index, global::bnet.protocol.account.AccountLicense value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.licenses_[index] = value;
        return this;
      }
      public Builder SetLicenses(int index, global::bnet.protocol.account.AccountLicense.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.licenses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLicenses(global::bnet.protocol.account.AccountLicense value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.licenses_.Add(value);
        return this;
      }
      public Builder AddLicenses(global::bnet.protocol.account.AccountLicense.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.licenses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLicenses(scg::IEnumerable<global::bnet.protocol.account.AccountLicense> values) {
        PrepareBuilder();
        result.licenses_.Add(values);
        return this;
      }
      public Builder ClearLicenses() {
        PrepareBuilder();
        result.licenses_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.account.AccountCredential> CredentialsList {
        get { return PrepareBuilder().credentials_; }
      }
      public int CredentialsCount {
        get { return result.CredentialsCount; }
      }
      public global::bnet.protocol.account.AccountCredential GetCredentials(int index) {
        return result.GetCredentials(index);
      }
      public Builder SetCredentials(int index, global::bnet.protocol.account.AccountCredential value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.credentials_[index] = value;
        return this;
      }
      public Builder SetCredentials(int index, global::bnet.protocol.account.AccountCredential.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.credentials_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCredentials(global::bnet.protocol.account.AccountCredential value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.credentials_.Add(value);
        return this;
      }
      public Builder AddCredentials(global::bnet.protocol.account.AccountCredential.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.credentials_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCredentials(scg::IEnumerable<global::bnet.protocol.account.AccountCredential> values) {
        PrepareBuilder();
        result.credentials_.Add(values);
        return this;
      }
      public Builder ClearCredentials() {
        PrepareBuilder();
        result.credentials_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.account.GameAccountLink> AccountLinksList {
        get { return PrepareBuilder().accountLinks_; }
      }
      public int AccountLinksCount {
        get { return result.AccountLinksCount; }
      }
      public global::bnet.protocol.account.GameAccountLink GetAccountLinks(int index) {
        return result.GetAccountLinks(index);
      }
      public Builder SetAccountLinks(int index, global::bnet.protocol.account.GameAccountLink value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.accountLinks_[index] = value;
        return this;
      }
      public Builder SetAccountLinks(int index, global::bnet.protocol.account.GameAccountLink.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.accountLinks_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAccountLinks(global::bnet.protocol.account.GameAccountLink value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.accountLinks_.Add(value);
        return this;
      }
      public Builder AddAccountLinks(global::bnet.protocol.account.GameAccountLink.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.accountLinks_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAccountLinks(scg::IEnumerable<global::bnet.protocol.account.GameAccountLink> values) {
        PrepareBuilder();
        result.accountLinks_.Add(values);
        return this;
      }
      public Builder ClearAccountLinks() {
        PrepareBuilder();
        result.accountLinks_.Clear();
        return this;
      }
      
      public bool HasBattleTag {
        get { return result.hasBattleTag; }
      }
      public string BattleTag {
        get { return result.BattleTag; }
        set { SetBattleTag(value); }
      }
      public Builder SetBattleTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleTag = true;
        result.battleTag_ = value;
        return this;
      }
      public Builder ClearBattleTag() {
        PrepareBuilder();
        result.hasBattleTag = false;
        result.battleTag_ = "";
        return this;
      }
      
      public bool HasDefaultCurrency {
        get { return result.hasDefaultCurrency; }
      }
      public uint DefaultCurrency {
        get { return result.DefaultCurrency; }
        set { SetDefaultCurrency(value); }
      }
      public Builder SetDefaultCurrency(uint value) {
        PrepareBuilder();
        result.hasDefaultCurrency = true;
        result.defaultCurrency_ = value;
        return this;
      }
      public Builder ClearDefaultCurrency() {
        PrepareBuilder();
        result.hasDefaultCurrency = false;
        result.defaultCurrency_ = 0;
        return this;
      }
      
      public bool HasLegalRegion {
        get { return result.hasLegalRegion; }
      }
      public uint LegalRegion {
        get { return result.LegalRegion; }
        set { SetLegalRegion(value); }
      }
      public Builder SetLegalRegion(uint value) {
        PrepareBuilder();
        result.hasLegalRegion = true;
        result.legalRegion_ = value;
        return this;
      }
      public Builder ClearLegalRegion() {
        PrepareBuilder();
        result.hasLegalRegion = false;
        result.legalRegion_ = 0;
        return this;
      }
      
      public bool HasLegalLocale {
        get { return result.hasLegalLocale; }
      }
      public uint LegalLocale {
        get { return result.LegalLocale; }
        set { SetLegalLocale(value); }
      }
      public Builder SetLegalLocale(uint value) {
        PrepareBuilder();
        result.hasLegalLocale = true;
        result.legalLocale_ = value;
        return this;
      }
      public Builder ClearLegalLocale() {
        PrepareBuilder();
        result.hasLegalLocale = false;
        result.legalLocale_ = 0;
        return this;
      }
      
      public bool HasCacheExpiration {
        get { return result.hasCacheExpiration; }
      }
      public ulong CacheExpiration {
        get { return result.CacheExpiration; }
        set { SetCacheExpiration(value); }
      }
      public Builder SetCacheExpiration(ulong value) {
        PrepareBuilder();
        result.hasCacheExpiration = true;
        result.cacheExpiration_ = value;
        return this;
      }
      public Builder ClearCacheExpiration() {
        PrepareBuilder();
        result.hasCacheExpiration = false;
        result.cacheExpiration_ = 0UL;
        return this;
      }
    }
    static AccountBlob() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountBlobList : pb::GeneratedMessage<AccountBlobList, AccountBlobList.Builder> {
    private AccountBlobList() { }
    private static readonly AccountBlobList defaultInstance = new AccountBlobList().MakeReadOnly();
    private static readonly string[] _accountBlobListFieldNames = new string[] { "blob" };
    private static readonly uint[] _accountBlobListFieldTags = new uint[] { 10 };
    public static AccountBlobList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountBlobList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountBlobList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountBlobList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountBlobList, AccountBlobList.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountBlobList__FieldAccessorTable; }
    }
    
    public const int BlobFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.account.AccountBlob> blob_ = new pbc::PopsicleList<global::bnet.protocol.account.AccountBlob>();
    public scg::IList<global::bnet.protocol.account.AccountBlob> BlobList {
      get { return blob_; }
    }
    public int BlobCount {
      get { return blob_.Count; }
    }
    public global::bnet.protocol.account.AccountBlob GetBlob(int index) {
      return blob_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.account.AccountBlob element in BlobList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountBlobListFieldNames;
      if (blob_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], blob_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.account.AccountBlob element in BlobList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountBlobList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountBlobList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountBlobList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountBlobList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountBlobList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountBlobList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountBlobList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountBlobList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountBlobList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountBlobList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountBlobList MakeReadOnly() {
      blob_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountBlobList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountBlobList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountBlobList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountBlobList result;
      
      private AccountBlobList PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountBlobList original = result;
          result = new AccountBlobList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountBlobList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.AccountBlobList.Descriptor; }
      }
      
      public override AccountBlobList DefaultInstanceForType {
        get { return global::bnet.protocol.account.AccountBlobList.DefaultInstance; }
      }
      
      public override AccountBlobList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountBlobList) {
          return MergeFrom((AccountBlobList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountBlobList other) {
        if (other == global::bnet.protocol.account.AccountBlobList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.blob_.Count != 0) {
          result.blob_.Add(other.blob_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountBlobListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountBlobListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.blob_, global::bnet.protocol.account.AccountBlob.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.account.AccountBlob> BlobList {
        get { return PrepareBuilder().blob_; }
      }
      public int BlobCount {
        get { return result.BlobCount; }
      }
      public global::bnet.protocol.account.AccountBlob GetBlob(int index) {
        return result.GetBlob(index);
      }
      public Builder SetBlob(int index, global::bnet.protocol.account.AccountBlob value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.blob_[index] = value;
        return this;
      }
      public Builder SetBlob(int index, global::bnet.protocol.account.AccountBlob.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.blob_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBlob(global::bnet.protocol.account.AccountBlob value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.blob_.Add(value);
        return this;
      }
      public Builder AddBlob(global::bnet.protocol.account.AccountBlob.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.blob_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBlob(scg::IEnumerable<global::bnet.protocol.account.AccountBlob> values) {
        PrepareBuilder();
        result.blob_.Add(values);
        return this;
      }
      public Builder ClearBlob() {
        PrepareBuilder();
        result.blob_.Clear();
        return this;
      }
    }
    static AccountBlobList() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameAccountHandle : pb::GeneratedMessage<GameAccountHandle, GameAccountHandle.Builder> {
    private GameAccountHandle() { }
    private static readonly GameAccountHandle defaultInstance = new GameAccountHandle().MakeReadOnly();
    private static readonly string[] _gameAccountHandleFieldNames = new string[] { "id", "program", "region" };
    private static readonly uint[] _gameAccountHandleFieldTags = new uint[] { 13, 21, 24 };
    public static GameAccountHandle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameAccountHandle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameAccountHandle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_GameAccountHandle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameAccountHandle, GameAccountHandle.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_GameAccountHandle__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int ProgramFieldNumber = 2;
    private bool hasProgram;
    private uint program_;
    public bool HasProgram {
      get { return hasProgram; }
    }
    public uint Program {
      get { return program_; }
    }
    
    public const int RegionFieldNumber = 3;
    private bool hasRegion;
    private uint region_;
    public bool HasRegion {
      get { return hasRegion; }
    }
    public uint Region {
      get { return region_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasProgram) return false;
        if (!hasRegion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameAccountHandleFieldNames;
      if (hasId) {
        output.WriteFixed32(1, field_names[0], Id);
      }
      if (hasProgram) {
        output.WriteFixed32(2, field_names[1], Program);
      }
      if (hasRegion) {
        output.WriteUInt32(3, field_names[2], Region);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Id);
        }
        if (hasProgram) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, Program);
        }
        if (hasRegion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Region);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameAccountHandle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameAccountHandle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameAccountHandle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameAccountHandle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameAccountHandle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameAccountHandle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameAccountHandle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameAccountHandle result;
      
      private GameAccountHandle PrepareBuilder() {
        if (resultIsReadOnly) {
          GameAccountHandle original = result;
          result = new GameAccountHandle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameAccountHandle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.GameAccountHandle.Descriptor; }
      }
      
      public override GameAccountHandle DefaultInstanceForType {
        get { return global::bnet.protocol.account.GameAccountHandle.DefaultInstance; }
      }
      
      public override GameAccountHandle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameAccountHandle) {
          return MergeFrom((GameAccountHandle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameAccountHandle other) {
        if (other == global::bnet.protocol.account.GameAccountHandle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasProgram) {
          Program = other.Program;
        }
        if (other.HasRegion) {
          Region = other.Region;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameAccountHandleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameAccountHandleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasId = input.ReadFixed32(ref result.id_);
              break;
            }
            case 21: {
              result.hasProgram = input.ReadFixed32(ref result.program_);
              break;
            }
            case 24: {
              result.hasRegion = input.ReadUInt32(ref result.region_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasProgram {
        get { return result.hasProgram; }
      }
      public uint Program {
        get { return result.Program; }
        set { SetProgram(value); }
      }
      public Builder SetProgram(uint value) {
        PrepareBuilder();
        result.hasProgram = true;
        result.program_ = value;
        return this;
      }
      public Builder ClearProgram() {
        PrepareBuilder();
        result.hasProgram = false;
        result.program_ = 0;
        return this;
      }
      
      public bool HasRegion {
        get { return result.hasRegion; }
      }
      public uint Region {
        get { return result.Region; }
        set { SetRegion(value); }
      }
      public Builder SetRegion(uint value) {
        PrepareBuilder();
        result.hasRegion = true;
        result.region_ = value;
        return this;
      }
      public Builder ClearRegion() {
        PrepareBuilder();
        result.hasRegion = false;
        result.region_ = 0;
        return this;
      }
    }
    static GameAccountHandle() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameAccountLink : pb::GeneratedMessage<GameAccountLink, GameAccountLink.Builder> {
    private GameAccountLink() { }
    private static readonly GameAccountLink defaultInstance = new GameAccountLink().MakeReadOnly();
    private static readonly string[] _gameAccountLinkFieldNames = new string[] { "game_account", "name" };
    private static readonly uint[] _gameAccountLinkFieldTags = new uint[] { 10, 18 };
    public static GameAccountLink DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameAccountLink DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameAccountLink ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_GameAccountLink__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameAccountLink, GameAccountLink.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_GameAccountLink__FieldAccessorTable; }
    }
    
    public const int GameAccountFieldNumber = 1;
    private bool hasGameAccount;
    private global::bnet.protocol.account.GameAccountHandle gameAccount_;
    public bool HasGameAccount {
      get { return hasGameAccount; }
    }
    public global::bnet.protocol.account.GameAccountHandle GameAccount {
      get { return gameAccount_ ?? global::bnet.protocol.account.GameAccountHandle.DefaultInstance; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccount) return false;
        if (!hasName) return false;
        if (!GameAccount.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameAccountLinkFieldNames;
      if (hasGameAccount) {
        output.WriteMessage(1, field_names[0], GameAccount);
      }
      if (hasName) {
        output.WriteString(2, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccount) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GameAccount);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameAccountLink ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountLink ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountLink ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountLink ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountLink ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountLink ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameAccountLink ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameAccountLink ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameAccountLink ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountLink ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameAccountLink MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameAccountLink prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameAccountLink, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameAccountLink cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameAccountLink result;
      
      private GameAccountLink PrepareBuilder() {
        if (resultIsReadOnly) {
          GameAccountLink original = result;
          result = new GameAccountLink();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameAccountLink MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.GameAccountLink.Descriptor; }
      }
      
      public override GameAccountLink DefaultInstanceForType {
        get { return global::bnet.protocol.account.GameAccountLink.DefaultInstance; }
      }
      
      public override GameAccountLink BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameAccountLink) {
          return MergeFrom((GameAccountLink) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameAccountLink other) {
        if (other == global::bnet.protocol.account.GameAccountLink.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccount) {
          MergeGameAccount(other.GameAccount);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameAccountLinkFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameAccountLinkFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.account.GameAccountHandle.Builder subBuilder = global::bnet.protocol.account.GameAccountHandle.CreateBuilder();
              if (result.hasGameAccount) {
                subBuilder.MergeFrom(GameAccount);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccount = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccount {
       get { return result.hasGameAccount; }
      }
      public global::bnet.protocol.account.GameAccountHandle GameAccount {
        get { return result.GameAccount; }
        set { SetGameAccount(value); }
      }
      public Builder SetGameAccount(global::bnet.protocol.account.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccount = true;
        result.gameAccount_ = value;
        return this;
      }
      public Builder SetGameAccount(global::bnet.protocol.account.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccount = true;
        result.gameAccount_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccount(global::bnet.protocol.account.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccount &&
            result.gameAccount_ != global::bnet.protocol.account.GameAccountHandle.DefaultInstance) {
            result.gameAccount_ = global::bnet.protocol.account.GameAccountHandle.CreateBuilder(result.gameAccount_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccount_ = value;
        }
        result.hasGameAccount = true;
        return this;
      }
      public Builder ClearGameAccount() {
        PrepareBuilder();
        result.hasGameAccount = false;
        result.gameAccount_ = null;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static GameAccountLink() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameAccountBlob : pb::GeneratedMessage<GameAccountBlob, GameAccountBlob.Builder> {
    private GameAccountBlob() { }
    private static readonly GameAccountBlob defaultInstance = new GameAccountBlob().MakeReadOnly();
    private static readonly string[] _gameAccountBlobFieldNames = new string[] { "billing_flags", "cache_expiration", "flags", "game_account", "licenses", "name", "realm_permissions", "status", "subscription_expiration", "units_remaining" };
    private static readonly uint[] _gameAccountBlobFieldTags = new uint[] { 48, 56, 40, 10, 162, 18, 24, 32, 80, 88 };
    public static GameAccountBlob DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameAccountBlob DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameAccountBlob ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_GameAccountBlob__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameAccountBlob, GameAccountBlob.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_GameAccountBlob__FieldAccessorTable; }
    }
    
    public const int GameAccountFieldNumber = 1;
    private bool hasGameAccount;
    private global::bnet.protocol.account.GameAccountHandle gameAccount_;
    public bool HasGameAccount {
      get { return hasGameAccount; }
    }
    public global::bnet.protocol.account.GameAccountHandle GameAccount {
      get { return gameAccount_ ?? global::bnet.protocol.account.GameAccountHandle.DefaultInstance; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int RealmPermissionsFieldNumber = 3;
    private bool hasRealmPermissions;
    private uint realmPermissions_;
    public bool HasRealmPermissions {
      get { return hasRealmPermissions; }
    }
    public uint RealmPermissions {
      get { return realmPermissions_; }
    }
    
    public const int StatusFieldNumber = 4;
    private bool hasStatus;
    private uint status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public uint Status {
      get { return status_; }
    }
    
    public const int FlagsFieldNumber = 5;
    private bool hasFlags;
    private ulong flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public ulong Flags {
      get { return flags_; }
    }
    
    public const int BillingFlagsFieldNumber = 6;
    private bool hasBillingFlags;
    private uint billingFlags_;
    public bool HasBillingFlags {
      get { return hasBillingFlags; }
    }
    public uint BillingFlags {
      get { return billingFlags_; }
    }
    
    public const int CacheExpirationFieldNumber = 7;
    private bool hasCacheExpiration;
    private ulong cacheExpiration_;
    public bool HasCacheExpiration {
      get { return hasCacheExpiration; }
    }
    public ulong CacheExpiration {
      get { return cacheExpiration_; }
    }
    
    public const int SubscriptionExpirationFieldNumber = 10;
    private bool hasSubscriptionExpiration;
    private ulong subscriptionExpiration_;
    public bool HasSubscriptionExpiration {
      get { return hasSubscriptionExpiration; }
    }
    public ulong SubscriptionExpiration {
      get { return subscriptionExpiration_; }
    }
    
    public const int UnitsRemainingFieldNumber = 11;
    private bool hasUnitsRemaining;
    private uint unitsRemaining_;
    public bool HasUnitsRemaining {
      get { return hasUnitsRemaining; }
    }
    public uint UnitsRemaining {
      get { return unitsRemaining_; }
    }
    
    public const int LicensesFieldNumber = 20;
    private pbc::PopsicleList<global::bnet.protocol.account.AccountLicense> licenses_ = new pbc::PopsicleList<global::bnet.protocol.account.AccountLicense>();
    public scg::IList<global::bnet.protocol.account.AccountLicense> LicensesList {
      get { return licenses_; }
    }
    public int LicensesCount {
      get { return licenses_.Count; }
    }
    public global::bnet.protocol.account.AccountLicense GetLicenses(int index) {
      return licenses_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccount) return false;
        if (!hasStatus) return false;
        if (!hasCacheExpiration) return false;
        if (!GameAccount.IsInitialized) return false;
        foreach (global::bnet.protocol.account.AccountLicense element in LicensesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameAccountBlobFieldNames;
      if (hasGameAccount) {
        output.WriteMessage(1, field_names[3], GameAccount);
      }
      if (hasName) {
        output.WriteString(2, field_names[5], Name);
      }
      if (hasRealmPermissions) {
        output.WriteUInt32(3, field_names[6], RealmPermissions);
      }
      if (hasStatus) {
        output.WriteUInt32(4, field_names[7], Status);
      }
      if (hasFlags) {
        output.WriteUInt64(5, field_names[2], Flags);
      }
      if (hasBillingFlags) {
        output.WriteUInt32(6, field_names[0], BillingFlags);
      }
      if (hasCacheExpiration) {
        output.WriteUInt64(7, field_names[1], CacheExpiration);
      }
      if (hasSubscriptionExpiration) {
        output.WriteUInt64(10, field_names[8], SubscriptionExpiration);
      }
      if (hasUnitsRemaining) {
        output.WriteUInt32(11, field_names[9], UnitsRemaining);
      }
      if (licenses_.Count > 0) {
        output.WriteMessageArray(20, field_names[4], licenses_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccount) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GameAccount);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasRealmPermissions) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, RealmPermissions);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Status);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt64Size(5, Flags);
        }
        if (hasBillingFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, BillingFlags);
        }
        if (hasCacheExpiration) {
          size += pb::CodedOutputStream.ComputeUInt64Size(7, CacheExpiration);
        }
        if (hasSubscriptionExpiration) {
          size += pb::CodedOutputStream.ComputeUInt64Size(10, SubscriptionExpiration);
        }
        if (hasUnitsRemaining) {
          size += pb::CodedOutputStream.ComputeUInt32Size(11, UnitsRemaining);
        }
        foreach (global::bnet.protocol.account.AccountLicense element in LicensesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameAccountBlob ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountBlob ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountBlob ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountBlob ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountBlob ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountBlob ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameAccountBlob ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameAccountBlob ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameAccountBlob ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountBlob ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameAccountBlob MakeReadOnly() {
      licenses_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameAccountBlob prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameAccountBlob, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameAccountBlob cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameAccountBlob result;
      
      private GameAccountBlob PrepareBuilder() {
        if (resultIsReadOnly) {
          GameAccountBlob original = result;
          result = new GameAccountBlob();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameAccountBlob MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.GameAccountBlob.Descriptor; }
      }
      
      public override GameAccountBlob DefaultInstanceForType {
        get { return global::bnet.protocol.account.GameAccountBlob.DefaultInstance; }
      }
      
      public override GameAccountBlob BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameAccountBlob) {
          return MergeFrom((GameAccountBlob) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameAccountBlob other) {
        if (other == global::bnet.protocol.account.GameAccountBlob.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccount) {
          MergeGameAccount(other.GameAccount);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasRealmPermissions) {
          RealmPermissions = other.RealmPermissions;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasBillingFlags) {
          BillingFlags = other.BillingFlags;
        }
        if (other.HasCacheExpiration) {
          CacheExpiration = other.CacheExpiration;
        }
        if (other.HasSubscriptionExpiration) {
          SubscriptionExpiration = other.SubscriptionExpiration;
        }
        if (other.HasUnitsRemaining) {
          UnitsRemaining = other.UnitsRemaining;
        }
        if (other.licenses_.Count != 0) {
          result.licenses_.Add(other.licenses_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameAccountBlobFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameAccountBlobFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.account.GameAccountHandle.Builder subBuilder = global::bnet.protocol.account.GameAccountHandle.CreateBuilder();
              if (result.hasGameAccount) {
                subBuilder.MergeFrom(GameAccount);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccount = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasRealmPermissions = input.ReadUInt32(ref result.realmPermissions_);
              break;
            }
            case 32: {
              result.hasStatus = input.ReadUInt32(ref result.status_);
              break;
            }
            case 40: {
              result.hasFlags = input.ReadUInt64(ref result.flags_);
              break;
            }
            case 48: {
              result.hasBillingFlags = input.ReadUInt32(ref result.billingFlags_);
              break;
            }
            case 56: {
              result.hasCacheExpiration = input.ReadUInt64(ref result.cacheExpiration_);
              break;
            }
            case 80: {
              result.hasSubscriptionExpiration = input.ReadUInt64(ref result.subscriptionExpiration_);
              break;
            }
            case 88: {
              result.hasUnitsRemaining = input.ReadUInt32(ref result.unitsRemaining_);
              break;
            }
            case 162: {
              input.ReadMessageArray(tag, field_name, result.licenses_, global::bnet.protocol.account.AccountLicense.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccount {
       get { return result.hasGameAccount; }
      }
      public global::bnet.protocol.account.GameAccountHandle GameAccount {
        get { return result.GameAccount; }
        set { SetGameAccount(value); }
      }
      public Builder SetGameAccount(global::bnet.protocol.account.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccount = true;
        result.gameAccount_ = value;
        return this;
      }
      public Builder SetGameAccount(global::bnet.protocol.account.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccount = true;
        result.gameAccount_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccount(global::bnet.protocol.account.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccount &&
            result.gameAccount_ != global::bnet.protocol.account.GameAccountHandle.DefaultInstance) {
            result.gameAccount_ = global::bnet.protocol.account.GameAccountHandle.CreateBuilder(result.gameAccount_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccount_ = value;
        }
        result.hasGameAccount = true;
        return this;
      }
      public Builder ClearGameAccount() {
        PrepareBuilder();
        result.hasGameAccount = false;
        result.gameAccount_ = null;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasRealmPermissions {
        get { return result.hasRealmPermissions; }
      }
      public uint RealmPermissions {
        get { return result.RealmPermissions; }
        set { SetRealmPermissions(value); }
      }
      public Builder SetRealmPermissions(uint value) {
        PrepareBuilder();
        result.hasRealmPermissions = true;
        result.realmPermissions_ = value;
        return this;
      }
      public Builder ClearRealmPermissions() {
        PrepareBuilder();
        result.hasRealmPermissions = false;
        result.realmPermissions_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public uint Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(uint value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public ulong Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(ulong value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0UL;
        return this;
      }
      
      public bool HasBillingFlags {
        get { return result.hasBillingFlags; }
      }
      public uint BillingFlags {
        get { return result.BillingFlags; }
        set { SetBillingFlags(value); }
      }
      public Builder SetBillingFlags(uint value) {
        PrepareBuilder();
        result.hasBillingFlags = true;
        result.billingFlags_ = value;
        return this;
      }
      public Builder ClearBillingFlags() {
        PrepareBuilder();
        result.hasBillingFlags = false;
        result.billingFlags_ = 0;
        return this;
      }
      
      public bool HasCacheExpiration {
        get { return result.hasCacheExpiration; }
      }
      public ulong CacheExpiration {
        get { return result.CacheExpiration; }
        set { SetCacheExpiration(value); }
      }
      public Builder SetCacheExpiration(ulong value) {
        PrepareBuilder();
        result.hasCacheExpiration = true;
        result.cacheExpiration_ = value;
        return this;
      }
      public Builder ClearCacheExpiration() {
        PrepareBuilder();
        result.hasCacheExpiration = false;
        result.cacheExpiration_ = 0UL;
        return this;
      }
      
      public bool HasSubscriptionExpiration {
        get { return result.hasSubscriptionExpiration; }
      }
      public ulong SubscriptionExpiration {
        get { return result.SubscriptionExpiration; }
        set { SetSubscriptionExpiration(value); }
      }
      public Builder SetSubscriptionExpiration(ulong value) {
        PrepareBuilder();
        result.hasSubscriptionExpiration = true;
        result.subscriptionExpiration_ = value;
        return this;
      }
      public Builder ClearSubscriptionExpiration() {
        PrepareBuilder();
        result.hasSubscriptionExpiration = false;
        result.subscriptionExpiration_ = 0UL;
        return this;
      }
      
      public bool HasUnitsRemaining {
        get { return result.hasUnitsRemaining; }
      }
      public uint UnitsRemaining {
        get { return result.UnitsRemaining; }
        set { SetUnitsRemaining(value); }
      }
      public Builder SetUnitsRemaining(uint value) {
        PrepareBuilder();
        result.hasUnitsRemaining = true;
        result.unitsRemaining_ = value;
        return this;
      }
      public Builder ClearUnitsRemaining() {
        PrepareBuilder();
        result.hasUnitsRemaining = false;
        result.unitsRemaining_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.account.AccountLicense> LicensesList {
        get { return PrepareBuilder().licenses_; }
      }
      public int LicensesCount {
        get { return result.LicensesCount; }
      }
      public global::bnet.protocol.account.AccountLicense GetLicenses(int index) {
        return result.GetLicenses(index);
      }
      public Builder SetLicenses(int index, global::bnet.protocol.account.AccountLicense value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.licenses_[index] = value;
        return this;
      }
      public Builder SetLicenses(int index, global::bnet.protocol.account.AccountLicense.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.licenses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLicenses(global::bnet.protocol.account.AccountLicense value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.licenses_.Add(value);
        return this;
      }
      public Builder AddLicenses(global::bnet.protocol.account.AccountLicense.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.licenses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLicenses(scg::IEnumerable<global::bnet.protocol.account.AccountLicense> values) {
        PrepareBuilder();
        result.licenses_.Add(values);
        return this;
      }
      public Builder ClearLicenses() {
        PrepareBuilder();
        result.licenses_.Clear();
        return this;
      }
    }
    static GameAccountBlob() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameAccountBlobList : pb::GeneratedMessage<GameAccountBlobList, GameAccountBlobList.Builder> {
    private GameAccountBlobList() { }
    private static readonly GameAccountBlobList defaultInstance = new GameAccountBlobList().MakeReadOnly();
    private static readonly string[] _gameAccountBlobListFieldNames = new string[] { "blob" };
    private static readonly uint[] _gameAccountBlobListFieldTags = new uint[] { 10 };
    public static GameAccountBlobList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameAccountBlobList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameAccountBlobList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_GameAccountBlobList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameAccountBlobList, GameAccountBlobList.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_GameAccountBlobList__FieldAccessorTable; }
    }
    
    public const int BlobFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.account.GameAccountBlob> blob_ = new pbc::PopsicleList<global::bnet.protocol.account.GameAccountBlob>();
    public scg::IList<global::bnet.protocol.account.GameAccountBlob> BlobList {
      get { return blob_; }
    }
    public int BlobCount {
      get { return blob_.Count; }
    }
    public global::bnet.protocol.account.GameAccountBlob GetBlob(int index) {
      return blob_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.account.GameAccountBlob element in BlobList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameAccountBlobListFieldNames;
      if (blob_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], blob_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.account.GameAccountBlob element in BlobList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameAccountBlobList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountBlobList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountBlobList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountBlobList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountBlobList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountBlobList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameAccountBlobList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameAccountBlobList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameAccountBlobList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountBlobList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameAccountBlobList MakeReadOnly() {
      blob_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameAccountBlobList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameAccountBlobList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameAccountBlobList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameAccountBlobList result;
      
      private GameAccountBlobList PrepareBuilder() {
        if (resultIsReadOnly) {
          GameAccountBlobList original = result;
          result = new GameAccountBlobList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameAccountBlobList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.GameAccountBlobList.Descriptor; }
      }
      
      public override GameAccountBlobList DefaultInstanceForType {
        get { return global::bnet.protocol.account.GameAccountBlobList.DefaultInstance; }
      }
      
      public override GameAccountBlobList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameAccountBlobList) {
          return MergeFrom((GameAccountBlobList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameAccountBlobList other) {
        if (other == global::bnet.protocol.account.GameAccountBlobList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.blob_.Count != 0) {
          result.blob_.Add(other.blob_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameAccountBlobListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameAccountBlobListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.blob_, global::bnet.protocol.account.GameAccountBlob.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.account.GameAccountBlob> BlobList {
        get { return PrepareBuilder().blob_; }
      }
      public int BlobCount {
        get { return result.BlobCount; }
      }
      public global::bnet.protocol.account.GameAccountBlob GetBlob(int index) {
        return result.GetBlob(index);
      }
      public Builder SetBlob(int index, global::bnet.protocol.account.GameAccountBlob value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.blob_[index] = value;
        return this;
      }
      public Builder SetBlob(int index, global::bnet.protocol.account.GameAccountBlob.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.blob_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBlob(global::bnet.protocol.account.GameAccountBlob value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.blob_.Add(value);
        return this;
      }
      public Builder AddBlob(global::bnet.protocol.account.GameAccountBlob.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.blob_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBlob(scg::IEnumerable<global::bnet.protocol.account.GameAccountBlob> values) {
        PrepareBuilder();
        result.blob_.Add(values);
        return this;
      }
      public Builder ClearBlob() {
        PrepareBuilder();
        result.blob_.Clear();
        return this;
      }
    }
    static GameAccountBlobList() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountReference : pb::GeneratedMessage<AccountReference, AccountReference.Builder> {
    private AccountReference() { }
    private static readonly AccountReference defaultInstance = new AccountReference().MakeReadOnly();
    private static readonly string[] _accountReferenceFieldNames = new string[] { "battle_tag", "email", "handle", "id", "region" };
    private static readonly uint[] _accountReferenceFieldTags = new uint[] { 34, 18, 26, 13, 80 };
    public static AccountReference DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountReference DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountReference ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountReference__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountReference, AccountReference.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_AccountReference__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int EmailFieldNumber = 2;
    private bool hasEmail;
    private string email_ = "";
    public bool HasEmail {
      get { return hasEmail; }
    }
    public string Email {
      get { return email_; }
    }
    
    public const int HandleFieldNumber = 3;
    private bool hasHandle;
    private global::bnet.protocol.account.GameAccountHandle handle_;
    public bool HasHandle {
      get { return hasHandle; }
    }
    public global::bnet.protocol.account.GameAccountHandle Handle {
      get { return handle_ ?? global::bnet.protocol.account.GameAccountHandle.DefaultInstance; }
    }
    
    public const int BattleTagFieldNumber = 4;
    private bool hasBattleTag;
    private string battleTag_ = "";
    public bool HasBattleTag {
      get { return hasBattleTag; }
    }
    public string BattleTag {
      get { return battleTag_; }
    }
    
    public const int RegionFieldNumber = 10;
    private bool hasRegion;
    private uint region_;
    public bool HasRegion {
      get { return hasRegion; }
    }
    public uint Region {
      get { return region_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasHandle) {
          if (!Handle.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountReferenceFieldNames;
      if (hasId) {
        output.WriteFixed32(1, field_names[3], Id);
      }
      if (hasEmail) {
        output.WriteString(2, field_names[1], Email);
      }
      if (hasHandle) {
        output.WriteMessage(3, field_names[2], Handle);
      }
      if (hasBattleTag) {
        output.WriteString(4, field_names[0], BattleTag);
      }
      if (hasRegion) {
        output.WriteUInt32(10, field_names[4], Region);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Id);
        }
        if (hasEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Email);
        }
        if (hasHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Handle);
        }
        if (hasBattleTag) {
          size += pb::CodedOutputStream.ComputeStringSize(4, BattleTag);
        }
        if (hasRegion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, Region);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountReference ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountReference ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountReference ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountReference ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountReference ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountReference ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountReference ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountReference ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountReference ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountReference ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountReference MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountReference prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountReference, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountReference cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountReference result;
      
      private AccountReference PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountReference original = result;
          result = new AccountReference();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountReference MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.AccountReference.Descriptor; }
      }
      
      public override AccountReference DefaultInstanceForType {
        get { return global::bnet.protocol.account.AccountReference.DefaultInstance; }
      }
      
      public override AccountReference BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountReference) {
          return MergeFrom((AccountReference) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountReference other) {
        if (other == global::bnet.protocol.account.AccountReference.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasEmail) {
          Email = other.Email;
        }
        if (other.HasHandle) {
          MergeHandle(other.Handle);
        }
        if (other.HasBattleTag) {
          BattleTag = other.BattleTag;
        }
        if (other.HasRegion) {
          Region = other.Region;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountReferenceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountReferenceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasId = input.ReadFixed32(ref result.id_);
              break;
            }
            case 18: {
              result.hasEmail = input.ReadString(ref result.email_);
              break;
            }
            case 26: {
              global::bnet.protocol.account.GameAccountHandle.Builder subBuilder = global::bnet.protocol.account.GameAccountHandle.CreateBuilder();
              if (result.hasHandle) {
                subBuilder.MergeFrom(Handle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Handle = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              result.hasBattleTag = input.ReadString(ref result.battleTag_);
              break;
            }
            case 80: {
              result.hasRegion = input.ReadUInt32(ref result.region_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasEmail {
        get { return result.hasEmail; }
      }
      public string Email {
        get { return result.Email; }
        set { SetEmail(value); }
      }
      public Builder SetEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmail = true;
        result.email_ = value;
        return this;
      }
      public Builder ClearEmail() {
        PrepareBuilder();
        result.hasEmail = false;
        result.email_ = "";
        return this;
      }
      
      public bool HasHandle {
       get { return result.hasHandle; }
      }
      public global::bnet.protocol.account.GameAccountHandle Handle {
        get { return result.Handle; }
        set { SetHandle(value); }
      }
      public Builder SetHandle(global::bnet.protocol.account.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = value;
        return this;
      }
      public Builder SetHandle(global::bnet.protocol.account.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHandle(global::bnet.protocol.account.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHandle &&
            result.handle_ != global::bnet.protocol.account.GameAccountHandle.DefaultInstance) {
            result.handle_ = global::bnet.protocol.account.GameAccountHandle.CreateBuilder(result.handle_).MergeFrom(value).BuildPartial();
        } else {
          result.handle_ = value;
        }
        result.hasHandle = true;
        return this;
      }
      public Builder ClearHandle() {
        PrepareBuilder();
        result.hasHandle = false;
        result.handle_ = null;
        return this;
      }
      
      public bool HasBattleTag {
        get { return result.hasBattleTag; }
      }
      public string BattleTag {
        get { return result.BattleTag; }
        set { SetBattleTag(value); }
      }
      public Builder SetBattleTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleTag = true;
        result.battleTag_ = value;
        return this;
      }
      public Builder ClearBattleTag() {
        PrepareBuilder();
        result.hasBattleTag = false;
        result.battleTag_ = "";
        return this;
      }
      
      public bool HasRegion {
        get { return result.hasRegion; }
      }
      public uint Region {
        get { return result.Region; }
        set { SetRegion(value); }
      }
      public Builder SetRegion(uint value) {
        PrepareBuilder();
        result.hasRegion = true;
        result.region_ = value;
        return this;
      }
      public Builder ClearRegion() {
        PrepareBuilder();
        result.hasRegion = false;
        result.region_ = 0;
        return this;
      }
    }
    static AccountReference() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Wallet : pb::GeneratedMessage<Wallet, Wallet.Builder> {
    private Wallet() { }
    private static readonly Wallet defaultInstance = new Wallet().MakeReadOnly();
    private static readonly string[] _walletFieldNames = new string[] { "bin", "birth_date", "city", "country_id", "description", "first_name", "last_name", "locale_id", "payment_info", "postal_code", "region", "state", "street", "wallet_id", "wallet_type" };
    private static readonly uint[] _walletFieldTags = new uint[] { 82, 120, 58, 40, 34, 106, 114, 90, 74, 66, 8, 50, 98, 16, 24 };
    public static Wallet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Wallet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Wallet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_Wallet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Wallet, Wallet.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_Wallet__FieldAccessorTable; }
    }
    
    public const int RegionFieldNumber = 1;
    private bool hasRegion;
    private uint region_;
    public bool HasRegion {
      get { return hasRegion; }
    }
    public uint Region {
      get { return region_; }
    }
    
    public const int WalletIdFieldNumber = 2;
    private bool hasWalletId;
    private ulong walletId_;
    public bool HasWalletId {
      get { return hasWalletId; }
    }
    public ulong WalletId {
      get { return walletId_; }
    }
    
    public const int WalletTypeFieldNumber = 3;
    private bool hasWalletType;
    private uint walletType_;
    public bool HasWalletType {
      get { return hasWalletType; }
    }
    public uint WalletType {
      get { return walletType_; }
    }
    
    public const int DescriptionFieldNumber = 4;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int CountryIdFieldNumber = 5;
    private bool hasCountryId;
    private uint countryId_;
    public bool HasCountryId {
      get { return hasCountryId; }
    }
    public uint CountryId {
      get { return countryId_; }
    }
    
    public const int StateFieldNumber = 6;
    private bool hasState;
    private string state_ = "";
    public bool HasState {
      get { return hasState; }
    }
    public string State {
      get { return state_; }
    }
    
    public const int CityFieldNumber = 7;
    private bool hasCity;
    private string city_ = "";
    public bool HasCity {
      get { return hasCity; }
    }
    public string City {
      get { return city_; }
    }
    
    public const int PostalCodeFieldNumber = 8;
    private bool hasPostalCode;
    private string postalCode_ = "";
    public bool HasPostalCode {
      get { return hasPostalCode; }
    }
    public string PostalCode {
      get { return postalCode_; }
    }
    
    public const int PaymentInfoFieldNumber = 9;
    private bool hasPaymentInfo;
    private pb::ByteString paymentInfo_ = pb::ByteString.Empty;
    public bool HasPaymentInfo {
      get { return hasPaymentInfo; }
    }
    public pb::ByteString PaymentInfo {
      get { return paymentInfo_; }
    }
    
    public const int BinFieldNumber = 10;
    private bool hasBin;
    private string bin_ = "";
    public bool HasBin {
      get { return hasBin; }
    }
    public string Bin {
      get { return bin_; }
    }
    
    public const int LocaleIdFieldNumber = 11;
    private bool hasLocaleId;
    private string localeId_ = "";
    public bool HasLocaleId {
      get { return hasLocaleId; }
    }
    public string LocaleId {
      get { return localeId_; }
    }
    
    public const int StreetFieldNumber = 12;
    private bool hasStreet;
    private string street_ = "";
    public bool HasStreet {
      get { return hasStreet; }
    }
    public string Street {
      get { return street_; }
    }
    
    public const int FirstNameFieldNumber = 13;
    private bool hasFirstName;
    private string firstName_ = "";
    public bool HasFirstName {
      get { return hasFirstName; }
    }
    public string FirstName {
      get { return firstName_; }
    }
    
    public const int LastNameFieldNumber = 14;
    private bool hasLastName;
    private string lastName_ = "";
    public bool HasLastName {
      get { return hasLastName; }
    }
    public string LastName {
      get { return lastName_; }
    }
    
    public const int BirthDateFieldNumber = 15;
    private bool hasBirthDate;
    private ulong birthDate_;
    public bool HasBirthDate {
      get { return hasBirthDate; }
    }
    public ulong BirthDate {
      get { return birthDate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegion) return false;
        if (!hasWalletId) return false;
        if (!hasWalletType) return false;
        if (!hasCountryId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _walletFieldNames;
      if (hasRegion) {
        output.WriteUInt32(1, field_names[10], Region);
      }
      if (hasWalletId) {
        output.WriteUInt64(2, field_names[13], WalletId);
      }
      if (hasWalletType) {
        output.WriteUInt32(3, field_names[14], WalletType);
      }
      if (hasDescription) {
        output.WriteString(4, field_names[4], Description);
      }
      if (hasCountryId) {
        output.WriteUInt32(5, field_names[3], CountryId);
      }
      if (hasState) {
        output.WriteString(6, field_names[11], State);
      }
      if (hasCity) {
        output.WriteString(7, field_names[2], City);
      }
      if (hasPostalCode) {
        output.WriteString(8, field_names[9], PostalCode);
      }
      if (hasPaymentInfo) {
        output.WriteBytes(9, field_names[8], PaymentInfo);
      }
      if (hasBin) {
        output.WriteString(10, field_names[0], Bin);
      }
      if (hasLocaleId) {
        output.WriteString(11, field_names[7], LocaleId);
      }
      if (hasStreet) {
        output.WriteString(12, field_names[12], Street);
      }
      if (hasFirstName) {
        output.WriteString(13, field_names[5], FirstName);
      }
      if (hasLastName) {
        output.WriteString(14, field_names[6], LastName);
      }
      if (hasBirthDate) {
        output.WriteUInt64(15, field_names[1], BirthDate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRegion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Region);
        }
        if (hasWalletId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, WalletId);
        }
        if (hasWalletType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, WalletType);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Description);
        }
        if (hasCountryId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, CountryId);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeStringSize(6, State);
        }
        if (hasCity) {
          size += pb::CodedOutputStream.ComputeStringSize(7, City);
        }
        if (hasPostalCode) {
          size += pb::CodedOutputStream.ComputeStringSize(8, PostalCode);
        }
        if (hasPaymentInfo) {
          size += pb::CodedOutputStream.ComputeBytesSize(9, PaymentInfo);
        }
        if (hasBin) {
          size += pb::CodedOutputStream.ComputeStringSize(10, Bin);
        }
        if (hasLocaleId) {
          size += pb::CodedOutputStream.ComputeStringSize(11, LocaleId);
        }
        if (hasStreet) {
          size += pb::CodedOutputStream.ComputeStringSize(12, Street);
        }
        if (hasFirstName) {
          size += pb::CodedOutputStream.ComputeStringSize(13, FirstName);
        }
        if (hasLastName) {
          size += pb::CodedOutputStream.ComputeStringSize(14, LastName);
        }
        if (hasBirthDate) {
          size += pb::CodedOutputStream.ComputeUInt64Size(15, BirthDate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Wallet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Wallet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Wallet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Wallet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Wallet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Wallet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Wallet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Wallet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Wallet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Wallet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Wallet MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Wallet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Wallet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Wallet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Wallet result;
      
      private Wallet PrepareBuilder() {
        if (resultIsReadOnly) {
          Wallet original = result;
          result = new Wallet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Wallet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.Wallet.Descriptor; }
      }
      
      public override Wallet DefaultInstanceForType {
        get { return global::bnet.protocol.account.Wallet.DefaultInstance; }
      }
      
      public override Wallet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Wallet) {
          return MergeFrom((Wallet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Wallet other) {
        if (other == global::bnet.protocol.account.Wallet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegion) {
          Region = other.Region;
        }
        if (other.HasWalletId) {
          WalletId = other.WalletId;
        }
        if (other.HasWalletType) {
          WalletType = other.WalletType;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasCountryId) {
          CountryId = other.CountryId;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasCity) {
          City = other.City;
        }
        if (other.HasPostalCode) {
          PostalCode = other.PostalCode;
        }
        if (other.HasPaymentInfo) {
          PaymentInfo = other.PaymentInfo;
        }
        if (other.HasBin) {
          Bin = other.Bin;
        }
        if (other.HasLocaleId) {
          LocaleId = other.LocaleId;
        }
        if (other.HasStreet) {
          Street = other.Street;
        }
        if (other.HasFirstName) {
          FirstName = other.FirstName;
        }
        if (other.HasLastName) {
          LastName = other.LastName;
        }
        if (other.HasBirthDate) {
          BirthDate = other.BirthDate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_walletFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _walletFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRegion = input.ReadUInt32(ref result.region_);
              break;
            }
            case 16: {
              result.hasWalletId = input.ReadUInt64(ref result.walletId_);
              break;
            }
            case 24: {
              result.hasWalletType = input.ReadUInt32(ref result.walletType_);
              break;
            }
            case 34: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 40: {
              result.hasCountryId = input.ReadUInt32(ref result.countryId_);
              break;
            }
            case 50: {
              result.hasState = input.ReadString(ref result.state_);
              break;
            }
            case 58: {
              result.hasCity = input.ReadString(ref result.city_);
              break;
            }
            case 66: {
              result.hasPostalCode = input.ReadString(ref result.postalCode_);
              break;
            }
            case 74: {
              result.hasPaymentInfo = input.ReadBytes(ref result.paymentInfo_);
              break;
            }
            case 82: {
              result.hasBin = input.ReadString(ref result.bin_);
              break;
            }
            case 90: {
              result.hasLocaleId = input.ReadString(ref result.localeId_);
              break;
            }
            case 98: {
              result.hasStreet = input.ReadString(ref result.street_);
              break;
            }
            case 106: {
              result.hasFirstName = input.ReadString(ref result.firstName_);
              break;
            }
            case 114: {
              result.hasLastName = input.ReadString(ref result.lastName_);
              break;
            }
            case 120: {
              result.hasBirthDate = input.ReadUInt64(ref result.birthDate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegion {
        get { return result.hasRegion; }
      }
      public uint Region {
        get { return result.Region; }
        set { SetRegion(value); }
      }
      public Builder SetRegion(uint value) {
        PrepareBuilder();
        result.hasRegion = true;
        result.region_ = value;
        return this;
      }
      public Builder ClearRegion() {
        PrepareBuilder();
        result.hasRegion = false;
        result.region_ = 0;
        return this;
      }
      
      public bool HasWalletId {
        get { return result.hasWalletId; }
      }
      public ulong WalletId {
        get { return result.WalletId; }
        set { SetWalletId(value); }
      }
      public Builder SetWalletId(ulong value) {
        PrepareBuilder();
        result.hasWalletId = true;
        result.walletId_ = value;
        return this;
      }
      public Builder ClearWalletId() {
        PrepareBuilder();
        result.hasWalletId = false;
        result.walletId_ = 0UL;
        return this;
      }
      
      public bool HasWalletType {
        get { return result.hasWalletType; }
      }
      public uint WalletType {
        get { return result.WalletType; }
        set { SetWalletType(value); }
      }
      public Builder SetWalletType(uint value) {
        PrepareBuilder();
        result.hasWalletType = true;
        result.walletType_ = value;
        return this;
      }
      public Builder ClearWalletType() {
        PrepareBuilder();
        result.hasWalletType = false;
        result.walletType_ = 0;
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasCountryId {
        get { return result.hasCountryId; }
      }
      public uint CountryId {
        get { return result.CountryId; }
        set { SetCountryId(value); }
      }
      public Builder SetCountryId(uint value) {
        PrepareBuilder();
        result.hasCountryId = true;
        result.countryId_ = value;
        return this;
      }
      public Builder ClearCountryId() {
        PrepareBuilder();
        result.hasCountryId = false;
        result.countryId_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public string State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = "";
        return this;
      }
      
      public bool HasCity {
        get { return result.hasCity; }
      }
      public string City {
        get { return result.City; }
        set { SetCity(value); }
      }
      public Builder SetCity(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCity = true;
        result.city_ = value;
        return this;
      }
      public Builder ClearCity() {
        PrepareBuilder();
        result.hasCity = false;
        result.city_ = "";
        return this;
      }
      
      public bool HasPostalCode {
        get { return result.hasPostalCode; }
      }
      public string PostalCode {
        get { return result.PostalCode; }
        set { SetPostalCode(value); }
      }
      public Builder SetPostalCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPostalCode = true;
        result.postalCode_ = value;
        return this;
      }
      public Builder ClearPostalCode() {
        PrepareBuilder();
        result.hasPostalCode = false;
        result.postalCode_ = "";
        return this;
      }
      
      public bool HasPaymentInfo {
        get { return result.hasPaymentInfo; }
      }
      public pb::ByteString PaymentInfo {
        get { return result.PaymentInfo; }
        set { SetPaymentInfo(value); }
      }
      public Builder SetPaymentInfo(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPaymentInfo = true;
        result.paymentInfo_ = value;
        return this;
      }
      public Builder ClearPaymentInfo() {
        PrepareBuilder();
        result.hasPaymentInfo = false;
        result.paymentInfo_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasBin {
        get { return result.hasBin; }
      }
      public string Bin {
        get { return result.Bin; }
        set { SetBin(value); }
      }
      public Builder SetBin(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBin = true;
        result.bin_ = value;
        return this;
      }
      public Builder ClearBin() {
        PrepareBuilder();
        result.hasBin = false;
        result.bin_ = "";
        return this;
      }
      
      public bool HasLocaleId {
        get { return result.hasLocaleId; }
      }
      public string LocaleId {
        get { return result.LocaleId; }
        set { SetLocaleId(value); }
      }
      public Builder SetLocaleId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocaleId = true;
        result.localeId_ = value;
        return this;
      }
      public Builder ClearLocaleId() {
        PrepareBuilder();
        result.hasLocaleId = false;
        result.localeId_ = "";
        return this;
      }
      
      public bool HasStreet {
        get { return result.hasStreet; }
      }
      public string Street {
        get { return result.Street; }
        set { SetStreet(value); }
      }
      public Builder SetStreet(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStreet = true;
        result.street_ = value;
        return this;
      }
      public Builder ClearStreet() {
        PrepareBuilder();
        result.hasStreet = false;
        result.street_ = "";
        return this;
      }
      
      public bool HasFirstName {
        get { return result.hasFirstName; }
      }
      public string FirstName {
        get { return result.FirstName; }
        set { SetFirstName(value); }
      }
      public Builder SetFirstName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFirstName = true;
        result.firstName_ = value;
        return this;
      }
      public Builder ClearFirstName() {
        PrepareBuilder();
        result.hasFirstName = false;
        result.firstName_ = "";
        return this;
      }
      
      public bool HasLastName {
        get { return result.hasLastName; }
      }
      public string LastName {
        get { return result.LastName; }
        set { SetLastName(value); }
      }
      public Builder SetLastName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastName = true;
        result.lastName_ = value;
        return this;
      }
      public Builder ClearLastName() {
        PrepareBuilder();
        result.hasLastName = false;
        result.lastName_ = "";
        return this;
      }
      
      public bool HasBirthDate {
        get { return result.hasBirthDate; }
      }
      public ulong BirthDate {
        get { return result.BirthDate; }
        set { SetBirthDate(value); }
      }
      public Builder SetBirthDate(ulong value) {
        PrepareBuilder();
        result.hasBirthDate = true;
        result.birthDate_ = value;
        return this;
      }
      public Builder ClearBirthDate() {
        PrepareBuilder();
        result.hasBirthDate = false;
        result.birthDate_ = 0UL;
        return this;
      }
    }
    static Wallet() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Wallets : pb::GeneratedMessage<Wallets, Wallets.Builder> {
    private Wallets() { }
    private static readonly Wallets defaultInstance = new Wallets().MakeReadOnly();
    private static readonly string[] _walletsFieldNames = new string[] { "wallets" };
    private static readonly uint[] _walletsFieldTags = new uint[] { 10 };
    public static Wallets DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Wallets DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Wallets ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_Wallets__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Wallets, Wallets.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_Wallets__FieldAccessorTable; }
    }
    
    public const int Wallets_FieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.account.Wallet> wallets_ = new pbc::PopsicleList<global::bnet.protocol.account.Wallet>();
    public scg::IList<global::bnet.protocol.account.Wallet> Wallets_List {
      get { return wallets_; }
    }
    public int Wallets_Count {
      get { return wallets_.Count; }
    }
    public global::bnet.protocol.account.Wallet GetWallets_(int index) {
      return wallets_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.account.Wallet element in wallets_) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _walletsFieldNames;
      if (wallets_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], wallets_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.account.Wallet element in Wallets_List) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Wallets ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Wallets ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Wallets ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Wallets ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Wallets ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Wallets ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Wallets ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Wallets ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Wallets ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Wallets ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Wallets MakeReadOnly() {
      wallets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Wallets prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Wallets, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Wallets cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Wallets result;
      
      private Wallets PrepareBuilder() {
        if (resultIsReadOnly) {
          Wallets original = result;
          result = new Wallets();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Wallets MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.Wallets.Descriptor; }
      }
      
      public override Wallets DefaultInstanceForType {
        get { return global::bnet.protocol.account.Wallets.DefaultInstance; }
      }
      
      public override Wallets BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Wallets) {
          return MergeFrom((Wallets) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Wallets other) {
        if (other == global::bnet.protocol.account.Wallets.DefaultInstance) return this;
        PrepareBuilder();
        if (other.wallets_.Count != 0) {
          result.wallets_.Add(other.wallets_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_walletsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _walletsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.wallets_, global::bnet.protocol.account.Wallet.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.account.Wallet> Wallets_List {
        get { return PrepareBuilder().wallets_; }
      }
      public int Wallets_Count {
        get { return result.Wallets_Count; }
      }
      public global::bnet.protocol.account.Wallet GetWallets_(int index) {
        return result.GetWallets_(index);
      }
      public Builder SetWallets_(int index, global::bnet.protocol.account.Wallet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wallets_[index] = value;
        return this;
      }
      public Builder SetWallets_(int index, global::bnet.protocol.account.Wallet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wallets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWallets_(global::bnet.protocol.account.Wallet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wallets_.Add(value);
        return this;
      }
      public Builder AddWallets_(global::bnet.protocol.account.Wallet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wallets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWallets_(scg::IEnumerable<global::bnet.protocol.account.Wallet> values) {
        PrepareBuilder();
        result.wallets_.Add(values);
        return this;
      }
      public Builder ClearWallets_() {
        PrepareBuilder();
        result.wallets_.Clear();
        return this;
      }
    }
    static Wallets() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CurrencyRestriction : pb::GeneratedMessage<CurrencyRestriction, CurrencyRestriction.Builder> {
    private CurrencyRestriction() { }
    private static readonly CurrencyRestriction defaultInstance = new CurrencyRestriction().MakeReadOnly();
    private static readonly string[] _currencyRestrictionFieldNames = new string[] { "authenticator_cap", "currency", "soft_cap" };
    private static readonly uint[] _currencyRestrictionFieldTags = new uint[] { 18, 10, 26 };
    public static CurrencyRestriction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CurrencyRestriction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CurrencyRestriction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_CurrencyRestriction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CurrencyRestriction, CurrencyRestriction.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.account.AccountTypes.internal__static_bnet_protocol_account_CurrencyRestriction__FieldAccessorTable; }
    }
    
    public const int CurrencyFieldNumber = 1;
    private bool hasCurrency;
    private string currency_ = "";
    public bool HasCurrency {
      get { return hasCurrency; }
    }
    public string Currency {
      get { return currency_; }
    }
    
    public const int AuthenticatorCapFieldNumber = 2;
    private bool hasAuthenticatorCap;
    private string authenticatorCap_ = "";
    public bool HasAuthenticatorCap {
      get { return hasAuthenticatorCap; }
    }
    public string AuthenticatorCap {
      get { return authenticatorCap_; }
    }
    
    public const int SoftCapFieldNumber = 3;
    private bool hasSoftCap;
    private string softCap_ = "";
    public bool HasSoftCap {
      get { return hasSoftCap; }
    }
    public string SoftCap {
      get { return softCap_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrency) return false;
        if (!hasAuthenticatorCap) return false;
        if (!hasSoftCap) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _currencyRestrictionFieldNames;
      if (hasCurrency) {
        output.WriteString(1, field_names[1], Currency);
      }
      if (hasAuthenticatorCap) {
        output.WriteString(2, field_names[0], AuthenticatorCap);
      }
      if (hasSoftCap) {
        output.WriteString(3, field_names[2], SoftCap);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCurrency) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Currency);
        }
        if (hasAuthenticatorCap) {
          size += pb::CodedOutputStream.ComputeStringSize(2, AuthenticatorCap);
        }
        if (hasSoftCap) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SoftCap);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CurrencyRestriction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrencyRestriction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrencyRestriction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrencyRestriction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrencyRestriction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrencyRestriction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CurrencyRestriction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CurrencyRestriction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CurrencyRestriction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrencyRestriction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CurrencyRestriction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CurrencyRestriction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CurrencyRestriction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CurrencyRestriction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CurrencyRestriction result;
      
      private CurrencyRestriction PrepareBuilder() {
        if (resultIsReadOnly) {
          CurrencyRestriction original = result;
          result = new CurrencyRestriction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CurrencyRestriction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.account.CurrencyRestriction.Descriptor; }
      }
      
      public override CurrencyRestriction DefaultInstanceForType {
        get { return global::bnet.protocol.account.CurrencyRestriction.DefaultInstance; }
      }
      
      public override CurrencyRestriction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CurrencyRestriction) {
          return MergeFrom((CurrencyRestriction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CurrencyRestriction other) {
        if (other == global::bnet.protocol.account.CurrencyRestriction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrency) {
          Currency = other.Currency;
        }
        if (other.HasAuthenticatorCap) {
          AuthenticatorCap = other.AuthenticatorCap;
        }
        if (other.HasSoftCap) {
          SoftCap = other.SoftCap;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_currencyRestrictionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _currencyRestrictionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCurrency = input.ReadString(ref result.currency_);
              break;
            }
            case 18: {
              result.hasAuthenticatorCap = input.ReadString(ref result.authenticatorCap_);
              break;
            }
            case 26: {
              result.hasSoftCap = input.ReadString(ref result.softCap_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrency {
        get { return result.hasCurrency; }
      }
      public string Currency {
        get { return result.Currency; }
        set { SetCurrency(value); }
      }
      public Builder SetCurrency(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrency = true;
        result.currency_ = value;
        return this;
      }
      public Builder ClearCurrency() {
        PrepareBuilder();
        result.hasCurrency = false;
        result.currency_ = "";
        return this;
      }
      
      public bool HasAuthenticatorCap {
        get { return result.hasAuthenticatorCap; }
      }
      public string AuthenticatorCap {
        get { return result.AuthenticatorCap; }
        set { SetAuthenticatorCap(value); }
      }
      public Builder SetAuthenticatorCap(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthenticatorCap = true;
        result.authenticatorCap_ = value;
        return this;
      }
      public Builder ClearAuthenticatorCap() {
        PrepareBuilder();
        result.hasAuthenticatorCap = false;
        result.authenticatorCap_ = "";
        return this;
      }
      
      public bool HasSoftCap {
        get { return result.hasSoftCap; }
      }
      public string SoftCap {
        get { return result.SoftCap; }
        set { SetSoftCap(value); }
      }
      public Builder SetSoftCap(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSoftCap = true;
        result.softCap_ = value;
        return this;
      }
      public Builder ClearSoftCap() {
        PrepareBuilder();
        result.hasSoftCap = false;
        result.softCap_ = "";
        return this;
      }
    }
    static CurrencyRestriction() {
      object.ReferenceEquals(global::bnet.protocol.account.AccountTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
