// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.channel {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class ChannelOwner {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_GetChannelIdRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelIdRequest, global::bnet.protocol.channel.GetChannelIdRequest.Builder> internal__static_bnet_protocol_channel_GetChannelIdRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_GetChannelIdResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelIdResponse, global::bnet.protocol.channel.GetChannelIdResponse.Builder> internal__static_bnet_protocol_channel_GetChannelIdResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_CreateChannelRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.CreateChannelRequest, global::bnet.protocol.channel.CreateChannelRequest.Builder> internal__static_bnet_protocol_channel_CreateChannelRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_CreateChannelResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.CreateChannelResponse, global::bnet.protocol.channel.CreateChannelResponse.Builder> internal__static_bnet_protocol_channel_CreateChannelResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_JoinChannelRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.JoinChannelRequest, global::bnet.protocol.channel.JoinChannelRequest.Builder> internal__static_bnet_protocol_channel_JoinChannelRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_JoinChannelResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.JoinChannelResponse, global::bnet.protocol.channel.JoinChannelResponse.Builder> internal__static_bnet_protocol_channel_JoinChannelResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_FindChannelRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.FindChannelRequest, global::bnet.protocol.channel.FindChannelRequest.Builder> internal__static_bnet_protocol_channel_FindChannelRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_FindChannelResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.FindChannelResponse, global::bnet.protocol.channel.FindChannelResponse.Builder> internal__static_bnet_protocol_channel_FindChannelResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_GetChannelInfoRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelInfoRequest, global::bnet.protocol.channel.GetChannelInfoRequest.Builder> internal__static_bnet_protocol_channel_GetChannelInfoRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_GetChannelInfoResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelInfoResponse, global::bnet.protocol.channel.GetChannelInfoResponse.Builder> internal__static_bnet_protocol_channel_GetChannelInfoResponse__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ChannelOwner() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChhibmV0L2NoYW5uZWxfb3duZXIucHJvdG8SFWJuZXQucHJvdG9jb2wuY2hh" + 
            "bm5lbBoUYm5ldC9hdHRyaWJ1dGUucHJvdG8aEWJuZXQvZW50aXR5LnByb3Rv" + 
            "Gg5ibmV0L3JwYy5wcm90bxoYYm5ldC9jaGFubmVsX3R5cGVzLnByb3RvIhUK" + 
            "E0dldENoYW5uZWxJZFJlcXVlc3QiQwoUR2V0Q2hhbm5lbElkUmVzcG9uc2US" + 
            "KwoKY2hhbm5lbF9pZBgBIAEoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQi" + 
            "/QEKFENyZWF0ZUNoYW5uZWxSZXF1ZXN0Ei8KDmFnZW50X2lkZW50aXR5GAEg" + 
            "ASgLMhcuYm5ldC5wcm90b2NvbC5JZGVudGl0eRI4CgxtZW1iZXJfc3RhdGUY" + 
            "AiABKAsyIi5ibmV0LnByb3RvY29sLmNoYW5uZWwuTWVtYmVyU3RhdGUSOgoN" + 
            "Y2hhbm5lbF9zdGF0ZRgDIAEoCzIjLmJuZXQucHJvdG9jb2wuY2hhbm5lbC5D" + 
            "aGFubmVsU3RhdGUSKwoKY2hhbm5lbF9pZBgEIAEoCzIXLmJuZXQucHJvdG9j" + 
            "b2wuRW50aXR5SWQSEQoJb2JqZWN0X2lkGAUgASgEIlcKFUNyZWF0ZUNoYW5u" + 
            "ZWxSZXNwb25zZRIRCglvYmplY3RfaWQYASACKAQSKwoKY2hhbm5lbF9pZBgC" + 
            "IAEoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQi8wEKEkpvaW5DaGFubmVs" + 
            "UmVxdWVzdBIvCg5hZ2VudF9pZGVudGl0eRgBIAEoCzIXLmJuZXQucHJvdG9j" + 
            "b2wuSWRlbnRpdHkSOAoMbWVtYmVyX3N0YXRlGAIgASgLMiIuYm5ldC5wcm90" + 
            "b2NvbC5jaGFubmVsLk1lbWJlclN0YXRlEisKCmNoYW5uZWxfaWQYAyACKAsy" + 
            "Fy5ibmV0LnByb3RvY29sLkVudGl0eUlkEhEKCW9iamVjdF9pZBgEIAIoBBIy" + 
            "ChFmcmllbmRfYWNjb3VudF9pZBgFIAMoCzIXLmJuZXQucHJvdG9jb2wuRW50" + 
            "aXR5SWQihwEKE0pvaW5DaGFubmVsUmVzcG9uc2USEQoJb2JqZWN0X2lkGAEg" + 
            "ASgEEigKGXJlcXVpcmVfZnJpZW5kX3ZhbGlkYXRpb24YAiABKAg6BWZhbHNl" + 
            "EjMKEnByaXZpbGVnZWRfYWNjb3VudBgDIAMoCzIXLmJuZXQucHJvdG9jb2wu" + 
            "RW50aXR5SWQigQEKEkZpbmRDaGFubmVsUmVxdWVzdBIvCg5hZ2VudF9pZGVu" + 
            "dGl0eRgBIAEoCzIXLmJuZXQucHJvdG9jb2wuSWRlbnRpdHkSOgoHb3B0aW9u" + 
            "cxgCIAIoCzIpLmJuZXQucHJvdG9jb2wuY2hhbm5lbC5GaW5kQ2hhbm5lbE9w" + 
            "dGlvbnMiUQoTRmluZENoYW5uZWxSZXNwb25zZRI6CgdjaGFubmVsGAEgAygL" + 
            "MikuYm5ldC5wcm90b2NvbC5jaGFubmVsLkNoYW5uZWxEZXNjcmlwdGlvbiJv" + 
            "ChVHZXRDaGFubmVsSW5mb1JlcXVlc3QSKQoIYWdlbnRfaWQYASABKAsyFy5i" + 
            "bmV0LnByb3RvY29sLkVudGl0eUlkEisKCmNoYW5uZWxfaWQYAiACKAsyFy5i" + 
            "bmV0LnByb3RvY29sLkVudGl0eUlkIlIKFkdldENoYW5uZWxJbmZvUmVzcG9u" + 
            "c2USOAoMY2hhbm5lbF9pbmZvGAEgASgLMiIuYm5ldC5wcm90b2NvbC5jaGFu" + 
            "bmVsLkNoYW5uZWxJbmZvMrwECgxDaGFubmVsT3duZXISbQoMR2V0Q2hhbm5l" + 
            "bElkEiouYm5ldC5wcm90b2NvbC5jaGFubmVsLkdldENoYW5uZWxJZFJlcXVl" + 
            "c3QaKy5ibmV0LnByb3RvY29sLmNoYW5uZWwuR2V0Q2hhbm5lbElkUmVzcG9u" + 
            "c2UiBIC1GAEScAoNQ3JlYXRlQ2hhbm5lbBIrLmJuZXQucHJvdG9jb2wuY2hh" + 
            "bm5lbC5DcmVhdGVDaGFubmVsUmVxdWVzdBosLmJuZXQucHJvdG9jb2wuY2hh" + 
            "bm5lbC5DcmVhdGVDaGFubmVsUmVzcG9uc2UiBIC1GAISagoLSm9pbkNoYW5u" + 
            "ZWwSKS5ibmV0LnByb3RvY29sLmNoYW5uZWwuSm9pbkNoYW5uZWxSZXF1ZXN0" + 
            "GiouYm5ldC5wcm90b2NvbC5jaGFubmVsLkpvaW5DaGFubmVsUmVzcG9uc2Ui" + 
            "BIC1GAMSagoLRmluZENoYW5uZWwSKS5ibmV0LnByb3RvY29sLmNoYW5uZWwu" + 
            "RmluZENoYW5uZWxSZXF1ZXN0GiouYm5ldC5wcm90b2NvbC5jaGFubmVsLkZp" + 
            "bmRDaGFubmVsUmVzcG9uc2UiBIC1GAQScwoOR2V0Q2hhbm5lbEluZm8SLC5i" + 
            "bmV0LnByb3RvY29sLmNoYW5uZWwuR2V0Q2hhbm5lbEluZm9SZXF1ZXN0Gi0u" + 
            "Ym5ldC5wcm90b2NvbC5jaGFubmVsLkdldENoYW5uZWxJbmZvUmVzcG9uc2Ui" + 
            "BIC1GAVCA4ABAA==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_channel_GetChannelIdRequest__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_channel_GetChannelIdRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelIdRequest, global::bnet.protocol.channel.GetChannelIdRequest.Builder>(internal__static_bnet_protocol_channel_GetChannelIdRequest__Descriptor,
                  new string[] { });
          internal__static_bnet_protocol_channel_GetChannelIdResponse__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bnet_protocol_channel_GetChannelIdResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelIdResponse, global::bnet.protocol.channel.GetChannelIdResponse.Builder>(internal__static_bnet_protocol_channel_GetChannelIdResponse__Descriptor,
                  new string[] { "ChannelId", });
          internal__static_bnet_protocol_channel_CreateChannelRequest__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bnet_protocol_channel_CreateChannelRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.CreateChannelRequest, global::bnet.protocol.channel.CreateChannelRequest.Builder>(internal__static_bnet_protocol_channel_CreateChannelRequest__Descriptor,
                  new string[] { "AgentIdentity", "MemberState", "ChannelState", "ChannelId", "ObjectId", });
          internal__static_bnet_protocol_channel_CreateChannelResponse__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bnet_protocol_channel_CreateChannelResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.CreateChannelResponse, global::bnet.protocol.channel.CreateChannelResponse.Builder>(internal__static_bnet_protocol_channel_CreateChannelResponse__Descriptor,
                  new string[] { "ObjectId", "ChannelId", });
          internal__static_bnet_protocol_channel_JoinChannelRequest__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bnet_protocol_channel_JoinChannelRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.JoinChannelRequest, global::bnet.protocol.channel.JoinChannelRequest.Builder>(internal__static_bnet_protocol_channel_JoinChannelRequest__Descriptor,
                  new string[] { "AgentIdentity", "MemberState", "ChannelId", "ObjectId", "FriendAccountId", });
          internal__static_bnet_protocol_channel_JoinChannelResponse__Descriptor = Descriptor.MessageTypes[5];
          internal__static_bnet_protocol_channel_JoinChannelResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.JoinChannelResponse, global::bnet.protocol.channel.JoinChannelResponse.Builder>(internal__static_bnet_protocol_channel_JoinChannelResponse__Descriptor,
                  new string[] { "ObjectId", "RequireFriendValidation", "PrivilegedAccount", });
          internal__static_bnet_protocol_channel_FindChannelRequest__Descriptor = Descriptor.MessageTypes[6];
          internal__static_bnet_protocol_channel_FindChannelRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.FindChannelRequest, global::bnet.protocol.channel.FindChannelRequest.Builder>(internal__static_bnet_protocol_channel_FindChannelRequest__Descriptor,
                  new string[] { "AgentIdentity", "Options", });
          internal__static_bnet_protocol_channel_FindChannelResponse__Descriptor = Descriptor.MessageTypes[7];
          internal__static_bnet_protocol_channel_FindChannelResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.FindChannelResponse, global::bnet.protocol.channel.FindChannelResponse.Builder>(internal__static_bnet_protocol_channel_FindChannelResponse__Descriptor,
                  new string[] { "Channel", });
          internal__static_bnet_protocol_channel_GetChannelInfoRequest__Descriptor = Descriptor.MessageTypes[8];
          internal__static_bnet_protocol_channel_GetChannelInfoRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelInfoRequest, global::bnet.protocol.channel.GetChannelInfoRequest.Builder>(internal__static_bnet_protocol_channel_GetChannelInfoRequest__Descriptor,
                  new string[] { "AgentId", "ChannelId", });
          internal__static_bnet_protocol_channel_GetChannelInfoResponse__Descriptor = Descriptor.MessageTypes[9];
          internal__static_bnet_protocol_channel_GetChannelInfoResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.GetChannelInfoResponse, global::bnet.protocol.channel.GetChannelInfoResponse.Builder>(internal__static_bnet_protocol_channel_GetChannelInfoResponse__Descriptor,
                  new string[] { "ChannelInfo", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bnet.protocol.attribute.Proto.Attribute.RegisterAllExtensions(registry);
          global::bnet.protocol.Entity.RegisterAllExtensions(registry);
          global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
          global::bnet.protocol.channel.ChannelTypes.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
            global::bnet.protocol.Entity.Descriptor, 
            global::bnet.protocol.Rpc.Descriptor, 
            global::bnet.protocol.channel.ChannelTypes.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetChannelIdRequest : pb::GeneratedMessage<GetChannelIdRequest, GetChannelIdRequest.Builder> {
    private GetChannelIdRequest() { }
    private static readonly GetChannelIdRequest defaultInstance = new GetChannelIdRequest().MakeReadOnly();
    private static readonly string[] _getChannelIdRequestFieldNames = new string[] {  };
    private static readonly uint[] _getChannelIdRequestFieldTags = new uint[] {  };
    public static GetChannelIdRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetChannelIdRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetChannelIdRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_GetChannelIdRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetChannelIdRequest, GetChannelIdRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_GetChannelIdRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getChannelIdRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetChannelIdRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetChannelIdRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelIdRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetChannelIdRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetChannelIdRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetChannelIdRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetChannelIdRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetChannelIdRequest result;
      
      private GetChannelIdRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetChannelIdRequest original = result;
          result = new GetChannelIdRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetChannelIdRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.GetChannelIdRequest.Descriptor; }
      }
      
      public override GetChannelIdRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel.GetChannelIdRequest.DefaultInstance; }
      }
      
      public override GetChannelIdRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetChannelIdRequest) {
          return MergeFrom((GetChannelIdRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetChannelIdRequest other) {
        if (other == global::bnet.protocol.channel.GetChannelIdRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getChannelIdRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getChannelIdRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetChannelIdRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel.Proto.ChannelOwner.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetChannelIdResponse : pb::GeneratedMessage<GetChannelIdResponse, GetChannelIdResponse.Builder> {
    private GetChannelIdResponse() { }
    private static readonly GetChannelIdResponse defaultInstance = new GetChannelIdResponse().MakeReadOnly();
    private static readonly string[] _getChannelIdResponseFieldNames = new string[] { "channel_id" };
    private static readonly uint[] _getChannelIdResponseFieldTags = new uint[] { 10 };
    public static GetChannelIdResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetChannelIdResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetChannelIdResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_GetChannelIdResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetChannelIdResponse, GetChannelIdResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_GetChannelIdResponse__FieldAccessorTable; }
    }
    
    public const int ChannelIdFieldNumber = 1;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasChannelId) {
          if (!ChannelId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getChannelIdResponseFieldNames;
      if (hasChannelId) {
        output.WriteMessage(1, field_names[0], ChannelId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetChannelIdResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetChannelIdResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetChannelIdResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelIdResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetChannelIdResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetChannelIdResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetChannelIdResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetChannelIdResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetChannelIdResponse result;
      
      private GetChannelIdResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetChannelIdResponse original = result;
          result = new GetChannelIdResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetChannelIdResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.GetChannelIdResponse.Descriptor; }
      }
      
      public override GetChannelIdResponse DefaultInstanceForType {
        get { return global::bnet.protocol.channel.GetChannelIdResponse.DefaultInstance; }
      }
      
      public override GetChannelIdResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetChannelIdResponse) {
          return MergeFrom((GetChannelIdResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetChannelIdResponse other) {
        if (other == global::bnet.protocol.channel.GetChannelIdResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getChannelIdResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getChannelIdResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChannelId {
       get { return result.hasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = null;
        return this;
      }
    }
    static GetChannelIdResponse() {
      object.ReferenceEquals(global::bnet.protocol.channel.Proto.ChannelOwner.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CreateChannelRequest : pb::GeneratedMessage<CreateChannelRequest, CreateChannelRequest.Builder> {
    private CreateChannelRequest() { }
    private static readonly CreateChannelRequest defaultInstance = new CreateChannelRequest().MakeReadOnly();
    private static readonly string[] _createChannelRequestFieldNames = new string[] { "agent_identity", "channel_id", "channel_state", "member_state", "object_id" };
    private static readonly uint[] _createChannelRequestFieldTags = new uint[] { 10, 34, 26, 18, 40 };
    public static CreateChannelRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateChannelRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateChannelRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_CreateChannelRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateChannelRequest, CreateChannelRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_CreateChannelRequest__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::bnet.protocol.Identity agentIdentity_;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::bnet.protocol.Identity AgentIdentity {
      get { return agentIdentity_ ?? global::bnet.protocol.Identity.DefaultInstance; }
    }
    
    public const int MemberStateFieldNumber = 2;
    private bool hasMemberState;
    private global::bnet.protocol.channel.MemberState memberState_;
    public bool HasMemberState {
      get { return hasMemberState; }
    }
    public global::bnet.protocol.channel.MemberState MemberState {
      get { return memberState_ ?? global::bnet.protocol.channel.MemberState.DefaultInstance; }
    }
    
    public const int ChannelStateFieldNumber = 3;
    private bool hasChannelState;
    private global::bnet.protocol.channel.ChannelState channelState_;
    public bool HasChannelState {
      get { return hasChannelState; }
    }
    public global::bnet.protocol.channel.ChannelState ChannelState {
      get { return channelState_ ?? global::bnet.protocol.channel.ChannelState.DefaultInstance; }
    }
    
    public const int ChannelIdFieldNumber = 4;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ObjectIdFieldNumber = 5;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasAgentIdentity) {
          if (!AgentIdentity.IsInitialized) return false;
        }
        if (HasMemberState) {
          if (!MemberState.IsInitialized) return false;
        }
        if (HasChannelState) {
          if (!ChannelState.IsInitialized) return false;
        }
        if (HasChannelId) {
          if (!ChannelId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createChannelRequestFieldNames;
      if (hasAgentIdentity) {
        output.WriteMessage(1, field_names[0], AgentIdentity);
      }
      if (hasMemberState) {
        output.WriteMessage(2, field_names[3], MemberState);
      }
      if (hasChannelState) {
        output.WriteMessage(3, field_names[2], ChannelState);
      }
      if (hasChannelId) {
        output.WriteMessage(4, field_names[1], ChannelId);
      }
      if (hasObjectId) {
        output.WriteUInt64(5, field_names[4], ObjectId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAgentIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
        }
        if (hasMemberState) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, MemberState);
        }
        if (hasChannelState) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ChannelState);
        }
        if (hasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ChannelId);
        }
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(5, ObjectId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateChannelRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateChannelRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChannelRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateChannelRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateChannelRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateChannelRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateChannelRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateChannelRequest result;
      
      private CreateChannelRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateChannelRequest original = result;
          result = new CreateChannelRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateChannelRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.CreateChannelRequest.Descriptor; }
      }
      
      public override CreateChannelRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel.CreateChannelRequest.DefaultInstance; }
      }
      
      public override CreateChannelRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateChannelRequest) {
          return MergeFrom((CreateChannelRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateChannelRequest other) {
        if (other == global::bnet.protocol.channel.CreateChannelRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.HasMemberState) {
          MergeMemberState(other.MemberState);
        }
        if (other.HasChannelState) {
          MergeChannelState(other.ChannelState);
        }
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createChannelRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createChannelRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.Identity.Builder subBuilder = global::bnet.protocol.Identity.CreateBuilder();
              if (result.hasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.channel.MemberState.Builder subBuilder = global::bnet.protocol.channel.MemberState.CreateBuilder();
              if (result.hasMemberState) {
                subBuilder.MergeFrom(MemberState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MemberState = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.channel.ChannelState.Builder subBuilder = global::bnet.protocol.channel.ChannelState.CreateBuilder();
              if (result.hasChannelState) {
                subBuilder.MergeFrom(ChannelState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelState = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentIdentity {
       get { return result.hasAgentIdentity; }
      }
      public global::bnet.protocol.Identity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::bnet.protocol.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIdentity &&
            result.agentIdentity_ != global::bnet.protocol.Identity.DefaultInstance) {
            result.agentIdentity_ = global::bnet.protocol.Identity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        PrepareBuilder();
        result.hasAgentIdentity = false;
        result.agentIdentity_ = null;
        return this;
      }
      
      public bool HasMemberState {
       get { return result.hasMemberState; }
      }
      public global::bnet.protocol.channel.MemberState MemberState {
        get { return result.MemberState; }
        set { SetMemberState(value); }
      }
      public Builder SetMemberState(global::bnet.protocol.channel.MemberState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMemberState = true;
        result.memberState_ = value;
        return this;
      }
      public Builder SetMemberState(global::bnet.protocol.channel.MemberState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMemberState = true;
        result.memberState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMemberState(global::bnet.protocol.channel.MemberState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMemberState &&
            result.memberState_ != global::bnet.protocol.channel.MemberState.DefaultInstance) {
            result.memberState_ = global::bnet.protocol.channel.MemberState.CreateBuilder(result.memberState_).MergeFrom(value).BuildPartial();
        } else {
          result.memberState_ = value;
        }
        result.hasMemberState = true;
        return this;
      }
      public Builder ClearMemberState() {
        PrepareBuilder();
        result.hasMemberState = false;
        result.memberState_ = null;
        return this;
      }
      
      public bool HasChannelState {
       get { return result.hasChannelState; }
      }
      public global::bnet.protocol.channel.ChannelState ChannelState {
        get { return result.ChannelState; }
        set { SetChannelState(value); }
      }
      public Builder SetChannelState(global::bnet.protocol.channel.ChannelState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannelState = true;
        result.channelState_ = value;
        return this;
      }
      public Builder SetChannelState(global::bnet.protocol.channel.ChannelState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChannelState = true;
        result.channelState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelState(global::bnet.protocol.channel.ChannelState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChannelState &&
            result.channelState_ != global::bnet.protocol.channel.ChannelState.DefaultInstance) {
            result.channelState_ = global::bnet.protocol.channel.ChannelState.CreateBuilder(result.channelState_).MergeFrom(value).BuildPartial();
        } else {
          result.channelState_ = value;
        }
        result.hasChannelState = true;
        return this;
      }
      public Builder ClearChannelState() {
        PrepareBuilder();
        result.hasChannelState = false;
        result.channelState_ = null;
        return this;
      }
      
      public bool HasChannelId {
       get { return result.hasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = null;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
    }
    static CreateChannelRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel.Proto.ChannelOwner.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CreateChannelResponse : pb::GeneratedMessage<CreateChannelResponse, CreateChannelResponse.Builder> {
    private CreateChannelResponse() { }
    private static readonly CreateChannelResponse defaultInstance = new CreateChannelResponse().MakeReadOnly();
    private static readonly string[] _createChannelResponseFieldNames = new string[] { "channel_id", "object_id" };
    private static readonly uint[] _createChannelResponseFieldTags = new uint[] { 18, 8 };
    public static CreateChannelResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateChannelResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateChannelResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_CreateChannelResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateChannelResponse, CreateChannelResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_CreateChannelResponse__FieldAccessorTable; }
    }
    
    public const int ObjectIdFieldNumber = 1;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int ChannelIdFieldNumber = 2;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasObjectId) return false;
        if (HasChannelId) {
          if (!ChannelId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createChannelResponseFieldNames;
      if (hasObjectId) {
        output.WriteUInt64(1, field_names[1], ObjectId);
      }
      if (hasChannelId) {
        output.WriteMessage(2, field_names[0], ChannelId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, ObjectId);
        }
        if (hasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ChannelId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateChannelResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateChannelResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateChannelResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChannelResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateChannelResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateChannelResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateChannelResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateChannelResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateChannelResponse result;
      
      private CreateChannelResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateChannelResponse original = result;
          result = new CreateChannelResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateChannelResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.CreateChannelResponse.Descriptor; }
      }
      
      public override CreateChannelResponse DefaultInstanceForType {
        get { return global::bnet.protocol.channel.CreateChannelResponse.DefaultInstance; }
      }
      
      public override CreateChannelResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateChannelResponse) {
          return MergeFrom((CreateChannelResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateChannelResponse other) {
        if (other == global::bnet.protocol.channel.CreateChannelResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createChannelResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createChannelResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
      
      public bool HasChannelId {
       get { return result.hasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = null;
        return this;
      }
    }
    static CreateChannelResponse() {
      object.ReferenceEquals(global::bnet.protocol.channel.Proto.ChannelOwner.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class JoinChannelRequest : pb::GeneratedMessage<JoinChannelRequest, JoinChannelRequest.Builder> {
    private JoinChannelRequest() { }
    private static readonly JoinChannelRequest defaultInstance = new JoinChannelRequest().MakeReadOnly();
    private static readonly string[] _joinChannelRequestFieldNames = new string[] { "agent_identity", "channel_id", "friend_account_id", "member_state", "object_id" };
    private static readonly uint[] _joinChannelRequestFieldTags = new uint[] { 10, 26, 42, 18, 32 };
    public static JoinChannelRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinChannelRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JoinChannelRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_JoinChannelRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinChannelRequest, JoinChannelRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_JoinChannelRequest__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::bnet.protocol.Identity agentIdentity_;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::bnet.protocol.Identity AgentIdentity {
      get { return agentIdentity_ ?? global::bnet.protocol.Identity.DefaultInstance; }
    }
    
    public const int MemberStateFieldNumber = 2;
    private bool hasMemberState;
    private global::bnet.protocol.channel.MemberState memberState_;
    public bool HasMemberState {
      get { return hasMemberState; }
    }
    public global::bnet.protocol.channel.MemberState MemberState {
      get { return memberState_ ?? global::bnet.protocol.channel.MemberState.DefaultInstance; }
    }
    
    public const int ChannelIdFieldNumber = 3;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ObjectIdFieldNumber = 4;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int FriendAccountIdFieldNumber = 5;
    private pbc::PopsicleList<global::bnet.protocol.EntityId> friendAccountId_ = new pbc::PopsicleList<global::bnet.protocol.EntityId>();
    public scg::IList<global::bnet.protocol.EntityId> FriendAccountIdList {
      get { return friendAccountId_; }
    }
    public int FriendAccountIdCount {
      get { return friendAccountId_.Count; }
    }
    public global::bnet.protocol.EntityId GetFriendAccountId(int index) {
      return friendAccountId_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChannelId) return false;
        if (!hasObjectId) return false;
        if (HasAgentIdentity) {
          if (!AgentIdentity.IsInitialized) return false;
        }
        if (HasMemberState) {
          if (!MemberState.IsInitialized) return false;
        }
        if (!ChannelId.IsInitialized) return false;
        foreach (global::bnet.protocol.EntityId element in FriendAccountIdList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _joinChannelRequestFieldNames;
      if (hasAgentIdentity) {
        output.WriteMessage(1, field_names[0], AgentIdentity);
      }
      if (hasMemberState) {
        output.WriteMessage(2, field_names[3], MemberState);
      }
      if (hasChannelId) {
        output.WriteMessage(3, field_names[1], ChannelId);
      }
      if (hasObjectId) {
        output.WriteUInt64(4, field_names[4], ObjectId);
      }
      if (friendAccountId_.Count > 0) {
        output.WriteMessageArray(5, field_names[2], friendAccountId_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAgentIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
        }
        if (hasMemberState) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, MemberState);
        }
        if (hasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ChannelId);
        }
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, ObjectId);
        }
        foreach (global::bnet.protocol.EntityId element in FriendAccountIdList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinChannelRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinChannelRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinChannelRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JoinChannelRequest MakeReadOnly() {
      friendAccountId_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinChannelRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<JoinChannelRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JoinChannelRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JoinChannelRequest result;
      
      private JoinChannelRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          JoinChannelRequest original = result;
          result = new JoinChannelRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JoinChannelRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.JoinChannelRequest.Descriptor; }
      }
      
      public override JoinChannelRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel.JoinChannelRequest.DefaultInstance; }
      }
      
      public override JoinChannelRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinChannelRequest) {
          return MergeFrom((JoinChannelRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinChannelRequest other) {
        if (other == global::bnet.protocol.channel.JoinChannelRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.HasMemberState) {
          MergeMemberState(other.MemberState);
        }
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.friendAccountId_.Count != 0) {
          result.friendAccountId_.Add(other.friendAccountId_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinChannelRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinChannelRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.Identity.Builder subBuilder = global::bnet.protocol.Identity.CreateBuilder();
              if (result.hasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.channel.MemberState.Builder subBuilder = global::bnet.protocol.channel.MemberState.CreateBuilder();
              if (result.hasMemberState) {
                subBuilder.MergeFrom(MemberState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MemberState = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.friendAccountId_, global::bnet.protocol.EntityId.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentIdentity {
       get { return result.hasAgentIdentity; }
      }
      public global::bnet.protocol.Identity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::bnet.protocol.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIdentity &&
            result.agentIdentity_ != global::bnet.protocol.Identity.DefaultInstance) {
            result.agentIdentity_ = global::bnet.protocol.Identity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        PrepareBuilder();
        result.hasAgentIdentity = false;
        result.agentIdentity_ = null;
        return this;
      }
      
      public bool HasMemberState {
       get { return result.hasMemberState; }
      }
      public global::bnet.protocol.channel.MemberState MemberState {
        get { return result.MemberState; }
        set { SetMemberState(value); }
      }
      public Builder SetMemberState(global::bnet.protocol.channel.MemberState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMemberState = true;
        result.memberState_ = value;
        return this;
      }
      public Builder SetMemberState(global::bnet.protocol.channel.MemberState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMemberState = true;
        result.memberState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMemberState(global::bnet.protocol.channel.MemberState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMemberState &&
            result.memberState_ != global::bnet.protocol.channel.MemberState.DefaultInstance) {
            result.memberState_ = global::bnet.protocol.channel.MemberState.CreateBuilder(result.memberState_).MergeFrom(value).BuildPartial();
        } else {
          result.memberState_ = value;
        }
        result.hasMemberState = true;
        return this;
      }
      public Builder ClearMemberState() {
        PrepareBuilder();
        result.hasMemberState = false;
        result.memberState_ = null;
        return this;
      }
      
      public bool HasChannelId {
       get { return result.hasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = null;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.EntityId> FriendAccountIdList {
        get { return PrepareBuilder().friendAccountId_; }
      }
      public int FriendAccountIdCount {
        get { return result.FriendAccountIdCount; }
      }
      public global::bnet.protocol.EntityId GetFriendAccountId(int index) {
        return result.GetFriendAccountId(index);
      }
      public Builder SetFriendAccountId(int index, global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.friendAccountId_[index] = value;
        return this;
      }
      public Builder SetFriendAccountId(int index, global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.friendAccountId_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFriendAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.friendAccountId_.Add(value);
        return this;
      }
      public Builder AddFriendAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.friendAccountId_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFriendAccountId(scg::IEnumerable<global::bnet.protocol.EntityId> values) {
        PrepareBuilder();
        result.friendAccountId_.Add(values);
        return this;
      }
      public Builder ClearFriendAccountId() {
        PrepareBuilder();
        result.friendAccountId_.Clear();
        return this;
      }
    }
    static JoinChannelRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel.Proto.ChannelOwner.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class JoinChannelResponse : pb::GeneratedMessage<JoinChannelResponse, JoinChannelResponse.Builder> {
    private JoinChannelResponse() { }
    private static readonly JoinChannelResponse defaultInstance = new JoinChannelResponse().MakeReadOnly();
    private static readonly string[] _joinChannelResponseFieldNames = new string[] { "object_id", "privileged_account", "require_friend_validation" };
    private static readonly uint[] _joinChannelResponseFieldTags = new uint[] { 8, 26, 16 };
    public static JoinChannelResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinChannelResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JoinChannelResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_JoinChannelResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinChannelResponse, JoinChannelResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_JoinChannelResponse__FieldAccessorTable; }
    }
    
    public const int ObjectIdFieldNumber = 1;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int RequireFriendValidationFieldNumber = 2;
    private bool hasRequireFriendValidation;
    private bool requireFriendValidation_;
    public bool HasRequireFriendValidation {
      get { return hasRequireFriendValidation; }
    }
    public bool RequireFriendValidation {
      get { return requireFriendValidation_; }
    }
    
    public const int PrivilegedAccountFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.EntityId> privilegedAccount_ = new pbc::PopsicleList<global::bnet.protocol.EntityId>();
    public scg::IList<global::bnet.protocol.EntityId> PrivilegedAccountList {
      get { return privilegedAccount_; }
    }
    public int PrivilegedAccountCount {
      get { return privilegedAccount_.Count; }
    }
    public global::bnet.protocol.EntityId GetPrivilegedAccount(int index) {
      return privilegedAccount_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.EntityId element in PrivilegedAccountList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _joinChannelResponseFieldNames;
      if (hasObjectId) {
        output.WriteUInt64(1, field_names[0], ObjectId);
      }
      if (hasRequireFriendValidation) {
        output.WriteBool(2, field_names[2], RequireFriendValidation);
      }
      if (privilegedAccount_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], privilegedAccount_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, ObjectId);
        }
        if (hasRequireFriendValidation) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, RequireFriendValidation);
        }
        foreach (global::bnet.protocol.EntityId element in PrivilegedAccountList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinChannelResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinChannelResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinChannelResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinChannelResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JoinChannelResponse MakeReadOnly() {
      privilegedAccount_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinChannelResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<JoinChannelResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JoinChannelResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JoinChannelResponse result;
      
      private JoinChannelResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          JoinChannelResponse original = result;
          result = new JoinChannelResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JoinChannelResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.JoinChannelResponse.Descriptor; }
      }
      
      public override JoinChannelResponse DefaultInstanceForType {
        get { return global::bnet.protocol.channel.JoinChannelResponse.DefaultInstance; }
      }
      
      public override JoinChannelResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinChannelResponse) {
          return MergeFrom((JoinChannelResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinChannelResponse other) {
        if (other == global::bnet.protocol.channel.JoinChannelResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.HasRequireFriendValidation) {
          RequireFriendValidation = other.RequireFriendValidation;
        }
        if (other.privilegedAccount_.Count != 0) {
          result.privilegedAccount_.Add(other.privilegedAccount_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinChannelResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinChannelResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
            case 16: {
              result.hasRequireFriendValidation = input.ReadBool(ref result.requireFriendValidation_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.privilegedAccount_, global::bnet.protocol.EntityId.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
      
      public bool HasRequireFriendValidation {
        get { return result.hasRequireFriendValidation; }
      }
      public bool RequireFriendValidation {
        get { return result.RequireFriendValidation; }
        set { SetRequireFriendValidation(value); }
      }
      public Builder SetRequireFriendValidation(bool value) {
        PrepareBuilder();
        result.hasRequireFriendValidation = true;
        result.requireFriendValidation_ = value;
        return this;
      }
      public Builder ClearRequireFriendValidation() {
        PrepareBuilder();
        result.hasRequireFriendValidation = false;
        result.requireFriendValidation_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.EntityId> PrivilegedAccountList {
        get { return PrepareBuilder().privilegedAccount_; }
      }
      public int PrivilegedAccountCount {
        get { return result.PrivilegedAccountCount; }
      }
      public global::bnet.protocol.EntityId GetPrivilegedAccount(int index) {
        return result.GetPrivilegedAccount(index);
      }
      public Builder SetPrivilegedAccount(int index, global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.privilegedAccount_[index] = value;
        return this;
      }
      public Builder SetPrivilegedAccount(int index, global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.privilegedAccount_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPrivilegedAccount(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.privilegedAccount_.Add(value);
        return this;
      }
      public Builder AddPrivilegedAccount(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.privilegedAccount_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePrivilegedAccount(scg::IEnumerable<global::bnet.protocol.EntityId> values) {
        PrepareBuilder();
        result.privilegedAccount_.Add(values);
        return this;
      }
      public Builder ClearPrivilegedAccount() {
        PrepareBuilder();
        result.privilegedAccount_.Clear();
        return this;
      }
    }
    static JoinChannelResponse() {
      object.ReferenceEquals(global::bnet.protocol.channel.Proto.ChannelOwner.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FindChannelRequest : pb::GeneratedMessage<FindChannelRequest, FindChannelRequest.Builder> {
    private FindChannelRequest() { }
    private static readonly FindChannelRequest defaultInstance = new FindChannelRequest().MakeReadOnly();
    private static readonly string[] _findChannelRequestFieldNames = new string[] { "agent_identity", "options" };
    private static readonly uint[] _findChannelRequestFieldTags = new uint[] { 10, 18 };
    public static FindChannelRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FindChannelRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FindChannelRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_FindChannelRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FindChannelRequest, FindChannelRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_FindChannelRequest__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::bnet.protocol.Identity agentIdentity_;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::bnet.protocol.Identity AgentIdentity {
      get { return agentIdentity_ ?? global::bnet.protocol.Identity.DefaultInstance; }
    }
    
    public const int OptionsFieldNumber = 2;
    private bool hasOptions;
    private global::bnet.protocol.channel.FindChannelOptions options_;
    public bool HasOptions {
      get { return hasOptions; }
    }
    public global::bnet.protocol.channel.FindChannelOptions Options {
      get { return options_ ?? global::bnet.protocol.channel.FindChannelOptions.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOptions) return false;
        if (HasAgentIdentity) {
          if (!AgentIdentity.IsInitialized) return false;
        }
        if (!Options.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _findChannelRequestFieldNames;
      if (hasAgentIdentity) {
        output.WriteMessage(1, field_names[0], AgentIdentity);
      }
      if (hasOptions) {
        output.WriteMessage(2, field_names[1], Options);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAgentIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
        }
        if (hasOptions) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Options);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FindChannelRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FindChannelRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FindChannelRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindChannelRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FindChannelRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FindChannelRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FindChannelRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FindChannelRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FindChannelRequest result;
      
      private FindChannelRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          FindChannelRequest original = result;
          result = new FindChannelRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FindChannelRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.FindChannelRequest.Descriptor; }
      }
      
      public override FindChannelRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel.FindChannelRequest.DefaultInstance; }
      }
      
      public override FindChannelRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FindChannelRequest) {
          return MergeFrom((FindChannelRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FindChannelRequest other) {
        if (other == global::bnet.protocol.channel.FindChannelRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.HasOptions) {
          MergeOptions(other.Options);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_findChannelRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _findChannelRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.Identity.Builder subBuilder = global::bnet.protocol.Identity.CreateBuilder();
              if (result.hasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.channel.FindChannelOptions.Builder subBuilder = global::bnet.protocol.channel.FindChannelOptions.CreateBuilder();
              if (result.hasOptions) {
                subBuilder.MergeFrom(Options);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Options = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentIdentity {
       get { return result.hasAgentIdentity; }
      }
      public global::bnet.protocol.Identity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::bnet.protocol.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIdentity &&
            result.agentIdentity_ != global::bnet.protocol.Identity.DefaultInstance) {
            result.agentIdentity_ = global::bnet.protocol.Identity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        PrepareBuilder();
        result.hasAgentIdentity = false;
        result.agentIdentity_ = null;
        return this;
      }
      
      public bool HasOptions {
       get { return result.hasOptions; }
      }
      public global::bnet.protocol.channel.FindChannelOptions Options {
        get { return result.Options; }
        set { SetOptions(value); }
      }
      public Builder SetOptions(global::bnet.protocol.channel.FindChannelOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOptions = true;
        result.options_ = value;
        return this;
      }
      public Builder SetOptions(global::bnet.protocol.channel.FindChannelOptions.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOptions = true;
        result.options_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOptions(global::bnet.protocol.channel.FindChannelOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOptions &&
            result.options_ != global::bnet.protocol.channel.FindChannelOptions.DefaultInstance) {
            result.options_ = global::bnet.protocol.channel.FindChannelOptions.CreateBuilder(result.options_).MergeFrom(value).BuildPartial();
        } else {
          result.options_ = value;
        }
        result.hasOptions = true;
        return this;
      }
      public Builder ClearOptions() {
        PrepareBuilder();
        result.hasOptions = false;
        result.options_ = null;
        return this;
      }
    }
    static FindChannelRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel.Proto.ChannelOwner.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FindChannelResponse : pb::GeneratedMessage<FindChannelResponse, FindChannelResponse.Builder> {
    private FindChannelResponse() { }
    private static readonly FindChannelResponse defaultInstance = new FindChannelResponse().MakeReadOnly();
    private static readonly string[] _findChannelResponseFieldNames = new string[] { "channel" };
    private static readonly uint[] _findChannelResponseFieldTags = new uint[] { 10 };
    public static FindChannelResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FindChannelResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FindChannelResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_FindChannelResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FindChannelResponse, FindChannelResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_FindChannelResponse__FieldAccessorTable; }
    }
    
    public const int ChannelFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.channel.ChannelDescription> channel_ = new pbc::PopsicleList<global::bnet.protocol.channel.ChannelDescription>();
    public scg::IList<global::bnet.protocol.channel.ChannelDescription> ChannelList {
      get { return channel_; }
    }
    public int ChannelCount {
      get { return channel_.Count; }
    }
    public global::bnet.protocol.channel.ChannelDescription GetChannel(int index) {
      return channel_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.channel.ChannelDescription element in ChannelList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _findChannelResponseFieldNames;
      if (channel_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], channel_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.channel.ChannelDescription element in ChannelList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FindChannelResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FindChannelResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FindChannelResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindChannelResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FindChannelResponse MakeReadOnly() {
      channel_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FindChannelResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FindChannelResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FindChannelResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FindChannelResponse result;
      
      private FindChannelResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          FindChannelResponse original = result;
          result = new FindChannelResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FindChannelResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.FindChannelResponse.Descriptor; }
      }
      
      public override FindChannelResponse DefaultInstanceForType {
        get { return global::bnet.protocol.channel.FindChannelResponse.DefaultInstance; }
      }
      
      public override FindChannelResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FindChannelResponse) {
          return MergeFrom((FindChannelResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FindChannelResponse other) {
        if (other == global::bnet.protocol.channel.FindChannelResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.channel_.Count != 0) {
          result.channel_.Add(other.channel_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_findChannelResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _findChannelResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.channel_, global::bnet.protocol.channel.ChannelDescription.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.channel.ChannelDescription> ChannelList {
        get { return PrepareBuilder().channel_; }
      }
      public int ChannelCount {
        get { return result.ChannelCount; }
      }
      public global::bnet.protocol.channel.ChannelDescription GetChannel(int index) {
        return result.GetChannel(index);
      }
      public Builder SetChannel(int index, global::bnet.protocol.channel.ChannelDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.channel_[index] = value;
        return this;
      }
      public Builder SetChannel(int index, global::bnet.protocol.channel.ChannelDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.channel_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChannel(global::bnet.protocol.channel.ChannelDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.channel_.Add(value);
        return this;
      }
      public Builder AddChannel(global::bnet.protocol.channel.ChannelDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.channel_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChannel(scg::IEnumerable<global::bnet.protocol.channel.ChannelDescription> values) {
        PrepareBuilder();
        result.channel_.Add(values);
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.channel_.Clear();
        return this;
      }
    }
    static FindChannelResponse() {
      object.ReferenceEquals(global::bnet.protocol.channel.Proto.ChannelOwner.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetChannelInfoRequest : pb::GeneratedMessage<GetChannelInfoRequest, GetChannelInfoRequest.Builder> {
    private GetChannelInfoRequest() { }
    private static readonly GetChannelInfoRequest defaultInstance = new GetChannelInfoRequest().MakeReadOnly();
    private static readonly string[] _getChannelInfoRequestFieldNames = new string[] { "agent_id", "channel_id" };
    private static readonly uint[] _getChannelInfoRequestFieldTags = new uint[] { 10, 18 };
    public static GetChannelInfoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetChannelInfoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetChannelInfoRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_GetChannelInfoRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetChannelInfoRequest, GetChannelInfoRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_GetChannelInfoRequest__FieldAccessorTable; }
    }
    
    public const int AgentIdFieldNumber = 1;
    private bool hasAgentId;
    private global::bnet.protocol.EntityId agentId_;
    public bool HasAgentId {
      get { return hasAgentId; }
    }
    public global::bnet.protocol.EntityId AgentId {
      get { return agentId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ChannelIdFieldNumber = 2;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChannelId) return false;
        if (HasAgentId) {
          if (!AgentId.IsInitialized) return false;
        }
        if (!ChannelId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getChannelInfoRequestFieldNames;
      if (hasAgentId) {
        output.WriteMessage(1, field_names[0], AgentId);
      }
      if (hasChannelId) {
        output.WriteMessage(2, field_names[1], ChannelId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAgentId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AgentId);
        }
        if (hasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ChannelId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetChannelInfoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetChannelInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetChannelInfoRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetChannelInfoRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetChannelInfoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetChannelInfoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetChannelInfoRequest result;
      
      private GetChannelInfoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetChannelInfoRequest original = result;
          result = new GetChannelInfoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetChannelInfoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.GetChannelInfoRequest.Descriptor; }
      }
      
      public override GetChannelInfoRequest DefaultInstanceForType {
        get { return global::bnet.protocol.channel.GetChannelInfoRequest.DefaultInstance; }
      }
      
      public override GetChannelInfoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetChannelInfoRequest) {
          return MergeFrom((GetChannelInfoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetChannelInfoRequest other) {
        if (other == global::bnet.protocol.channel.GetChannelInfoRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentId) {
          MergeAgentId(other.AgentId);
        }
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getChannelInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getChannelInfoRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasAgentId) {
                subBuilder.MergeFrom(AgentId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentId {
       get { return result.hasAgentId; }
      }
      public global::bnet.protocol.EntityId AgentId {
        get { return result.AgentId; }
        set { SetAgentId(value); }
      }
      public Builder SetAgentId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentId = true;
        result.agentId_ = value;
        return this;
      }
      public Builder SetAgentId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentId = true;
        result.agentId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentId &&
            result.agentId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.agentId_ = global::bnet.protocol.EntityId.CreateBuilder(result.agentId_).MergeFrom(value).BuildPartial();
        } else {
          result.agentId_ = value;
        }
        result.hasAgentId = true;
        return this;
      }
      public Builder ClearAgentId() {
        PrepareBuilder();
        result.hasAgentId = false;
        result.agentId_ = null;
        return this;
      }
      
      public bool HasChannelId {
       get { return result.hasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = null;
        return this;
      }
    }
    static GetChannelInfoRequest() {
      object.ReferenceEquals(global::bnet.protocol.channel.Proto.ChannelOwner.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetChannelInfoResponse : pb::GeneratedMessage<GetChannelInfoResponse, GetChannelInfoResponse.Builder> {
    private GetChannelInfoResponse() { }
    private static readonly GetChannelInfoResponse defaultInstance = new GetChannelInfoResponse().MakeReadOnly();
    private static readonly string[] _getChannelInfoResponseFieldNames = new string[] { "channel_info" };
    private static readonly uint[] _getChannelInfoResponseFieldTags = new uint[] { 10 };
    public static GetChannelInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetChannelInfoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetChannelInfoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_GetChannelInfoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetChannelInfoResponse, GetChannelInfoResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.Proto.ChannelOwner.internal__static_bnet_protocol_channel_GetChannelInfoResponse__FieldAccessorTable; }
    }
    
    public const int ChannelInfoFieldNumber = 1;
    private bool hasChannelInfo;
    private global::bnet.protocol.channel.ChannelInfo channelInfo_;
    public bool HasChannelInfo {
      get { return hasChannelInfo; }
    }
    public global::bnet.protocol.channel.ChannelInfo ChannelInfo {
      get { return channelInfo_ ?? global::bnet.protocol.channel.ChannelInfo.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasChannelInfo) {
          if (!ChannelInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getChannelInfoResponseFieldNames;
      if (hasChannelInfo) {
        output.WriteMessage(1, field_names[0], ChannelInfo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasChannelInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelInfo);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetChannelInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetChannelInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChannelInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetChannelInfoResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetChannelInfoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetChannelInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetChannelInfoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetChannelInfoResponse result;
      
      private GetChannelInfoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetChannelInfoResponse original = result;
          result = new GetChannelInfoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetChannelInfoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.GetChannelInfoResponse.Descriptor; }
      }
      
      public override GetChannelInfoResponse DefaultInstanceForType {
        get { return global::bnet.protocol.channel.GetChannelInfoResponse.DefaultInstance; }
      }
      
      public override GetChannelInfoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetChannelInfoResponse) {
          return MergeFrom((GetChannelInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetChannelInfoResponse other) {
        if (other == global::bnet.protocol.channel.GetChannelInfoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChannelInfo) {
          MergeChannelInfo(other.ChannelInfo);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getChannelInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getChannelInfoResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.channel.ChannelInfo.Builder subBuilder = global::bnet.protocol.channel.ChannelInfo.CreateBuilder();
              if (result.hasChannelInfo) {
                subBuilder.MergeFrom(ChannelInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChannelInfo {
       get { return result.hasChannelInfo; }
      }
      public global::bnet.protocol.channel.ChannelInfo ChannelInfo {
        get { return result.ChannelInfo; }
        set { SetChannelInfo(value); }
      }
      public Builder SetChannelInfo(global::bnet.protocol.channel.ChannelInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannelInfo = true;
        result.channelInfo_ = value;
        return this;
      }
      public Builder SetChannelInfo(global::bnet.protocol.channel.ChannelInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChannelInfo = true;
        result.channelInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelInfo(global::bnet.protocol.channel.ChannelInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChannelInfo &&
            result.channelInfo_ != global::bnet.protocol.channel.ChannelInfo.DefaultInstance) {
            result.channelInfo_ = global::bnet.protocol.channel.ChannelInfo.CreateBuilder(result.channelInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.channelInfo_ = value;
        }
        result.hasChannelInfo = true;
        return this;
      }
      public Builder ClearChannelInfo() {
        PrepareBuilder();
        result.hasChannelInfo = false;
        result.channelInfo_ = null;
        return this;
      }
    }
    static GetChannelInfoResponse() {
      object.ReferenceEquals(global::bnet.protocol.channel.Proto.ChannelOwner.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class ChannelOwner : pb::IService {
    public abstract void GetChannelId(
        pb::IRpcController controller,
        global::bnet.protocol.channel.GetChannelIdRequest request,
        global::System.Action<global::bnet.protocol.channel.GetChannelIdResponse> done);
    public abstract void CreateChannel(
        pb::IRpcController controller,
        global::bnet.protocol.channel.CreateChannelRequest request,
        global::System.Action<global::bnet.protocol.channel.CreateChannelResponse> done);
    public abstract void JoinChannel(
        pb::IRpcController controller,
        global::bnet.protocol.channel.JoinChannelRequest request,
        global::System.Action<global::bnet.protocol.channel.JoinChannelResponse> done);
    public abstract void FindChannel(
        pb::IRpcController controller,
        global::bnet.protocol.channel.FindChannelRequest request,
        global::System.Action<global::bnet.protocol.channel.FindChannelResponse> done);
    public abstract void GetChannelInfo(
        pb::IRpcController controller,
        global::bnet.protocol.channel.GetChannelInfoRequest request,
        global::System.Action<global::bnet.protocol.channel.GetChannelInfoResponse> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.ChannelOwner.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.GetChannelId(controller, (global::bnet.protocol.channel.GetChannelIdRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.channel.GetChannelIdResponse>(
              done));
          return;
        case 1:
          this.CreateChannel(controller, (global::bnet.protocol.channel.CreateChannelRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.channel.CreateChannelResponse>(
              done));
          return;
        case 2:
          this.JoinChannel(controller, (global::bnet.protocol.channel.JoinChannelRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.channel.JoinChannelResponse>(
              done));
          return;
        case 3:
          this.FindChannel(controller, (global::bnet.protocol.channel.FindChannelRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.channel.FindChannelResponse>(
              done));
          return;
        case 4:
          this.GetChannelInfo(controller, (global::bnet.protocol.channel.GetChannelInfoRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.channel.GetChannelInfoResponse>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.channel.GetChannelIdRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.channel.CreateChannelRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.channel.JoinChannelRequest.DefaultInstance;
        case 3:
          return global::bnet.protocol.channel.FindChannelRequest.DefaultInstance;
        case 4:
          return global::bnet.protocol.channel.GetChannelInfoRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.channel.GetChannelIdResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.channel.CreateChannelResponse.DefaultInstance;
        case 2:
          return global::bnet.protocol.channel.JoinChannelResponse.DefaultInstance;
        case 3:
          return global::bnet.protocol.channel.FindChannelResponse.DefaultInstance;
        case 4:
          return global::bnet.protocol.channel.GetChannelInfoResponse.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.channel.ChannelOwner {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void GetChannelId(
          pb::IRpcController controller,
          global::bnet.protocol.channel.GetChannelIdRequest request,
          global::System.Action<global::bnet.protocol.channel.GetChannelIdResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.channel.GetChannelIdResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.channel.GetChannelIdResponse, global::bnet.protocol.channel.GetChannelIdResponse.Builder>(done, global::bnet.protocol.channel.GetChannelIdResponse.DefaultInstance));
      }
      
      public override void CreateChannel(
          pb::IRpcController controller,
          global::bnet.protocol.channel.CreateChannelRequest request,
          global::System.Action<global::bnet.protocol.channel.CreateChannelResponse> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.channel.CreateChannelResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.channel.CreateChannelResponse, global::bnet.protocol.channel.CreateChannelResponse.Builder>(done, global::bnet.protocol.channel.CreateChannelResponse.DefaultInstance));
      }
      
      public override void JoinChannel(
          pb::IRpcController controller,
          global::bnet.protocol.channel.JoinChannelRequest request,
          global::System.Action<global::bnet.protocol.channel.JoinChannelResponse> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.channel.JoinChannelResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.channel.JoinChannelResponse, global::bnet.protocol.channel.JoinChannelResponse.Builder>(done, global::bnet.protocol.channel.JoinChannelResponse.DefaultInstance));
      }
      
      public override void FindChannel(
          pb::IRpcController controller,
          global::bnet.protocol.channel.FindChannelRequest request,
          global::System.Action<global::bnet.protocol.channel.FindChannelResponse> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bnet.protocol.channel.FindChannelResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.channel.FindChannelResponse, global::bnet.protocol.channel.FindChannelResponse.Builder>(done, global::bnet.protocol.channel.FindChannelResponse.DefaultInstance));
      }
      
      public override void GetChannelInfo(
          pb::IRpcController controller,
          global::bnet.protocol.channel.GetChannelInfoRequest request,
          global::System.Action<global::bnet.protocol.channel.GetChannelInfoResponse> done) {
        channel.CallMethod(Descriptor.Methods[4],
            controller, request, global::bnet.protocol.channel.GetChannelInfoResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.channel.GetChannelInfoResponse, global::bnet.protocol.channel.GetChannelInfoResponse.Builder>(done, global::bnet.protocol.channel.GetChannelInfoResponse.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
