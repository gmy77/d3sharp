// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.channel {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class ChannelTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_Message__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.Message, global::bnet.protocol.channel.Message.Builder> internal__static_bnet_protocol_channel_Message__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_ChannelDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelDescription, global::bnet.protocol.channel.ChannelDescription.Builder> internal__static_bnet_protocol_channel_ChannelDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_ChannelInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelInfo, global::bnet.protocol.channel.ChannelInfo.Builder> internal__static_bnet_protocol_channel_ChannelInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_ChannelState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelState, global::bnet.protocol.channel.ChannelState.Builder> internal__static_bnet_protocol_channel_ChannelState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_MemberState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.MemberState, global::bnet.protocol.channel.MemberState.Builder> internal__static_bnet_protocol_channel_MemberState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_Member__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.Member, global::bnet.protocol.channel.Member.Builder> internal__static_bnet_protocol_channel_Member__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ChannelTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Ci5zZXJ2aWNlL2NoYW5uZWwvZGVmaW5pdGlvbi9jaGFubmVsX3R5cGVzLnBy" + 
          "b3RvEhVibmV0LnByb3RvY29sLmNoYW5uZWwaHGxpYi9wcm90b2NvbC9hdHRy" + 
          "aWJ1dGUucHJvdG8aGWxpYi9wcm90b2NvbC9lbnRpdHkucHJvdG8aHWxpYi9w" + 
          "cm90b2NvbC9pbnZpdGF0aW9uLnByb3RvIlUKB01lc3NhZ2USNQoJYXR0cmli" + 
          "dXRlGAEgAygLMiIuYm5ldC5wcm90b2NvbC5hdHRyaWJ1dGUuQXR0cmlidXRl" + 
          "EgwKBHJvbGUYAiABKA0qBQhkEJFOIpUBChJDaGFubmVsRGVzY3JpcHRpb24S" + 
          "KwoKY2hhbm5lbF9pZBgBIAIoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQS" + 
          "FwoPY3VycmVudF9tZW1iZXJzGAIgASgNEjIKBXN0YXRlGAMgASgLMiMuYm5l" + 
          "dC5wcm90b2NvbC5jaGFubmVsLkNoYW5uZWxTdGF0ZSoFCGQQkU4igwEKC0No" + 
          "YW5uZWxJbmZvEj4KC2Rlc2NyaXB0aW9uGAEgAigLMikuYm5ldC5wcm90b2Nv" + 
          "bC5jaGFubmVsLkNoYW5uZWxEZXNjcmlwdGlvbhItCgZtZW1iZXIYAiADKAsy" + 
          "HS5ibmV0LnByb3RvY29sLmNoYW5uZWwuTWVtYmVyKgUIZBCRTiKeBAoMQ2hh" + 
          "bm5lbFN0YXRlEhMKC21heF9tZW1iZXJzGAEgASgNEhMKC21pbl9tZW1iZXJz" + 
          "GAIgASgNEjUKCWF0dHJpYnV0ZRgDIAMoCzIiLmJuZXQucHJvdG9jb2wuYXR0" + 
          "cmlidXRlLkF0dHJpYnV0ZRI4CgppbnZpdGF0aW9uGAQgAygLMiQuYm5ldC5w" + 
          "cm90b2NvbC5pbnZpdGF0aW9uLkludml0YXRpb24SFwoPbWF4X2ludml0YXRp" + 
          "b25zGAUgASgNEg4KBnJlYXNvbhgGIAEoDRJbCg1wcml2YWN5X2xldmVsGAcg" + 
          "ASgOMjAuYm5ldC5wcm90b2NvbC5jaGFubmVsLkNoYW5uZWxTdGF0ZS5Qcml2" + 
          "YWN5TGV2ZWw6ElBSSVZBQ1lfTEVWRUxfT1BFThIOCgZwdWJsaWMYCCABKAgS" + 
          "DAoEbmFtZRgJIAEoCRIVCg1kZWxlZ2F0ZV9uYW1lGAogASgJEh0KDGNoYW5u" + 
          "ZWxfdHlwZRgLIAEoCToHZGVmYXVsdCKRAQoMUHJpdmFjeUxldmVsEhYKElBS" + 
          "SVZBQ1lfTEVWRUxfT1BFThABEiwKKFBSSVZBQ1lfTEVWRUxfT1BFTl9JTlZJ" + 
          "VEFUSU9OX0FORF9GUklFTkQQAhIhCh1QUklWQUNZX0xFVkVMX09QRU5fSU5W" + 
          "SVRBVElPThADEhgKFFBSSVZBQ1lfTEVWRUxfQ0xPU0VEEAQqBQhkEJFOInQK" + 
          "C01lbWJlclN0YXRlEjUKCWF0dHJpYnV0ZRgBIAMoCzIiLmJuZXQucHJvdG9j" + 
          "b2wuYXR0cmlidXRlLkF0dHJpYnV0ZRIQCgRyb2xlGAIgAygNQgIQARIVCgpw" + 
          "cml2aWxlZ2VzGAMgASgEOgEwKgUIZBCRTiJmCgZNZW1iZXISKQoIaWRlbnRp" + 
          "dHkYASACKAsyFy5ibmV0LnByb3RvY29sLklkZW50aXR5EjEKBXN0YXRlGAIg" + 
          "AigLMiIuYm5ldC5wcm90b2NvbC5jaGFubmVsLk1lbWJlclN0YXRl");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_channel_Message__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_channel_Message__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.Message, global::bnet.protocol.channel.Message.Builder>(internal__static_bnet_protocol_channel_Message__Descriptor,
                new string[] { "Attribute", "Role", });
        internal__static_bnet_protocol_channel_ChannelDescription__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_channel_ChannelDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelDescription, global::bnet.protocol.channel.ChannelDescription.Builder>(internal__static_bnet_protocol_channel_ChannelDescription__Descriptor,
                new string[] { "ChannelId", "CurrentMembers", "State", });
        internal__static_bnet_protocol_channel_ChannelInfo__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_channel_ChannelInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelInfo, global::bnet.protocol.channel.ChannelInfo.Builder>(internal__static_bnet_protocol_channel_ChannelInfo__Descriptor,
                new string[] { "Description", "Member", });
        internal__static_bnet_protocol_channel_ChannelState__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_channel_ChannelState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.ChannelState, global::bnet.protocol.channel.ChannelState.Builder>(internal__static_bnet_protocol_channel_ChannelState__Descriptor,
                new string[] { "MaxMembers", "MinMembers", "Attribute", "Invitation", "MaxInvitations", "Reason", "PrivacyLevel", "Public", "Name", "DelegateName", "ChannelType", });
        internal__static_bnet_protocol_channel_MemberState__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_channel_MemberState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.MemberState, global::bnet.protocol.channel.MemberState.Builder>(internal__static_bnet_protocol_channel_MemberState__Descriptor,
                new string[] { "Attribute", "Role", "Privileges", });
        internal__static_bnet_protocol_channel_Member__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_channel_Member__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel.Member, global::bnet.protocol.channel.Member.Builder>(internal__static_bnet_protocol_channel_Member__Descriptor,
                new string[] { "Identity", "State", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
          global::bnet.protocol.Entity.Descriptor, 
          global::bnet.protocol.invitation.Proto.Invitation.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Message : pb::ExtendableMessage<Message, Message.Builder> {
    private Message() { }
    private static readonly Message defaultInstance = new Message().MakeReadOnly();
    private static readonly string[] _messageFieldNames = new string[] { "attribute", "role" };
    private static readonly uint[] _messageFieldTags = new uint[] { 10, 16 };
    public static Message DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Message DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Message ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_Message__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Message, Message.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_Message__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int RoleFieldNumber = 2;
    private bool hasRole;
    private uint role_;
    public bool HasRole {
      get { return hasRole; }
    }
    public uint Role {
      get { return role_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _messageFieldNames;
      pb::ExtendableMessage<Message, Message.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (attribute_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], attribute_);
      }
      if (hasRole) {
        output.WriteUInt32(2, field_names[1], Role);
      }
      extensionWriter.WriteUntil(10001, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasRole) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Role);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Message ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Message MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Message prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::ExtendableBuilder<Message, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Message cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Message result;
      
      private Message PrepareBuilder() {
        if (resultIsReadOnly) {
          Message original = result;
          result = new Message();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Message MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.Message.Descriptor; }
      }
      
      public override Message DefaultInstanceForType {
        get { return global::bnet.protocol.channel.Message.DefaultInstance; }
      }
      
      public override Message BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Message) {
          return MergeFrom((Message) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Message other) {
        if (other == global::bnet.protocol.channel.Message.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasRole) {
          Role = other.Role;
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasRole = input.ReadUInt32(ref result.role_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasRole {
        get { return result.hasRole; }
      }
      public uint Role {
        get { return result.Role; }
        set { SetRole(value); }
      }
      public Builder SetRole(uint value) {
        PrepareBuilder();
        result.hasRole = true;
        result.role_ = value;
        return this;
      }
      public Builder ClearRole() {
        PrepareBuilder();
        result.hasRole = false;
        result.role_ = 0;
        return this;
      }
    }
    static Message() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChannelDescription : pb::ExtendableMessage<ChannelDescription, ChannelDescription.Builder> {
    private ChannelDescription() { }
    private static readonly ChannelDescription defaultInstance = new ChannelDescription().MakeReadOnly();
    private static readonly string[] _channelDescriptionFieldNames = new string[] { "channel_id", "current_members", "state" };
    private static readonly uint[] _channelDescriptionFieldTags = new uint[] { 10, 16, 26 };
    public static ChannelDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChannelDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChannelDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChannelDescription, ChannelDescription.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelDescription__FieldAccessorTable; }
    }
    
    public const int ChannelIdFieldNumber = 1;
    private bool hasChannelId;
    private global::bnet.protocol.EntityId channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    public global::bnet.protocol.EntityId ChannelId {
      get { return channelId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int CurrentMembersFieldNumber = 2;
    private bool hasCurrentMembers;
    private uint currentMembers_;
    public bool HasCurrentMembers {
      get { return hasCurrentMembers; }
    }
    public uint CurrentMembers {
      get { return currentMembers_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private global::bnet.protocol.channel.ChannelState state_;
    public bool HasState {
      get { return hasState; }
    }
    public global::bnet.protocol.channel.ChannelState State {
      get { return state_ ?? global::bnet.protocol.channel.ChannelState.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChannelId) return false;
        if (!ChannelId.IsInitialized) return false;
        if (HasState) {
          if (!State.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _channelDescriptionFieldNames;
      pb::ExtendableMessage<ChannelDescription, ChannelDescription.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (hasChannelId) {
        output.WriteMessage(1, field_names[0], ChannelId);
      }
      if (hasCurrentMembers) {
        output.WriteUInt32(2, field_names[1], CurrentMembers);
      }
      if (hasState) {
        output.WriteMessage(3, field_names[2], State);
      }
      extensionWriter.WriteUntil(10001, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasChannelId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelId);
        }
        if (hasCurrentMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, CurrentMembers);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, State);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChannelDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChannelDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChannelDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChannelDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChannelDescription MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChannelDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::ExtendableBuilder<ChannelDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChannelDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChannelDescription result;
      
      private ChannelDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          ChannelDescription original = result;
          result = new ChannelDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChannelDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.ChannelDescription.Descriptor; }
      }
      
      public override ChannelDescription DefaultInstanceForType {
        get { return global::bnet.protocol.channel.ChannelDescription.DefaultInstance; }
      }
      
      public override ChannelDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChannelDescription) {
          return MergeFrom((ChannelDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChannelDescription other) {
        if (other == global::bnet.protocol.channel.ChannelDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChannelId) {
          MergeChannelId(other.ChannelId);
        }
        if (other.HasCurrentMembers) {
          CurrentMembers = other.CurrentMembers;
        }
        if (other.HasState) {
          MergeState(other.State);
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_channelDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _channelDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasChannelId) {
                subBuilder.MergeFrom(ChannelId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChannelId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCurrentMembers = input.ReadUInt32(ref result.currentMembers_);
              break;
            }
            case 26: {
              global::bnet.protocol.channel.ChannelState.Builder subBuilder = global::bnet.protocol.channel.ChannelState.CreateBuilder();
              if (result.hasState) {
                subBuilder.MergeFrom(State);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              State = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChannelId {
       get { return result.hasChannelId; }
      }
      public global::bnet.protocol.EntityId ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder SetChannelId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChannelId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChannelId &&
            result.channelId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.channelId_ = global::bnet.protocol.EntityId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
        } else {
          result.channelId_ = value;
        }
        result.hasChannelId = true;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = null;
        return this;
      }
      
      public bool HasCurrentMembers {
        get { return result.hasCurrentMembers; }
      }
      public uint CurrentMembers {
        get { return result.CurrentMembers; }
        set { SetCurrentMembers(value); }
      }
      public Builder SetCurrentMembers(uint value) {
        PrepareBuilder();
        result.hasCurrentMembers = true;
        result.currentMembers_ = value;
        return this;
      }
      public Builder ClearCurrentMembers() {
        PrepareBuilder();
        result.hasCurrentMembers = false;
        result.currentMembers_ = 0;
        return this;
      }
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::bnet.protocol.channel.ChannelState State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::bnet.protocol.channel.ChannelState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder SetState(global::bnet.protocol.channel.ChannelState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = builderForValue.Build();
        return this;
      }
      public Builder MergeState(global::bnet.protocol.channel.ChannelState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasState &&
            result.state_ != global::bnet.protocol.channel.ChannelState.DefaultInstance) {
            result.state_ = global::bnet.protocol.channel.ChannelState.CreateBuilder(result.state_).MergeFrom(value).BuildPartial();
        } else {
          result.state_ = value;
        }
        result.hasState = true;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = null;
        return this;
      }
    }
    static ChannelDescription() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChannelInfo : pb::ExtendableMessage<ChannelInfo, ChannelInfo.Builder> {
    private ChannelInfo() { }
    private static readonly ChannelInfo defaultInstance = new ChannelInfo().MakeReadOnly();
    private static readonly string[] _channelInfoFieldNames = new string[] { "description", "member" };
    private static readonly uint[] _channelInfoFieldTags = new uint[] { 10, 18 };
    public static ChannelInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChannelInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChannelInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChannelInfo, ChannelInfo.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelInfo__FieldAccessorTable; }
    }
    
    public const int DescriptionFieldNumber = 1;
    private bool hasDescription;
    private global::bnet.protocol.channel.ChannelDescription description_;
    public bool HasDescription {
      get { return hasDescription; }
    }
    public global::bnet.protocol.channel.ChannelDescription Description {
      get { return description_ ?? global::bnet.protocol.channel.ChannelDescription.DefaultInstance; }
    }
    
    public const int MemberFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.channel.Member> member_ = new pbc::PopsicleList<global::bnet.protocol.channel.Member>();
    public scg::IList<global::bnet.protocol.channel.Member> MemberList {
      get { return member_; }
    }
    public int MemberCount {
      get { return member_.Count; }
    }
    public global::bnet.protocol.channel.Member GetMember(int index) {
      return member_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDescription) return false;
        if (!Description.IsInitialized) return false;
        foreach (global::bnet.protocol.channel.Member element in MemberList) {
          if (!element.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _channelInfoFieldNames;
      pb::ExtendableMessage<ChannelInfo, ChannelInfo.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (hasDescription) {
        output.WriteMessage(1, field_names[0], Description);
      }
      if (member_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], member_);
      }
      extensionWriter.WriteUntil(10001, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Description);
        }
        foreach (global::bnet.protocol.channel.Member element in MemberList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChannelInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChannelInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChannelInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChannelInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChannelInfo MakeReadOnly() {
      member_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChannelInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::ExtendableBuilder<ChannelInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChannelInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChannelInfo result;
      
      private ChannelInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ChannelInfo original = result;
          result = new ChannelInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChannelInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.ChannelInfo.Descriptor; }
      }
      
      public override ChannelInfo DefaultInstanceForType {
        get { return global::bnet.protocol.channel.ChannelInfo.DefaultInstance; }
      }
      
      public override ChannelInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChannelInfo) {
          return MergeFrom((ChannelInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChannelInfo other) {
        if (other == global::bnet.protocol.channel.ChannelInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDescription) {
          MergeDescription(other.Description);
        }
        if (other.member_.Count != 0) {
          result.member_.Add(other.member_);
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_channelInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _channelInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.channel.ChannelDescription.Builder subBuilder = global::bnet.protocol.channel.ChannelDescription.CreateBuilder();
              if (result.hasDescription) {
                subBuilder.MergeFrom(Description);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Description = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.member_, global::bnet.protocol.channel.Member.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDescription {
       get { return result.hasDescription; }
      }
      public global::bnet.protocol.channel.ChannelDescription Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(global::bnet.protocol.channel.ChannelDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder SetDescription(global::bnet.protocol.channel.ChannelDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDescription(global::bnet.protocol.channel.ChannelDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDescription &&
            result.description_ != global::bnet.protocol.channel.ChannelDescription.DefaultInstance) {
            result.description_ = global::bnet.protocol.channel.ChannelDescription.CreateBuilder(result.description_).MergeFrom(value).BuildPartial();
        } else {
          result.description_ = value;
        }
        result.hasDescription = true;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.channel.Member> MemberList {
        get { return PrepareBuilder().member_; }
      }
      public int MemberCount {
        get { return result.MemberCount; }
      }
      public global::bnet.protocol.channel.Member GetMember(int index) {
        return result.GetMember(index);
      }
      public Builder SetMember(int index, global::bnet.protocol.channel.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.member_[index] = value;
        return this;
      }
      public Builder SetMember(int index, global::bnet.protocol.channel.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.member_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMember(global::bnet.protocol.channel.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.member_.Add(value);
        return this;
      }
      public Builder AddMember(global::bnet.protocol.channel.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.member_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMember(scg::IEnumerable<global::bnet.protocol.channel.Member> values) {
        PrepareBuilder();
        result.member_.Add(values);
        return this;
      }
      public Builder ClearMember() {
        PrepareBuilder();
        result.member_.Clear();
        return this;
      }
    }
    static ChannelInfo() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChannelState : pb::ExtendableMessage<ChannelState, ChannelState.Builder> {
    private ChannelState() { }
    private static readonly ChannelState defaultInstance = new ChannelState().MakeReadOnly();
    private static readonly string[] _channelStateFieldNames = new string[] { "attribute", "channel_type", "delegate_name", "invitation", "max_invitations", "max_members", "min_members", "name", "privacy_level", "public", "reason" };
    private static readonly uint[] _channelStateFieldTags = new uint[] { 26, 90, 82, 34, 40, 8, 16, 74, 56, 64, 48 };
    public static ChannelState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChannelState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChannelState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChannelState, ChannelState.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_ChannelState__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum PrivacyLevel {
        PRIVACY_LEVEL_OPEN = 1,
        PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND = 2,
        PRIVACY_LEVEL_OPEN_INVITATION = 3,
        PRIVACY_LEVEL_CLOSED = 4,
      }
      
    }
    #endregion
    
    public const int MaxMembersFieldNumber = 1;
    private bool hasMaxMembers;
    private uint maxMembers_;
    public bool HasMaxMembers {
      get { return hasMaxMembers; }
    }
    public uint MaxMembers {
      get { return maxMembers_; }
    }
    
    public const int MinMembersFieldNumber = 2;
    private bool hasMinMembers;
    private uint minMembers_;
    public bool HasMinMembers {
      get { return hasMinMembers; }
    }
    public uint MinMembers {
      get { return minMembers_; }
    }
    
    public const int AttributeFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int InvitationFieldNumber = 4;
    private pbc::PopsicleList<global::bnet.protocol.invitation.Invitation> invitation_ = new pbc::PopsicleList<global::bnet.protocol.invitation.Invitation>();
    public scg::IList<global::bnet.protocol.invitation.Invitation> InvitationList {
      get { return invitation_; }
    }
    public int InvitationCount {
      get { return invitation_.Count; }
    }
    public global::bnet.protocol.invitation.Invitation GetInvitation(int index) {
      return invitation_[index];
    }
    
    public const int MaxInvitationsFieldNumber = 5;
    private bool hasMaxInvitations;
    private uint maxInvitations_;
    public bool HasMaxInvitations {
      get { return hasMaxInvitations; }
    }
    public uint MaxInvitations {
      get { return maxInvitations_; }
    }
    
    public const int ReasonFieldNumber = 6;
    private bool hasReason;
    private uint reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public uint Reason {
      get { return reason_; }
    }
    
    public const int PrivacyLevelFieldNumber = 7;
    private bool hasPrivacyLevel;
    private global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel privacyLevel_ = global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel.PRIVACY_LEVEL_OPEN;
    public bool HasPrivacyLevel {
      get { return hasPrivacyLevel; }
    }
    public global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel PrivacyLevel {
      get { return privacyLevel_; }
    }
    
    public const int PublicFieldNumber = 8;
    private bool hasPublic;
    private bool public_;
    public bool HasPublic {
      get { return hasPublic; }
    }
    public bool Public {
      get { return public_; }
    }
    
    public const int NameFieldNumber = 9;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DelegateNameFieldNumber = 10;
    private bool hasDelegateName;
    private string delegateName_ = "";
    public bool HasDelegateName {
      get { return hasDelegateName; }
    }
    public string DelegateName {
      get { return delegateName_; }
    }
    
    public const int ChannelTypeFieldNumber = 11;
    private bool hasChannelType;
    private string channelType_ = "default";
    public bool HasChannelType {
      get { return hasChannelType; }
    }
    public string ChannelType {
      get { return channelType_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.invitation.Invitation element in InvitationList) {
          if (!element.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _channelStateFieldNames;
      pb::ExtendableMessage<ChannelState, ChannelState.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (hasMaxMembers) {
        output.WriteUInt32(1, field_names[5], MaxMembers);
      }
      if (hasMinMembers) {
        output.WriteUInt32(2, field_names[6], MinMembers);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attribute_);
      }
      if (invitation_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], invitation_);
      }
      if (hasMaxInvitations) {
        output.WriteUInt32(5, field_names[4], MaxInvitations);
      }
      if (hasReason) {
        output.WriteUInt32(6, field_names[10], Reason);
      }
      if (hasPrivacyLevel) {
        output.WriteEnum(7, field_names[8], (int) PrivacyLevel, PrivacyLevel);
      }
      if (hasPublic) {
        output.WriteBool(8, field_names[9], Public);
      }
      if (hasName) {
        output.WriteString(9, field_names[7], Name);
      }
      if (hasDelegateName) {
        output.WriteString(10, field_names[2], DelegateName);
      }
      if (hasChannelType) {
        output.WriteString(11, field_names[1], ChannelType);
      }
      extensionWriter.WriteUntil(10001, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMaxMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, MaxMembers);
        }
        if (hasMinMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MinMembers);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::bnet.protocol.invitation.Invitation element in InvitationList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (hasMaxInvitations) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, MaxInvitations);
        }
        if (hasReason) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, Reason);
        }
        if (hasPrivacyLevel) {
          size += pb::CodedOutputStream.ComputeEnumSize(7, (int) PrivacyLevel);
        }
        if (hasPublic) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, Public);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(9, Name);
        }
        if (hasDelegateName) {
          size += pb::CodedOutputStream.ComputeStringSize(10, DelegateName);
        }
        if (hasChannelType) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ChannelType);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChannelState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChannelState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChannelState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChannelState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChannelState MakeReadOnly() {
      attribute_.MakeReadOnly();
      invitation_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChannelState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::ExtendableBuilder<ChannelState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChannelState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChannelState result;
      
      private ChannelState PrepareBuilder() {
        if (resultIsReadOnly) {
          ChannelState original = result;
          result = new ChannelState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChannelState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.ChannelState.Descriptor; }
      }
      
      public override ChannelState DefaultInstanceForType {
        get { return global::bnet.protocol.channel.ChannelState.DefaultInstance; }
      }
      
      public override ChannelState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChannelState) {
          return MergeFrom((ChannelState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChannelState other) {
        if (other == global::bnet.protocol.channel.ChannelState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMaxMembers) {
          MaxMembers = other.MaxMembers;
        }
        if (other.HasMinMembers) {
          MinMembers = other.MinMembers;
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.invitation_.Count != 0) {
          result.invitation_.Add(other.invitation_);
        }
        if (other.HasMaxInvitations) {
          MaxInvitations = other.MaxInvitations;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasPrivacyLevel) {
          PrivacyLevel = other.PrivacyLevel;
        }
        if (other.HasPublic) {
          Public = other.Public;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDelegateName) {
          DelegateName = other.DelegateName;
        }
        if (other.HasChannelType) {
          ChannelType = other.ChannelType;
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_channelStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _channelStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMaxMembers = input.ReadUInt32(ref result.maxMembers_);
              break;
            }
            case 16: {
              result.hasMinMembers = input.ReadUInt32(ref result.minMembers_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.invitation_, global::bnet.protocol.invitation.Invitation.DefaultInstance, extensionRegistry);
              break;
            }
            case 40: {
              result.hasMaxInvitations = input.ReadUInt32(ref result.maxInvitations_);
              break;
            }
            case 48: {
              result.hasReason = input.ReadUInt32(ref result.reason_);
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.privacyLevel_, out unknown)) {
                result.hasPrivacyLevel = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
            case 64: {
              result.hasPublic = input.ReadBool(ref result.public_);
              break;
            }
            case 74: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 82: {
              result.hasDelegateName = input.ReadString(ref result.delegateName_);
              break;
            }
            case 90: {
              result.hasChannelType = input.ReadString(ref result.channelType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMaxMembers {
        get { return result.hasMaxMembers; }
      }
      public uint MaxMembers {
        get { return result.MaxMembers; }
        set { SetMaxMembers(value); }
      }
      public Builder SetMaxMembers(uint value) {
        PrepareBuilder();
        result.hasMaxMembers = true;
        result.maxMembers_ = value;
        return this;
      }
      public Builder ClearMaxMembers() {
        PrepareBuilder();
        result.hasMaxMembers = false;
        result.maxMembers_ = 0;
        return this;
      }
      
      public bool HasMinMembers {
        get { return result.hasMinMembers; }
      }
      public uint MinMembers {
        get { return result.MinMembers; }
        set { SetMinMembers(value); }
      }
      public Builder SetMinMembers(uint value) {
        PrepareBuilder();
        result.hasMinMembers = true;
        result.minMembers_ = value;
        return this;
      }
      public Builder ClearMinMembers() {
        PrepareBuilder();
        result.hasMinMembers = false;
        result.minMembers_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.invitation.Invitation> InvitationList {
        get { return PrepareBuilder().invitation_; }
      }
      public int InvitationCount {
        get { return result.InvitationCount; }
      }
      public global::bnet.protocol.invitation.Invitation GetInvitation(int index) {
        return result.GetInvitation(index);
      }
      public Builder SetInvitation(int index, global::bnet.protocol.invitation.Invitation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.invitation_[index] = value;
        return this;
      }
      public Builder SetInvitation(int index, global::bnet.protocol.invitation.Invitation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.invitation_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInvitation(global::bnet.protocol.invitation.Invitation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.invitation_.Add(value);
        return this;
      }
      public Builder AddInvitation(global::bnet.protocol.invitation.Invitation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.invitation_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInvitation(scg::IEnumerable<global::bnet.protocol.invitation.Invitation> values) {
        PrepareBuilder();
        result.invitation_.Add(values);
        return this;
      }
      public Builder ClearInvitation() {
        PrepareBuilder();
        result.invitation_.Clear();
        return this;
      }
      
      public bool HasMaxInvitations {
        get { return result.hasMaxInvitations; }
      }
      public uint MaxInvitations {
        get { return result.MaxInvitations; }
        set { SetMaxInvitations(value); }
      }
      public Builder SetMaxInvitations(uint value) {
        PrepareBuilder();
        result.hasMaxInvitations = true;
        result.maxInvitations_ = value;
        return this;
      }
      public Builder ClearMaxInvitations() {
        PrepareBuilder();
        result.hasMaxInvitations = false;
        result.maxInvitations_ = 0;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public uint Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(uint value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasPrivacyLevel {
       get { return result.hasPrivacyLevel; }
      }
      public global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel PrivacyLevel {
        get { return result.PrivacyLevel; }
        set { SetPrivacyLevel(value); }
      }
      public Builder SetPrivacyLevel(global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel value) {
        PrepareBuilder();
        result.hasPrivacyLevel = true;
        result.privacyLevel_ = value;
        return this;
      }
      public Builder ClearPrivacyLevel() {
        PrepareBuilder();
        result.hasPrivacyLevel = false;
        result.privacyLevel_ = global::bnet.protocol.channel.ChannelState.Types.PrivacyLevel.PRIVACY_LEVEL_OPEN;
        return this;
      }
      
      public bool HasPublic {
        get { return result.hasPublic; }
      }
      public bool Public {
        get { return result.Public; }
        set { SetPublic(value); }
      }
      public Builder SetPublic(bool value) {
        PrepareBuilder();
        result.hasPublic = true;
        result.public_ = value;
        return this;
      }
      public Builder ClearPublic() {
        PrepareBuilder();
        result.hasPublic = false;
        result.public_ = false;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDelegateName {
        get { return result.hasDelegateName; }
      }
      public string DelegateName {
        get { return result.DelegateName; }
        set { SetDelegateName(value); }
      }
      public Builder SetDelegateName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDelegateName = true;
        result.delegateName_ = value;
        return this;
      }
      public Builder ClearDelegateName() {
        PrepareBuilder();
        result.hasDelegateName = false;
        result.delegateName_ = "";
        return this;
      }
      
      public bool HasChannelType {
        get { return result.hasChannelType; }
      }
      public string ChannelType {
        get { return result.ChannelType; }
        set { SetChannelType(value); }
      }
      public Builder SetChannelType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannelType = true;
        result.channelType_ = value;
        return this;
      }
      public Builder ClearChannelType() {
        PrepareBuilder();
        result.hasChannelType = false;
        result.channelType_ = "default";
        return this;
      }
    }
    static ChannelState() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MemberState : pb::ExtendableMessage<MemberState, MemberState.Builder> {
    private MemberState() { }
    private static readonly MemberState defaultInstance = new MemberState().MakeReadOnly();
    private static readonly string[] _memberStateFieldNames = new string[] { "attribute", "privileges", "role" };
    private static readonly uint[] _memberStateFieldTags = new uint[] { 10, 24, 18 };
    public static MemberState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MemberState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MemberState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_MemberState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MemberState, MemberState.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_MemberState__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int RoleFieldNumber = 2;
    private int roleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> role_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> RoleList {
      get { return pbc::Lists.AsReadOnly(role_); }
    }
    public int RoleCount {
      get { return role_.Count; }
    }
    public uint GetRole(int index) {
      return role_[index];
    }
    
    public const int PrivilegesFieldNumber = 3;
    private bool hasPrivileges;
    private ulong privileges_;
    public bool HasPrivileges {
      get { return hasPrivileges; }
    }
    public ulong Privileges {
      get { return privileges_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _memberStateFieldNames;
      pb::ExtendableMessage<MemberState, MemberState.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (attribute_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], attribute_);
      }
      if (role_.Count > 0) {
        output.WritePackedUInt32Array(2, field_names[2], roleMemoizedSerializedSize, role_);
      }
      if (hasPrivileges) {
        output.WriteUInt64(3, field_names[1], Privileges);
      }
      extensionWriter.WriteUntil(10001, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        {
          int dataSize = 0;
          foreach (uint element in RoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (role_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          roleMemoizedSerializedSize = dataSize;
        }
        if (hasPrivileges) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Privileges);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MemberState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MemberState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MemberState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MemberState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MemberState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MemberState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MemberState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MemberState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MemberState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MemberState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MemberState MakeReadOnly() {
      attribute_.MakeReadOnly();
      role_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MemberState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::ExtendableBuilder<MemberState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MemberState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MemberState result;
      
      private MemberState PrepareBuilder() {
        if (resultIsReadOnly) {
          MemberState original = result;
          result = new MemberState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MemberState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.MemberState.Descriptor; }
      }
      
      public override MemberState DefaultInstanceForType {
        get { return global::bnet.protocol.channel.MemberState.DefaultInstance; }
      }
      
      public override MemberState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MemberState) {
          return MergeFrom((MemberState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MemberState other) {
        if (other == global::bnet.protocol.channel.MemberState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.role_.Count != 0) {
          result.role_.Add(other.role_);
        }
        if (other.HasPrivileges) {
          Privileges = other.Privileges;
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_memberStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _memberStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.role_);
              break;
            }
            case 24: {
              result.hasPrivileges = input.ReadUInt64(ref result.privileges_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<uint> RoleList {
        get { return PrepareBuilder().role_; }
      }
      public int RoleCount {
        get { return result.RoleCount; }
      }
      public uint GetRole(int index) {
        return result.GetRole(index);
      }
      public Builder SetRole(int index, uint value) {
        PrepareBuilder();
        result.role_[index] = value;
        return this;
      }
      public Builder AddRole(uint value) {
        PrepareBuilder();
        result.role_.Add(value);
        return this;
      }
      public Builder AddRangeRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.role_.Add(values);
        return this;
      }
      public Builder ClearRole() {
        PrepareBuilder();
        result.role_.Clear();
        return this;
      }
      
      public bool HasPrivileges {
        get { return result.hasPrivileges; }
      }
      public ulong Privileges {
        get { return result.Privileges; }
        set { SetPrivileges(value); }
      }
      public Builder SetPrivileges(ulong value) {
        PrepareBuilder();
        result.hasPrivileges = true;
        result.privileges_ = value;
        return this;
      }
      public Builder ClearPrivileges() {
        PrepareBuilder();
        result.hasPrivileges = false;
        result.privileges_ = 0UL;
        return this;
      }
    }
    static MemberState() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Member : pb::GeneratedMessage<Member, Member.Builder> {
    private Member() { }
    private static readonly Member defaultInstance = new Member().MakeReadOnly();
    private static readonly string[] _memberFieldNames = new string[] { "identity", "state" };
    private static readonly uint[] _memberFieldTags = new uint[] { 10, 18 };
    public static Member DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Member DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Member ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_Member__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Member, Member.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.channel.ChannelTypes.internal__static_bnet_protocol_channel_Member__FieldAccessorTable; }
    }
    
    public const int IdentityFieldNumber = 1;
    private bool hasIdentity;
    private global::bnet.protocol.Identity identity_;
    public bool HasIdentity {
      get { return hasIdentity; }
    }
    public global::bnet.protocol.Identity Identity {
      get { return identity_ ?? global::bnet.protocol.Identity.DefaultInstance; }
    }
    
    public const int StateFieldNumber = 2;
    private bool hasState;
    private global::bnet.protocol.channel.MemberState state_;
    public bool HasState {
      get { return hasState; }
    }
    public global::bnet.protocol.channel.MemberState State {
      get { return state_ ?? global::bnet.protocol.channel.MemberState.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdentity) return false;
        if (!hasState) return false;
        if (!Identity.IsInitialized) return false;
        if (!State.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _memberFieldNames;
      if (hasIdentity) {
        output.WriteMessage(1, field_names[0], Identity);
      }
      if (hasState) {
        output.WriteMessage(2, field_names[1], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Identity);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, State);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Member ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Member ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Member ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Member ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Member ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Member ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Member ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Member ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Member ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Member ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Member MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Member prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Member, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Member cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Member result;
      
      private Member PrepareBuilder() {
        if (resultIsReadOnly) {
          Member original = result;
          result = new Member();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Member MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.channel.Member.Descriptor; }
      }
      
      public override Member DefaultInstanceForType {
        get { return global::bnet.protocol.channel.Member.DefaultInstance; }
      }
      
      public override Member BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Member) {
          return MergeFrom((Member) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Member other) {
        if (other == global::bnet.protocol.channel.Member.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdentity) {
          MergeIdentity(other.Identity);
        }
        if (other.HasState) {
          MergeState(other.State);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_memberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _memberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.Identity.Builder subBuilder = global::bnet.protocol.Identity.CreateBuilder();
              if (result.hasIdentity) {
                subBuilder.MergeFrom(Identity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Identity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.channel.MemberState.Builder subBuilder = global::bnet.protocol.channel.MemberState.CreateBuilder();
              if (result.hasState) {
                subBuilder.MergeFrom(State);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              State = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdentity {
       get { return result.hasIdentity; }
      }
      public global::bnet.protocol.Identity Identity {
        get { return result.Identity; }
        set { SetIdentity(value); }
      }
      public Builder SetIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = value;
        return this;
      }
      public Builder SetIdentity(global::bnet.protocol.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIdentity(global::bnet.protocol.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIdentity &&
            result.identity_ != global::bnet.protocol.Identity.DefaultInstance) {
            result.identity_ = global::bnet.protocol.Identity.CreateBuilder(result.identity_).MergeFrom(value).BuildPartial();
        } else {
          result.identity_ = value;
        }
        result.hasIdentity = true;
        return this;
      }
      public Builder ClearIdentity() {
        PrepareBuilder();
        result.hasIdentity = false;
        result.identity_ = null;
        return this;
      }
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::bnet.protocol.channel.MemberState State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::bnet.protocol.channel.MemberState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder SetState(global::bnet.protocol.channel.MemberState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = builderForValue.Build();
        return this;
      }
      public Builder MergeState(global::bnet.protocol.channel.MemberState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasState &&
            result.state_ != global::bnet.protocol.channel.MemberState.DefaultInstance) {
            result.state_ = global::bnet.protocol.channel.MemberState.CreateBuilder(result.state_).MergeFrom(value).BuildPartial();
        } else {
          result.state_ = value;
        }
        result.hasState = true;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = null;
        return this;
      }
    }
    static Member() {
      object.ReferenceEquals(global::bnet.protocol.channel.ChannelTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
