// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.toon.external {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class ToonExternal {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_toon_external_ToonListRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.ToonListRequest, global::bnet.protocol.toon.external.ToonListRequest.Builder> internal__static_bnet_protocol_toon_external_ToonListRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_toon_external_ToonListResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.ToonListResponse, global::bnet.protocol.toon.external.ToonListResponse.Builder> internal__static_bnet_protocol_toon_external_ToonListResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_toon_external_SelectToonRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.SelectToonRequest, global::bnet.protocol.toon.external.SelectToonRequest.Builder> internal__static_bnet_protocol_toon_external_SelectToonRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_toon_external_SelectToonResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.SelectToonResponse, global::bnet.protocol.toon.external.SelectToonResponse.Builder> internal__static_bnet_protocol_toon_external_SelectToonResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_toon_external_CreateToonRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.CreateToonRequest, global::bnet.protocol.toon.external.CreateToonRequest.Builder> internal__static_bnet_protocol_toon_external_CreateToonRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_toon_external_CreateToonResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.CreateToonResponse, global::bnet.protocol.toon.external.CreateToonResponse.Builder> internal__static_bnet_protocol_toon_external_CreateToonResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_toon_external_ToonCreatedNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.ToonCreatedNotification, global::bnet.protocol.toon.external.ToonCreatedNotification.Builder> internal__static_bnet_protocol_toon_external_ToonCreatedNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_toon_external_DeleteToonRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.DeleteToonRequest, global::bnet.protocol.toon.external.DeleteToonRequest.Builder> internal__static_bnet_protocol_toon_external_DeleteToonRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_toon_external_DeleteToonResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.DeleteToonResponse, global::bnet.protocol.toon.external.DeleteToonResponse.Builder> internal__static_bnet_protocol_toon_external_DeleteToonResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ToonExternal() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CitzZXJ2aWNlL3Rvb24vZGVmaW5pdGlvbi90b29uX2V4dGVybmFsLnByb3Rv" + 
          "EhtibmV0LnByb3RvY29sLnRvb24uZXh0ZXJuYWwaEWxpYi9ycGMvcnBjLnBy" + 
          "b3RvGhlsaWIvcHJvdG9jb2wvZW50aXR5LnByb3RvGhxsaWIvcHJvdG9jb2wv" + 
          "YXR0cmlidXRlLnByb3RvGiJzZXJ2aWNlL3Rvb24vZGVmaW5pdGlvbi90b29u" + 
          "LnByb3RvIhEKD1Rvb25MaXN0UmVxdWVzdCI6ChBUb29uTGlzdFJlc3BvbnNl" + 
          "EiYKBXRvb25zGAIgAygLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZCI6ChFT" + 
          "ZWxlY3RUb29uUmVxdWVzdBIlCgR0b29uGAEgAigLMhcuYm5ldC5wcm90b2Nv" + 
          "bC5FbnRpdHlJZCIUChJTZWxlY3RUb29uUmVzcG9uc2UiWAoRQ3JlYXRlVG9v" + 
          "blJlcXVlc3QSDAoEbmFtZRgBIAEoCRI1CglhdHRyaWJ1dGUYAiADKAsyIi5i" + 
          "bmV0LnByb3RvY29sLmF0dHJpYnV0ZS5BdHRyaWJ1dGUiIwoSQ3JlYXRlVG9v" + 
          "blJlc3BvbnNlEg0KBXRva2VuGAEgAigNImMKF1Rvb25DcmVhdGVkTm90aWZp" + 
          "Y2F0aW9uEiUKBHRvb24YASABKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlk" + 
          "Eg0KBXRva2VuGAIgAigNEhIKCmVycm9yX2NvZGUYAyACKA0iOgoRRGVsZXRl" + 
          "VG9vblJlcXVlc3QSJQoEdG9vbhgBIAIoCzIXLmJuZXQucHJvdG9jb2wuRW50" + 
          "aXR5SWQiFAoSRGVsZXRlVG9vblJlc3BvbnNlMuMDChNUb29uU2VydmljZUV4" + 
          "dGVybmFsEm0KCFRvb25MaXN0EiwuYm5ldC5wcm90b2NvbC50b29uLmV4dGVy" + 
          "bmFsLlRvb25MaXN0UmVxdWVzdBotLmJuZXQucHJvdG9jb2wudG9vbi5leHRl" + 
          "cm5hbC5Ub29uTGlzdFJlc3BvbnNlIgSAtRgBEnMKClNlbGVjdFRvb24SLi5i" + 
          "bmV0LnByb3RvY29sLnRvb24uZXh0ZXJuYWwuU2VsZWN0VG9vblJlcXVlc3Qa" + 
          "Ly5ibmV0LnByb3RvY29sLnRvb24uZXh0ZXJuYWwuU2VsZWN0VG9vblJlc3Bv" + 
          "bnNlIgSAtRgCEnMKCkNyZWF0ZVRvb24SLi5ibmV0LnByb3RvY29sLnRvb24u" + 
          "ZXh0ZXJuYWwuQ3JlYXRlVG9vblJlcXVlc3QaLy5ibmV0LnByb3RvY29sLnRv" + 
          "b24uZXh0ZXJuYWwuQ3JlYXRlVG9vblJlc3BvbnNlIgSAtRgDEnMKCkRlbGV0" + 
          "ZVRvb24SLi5ibmV0LnByb3RvY29sLnRvb24uZXh0ZXJuYWwuRGVsZXRlVG9v" + 
          "blJlcXVlc3QaLy5ibmV0LnByb3RvY29sLnRvb24uZXh0ZXJuYWwuRGVsZXRl" + 
          "VG9vblJlc3BvbnNlIgSAtRgEMoEBChJUb29uTm90aWZ5RXh0ZXJuYWwSawoR" + 
          "Tm90aWZ5VG9vbkNyZWF0ZWQSNC5ibmV0LnByb3RvY29sLnRvb24uZXh0ZXJu" + 
          "YWwuVG9vbkNyZWF0ZWROb3RpZmljYXRpb24aGi5ibmV0LnByb3RvY29sLk5P" + 
          "X1JFU1BPTlNFIgSAtRgBQgOAAQA=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_toon_external_ToonListRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_toon_external_ToonListRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.ToonListRequest, global::bnet.protocol.toon.external.ToonListRequest.Builder>(internal__static_bnet_protocol_toon_external_ToonListRequest__Descriptor,
                new string[] { });
        internal__static_bnet_protocol_toon_external_ToonListResponse__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_toon_external_ToonListResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.ToonListResponse, global::bnet.protocol.toon.external.ToonListResponse.Builder>(internal__static_bnet_protocol_toon_external_ToonListResponse__Descriptor,
                new string[] { "Toons", });
        internal__static_bnet_protocol_toon_external_SelectToonRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_toon_external_SelectToonRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.SelectToonRequest, global::bnet.protocol.toon.external.SelectToonRequest.Builder>(internal__static_bnet_protocol_toon_external_SelectToonRequest__Descriptor,
                new string[] { "Toon", });
        internal__static_bnet_protocol_toon_external_SelectToonResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_toon_external_SelectToonResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.SelectToonResponse, global::bnet.protocol.toon.external.SelectToonResponse.Builder>(internal__static_bnet_protocol_toon_external_SelectToonResponse__Descriptor,
                new string[] { });
        internal__static_bnet_protocol_toon_external_CreateToonRequest__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_toon_external_CreateToonRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.CreateToonRequest, global::bnet.protocol.toon.external.CreateToonRequest.Builder>(internal__static_bnet_protocol_toon_external_CreateToonRequest__Descriptor,
                new string[] { "Name", "Attribute", });
        internal__static_bnet_protocol_toon_external_CreateToonResponse__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_toon_external_CreateToonResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.CreateToonResponse, global::bnet.protocol.toon.external.CreateToonResponse.Builder>(internal__static_bnet_protocol_toon_external_CreateToonResponse__Descriptor,
                new string[] { "Token", });
        internal__static_bnet_protocol_toon_external_ToonCreatedNotification__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bnet_protocol_toon_external_ToonCreatedNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.ToonCreatedNotification, global::bnet.protocol.toon.external.ToonCreatedNotification.Builder>(internal__static_bnet_protocol_toon_external_ToonCreatedNotification__Descriptor,
                new string[] { "Toon", "Token", "ErrorCode", });
        internal__static_bnet_protocol_toon_external_DeleteToonRequest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_bnet_protocol_toon_external_DeleteToonRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.DeleteToonRequest, global::bnet.protocol.toon.external.DeleteToonRequest.Builder>(internal__static_bnet_protocol_toon_external_DeleteToonRequest__Descriptor,
                new string[] { "Toon", });
        internal__static_bnet_protocol_toon_external_DeleteToonResponse__Descriptor = Descriptor.MessageTypes[8];
        internal__static_bnet_protocol_toon_external_DeleteToonResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.toon.external.DeleteToonResponse, global::bnet.protocol.toon.external.DeleteToonResponse.Builder>(internal__static_bnet_protocol_toon_external_DeleteToonResponse__Descriptor,
                new string[] { });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
        global::bnet.protocol.Entity.RegisterAllExtensions(registry);
        global::bnet.protocol.attribute.Proto.Attribute.RegisterAllExtensions(registry);
        global::bnet.protocol.toon.Toon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.Rpc.Descriptor, 
          global::bnet.protocol.Entity.Descriptor, 
          global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
          global::bnet.protocol.toon.Toon.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ToonListRequest : pb::GeneratedMessage<ToonListRequest, ToonListRequest.Builder> {
    private ToonListRequest() { }
    private static readonly ToonListRequest defaultInstance = new ToonListRequest().MakeReadOnly();
    private static readonly string[] _toonListRequestFieldNames = new string[] {  };
    private static readonly uint[] _toonListRequestFieldTags = new uint[] {  };
    public static ToonListRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ToonListRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ToonListRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_ToonListRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ToonListRequest, ToonListRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_ToonListRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _toonListRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ToonListRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonListRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonListRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ToonListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ToonListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ToonListRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ToonListRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ToonListRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ToonListRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ToonListRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ToonListRequest result;
      
      private ToonListRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ToonListRequest original = result;
          result = new ToonListRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ToonListRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.toon.external.ToonListRequest.Descriptor; }
      }
      
      public override ToonListRequest DefaultInstanceForType {
        get { return global::bnet.protocol.toon.external.ToonListRequest.DefaultInstance; }
      }
      
      public override ToonListRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ToonListRequest) {
          return MergeFrom((ToonListRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ToonListRequest other) {
        if (other == global::bnet.protocol.toon.external.ToonListRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_toonListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _toonListRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static ToonListRequest() {
      object.ReferenceEquals(global::bnet.protocol.toon.external.ToonExternal.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ToonListResponse : pb::GeneratedMessage<ToonListResponse, ToonListResponse.Builder> {
    private ToonListResponse() { }
    private static readonly ToonListResponse defaultInstance = new ToonListResponse().MakeReadOnly();
    private static readonly string[] _toonListResponseFieldNames = new string[] { "toons" };
    private static readonly uint[] _toonListResponseFieldTags = new uint[] { 18 };
    public static ToonListResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ToonListResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ToonListResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_ToonListResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ToonListResponse, ToonListResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_ToonListResponse__FieldAccessorTable; }
    }
    
    public const int ToonsFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.EntityId> toons_ = new pbc::PopsicleList<global::bnet.protocol.EntityId>();
    public scg::IList<global::bnet.protocol.EntityId> ToonsList {
      get { return toons_; }
    }
    public int ToonsCount {
      get { return toons_.Count; }
    }
    public global::bnet.protocol.EntityId GetToons(int index) {
      return toons_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.EntityId element in ToonsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _toonListResponseFieldNames;
      if (toons_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], toons_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.EntityId element in ToonsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ToonListResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonListResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonListResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ToonListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ToonListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ToonListResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ToonListResponse MakeReadOnly() {
      toons_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ToonListResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ToonListResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ToonListResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ToonListResponse result;
      
      private ToonListResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ToonListResponse original = result;
          result = new ToonListResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ToonListResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.toon.external.ToonListResponse.Descriptor; }
      }
      
      public override ToonListResponse DefaultInstanceForType {
        get { return global::bnet.protocol.toon.external.ToonListResponse.DefaultInstance; }
      }
      
      public override ToonListResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ToonListResponse) {
          return MergeFrom((ToonListResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ToonListResponse other) {
        if (other == global::bnet.protocol.toon.external.ToonListResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.toons_.Count != 0) {
          result.toons_.Add(other.toons_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_toonListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _toonListResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.toons_, global::bnet.protocol.EntityId.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.EntityId> ToonsList {
        get { return PrepareBuilder().toons_; }
      }
      public int ToonsCount {
        get { return result.ToonsCount; }
      }
      public global::bnet.protocol.EntityId GetToons(int index) {
        return result.GetToons(index);
      }
      public Builder SetToons(int index, global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.toons_[index] = value;
        return this;
      }
      public Builder SetToons(int index, global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.toons_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddToons(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.toons_.Add(value);
        return this;
      }
      public Builder AddToons(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.toons_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeToons(scg::IEnumerable<global::bnet.protocol.EntityId> values) {
        PrepareBuilder();
        result.toons_.Add(values);
        return this;
      }
      public Builder ClearToons() {
        PrepareBuilder();
        result.toons_.Clear();
        return this;
      }
    }
    static ToonListResponse() {
      object.ReferenceEquals(global::bnet.protocol.toon.external.ToonExternal.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SelectToonRequest : pb::GeneratedMessage<SelectToonRequest, SelectToonRequest.Builder> {
    private SelectToonRequest() { }
    private static readonly SelectToonRequest defaultInstance = new SelectToonRequest().MakeReadOnly();
    private static readonly string[] _selectToonRequestFieldNames = new string[] { "toon" };
    private static readonly uint[] _selectToonRequestFieldTags = new uint[] { 10 };
    public static SelectToonRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SelectToonRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SelectToonRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_SelectToonRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SelectToonRequest, SelectToonRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_SelectToonRequest__FieldAccessorTable; }
    }
    
    public const int ToonFieldNumber = 1;
    private bool hasToon;
    private global::bnet.protocol.EntityId toon_;
    public bool HasToon {
      get { return hasToon; }
    }
    public global::bnet.protocol.EntityId Toon {
      get { return toon_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToon) return false;
        if (!Toon.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _selectToonRequestFieldNames;
      if (hasToon) {
        output.WriteMessage(1, field_names[0], Toon);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasToon) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Toon);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SelectToonRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SelectToonRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SelectToonRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SelectToonRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SelectToonRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SelectToonRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SelectToonRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SelectToonRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SelectToonRequest result;
      
      private SelectToonRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SelectToonRequest original = result;
          result = new SelectToonRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SelectToonRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.toon.external.SelectToonRequest.Descriptor; }
      }
      
      public override SelectToonRequest DefaultInstanceForType {
        get { return global::bnet.protocol.toon.external.SelectToonRequest.DefaultInstance; }
      }
      
      public override SelectToonRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SelectToonRequest) {
          return MergeFrom((SelectToonRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SelectToonRequest other) {
        if (other == global::bnet.protocol.toon.external.SelectToonRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToon) {
          MergeToon(other.Toon);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_selectToonRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _selectToonRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasToon) {
                subBuilder.MergeFrom(Toon);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Toon = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToon {
       get { return result.hasToon; }
      }
      public global::bnet.protocol.EntityId Toon {
        get { return result.Toon; }
        set { SetToon(value); }
      }
      public Builder SetToon(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToon = true;
        result.toon_ = value;
        return this;
      }
      public Builder SetToon(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasToon = true;
        result.toon_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToon(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasToon &&
            result.toon_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toon_ = global::bnet.protocol.EntityId.CreateBuilder(result.toon_).MergeFrom(value).BuildPartial();
        } else {
          result.toon_ = value;
        }
        result.hasToon = true;
        return this;
      }
      public Builder ClearToon() {
        PrepareBuilder();
        result.hasToon = false;
        result.toon_ = null;
        return this;
      }
    }
    static SelectToonRequest() {
      object.ReferenceEquals(global::bnet.protocol.toon.external.ToonExternal.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SelectToonResponse : pb::GeneratedMessage<SelectToonResponse, SelectToonResponse.Builder> {
    private SelectToonResponse() { }
    private static readonly SelectToonResponse defaultInstance = new SelectToonResponse().MakeReadOnly();
    private static readonly string[] _selectToonResponseFieldNames = new string[] {  };
    private static readonly uint[] _selectToonResponseFieldTags = new uint[] {  };
    public static SelectToonResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SelectToonResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SelectToonResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_SelectToonResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SelectToonResponse, SelectToonResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_SelectToonResponse__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _selectToonResponseFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SelectToonResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SelectToonResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SelectToonResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SelectToonResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SelectToonResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SelectToonResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SelectToonResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SelectToonResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SelectToonResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SelectToonResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SelectToonResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SelectToonResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SelectToonResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SelectToonResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SelectToonResponse result;
      
      private SelectToonResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          SelectToonResponse original = result;
          result = new SelectToonResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SelectToonResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.toon.external.SelectToonResponse.Descriptor; }
      }
      
      public override SelectToonResponse DefaultInstanceForType {
        get { return global::bnet.protocol.toon.external.SelectToonResponse.DefaultInstance; }
      }
      
      public override SelectToonResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SelectToonResponse) {
          return MergeFrom((SelectToonResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SelectToonResponse other) {
        if (other == global::bnet.protocol.toon.external.SelectToonResponse.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_selectToonResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _selectToonResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static SelectToonResponse() {
      object.ReferenceEquals(global::bnet.protocol.toon.external.ToonExternal.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CreateToonRequest : pb::GeneratedMessage<CreateToonRequest, CreateToonRequest.Builder> {
    private CreateToonRequest() { }
    private static readonly CreateToonRequest defaultInstance = new CreateToonRequest().MakeReadOnly();
    private static readonly string[] _createToonRequestFieldNames = new string[] { "attribute", "name" };
    private static readonly uint[] _createToonRequestFieldTags = new uint[] { 18, 10 };
    public static CreateToonRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateToonRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateToonRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_CreateToonRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateToonRequest, CreateToonRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_CreateToonRequest__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int AttributeFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createToonRequestFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[1], Name);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], attribute_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateToonRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateToonRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateToonRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateToonRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateToonRequest MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateToonRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateToonRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateToonRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateToonRequest result;
      
      private CreateToonRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateToonRequest original = result;
          result = new CreateToonRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateToonRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.toon.external.CreateToonRequest.Descriptor; }
      }
      
      public override CreateToonRequest DefaultInstanceForType {
        get { return global::bnet.protocol.toon.external.CreateToonRequest.DefaultInstance; }
      }
      
      public override CreateToonRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateToonRequest) {
          return MergeFrom((CreateToonRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateToonRequest other) {
        if (other == global::bnet.protocol.toon.external.CreateToonRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createToonRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createToonRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
    }
    static CreateToonRequest() {
      object.ReferenceEquals(global::bnet.protocol.toon.external.ToonExternal.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CreateToonResponse : pb::GeneratedMessage<CreateToonResponse, CreateToonResponse.Builder> {
    private CreateToonResponse() { }
    private static readonly CreateToonResponse defaultInstance = new CreateToonResponse().MakeReadOnly();
    private static readonly string[] _createToonResponseFieldNames = new string[] { "token" };
    private static readonly uint[] _createToonResponseFieldTags = new uint[] { 8 };
    public static CreateToonResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateToonResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateToonResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_CreateToonResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateToonResponse, CreateToonResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_CreateToonResponse__FieldAccessorTable; }
    }
    
    public const int TokenFieldNumber = 1;
    private bool hasToken;
    private uint token_;
    public bool HasToken {
      get { return hasToken; }
    }
    public uint Token {
      get { return token_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToken) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createToonResponseFieldNames;
      if (hasToken) {
        output.WriteUInt32(1, field_names[0], Token);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Token);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateToonResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateToonResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateToonResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateToonResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateToonResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateToonResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateToonResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateToonResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateToonResponse result;
      
      private CreateToonResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateToonResponse original = result;
          result = new CreateToonResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateToonResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.toon.external.CreateToonResponse.Descriptor; }
      }
      
      public override CreateToonResponse DefaultInstanceForType {
        get { return global::bnet.protocol.toon.external.CreateToonResponse.DefaultInstance; }
      }
      
      public override CreateToonResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateToonResponse) {
          return MergeFrom((CreateToonResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateToonResponse other) {
        if (other == global::bnet.protocol.toon.external.CreateToonResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToken) {
          Token = other.Token;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createToonResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createToonResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasToken = input.ReadUInt32(ref result.token_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public uint Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(uint value) {
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = 0;
        return this;
      }
    }
    static CreateToonResponse() {
      object.ReferenceEquals(global::bnet.protocol.toon.external.ToonExternal.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ToonCreatedNotification : pb::GeneratedMessage<ToonCreatedNotification, ToonCreatedNotification.Builder> {
    private ToonCreatedNotification() { }
    private static readonly ToonCreatedNotification defaultInstance = new ToonCreatedNotification().MakeReadOnly();
    private static readonly string[] _toonCreatedNotificationFieldNames = new string[] { "error_code", "token", "toon" };
    private static readonly uint[] _toonCreatedNotificationFieldTags = new uint[] { 24, 16, 10 };
    public static ToonCreatedNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ToonCreatedNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ToonCreatedNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_ToonCreatedNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ToonCreatedNotification, ToonCreatedNotification.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_ToonCreatedNotification__FieldAccessorTable; }
    }
    
    public const int ToonFieldNumber = 1;
    private bool hasToon;
    private global::bnet.protocol.EntityId toon_;
    public bool HasToon {
      get { return hasToon; }
    }
    public global::bnet.protocol.EntityId Toon {
      get { return toon_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int TokenFieldNumber = 2;
    private bool hasToken;
    private uint token_;
    public bool HasToken {
      get { return hasToken; }
    }
    public uint Token {
      get { return token_; }
    }
    
    public const int ErrorCodeFieldNumber = 3;
    private bool hasErrorCode;
    private uint errorCode_;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    public uint ErrorCode {
      get { return errorCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToken) return false;
        if (!hasErrorCode) return false;
        if (HasToon) {
          if (!Toon.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _toonCreatedNotificationFieldNames;
      if (hasToon) {
        output.WriteMessage(1, field_names[2], Toon);
      }
      if (hasToken) {
        output.WriteUInt32(2, field_names[1], Token);
      }
      if (hasErrorCode) {
        output.WriteUInt32(3, field_names[0], ErrorCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasToon) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Toon);
        }
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Token);
        }
        if (hasErrorCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ErrorCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ToonCreatedNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonCreatedNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonCreatedNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonCreatedNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonCreatedNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonCreatedNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ToonCreatedNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ToonCreatedNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ToonCreatedNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonCreatedNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ToonCreatedNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ToonCreatedNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ToonCreatedNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ToonCreatedNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ToonCreatedNotification result;
      
      private ToonCreatedNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          ToonCreatedNotification original = result;
          result = new ToonCreatedNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ToonCreatedNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.toon.external.ToonCreatedNotification.Descriptor; }
      }
      
      public override ToonCreatedNotification DefaultInstanceForType {
        get { return global::bnet.protocol.toon.external.ToonCreatedNotification.DefaultInstance; }
      }
      
      public override ToonCreatedNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ToonCreatedNotification) {
          return MergeFrom((ToonCreatedNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ToonCreatedNotification other) {
        if (other == global::bnet.protocol.toon.external.ToonCreatedNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToon) {
          MergeToon(other.Toon);
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_toonCreatedNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _toonCreatedNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasToon) {
                subBuilder.MergeFrom(Toon);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Toon = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasToken = input.ReadUInt32(ref result.token_);
              break;
            }
            case 24: {
              result.hasErrorCode = input.ReadUInt32(ref result.errorCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToon {
       get { return result.hasToon; }
      }
      public global::bnet.protocol.EntityId Toon {
        get { return result.Toon; }
        set { SetToon(value); }
      }
      public Builder SetToon(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToon = true;
        result.toon_ = value;
        return this;
      }
      public Builder SetToon(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasToon = true;
        result.toon_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToon(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasToon &&
            result.toon_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toon_ = global::bnet.protocol.EntityId.CreateBuilder(result.toon_).MergeFrom(value).BuildPartial();
        } else {
          result.toon_ = value;
        }
        result.hasToon = true;
        return this;
      }
      public Builder ClearToon() {
        PrepareBuilder();
        result.hasToon = false;
        result.toon_ = null;
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public uint Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(uint value) {
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = 0;
        return this;
      }
      
      public bool HasErrorCode {
        get { return result.hasErrorCode; }
      }
      public uint ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      public Builder SetErrorCode(uint value) {
        PrepareBuilder();
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
    }
    static ToonCreatedNotification() {
      object.ReferenceEquals(global::bnet.protocol.toon.external.ToonExternal.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DeleteToonRequest : pb::GeneratedMessage<DeleteToonRequest, DeleteToonRequest.Builder> {
    private DeleteToonRequest() { }
    private static readonly DeleteToonRequest defaultInstance = new DeleteToonRequest().MakeReadOnly();
    private static readonly string[] _deleteToonRequestFieldNames = new string[] { "toon" };
    private static readonly uint[] _deleteToonRequestFieldTags = new uint[] { 10 };
    public static DeleteToonRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeleteToonRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeleteToonRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_DeleteToonRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeleteToonRequest, DeleteToonRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_DeleteToonRequest__FieldAccessorTable; }
    }
    
    public const int ToonFieldNumber = 1;
    private bool hasToon;
    private global::bnet.protocol.EntityId toon_;
    public bool HasToon {
      get { return hasToon; }
    }
    public global::bnet.protocol.EntityId Toon {
      get { return toon_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToon) return false;
        if (!Toon.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deleteToonRequestFieldNames;
      if (hasToon) {
        output.WriteMessage(1, field_names[0], Toon);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasToon) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Toon);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeleteToonRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeleteToonRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeleteToonRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteToonRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeleteToonRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeleteToonRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DeleteToonRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeleteToonRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeleteToonRequest result;
      
      private DeleteToonRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          DeleteToonRequest original = result;
          result = new DeleteToonRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeleteToonRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.toon.external.DeleteToonRequest.Descriptor; }
      }
      
      public override DeleteToonRequest DefaultInstanceForType {
        get { return global::bnet.protocol.toon.external.DeleteToonRequest.DefaultInstance; }
      }
      
      public override DeleteToonRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeleteToonRequest) {
          return MergeFrom((DeleteToonRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeleteToonRequest other) {
        if (other == global::bnet.protocol.toon.external.DeleteToonRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToon) {
          MergeToon(other.Toon);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deleteToonRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deleteToonRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasToon) {
                subBuilder.MergeFrom(Toon);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Toon = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToon {
       get { return result.hasToon; }
      }
      public global::bnet.protocol.EntityId Toon {
        get { return result.Toon; }
        set { SetToon(value); }
      }
      public Builder SetToon(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToon = true;
        result.toon_ = value;
        return this;
      }
      public Builder SetToon(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasToon = true;
        result.toon_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToon(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasToon &&
            result.toon_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toon_ = global::bnet.protocol.EntityId.CreateBuilder(result.toon_).MergeFrom(value).BuildPartial();
        } else {
          result.toon_ = value;
        }
        result.hasToon = true;
        return this;
      }
      public Builder ClearToon() {
        PrepareBuilder();
        result.hasToon = false;
        result.toon_ = null;
        return this;
      }
    }
    static DeleteToonRequest() {
      object.ReferenceEquals(global::bnet.protocol.toon.external.ToonExternal.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DeleteToonResponse : pb::GeneratedMessage<DeleteToonResponse, DeleteToonResponse.Builder> {
    private DeleteToonResponse() { }
    private static readonly DeleteToonResponse defaultInstance = new DeleteToonResponse().MakeReadOnly();
    private static readonly string[] _deleteToonResponseFieldNames = new string[] {  };
    private static readonly uint[] _deleteToonResponseFieldTags = new uint[] {  };
    public static DeleteToonResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeleteToonResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeleteToonResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_DeleteToonResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeleteToonResponse, DeleteToonResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.toon.external.ToonExternal.internal__static_bnet_protocol_toon_external_DeleteToonResponse__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deleteToonResponseFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeleteToonResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteToonResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteToonResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteToonResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteToonResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteToonResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeleteToonResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeleteToonResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeleteToonResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteToonResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeleteToonResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeleteToonResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DeleteToonResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeleteToonResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeleteToonResponse result;
      
      private DeleteToonResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          DeleteToonResponse original = result;
          result = new DeleteToonResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeleteToonResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.toon.external.DeleteToonResponse.Descriptor; }
      }
      
      public override DeleteToonResponse DefaultInstanceForType {
        get { return global::bnet.protocol.toon.external.DeleteToonResponse.DefaultInstance; }
      }
      
      public override DeleteToonResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeleteToonResponse) {
          return MergeFrom((DeleteToonResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeleteToonResponse other) {
        if (other == global::bnet.protocol.toon.external.DeleteToonResponse.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deleteToonResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deleteToonResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static DeleteToonResponse() {
      object.ReferenceEquals(global::bnet.protocol.toon.external.ToonExternal.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class ToonServiceExternal : pb::IService {
    public abstract void ToonList(
        pb::IRpcController controller,
        global::bnet.protocol.toon.external.ToonListRequest request,
        global::System.Action<global::bnet.protocol.toon.external.ToonListResponse> done);
    public abstract void SelectToon(
        pb::IRpcController controller,
        global::bnet.protocol.toon.external.SelectToonRequest request,
        global::System.Action<global::bnet.protocol.toon.external.SelectToonResponse> done);
    public abstract void CreateToon(
        pb::IRpcController controller,
        global::bnet.protocol.toon.external.CreateToonRequest request,
        global::System.Action<global::bnet.protocol.toon.external.CreateToonResponse> done);
    public abstract void DeleteToon(
        pb::IRpcController controller,
        global::bnet.protocol.toon.external.DeleteToonRequest request,
        global::System.Action<global::bnet.protocol.toon.external.DeleteToonResponse> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return ToonExternal.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.ToonList(controller, (global::bnet.protocol.toon.external.ToonListRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.toon.external.ToonListResponse>(
              done));
          return;
        case 1:
          this.SelectToon(controller, (global::bnet.protocol.toon.external.SelectToonRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.toon.external.SelectToonResponse>(
              done));
          return;
        case 2:
          this.CreateToon(controller, (global::bnet.protocol.toon.external.CreateToonRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.toon.external.CreateToonResponse>(
              done));
          return;
        case 3:
          this.DeleteToon(controller, (global::bnet.protocol.toon.external.DeleteToonRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.toon.external.DeleteToonResponse>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.toon.external.ToonListRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.toon.external.SelectToonRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.toon.external.CreateToonRequest.DefaultInstance;
        case 3:
          return global::bnet.protocol.toon.external.DeleteToonRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.toon.external.ToonListResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.toon.external.SelectToonResponse.DefaultInstance;
        case 2:
          return global::bnet.protocol.toon.external.CreateToonResponse.DefaultInstance;
        case 3:
          return global::bnet.protocol.toon.external.DeleteToonResponse.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.toon.external.ToonServiceExternal {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void ToonList(
          pb::IRpcController controller,
          global::bnet.protocol.toon.external.ToonListRequest request,
          global::System.Action<global::bnet.protocol.toon.external.ToonListResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.toon.external.ToonListResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.toon.external.ToonListResponse, global::bnet.protocol.toon.external.ToonListResponse.Builder>(done, global::bnet.protocol.toon.external.ToonListResponse.DefaultInstance));
      }
      
      public override void SelectToon(
          pb::IRpcController controller,
          global::bnet.protocol.toon.external.SelectToonRequest request,
          global::System.Action<global::bnet.protocol.toon.external.SelectToonResponse> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.toon.external.SelectToonResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.toon.external.SelectToonResponse, global::bnet.protocol.toon.external.SelectToonResponse.Builder>(done, global::bnet.protocol.toon.external.SelectToonResponse.DefaultInstance));
      }
      
      public override void CreateToon(
          pb::IRpcController controller,
          global::bnet.protocol.toon.external.CreateToonRequest request,
          global::System.Action<global::bnet.protocol.toon.external.CreateToonResponse> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.toon.external.CreateToonResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.toon.external.CreateToonResponse, global::bnet.protocol.toon.external.CreateToonResponse.Builder>(done, global::bnet.protocol.toon.external.CreateToonResponse.DefaultInstance));
      }
      
      public override void DeleteToon(
          pb::IRpcController controller,
          global::bnet.protocol.toon.external.DeleteToonRequest request,
          global::System.Action<global::bnet.protocol.toon.external.DeleteToonResponse> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bnet.protocol.toon.external.DeleteToonResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.toon.external.DeleteToonResponse, global::bnet.protocol.toon.external.DeleteToonResponse.Builder>(done, global::bnet.protocol.toon.external.DeleteToonResponse.DefaultInstance));
      }
    }
  }
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class ToonNotifyExternal : pb::IService {
    public abstract void NotifyToonCreated(
        pb::IRpcController controller,
        global::bnet.protocol.toon.external.ToonCreatedNotification request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return ToonExternal.Descriptor.Services[1]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.NotifyToonCreated(controller, (global::bnet.protocol.toon.external.ToonCreatedNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.toon.external.ToonCreatedNotification.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.toon.external.ToonNotifyExternal {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void NotifyToonCreated(
          pb::IRpcController controller,
          global::bnet.protocol.toon.external.ToonCreatedNotification request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
