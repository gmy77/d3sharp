// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.user_manager {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class UserManagerTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_user_manager_RecentPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.user_manager.RecentPlayer, global::bnet.protocol.user_manager.RecentPlayer.Builder> internal__static_bnet_protocol_user_manager_RecentPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_user_manager_BlockedEntity__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.user_manager.BlockedEntity, global::bnet.protocol.user_manager.BlockedEntity.Builder> internal__static_bnet_protocol_user_manager_BlockedEntity__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static UserManagerTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Ch1ibmV0L3VzZXJfbWFuYWdlcl90eXBlcy5wcm90bxIaYm5ldC5wcm90b2Nv" + 
          "bC51c2VyX21hbmFnZXIaEWJuZXQvZW50aXR5LnByb3RvGhRibmV0L2F0dHJp" + 
          "YnV0ZS5wcm90byLAAQoMUmVjZW50UGxheWVyEicKBmVudGl0eRgBIAIoCzIX" + 
          "LmJuZXQucHJvdG9jb2wuRW50aXR5SWQSEgoKcHJvZ3JhbV9pZBgCIAEoCRIY" + 
          "ChB0aW1lc3RhbXBfcGxheWVkGAMgASgGEjYKCmF0dHJpYnV0ZXMYBCADKAsy" + 
          "Ii5ibmV0LnByb3RvY29sLmF0dHJpYnV0ZS5BdHRyaWJ1dGUSDQoCaWQYBSAB" + 
          "KAc6ATASEgoHY291bnRlchgGIAEoBzoBMCJrCg1CbG9ja2VkRW50aXR5EiMK" + 
          "AmlkGAEgAigLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBIMCgRuYW1lGAIg" + 
          "ASgJEhAKBHJvbGUYAyADKA1CAhABEhUKCnByaXZpbGVnZXMYBCABKAQ6ATA=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_user_manager_RecentPlayer__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_user_manager_RecentPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.user_manager.RecentPlayer, global::bnet.protocol.user_manager.RecentPlayer.Builder>(internal__static_bnet_protocol_user_manager_RecentPlayer__Descriptor,
                new string[] { "Entity", "ProgramId", "TimestampPlayed", "Attributes", "Id", "Counter", });
        internal__static_bnet_protocol_user_manager_BlockedEntity__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_user_manager_BlockedEntity__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.user_manager.BlockedEntity, global::bnet.protocol.user_manager.BlockedEntity.Builder>(internal__static_bnet_protocol_user_manager_BlockedEntity__Descriptor,
                new string[] { "Id", "Name", "Role", "Privileges", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.Entity.Descriptor, 
          global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RecentPlayer : pb::GeneratedMessage<RecentPlayer, RecentPlayer.Builder> {
    private RecentPlayer() { }
    private static readonly RecentPlayer defaultInstance = new RecentPlayer().MakeReadOnly();
    private static readonly string[] _recentPlayerFieldNames = new string[] { "attributes", "counter", "entity", "id", "program_id", "timestamp_played" };
    private static readonly uint[] _recentPlayerFieldTags = new uint[] { 34, 53, 10, 45, 18, 25 };
    public static RecentPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RecentPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RecentPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.user_manager.UserManagerTypes.internal__static_bnet_protocol_user_manager_RecentPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RecentPlayer, RecentPlayer.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.user_manager.UserManagerTypes.internal__static_bnet_protocol_user_manager_RecentPlayer__FieldAccessorTable; }
    }
    
    public const int EntityFieldNumber = 1;
    private bool hasEntity;
    private global::bnet.protocol.EntityId entity_;
    public bool HasEntity {
      get { return hasEntity; }
    }
    public global::bnet.protocol.EntityId Entity {
      get { return entity_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ProgramIdFieldNumber = 2;
    private bool hasProgramId;
    private string programId_ = "";
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public string ProgramId {
      get { return programId_; }
    }
    
    public const int TimestampPlayedFieldNumber = 3;
    private bool hasTimestampPlayed;
    private ulong timestampPlayed_;
    public bool HasTimestampPlayed {
      get { return hasTimestampPlayed; }
    }
    public ulong TimestampPlayed {
      get { return timestampPlayed_; }
    }
    
    public const int AttributesFieldNumber = 4;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attributes_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public const int IdFieldNumber = 5;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int CounterFieldNumber = 6;
    private bool hasCounter;
    private uint counter_;
    public bool HasCounter {
      get { return hasCounter; }
    }
    public uint Counter {
      get { return counter_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntity) return false;
        if (!Entity.IsInitialized) return false;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _recentPlayerFieldNames;
      if (hasEntity) {
        output.WriteMessage(1, field_names[2], Entity);
      }
      if (hasProgramId) {
        output.WriteString(2, field_names[4], ProgramId);
      }
      if (hasTimestampPlayed) {
        output.WriteFixed64(3, field_names[5], TimestampPlayed);
      }
      if (attributes_.Count > 0) {
        output.WriteMessageArray(4, field_names[0], attributes_);
      }
      if (hasId) {
        output.WriteFixed32(5, field_names[3], Id);
      }
      if (hasCounter) {
        output.WriteFixed32(6, field_names[1], Counter);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEntity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Entity);
        }
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ProgramId);
        }
        if (hasTimestampPlayed) {
          size += pb::CodedOutputStream.ComputeFixed64Size(3, TimestampPlayed);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(5, Id);
        }
        if (hasCounter) {
          size += pb::CodedOutputStream.ComputeFixed32Size(6, Counter);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RecentPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RecentPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RecentPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RecentPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RecentPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RecentPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RecentPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RecentPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RecentPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RecentPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RecentPlayer MakeReadOnly() {
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RecentPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RecentPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RecentPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RecentPlayer result;
      
      private RecentPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          RecentPlayer original = result;
          result = new RecentPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RecentPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.user_manager.RecentPlayer.Descriptor; }
      }
      
      public override RecentPlayer DefaultInstanceForType {
        get { return global::bnet.protocol.user_manager.RecentPlayer.DefaultInstance; }
      }
      
      public override RecentPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RecentPlayer) {
          return MergeFrom((RecentPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RecentPlayer other) {
        if (other == global::bnet.protocol.user_manager.RecentPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntity) {
          MergeEntity(other.Entity);
        }
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        if (other.HasTimestampPlayed) {
          TimestampPlayed = other.TimestampPlayed;
        }
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasCounter) {
          Counter = other.Counter;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_recentPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _recentPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasEntity) {
                subBuilder.MergeFrom(Entity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Entity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasProgramId = input.ReadString(ref result.programId_);
              break;
            }
            case 25: {
              result.hasTimestampPlayed = input.ReadFixed64(ref result.timestampPlayed_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 45: {
              result.hasId = input.ReadFixed32(ref result.id_);
              break;
            }
            case 53: {
              result.hasCounter = input.ReadFixed32(ref result.counter_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntity {
       get { return result.hasEntity; }
      }
      public global::bnet.protocol.EntityId Entity {
        get { return result.Entity; }
        set { SetEntity(value); }
      }
      public Builder SetEntity(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntity = true;
        result.entity_ = value;
        return this;
      }
      public Builder SetEntity(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEntity = true;
        result.entity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEntity(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEntity &&
            result.entity_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.entity_ = global::bnet.protocol.EntityId.CreateBuilder(result.entity_).MergeFrom(value).BuildPartial();
        } else {
          result.entity_ = value;
        }
        result.hasEntity = true;
        return this;
      }
      public Builder ClearEntity() {
        PrepareBuilder();
        result.hasEntity = false;
        result.entity_ = null;
        return this;
      }
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public string ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = "";
        return this;
      }
      
      public bool HasTimestampPlayed {
        get { return result.hasTimestampPlayed; }
      }
      public ulong TimestampPlayed {
        get { return result.TimestampPlayed; }
        set { SetTimestampPlayed(value); }
      }
      public Builder SetTimestampPlayed(ulong value) {
        PrepareBuilder();
        result.hasTimestampPlayed = true;
        result.timestampPlayed_ = value;
        return this;
      }
      public Builder ClearTimestampPlayed() {
        PrepareBuilder();
        result.hasTimestampPlayed = false;
        result.timestampPlayed_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasCounter {
        get { return result.hasCounter; }
      }
      public uint Counter {
        get { return result.Counter; }
        set { SetCounter(value); }
      }
      public Builder SetCounter(uint value) {
        PrepareBuilder();
        result.hasCounter = true;
        result.counter_ = value;
        return this;
      }
      public Builder ClearCounter() {
        PrepareBuilder();
        result.hasCounter = false;
        result.counter_ = 0;
        return this;
      }
    }
    static RecentPlayer() {
      object.ReferenceEquals(global::bnet.protocol.user_manager.UserManagerTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BlockedEntity : pb::GeneratedMessage<BlockedEntity, BlockedEntity.Builder> {
    private BlockedEntity() { }
    private static readonly BlockedEntity defaultInstance = new BlockedEntity().MakeReadOnly();
    private static readonly string[] _blockedEntityFieldNames = new string[] { "id", "name", "privileges", "role" };
    private static readonly uint[] _blockedEntityFieldTags = new uint[] { 10, 18, 32, 26 };
    public static BlockedEntity DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BlockedEntity DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BlockedEntity ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.user_manager.UserManagerTypes.internal__static_bnet_protocol_user_manager_BlockedEntity__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BlockedEntity, BlockedEntity.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.user_manager.UserManagerTypes.internal__static_bnet_protocol_user_manager_BlockedEntity__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::bnet.protocol.EntityId id_;
    public bool HasId {
      get { return hasId; }
    }
    public global::bnet.protocol.EntityId Id {
      get { return id_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int RoleFieldNumber = 3;
    private int roleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> role_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> RoleList {
      get { return pbc::Lists.AsReadOnly(role_); }
    }
    public int RoleCount {
      get { return role_.Count; }
    }
    public uint GetRole(int index) {
      return role_[index];
    }
    
    public const int PrivilegesFieldNumber = 4;
    private bool hasPrivileges;
    private ulong privileges_;
    public bool HasPrivileges {
      get { return hasPrivileges; }
    }
    public ulong Privileges {
      get { return privileges_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!Id.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _blockedEntityFieldNames;
      if (hasId) {
        output.WriteMessage(1, field_names[0], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[1], Name);
      }
      if (role_.Count > 0) {
        output.WritePackedUInt32Array(3, field_names[3], roleMemoizedSerializedSize, role_);
      }
      if (hasPrivileges) {
        output.WriteUInt64(4, field_names[2], Privileges);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        {
          int dataSize = 0;
          foreach (uint element in RoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (role_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          roleMemoizedSerializedSize = dataSize;
        }
        if (hasPrivileges) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, Privileges);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BlockedEntity ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlockedEntity ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlockedEntity ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlockedEntity ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlockedEntity ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlockedEntity ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BlockedEntity ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BlockedEntity ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BlockedEntity ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlockedEntity ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BlockedEntity MakeReadOnly() {
      role_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BlockedEntity prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BlockedEntity, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BlockedEntity cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BlockedEntity result;
      
      private BlockedEntity PrepareBuilder() {
        if (resultIsReadOnly) {
          BlockedEntity original = result;
          result = new BlockedEntity();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BlockedEntity MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.user_manager.BlockedEntity.Descriptor; }
      }
      
      public override BlockedEntity DefaultInstanceForType {
        get { return global::bnet.protocol.user_manager.BlockedEntity.DefaultInstance; }
      }
      
      public override BlockedEntity BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BlockedEntity) {
          return MergeFrom((BlockedEntity) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BlockedEntity other) {
        if (other == global::bnet.protocol.user_manager.BlockedEntity.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.role_.Count != 0) {
          result.role_.Add(other.role_);
        }
        if (other.HasPrivileges) {
          Privileges = other.Privileges;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_blockedEntityFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _blockedEntityFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt32Array(tag, field_name, result.role_);
              break;
            }
            case 32: {
              result.hasPrivileges = input.ReadUInt64(ref result.privileges_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
       get { return result.hasId; }
      }
      public global::bnet.protocol.EntityId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasId &&
            result.id_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.id_ = global::bnet.protocol.EntityId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = null;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<uint> RoleList {
        get { return PrepareBuilder().role_; }
      }
      public int RoleCount {
        get { return result.RoleCount; }
      }
      public uint GetRole(int index) {
        return result.GetRole(index);
      }
      public Builder SetRole(int index, uint value) {
        PrepareBuilder();
        result.role_[index] = value;
        return this;
      }
      public Builder AddRole(uint value) {
        PrepareBuilder();
        result.role_.Add(value);
        return this;
      }
      public Builder AddRangeRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.role_.Add(values);
        return this;
      }
      public Builder ClearRole() {
        PrepareBuilder();
        result.role_.Clear();
        return this;
      }
      
      public bool HasPrivileges {
        get { return result.hasPrivileges; }
      }
      public ulong Privileges {
        get { return result.Privileges; }
        set { SetPrivileges(value); }
      }
      public Builder SetPrivileges(ulong value) {
        PrepareBuilder();
        result.hasPrivileges = true;
        result.privileges_ = value;
        return this;
      }
      public Builder ClearPrivileges() {
        PrepareBuilder();
        result.hasPrivileges = false;
        result.privileges_ = 0UL;
        return this;
      }
    }
    static BlockedEntity() {
      object.ReferenceEquals(global::bnet.protocol.user_manager.UserManagerTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
