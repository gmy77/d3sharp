// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.server_pool {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class ServerPoolService {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_server_pool_GetLoadRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.server_pool.GetLoadRequest, global::bnet.protocol.server_pool.GetLoadRequest.Builder> internal__static_bnet_protocol_server_pool_GetLoadRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_server_pool_ServerState__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.server_pool.ServerState, global::bnet.protocol.server_pool.ServerState.Builder> internal__static_bnet_protocol_server_pool_ServerState__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_server_pool_ServerInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.server_pool.ServerInfo, global::bnet.protocol.server_pool.ServerInfo.Builder> internal__static_bnet_protocol_server_pool_ServerInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_server_pool_PoolStateRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.server_pool.PoolStateRequest, global::bnet.protocol.server_pool.PoolStateRequest.Builder> internal__static_bnet_protocol_server_pool_PoolStateRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_server_pool_PoolStateResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.server_pool.PoolStateResponse, global::bnet.protocol.server_pool.PoolStateResponse.Builder> internal__static_bnet_protocol_server_pool_PoolStateResponse__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ServerPoolService() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "Ch5ibmV0L3NlcnZlcl9wb29sX3NlcnZpY2UucHJvdG8SGWJuZXQucHJvdG9j" + 
            "b2wuc2VydmVyX3Bvb2waFGJuZXQvYXR0cmlidXRlLnByb3RvGg5ibmV0L3Jw" + 
            "Yy5wcm90byIQCg5HZXRMb2FkUmVxdWVzdCJWCgtTZXJ2ZXJTdGF0ZRIXCgxj" + 
            "dXJyZW50X2xvYWQYASABKAI6ATESFQoKZ2FtZV9jb3VudBgCIAEoDToBMBIX" + 
            "CgxwbGF5ZXJfY291bnQYAyABKA06ATAizgEKClNlcnZlckluZm8SJgoEaG9z" + 
            "dBgBIAIoCzIYLmJuZXQucHJvdG9jb2wuUHJvY2Vzc0lkEhYKB3JlcGxhY2UY" + 
            "AiABKAg6BWZhbHNlEjUKBXN0YXRlGAMgASgLMiYuYm5ldC5wcm90b2NvbC5z" + 
            "ZXJ2ZXJfcG9vbC5TZXJ2ZXJTdGF0ZRI1CglhdHRyaWJ1dGUYBCADKAsyIi5i" + 
            "bmV0LnByb3RvY29sLmF0dHJpYnV0ZS5BdHRyaWJ1dGUSEgoKcHJvZ3JhbV9p" + 
            "ZBgFIAEoByISChBQb29sU3RhdGVSZXF1ZXN0IkgKEVBvb2xTdGF0ZVJlc3Bv" + 
            "bnNlEjMKBGluZm8YASADKAsyJS5ibmV0LnByb3RvY29sLnNlcnZlcl9wb29s" + 
            "LlNlcnZlckluZm8yhAEKEVNlcnZlclBvb2xTZXJ2aWNlEm8KDEdldFBvb2xT" + 
            "dGF0ZRIrLmJuZXQucHJvdG9jb2wuc2VydmVyX3Bvb2wuUG9vbFN0YXRlUmVx" + 
            "dWVzdBosLmJuZXQucHJvdG9jb2wuc2VydmVyX3Bvb2wuUG9vbFN0YXRlUmVz" + 
            "cG9uc2UiBIC1GAFCA4ABAA==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_server_pool_GetLoadRequest__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_server_pool_GetLoadRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.server_pool.GetLoadRequest, global::bnet.protocol.server_pool.GetLoadRequest.Builder>(internal__static_bnet_protocol_server_pool_GetLoadRequest__Descriptor,
                  new string[] { });
          internal__static_bnet_protocol_server_pool_ServerState__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bnet_protocol_server_pool_ServerState__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.server_pool.ServerState, global::bnet.protocol.server_pool.ServerState.Builder>(internal__static_bnet_protocol_server_pool_ServerState__Descriptor,
                  new string[] { "CurrentLoad", "GameCount", "PlayerCount", });
          internal__static_bnet_protocol_server_pool_ServerInfo__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bnet_protocol_server_pool_ServerInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.server_pool.ServerInfo, global::bnet.protocol.server_pool.ServerInfo.Builder>(internal__static_bnet_protocol_server_pool_ServerInfo__Descriptor,
                  new string[] { "Host", "Replace", "State", "Attribute", "ProgramId", });
          internal__static_bnet_protocol_server_pool_PoolStateRequest__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bnet_protocol_server_pool_PoolStateRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.server_pool.PoolStateRequest, global::bnet.protocol.server_pool.PoolStateRequest.Builder>(internal__static_bnet_protocol_server_pool_PoolStateRequest__Descriptor,
                  new string[] { });
          internal__static_bnet_protocol_server_pool_PoolStateResponse__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bnet_protocol_server_pool_PoolStateResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.server_pool.PoolStateResponse, global::bnet.protocol.server_pool.PoolStateResponse.Builder>(internal__static_bnet_protocol_server_pool_PoolStateResponse__Descriptor,
                  new string[] { "Info", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bnet.protocol.attribute.Proto.Attribute.RegisterAllExtensions(registry);
          global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
            global::bnet.protocol.Rpc.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetLoadRequest : pb::GeneratedMessage<GetLoadRequest, GetLoadRequest.Builder> {
    private GetLoadRequest() { }
    private static readonly GetLoadRequest defaultInstance = new GetLoadRequest().MakeReadOnly();
    private static readonly string[] _getLoadRequestFieldNames = new string[] {  };
    private static readonly uint[] _getLoadRequestFieldTags = new uint[] {  };
    public static GetLoadRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetLoadRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetLoadRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.server_pool.Proto.ServerPoolService.internal__static_bnet_protocol_server_pool_GetLoadRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetLoadRequest, GetLoadRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.server_pool.Proto.ServerPoolService.internal__static_bnet_protocol_server_pool_GetLoadRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getLoadRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetLoadRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetLoadRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetLoadRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetLoadRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetLoadRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetLoadRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetLoadRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetLoadRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetLoadRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetLoadRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetLoadRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetLoadRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetLoadRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetLoadRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetLoadRequest result;
      
      private GetLoadRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetLoadRequest original = result;
          result = new GetLoadRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetLoadRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.server_pool.GetLoadRequest.Descriptor; }
      }
      
      public override GetLoadRequest DefaultInstanceForType {
        get { return global::bnet.protocol.server_pool.GetLoadRequest.DefaultInstance; }
      }
      
      public override GetLoadRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetLoadRequest) {
          return MergeFrom((GetLoadRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetLoadRequest other) {
        if (other == global::bnet.protocol.server_pool.GetLoadRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getLoadRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getLoadRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetLoadRequest() {
      object.ReferenceEquals(global::bnet.protocol.server_pool.Proto.ServerPoolService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerState : pb::GeneratedMessage<ServerState, ServerState.Builder> {
    private ServerState() { }
    private static readonly ServerState defaultInstance = new ServerState().MakeReadOnly();
    private static readonly string[] _serverStateFieldNames = new string[] { "current_load", "game_count", "player_count" };
    private static readonly uint[] _serverStateFieldTags = new uint[] { 13, 16, 24 };
    public static ServerState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.server_pool.Proto.ServerPoolService.internal__static_bnet_protocol_server_pool_ServerState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerState, ServerState.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.server_pool.Proto.ServerPoolService.internal__static_bnet_protocol_server_pool_ServerState__FieldAccessorTable; }
    }
    
    public const int CurrentLoadFieldNumber = 1;
    private bool hasCurrentLoad;
    private float currentLoad_ = 1F;
    public bool HasCurrentLoad {
      get { return hasCurrentLoad; }
    }
    public float CurrentLoad {
      get { return currentLoad_; }
    }
    
    public const int GameCountFieldNumber = 2;
    private bool hasGameCount;
    private uint gameCount_;
    public bool HasGameCount {
      get { return hasGameCount; }
    }
    public uint GameCount {
      get { return gameCount_; }
    }
    
    public const int PlayerCountFieldNumber = 3;
    private bool hasPlayerCount;
    private uint playerCount_;
    public bool HasPlayerCount {
      get { return hasPlayerCount; }
    }
    public uint PlayerCount {
      get { return playerCount_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverStateFieldNames;
      if (hasCurrentLoad) {
        output.WriteFloat(1, field_names[0], CurrentLoad);
      }
      if (hasGameCount) {
        output.WriteUInt32(2, field_names[1], GameCount);
      }
      if (hasPlayerCount) {
        output.WriteUInt32(3, field_names[2], PlayerCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCurrentLoad) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, CurrentLoad);
        }
        if (hasGameCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, GameCount);
        }
        if (hasPlayerCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, PlayerCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerState result;
      
      private ServerState PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerState original = result;
          result = new ServerState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.server_pool.ServerState.Descriptor; }
      }
      
      public override ServerState DefaultInstanceForType {
        get { return global::bnet.protocol.server_pool.ServerState.DefaultInstance; }
      }
      
      public override ServerState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerState) {
          return MergeFrom((ServerState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerState other) {
        if (other == global::bnet.protocol.server_pool.ServerState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentLoad) {
          CurrentLoad = other.CurrentLoad;
        }
        if (other.HasGameCount) {
          GameCount = other.GameCount;
        }
        if (other.HasPlayerCount) {
          PlayerCount = other.PlayerCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasCurrentLoad = input.ReadFloat(ref result.currentLoad_);
              break;
            }
            case 16: {
              result.hasGameCount = input.ReadUInt32(ref result.gameCount_);
              break;
            }
            case 24: {
              result.hasPlayerCount = input.ReadUInt32(ref result.playerCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentLoad {
        get { return result.hasCurrentLoad; }
      }
      public float CurrentLoad {
        get { return result.CurrentLoad; }
        set { SetCurrentLoad(value); }
      }
      public Builder SetCurrentLoad(float value) {
        PrepareBuilder();
        result.hasCurrentLoad = true;
        result.currentLoad_ = value;
        return this;
      }
      public Builder ClearCurrentLoad() {
        PrepareBuilder();
        result.hasCurrentLoad = false;
        result.currentLoad_ = 1F;
        return this;
      }
      
      public bool HasGameCount {
        get { return result.hasGameCount; }
      }
      public uint GameCount {
        get { return result.GameCount; }
        set { SetGameCount(value); }
      }
      public Builder SetGameCount(uint value) {
        PrepareBuilder();
        result.hasGameCount = true;
        result.gameCount_ = value;
        return this;
      }
      public Builder ClearGameCount() {
        PrepareBuilder();
        result.hasGameCount = false;
        result.gameCount_ = 0;
        return this;
      }
      
      public bool HasPlayerCount {
        get { return result.hasPlayerCount; }
      }
      public uint PlayerCount {
        get { return result.PlayerCount; }
        set { SetPlayerCount(value); }
      }
      public Builder SetPlayerCount(uint value) {
        PrepareBuilder();
        result.hasPlayerCount = true;
        result.playerCount_ = value;
        return this;
      }
      public Builder ClearPlayerCount() {
        PrepareBuilder();
        result.hasPlayerCount = false;
        result.playerCount_ = 0;
        return this;
      }
    }
    static ServerState() {
      object.ReferenceEquals(global::bnet.protocol.server_pool.Proto.ServerPoolService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerInfo : pb::GeneratedMessage<ServerInfo, ServerInfo.Builder> {
    private ServerInfo() { }
    private static readonly ServerInfo defaultInstance = new ServerInfo().MakeReadOnly();
    private static readonly string[] _serverInfoFieldNames = new string[] { "attribute", "host", "program_id", "replace", "state" };
    private static readonly uint[] _serverInfoFieldTags = new uint[] { 34, 10, 45, 16, 26 };
    public static ServerInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.server_pool.Proto.ServerPoolService.internal__static_bnet_protocol_server_pool_ServerInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerInfo, ServerInfo.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.server_pool.Proto.ServerPoolService.internal__static_bnet_protocol_server_pool_ServerInfo__FieldAccessorTable; }
    }
    
    public const int HostFieldNumber = 1;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public const int ReplaceFieldNumber = 2;
    private bool hasReplace;
    private bool replace_;
    public bool HasReplace {
      get { return hasReplace; }
    }
    public bool Replace {
      get { return replace_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private global::bnet.protocol.server_pool.ServerState state_;
    public bool HasState {
      get { return hasState; }
    }
    public global::bnet.protocol.server_pool.ServerState State {
      get { return state_ ?? global::bnet.protocol.server_pool.ServerState.DefaultInstance; }
    }
    
    public const int AttributeFieldNumber = 4;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int ProgramIdFieldNumber = 5;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHost) return false;
        if (!Host.IsInitialized) return false;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverInfoFieldNames;
      if (hasHost) {
        output.WriteMessage(1, field_names[1], Host);
      }
      if (hasReplace) {
        output.WriteBool(2, field_names[3], Replace);
      }
      if (hasState) {
        output.WriteMessage(3, field_names[4], State);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(4, field_names[0], attribute_);
      }
      if (hasProgramId) {
        output.WriteFixed32(5, field_names[2], ProgramId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Host);
        }
        if (hasReplace) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Replace);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, State);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(5, ProgramId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerInfo MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerInfo result;
      
      private ServerInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerInfo original = result;
          result = new ServerInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.server_pool.ServerInfo.Descriptor; }
      }
      
      public override ServerInfo DefaultInstanceForType {
        get { return global::bnet.protocol.server_pool.ServerInfo.DefaultInstance; }
      }
      
      public override ServerInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerInfo) {
          return MergeFrom((ServerInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerInfo other) {
        if (other == global::bnet.protocol.server_pool.ServerInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        if (other.HasReplace) {
          Replace = other.Replace;
        }
        if (other.HasState) {
          MergeState(other.State);
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasReplace = input.ReadBool(ref result.replace_);
              break;
            }
            case 26: {
              global::bnet.protocol.server_pool.ServerState.Builder subBuilder = global::bnet.protocol.server_pool.ServerState.CreateBuilder();
              if (result.hasState) {
                subBuilder.MergeFrom(State);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              State = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 45: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
      
      public bool HasReplace {
        get { return result.hasReplace; }
      }
      public bool Replace {
        get { return result.Replace; }
        set { SetReplace(value); }
      }
      public Builder SetReplace(bool value) {
        PrepareBuilder();
        result.hasReplace = true;
        result.replace_ = value;
        return this;
      }
      public Builder ClearReplace() {
        PrepareBuilder();
        result.hasReplace = false;
        result.replace_ = false;
        return this;
      }
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::bnet.protocol.server_pool.ServerState State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::bnet.protocol.server_pool.ServerState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder SetState(global::bnet.protocol.server_pool.ServerState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = builderForValue.Build();
        return this;
      }
      public Builder MergeState(global::bnet.protocol.server_pool.ServerState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasState &&
            result.state_ != global::bnet.protocol.server_pool.ServerState.DefaultInstance) {
            result.state_ = global::bnet.protocol.server_pool.ServerState.CreateBuilder(result.state_).MergeFrom(value).BuildPartial();
        } else {
          result.state_ = value;
        }
        result.hasState = true;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
    }
    static ServerInfo() {
      object.ReferenceEquals(global::bnet.protocol.server_pool.Proto.ServerPoolService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PoolStateRequest : pb::GeneratedMessage<PoolStateRequest, PoolStateRequest.Builder> {
    private PoolStateRequest() { }
    private static readonly PoolStateRequest defaultInstance = new PoolStateRequest().MakeReadOnly();
    private static readonly string[] _poolStateRequestFieldNames = new string[] {  };
    private static readonly uint[] _poolStateRequestFieldTags = new uint[] {  };
    public static PoolStateRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PoolStateRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PoolStateRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.server_pool.Proto.ServerPoolService.internal__static_bnet_protocol_server_pool_PoolStateRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PoolStateRequest, PoolStateRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.server_pool.Proto.ServerPoolService.internal__static_bnet_protocol_server_pool_PoolStateRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _poolStateRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PoolStateRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PoolStateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PoolStateRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PoolStateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PoolStateRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PoolStateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PoolStateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PoolStateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PoolStateRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PoolStateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PoolStateRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PoolStateRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PoolStateRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PoolStateRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PoolStateRequest result;
      
      private PoolStateRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PoolStateRequest original = result;
          result = new PoolStateRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PoolStateRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.server_pool.PoolStateRequest.Descriptor; }
      }
      
      public override PoolStateRequest DefaultInstanceForType {
        get { return global::bnet.protocol.server_pool.PoolStateRequest.DefaultInstance; }
      }
      
      public override PoolStateRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PoolStateRequest) {
          return MergeFrom((PoolStateRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PoolStateRequest other) {
        if (other == global::bnet.protocol.server_pool.PoolStateRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_poolStateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _poolStateRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static PoolStateRequest() {
      object.ReferenceEquals(global::bnet.protocol.server_pool.Proto.ServerPoolService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PoolStateResponse : pb::GeneratedMessage<PoolStateResponse, PoolStateResponse.Builder> {
    private PoolStateResponse() { }
    private static readonly PoolStateResponse defaultInstance = new PoolStateResponse().MakeReadOnly();
    private static readonly string[] _poolStateResponseFieldNames = new string[] { "info" };
    private static readonly uint[] _poolStateResponseFieldTags = new uint[] { 10 };
    public static PoolStateResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PoolStateResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PoolStateResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.server_pool.Proto.ServerPoolService.internal__static_bnet_protocol_server_pool_PoolStateResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PoolStateResponse, PoolStateResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.server_pool.Proto.ServerPoolService.internal__static_bnet_protocol_server_pool_PoolStateResponse__FieldAccessorTable; }
    }
    
    public const int InfoFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.server_pool.ServerInfo> info_ = new pbc::PopsicleList<global::bnet.protocol.server_pool.ServerInfo>();
    public scg::IList<global::bnet.protocol.server_pool.ServerInfo> InfoList {
      get { return info_; }
    }
    public int InfoCount {
      get { return info_.Count; }
    }
    public global::bnet.protocol.server_pool.ServerInfo GetInfo(int index) {
      return info_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.server_pool.ServerInfo element in InfoList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _poolStateResponseFieldNames;
      if (info_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], info_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.server_pool.ServerInfo element in InfoList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PoolStateResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PoolStateResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PoolStateResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PoolStateResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PoolStateResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PoolStateResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PoolStateResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PoolStateResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PoolStateResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PoolStateResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PoolStateResponse MakeReadOnly() {
      info_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PoolStateResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PoolStateResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PoolStateResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PoolStateResponse result;
      
      private PoolStateResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PoolStateResponse original = result;
          result = new PoolStateResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PoolStateResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.server_pool.PoolStateResponse.Descriptor; }
      }
      
      public override PoolStateResponse DefaultInstanceForType {
        get { return global::bnet.protocol.server_pool.PoolStateResponse.DefaultInstance; }
      }
      
      public override PoolStateResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PoolStateResponse) {
          return MergeFrom((PoolStateResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PoolStateResponse other) {
        if (other == global::bnet.protocol.server_pool.PoolStateResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.info_.Count != 0) {
          result.info_.Add(other.info_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_poolStateResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _poolStateResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.info_, global::bnet.protocol.server_pool.ServerInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.server_pool.ServerInfo> InfoList {
        get { return PrepareBuilder().info_; }
      }
      public int InfoCount {
        get { return result.InfoCount; }
      }
      public global::bnet.protocol.server_pool.ServerInfo GetInfo(int index) {
        return result.GetInfo(index);
      }
      public Builder SetInfo(int index, global::bnet.protocol.server_pool.ServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.info_[index] = value;
        return this;
      }
      public Builder SetInfo(int index, global::bnet.protocol.server_pool.ServerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.info_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInfo(global::bnet.protocol.server_pool.ServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.info_.Add(value);
        return this;
      }
      public Builder AddInfo(global::bnet.protocol.server_pool.ServerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.info_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInfo(scg::IEnumerable<global::bnet.protocol.server_pool.ServerInfo> values) {
        PrepareBuilder();
        result.info_.Add(values);
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.info_.Clear();
        return this;
      }
    }
    static PoolStateResponse() {
      object.ReferenceEquals(global::bnet.protocol.server_pool.Proto.ServerPoolService.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class ServerPoolService : pb::IService {
    public abstract void GetPoolState(
        pb::IRpcController controller,
        global::bnet.protocol.server_pool.PoolStateRequest request,
        global::System.Action<global::bnet.protocol.server_pool.PoolStateResponse> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.ServerPoolService.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.GetPoolState(controller, (global::bnet.protocol.server_pool.PoolStateRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.server_pool.PoolStateResponse>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.server_pool.PoolStateRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.server_pool.PoolStateResponse.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.server_pool.ServerPoolService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void GetPoolState(
          pb::IRpcController controller,
          global::bnet.protocol.server_pool.PoolStateRequest request,
          global::System.Action<global::bnet.protocol.server_pool.PoolStateResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.server_pool.PoolStateResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.server_pool.PoolStateResponse, global::bnet.protocol.server_pool.PoolStateResponse.Builder>(done, global::bnet.protocol.server_pool.PoolStateResponse.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
