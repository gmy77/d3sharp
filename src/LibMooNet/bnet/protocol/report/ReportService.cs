// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.report {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class ReportService {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_report_Report__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.report.Report, global::bnet.protocol.report.Report.Builder> internal__static_bnet_protocol_report_Report__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_report_SendReportRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.report.SendReportRequest, global::bnet.protocol.report.SendReportRequest.Builder> internal__static_bnet_protocol_report_SendReportRequest__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ReportService() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChlibmV0L3JlcG9ydF9zZXJ2aWNlLnByb3RvEhRibmV0LnByb3RvY29sLnJl" + 
            "cG9ydBoUYm5ldC9hdHRyaWJ1dGUucHJvdG8aEWJuZXQvZW50aXR5LnByb3Rv" + 
            "Gg5ibmV0L3JwYy5wcm90byLyAQoGUmVwb3J0EhMKC3JlcG9ydF90eXBlGAEg" + 
            "AigJEjUKCWF0dHJpYnV0ZRgCIAMoCzIiLmJuZXQucHJvdG9jb2wuYXR0cmli" + 
            "dXRlLkF0dHJpYnV0ZRIVCgpyZXBvcnRfcW9zGAMgASgFOgEwEjIKEXJlcG9y" + 
            "dGluZ19hY2NvdW50GAQgASgLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBI3" + 
            "ChZyZXBvcnRpbmdfZ2FtZV9hY2NvdW50GAUgASgLMhcuYm5ldC5wcm90b2Nv" + 
            "bC5FbnRpdHlJZBIYChByZXBvcnRfdGltZXN0YW1wGAYgASgGIkEKEVNlbmRS" + 
            "ZXBvcnRSZXF1ZXN0EiwKBnJlcG9ydBgBIAIoCzIcLmJuZXQucHJvdG9jb2wu" + 
            "cmVwb3J0LlJlcG9ydDJjCg1SZXBvcnRTZXJ2aWNlElIKClNlbmRSZXBvcnQS" + 
            "Jy5ibmV0LnByb3RvY29sLnJlcG9ydC5TZW5kUmVwb3J0UmVxdWVzdBoVLmJu" + 
            "ZXQucHJvdG9jb2wuTm9EYXRhIgSAtRgBQgOAAQA=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_report_Report__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_report_Report__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.report.Report, global::bnet.protocol.report.Report.Builder>(internal__static_bnet_protocol_report_Report__Descriptor,
                  new string[] { "ReportType", "Attribute", "ReportQos", "ReportingAccount", "ReportingGameAccount", "ReportTimestamp", });
          internal__static_bnet_protocol_report_SendReportRequest__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bnet_protocol_report_SendReportRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.report.SendReportRequest, global::bnet.protocol.report.SendReportRequest.Builder>(internal__static_bnet_protocol_report_SendReportRequest__Descriptor,
                  new string[] { "Report", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bnet.protocol.attribute.Proto.Attribute.RegisterAllExtensions(registry);
          global::bnet.protocol.Entity.RegisterAllExtensions(registry);
          global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
            global::bnet.protocol.Entity.Descriptor, 
            global::bnet.protocol.Rpc.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Report : pb::GeneratedMessage<Report, Report.Builder> {
    private Report() { }
    private static readonly Report defaultInstance = new Report().MakeReadOnly();
    private static readonly string[] _reportFieldNames = new string[] { "attribute", "report_qos", "report_timestamp", "report_type", "reporting_account", "reporting_game_account" };
    private static readonly uint[] _reportFieldTags = new uint[] { 18, 24, 49, 10, 34, 42 };
    public static Report DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Report DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Report ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.report.Proto.ReportService.internal__static_bnet_protocol_report_Report__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Report, Report.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.report.Proto.ReportService.internal__static_bnet_protocol_report_Report__FieldAccessorTable; }
    }
    
    public const int ReportTypeFieldNumber = 1;
    private bool hasReportType;
    private string reportType_ = "";
    public bool HasReportType {
      get { return hasReportType; }
    }
    public string ReportType {
      get { return reportType_; }
    }
    
    public const int AttributeFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int ReportQosFieldNumber = 3;
    private bool hasReportQos;
    private int reportQos_;
    public bool HasReportQos {
      get { return hasReportQos; }
    }
    public int ReportQos {
      get { return reportQos_; }
    }
    
    public const int ReportingAccountFieldNumber = 4;
    private bool hasReportingAccount;
    private global::bnet.protocol.EntityId reportingAccount_;
    public bool HasReportingAccount {
      get { return hasReportingAccount; }
    }
    public global::bnet.protocol.EntityId ReportingAccount {
      get { return reportingAccount_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ReportingGameAccountFieldNumber = 5;
    private bool hasReportingGameAccount;
    private global::bnet.protocol.EntityId reportingGameAccount_;
    public bool HasReportingGameAccount {
      get { return hasReportingGameAccount; }
    }
    public global::bnet.protocol.EntityId ReportingGameAccount {
      get { return reportingGameAccount_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ReportTimestampFieldNumber = 6;
    private bool hasReportTimestamp;
    private ulong reportTimestamp_;
    public bool HasReportTimestamp {
      get { return hasReportTimestamp; }
    }
    public ulong ReportTimestamp {
      get { return reportTimestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReportType) return false;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (HasReportingAccount) {
          if (!ReportingAccount.IsInitialized) return false;
        }
        if (HasReportingGameAccount) {
          if (!ReportingGameAccount.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _reportFieldNames;
      if (hasReportType) {
        output.WriteString(1, field_names[3], ReportType);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], attribute_);
      }
      if (hasReportQos) {
        output.WriteInt32(3, field_names[1], ReportQos);
      }
      if (hasReportingAccount) {
        output.WriteMessage(4, field_names[4], ReportingAccount);
      }
      if (hasReportingGameAccount) {
        output.WriteMessage(5, field_names[5], ReportingGameAccount);
      }
      if (hasReportTimestamp) {
        output.WriteFixed64(6, field_names[2], ReportTimestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasReportType) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ReportType);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasReportQos) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ReportQos);
        }
        if (hasReportingAccount) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ReportingAccount);
        }
        if (hasReportingGameAccount) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ReportingGameAccount);
        }
        if (hasReportTimestamp) {
          size += pb::CodedOutputStream.ComputeFixed64Size(6, ReportTimestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Report ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Report ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Report ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Report ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Report ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Report ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Report ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Report ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Report ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Report ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Report MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Report prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Report, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Report cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Report result;
      
      private Report PrepareBuilder() {
        if (resultIsReadOnly) {
          Report original = result;
          result = new Report();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Report MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.report.Report.Descriptor; }
      }
      
      public override Report DefaultInstanceForType {
        get { return global::bnet.protocol.report.Report.DefaultInstance; }
      }
      
      public override Report BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Report) {
          return MergeFrom((Report) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Report other) {
        if (other == global::bnet.protocol.report.Report.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReportType) {
          ReportType = other.ReportType;
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasReportQos) {
          ReportQos = other.ReportQos;
        }
        if (other.HasReportingAccount) {
          MergeReportingAccount(other.ReportingAccount);
        }
        if (other.HasReportingGameAccount) {
          MergeReportingGameAccount(other.ReportingGameAccount);
        }
        if (other.HasReportTimestamp) {
          ReportTimestamp = other.ReportTimestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_reportFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _reportFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasReportType = input.ReadString(ref result.reportType_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasReportQos = input.ReadInt32(ref result.reportQos_);
              break;
            }
            case 34: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasReportingAccount) {
                subBuilder.MergeFrom(ReportingAccount);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReportingAccount = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasReportingGameAccount) {
                subBuilder.MergeFrom(ReportingGameAccount);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReportingGameAccount = subBuilder.BuildPartial();
              break;
            }
            case 49: {
              result.hasReportTimestamp = input.ReadFixed64(ref result.reportTimestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReportType {
        get { return result.hasReportType; }
      }
      public string ReportType {
        get { return result.ReportType; }
        set { SetReportType(value); }
      }
      public Builder SetReportType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReportType = true;
        result.reportType_ = value;
        return this;
      }
      public Builder ClearReportType() {
        PrepareBuilder();
        result.hasReportType = false;
        result.reportType_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasReportQos {
        get { return result.hasReportQos; }
      }
      public int ReportQos {
        get { return result.ReportQos; }
        set { SetReportQos(value); }
      }
      public Builder SetReportQos(int value) {
        PrepareBuilder();
        result.hasReportQos = true;
        result.reportQos_ = value;
        return this;
      }
      public Builder ClearReportQos() {
        PrepareBuilder();
        result.hasReportQos = false;
        result.reportQos_ = 0;
        return this;
      }
      
      public bool HasReportingAccount {
       get { return result.hasReportingAccount; }
      }
      public global::bnet.protocol.EntityId ReportingAccount {
        get { return result.ReportingAccount; }
        set { SetReportingAccount(value); }
      }
      public Builder SetReportingAccount(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReportingAccount = true;
        result.reportingAccount_ = value;
        return this;
      }
      public Builder SetReportingAccount(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReportingAccount = true;
        result.reportingAccount_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReportingAccount(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReportingAccount &&
            result.reportingAccount_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.reportingAccount_ = global::bnet.protocol.EntityId.CreateBuilder(result.reportingAccount_).MergeFrom(value).BuildPartial();
        } else {
          result.reportingAccount_ = value;
        }
        result.hasReportingAccount = true;
        return this;
      }
      public Builder ClearReportingAccount() {
        PrepareBuilder();
        result.hasReportingAccount = false;
        result.reportingAccount_ = null;
        return this;
      }
      
      public bool HasReportingGameAccount {
       get { return result.hasReportingGameAccount; }
      }
      public global::bnet.protocol.EntityId ReportingGameAccount {
        get { return result.ReportingGameAccount; }
        set { SetReportingGameAccount(value); }
      }
      public Builder SetReportingGameAccount(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReportingGameAccount = true;
        result.reportingGameAccount_ = value;
        return this;
      }
      public Builder SetReportingGameAccount(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReportingGameAccount = true;
        result.reportingGameAccount_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReportingGameAccount(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReportingGameAccount &&
            result.reportingGameAccount_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.reportingGameAccount_ = global::bnet.protocol.EntityId.CreateBuilder(result.reportingGameAccount_).MergeFrom(value).BuildPartial();
        } else {
          result.reportingGameAccount_ = value;
        }
        result.hasReportingGameAccount = true;
        return this;
      }
      public Builder ClearReportingGameAccount() {
        PrepareBuilder();
        result.hasReportingGameAccount = false;
        result.reportingGameAccount_ = null;
        return this;
      }
      
      public bool HasReportTimestamp {
        get { return result.hasReportTimestamp; }
      }
      public ulong ReportTimestamp {
        get { return result.ReportTimestamp; }
        set { SetReportTimestamp(value); }
      }
      public Builder SetReportTimestamp(ulong value) {
        PrepareBuilder();
        result.hasReportTimestamp = true;
        result.reportTimestamp_ = value;
        return this;
      }
      public Builder ClearReportTimestamp() {
        PrepareBuilder();
        result.hasReportTimestamp = false;
        result.reportTimestamp_ = 0;
        return this;
      }
    }
    static Report() {
      object.ReferenceEquals(global::bnet.protocol.report.Proto.ReportService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SendReportRequest : pb::GeneratedMessage<SendReportRequest, SendReportRequest.Builder> {
    private SendReportRequest() { }
    private static readonly SendReportRequest defaultInstance = new SendReportRequest().MakeReadOnly();
    private static readonly string[] _sendReportRequestFieldNames = new string[] { "report" };
    private static readonly uint[] _sendReportRequestFieldTags = new uint[] { 10 };
    public static SendReportRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendReportRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendReportRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.report.Proto.ReportService.internal__static_bnet_protocol_report_SendReportRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendReportRequest, SendReportRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.report.Proto.ReportService.internal__static_bnet_protocol_report_SendReportRequest__FieldAccessorTable; }
    }
    
    public const int ReportFieldNumber = 1;
    private bool hasReport;
    private global::bnet.protocol.report.Report report_;
    public bool HasReport {
      get { return hasReport; }
    }
    public global::bnet.protocol.report.Report Report {
      get { return report_ ?? global::bnet.protocol.report.Report.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReport) return false;
        if (!Report.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sendReportRequestFieldNames;
      if (hasReport) {
        output.WriteMessage(1, field_names[0], Report);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasReport) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Report);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SendReportRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendReportRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendReportRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendReportRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendReportRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendReportRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendReportRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendReportRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendReportRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendReportRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendReportRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendReportRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SendReportRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendReportRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendReportRequest result;
      
      private SendReportRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SendReportRequest original = result;
          result = new SendReportRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendReportRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.report.SendReportRequest.Descriptor; }
      }
      
      public override SendReportRequest DefaultInstanceForType {
        get { return global::bnet.protocol.report.SendReportRequest.DefaultInstance; }
      }
      
      public override SendReportRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SendReportRequest) {
          return MergeFrom((SendReportRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SendReportRequest other) {
        if (other == global::bnet.protocol.report.SendReportRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReport) {
          MergeReport(other.Report);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sendReportRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sendReportRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.report.Report.Builder subBuilder = global::bnet.protocol.report.Report.CreateBuilder();
              if (result.hasReport) {
                subBuilder.MergeFrom(Report);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Report = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReport {
       get { return result.hasReport; }
      }
      public global::bnet.protocol.report.Report Report {
        get { return result.Report; }
        set { SetReport(value); }
      }
      public Builder SetReport(global::bnet.protocol.report.Report value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReport = true;
        result.report_ = value;
        return this;
      }
      public Builder SetReport(global::bnet.protocol.report.Report.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReport = true;
        result.report_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReport(global::bnet.protocol.report.Report value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReport &&
            result.report_ != global::bnet.protocol.report.Report.DefaultInstance) {
            result.report_ = global::bnet.protocol.report.Report.CreateBuilder(result.report_).MergeFrom(value).BuildPartial();
        } else {
          result.report_ = value;
        }
        result.hasReport = true;
        return this;
      }
      public Builder ClearReport() {
        PrepareBuilder();
        result.hasReport = false;
        result.report_ = null;
        return this;
      }
    }
    static SendReportRequest() {
      object.ReferenceEquals(global::bnet.protocol.report.Proto.ReportService.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class ReportService : pb::IService {
    public abstract void SendReport(
        pb::IRpcController controller,
        global::bnet.protocol.report.SendReportRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.ReportService.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.SendReport(controller, (global::bnet.protocol.report.SendReportRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.report.SendReportRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.NoData.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.report.ReportService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void SendReport(
          pb::IRpcController controller,
          global::bnet.protocol.report.SendReportRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
