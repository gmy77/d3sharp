// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.exchange {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Exchange {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_PartitionId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.PartitionId, global::bnet.protocol.exchange.PartitionId.Builder> internal__static_bnet_protocol_exchange_PartitionId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_BlobFrom__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobFrom, global::bnet.protocol.exchange.BlobFrom.Builder> internal__static_bnet_protocol_exchange_BlobFrom__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_BlobOfType__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobOfType, global::bnet.protocol.exchange.BlobOfType.Builder> internal__static_bnet_protocol_exchange_BlobOfType__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_BlobFromOfType__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobFromOfType, global::bnet.protocol.exchange.BlobFromOfType.Builder> internal__static_bnet_protocol_exchange_BlobFromOfType__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_ActionResultDetail__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.ActionResultDetail, global::bnet.protocol.exchange.ActionResultDetail.Builder> internal__static_bnet_protocol_exchange_ActionResultDetail__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_exchange_BillingAddress__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BillingAddress, global::bnet.protocol.exchange.BillingAddress.Builder> internal__static_bnet_protocol_exchange_BillingAddress__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Exchange() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChNibmV0L2V4Y2hhbmdlLnByb3RvEhZibmV0LnByb3RvY29sLmV4Y2hhbmdl" + 
          "GhhibmV0L2ZpZWxkX29wdGlvbnMucHJvdG8iKAoLUGFydGl0aW9uSWQSDAoE" + 
          "aGlnaBgBIAIoBhILCgNsb3cYAiACKAYiPAoIQmxvYkZyb20SDgoGc291cmNl" + 
          "GAEgAigHEgwKBGRhdGEYAiACKAwSEgoKZXh0cmFfZGF0YRgDIAEoDCI8CgpC" + 
          "bG9iT2ZUeXBlEgwKBHR5cGUYASACKAkSDAoEZGF0YRgCIAEoDBISCgpleHRy" + 
          "YV9kYXRhGAMgASgMIjwKDkJsb2JGcm9tT2ZUeXBlEg4KBnNvdXJjZRgBIAIo" + 
          "BxIMCgR0eXBlGAIgAigJEgwKBGRhdGEYAyACKAwiPQoSQWN0aW9uUmVzdWx0" + 
          "RGV0YWlsEhAKCGNhdGVnb3J5GAEgAigNEhUKDXJlc3VsdF9yZWFzb24YAiAB" + 
          "KA0iVgoOQmlsbGluZ0FkZHJlc3MSEgoKY291bnRyeV9pZBgBIAIoBRIMCgRj" + 
          "aXR5GAIgASgJEg0KBXN0YXRlGAMgASgJEhMKC3Bvc3RhbF9jb2RlGAQgASgJ" + 
          "QgOAAQA=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_exchange_PartitionId__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_exchange_PartitionId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.PartitionId, global::bnet.protocol.exchange.PartitionId.Builder>(internal__static_bnet_protocol_exchange_PartitionId__Descriptor,
                new string[] { "High", "Low", });
        internal__static_bnet_protocol_exchange_BlobFrom__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_exchange_BlobFrom__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobFrom, global::bnet.protocol.exchange.BlobFrom.Builder>(internal__static_bnet_protocol_exchange_BlobFrom__Descriptor,
                new string[] { "Source", "Data", "ExtraData", });
        internal__static_bnet_protocol_exchange_BlobOfType__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_exchange_BlobOfType__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobOfType, global::bnet.protocol.exchange.BlobOfType.Builder>(internal__static_bnet_protocol_exchange_BlobOfType__Descriptor,
                new string[] { "Type", "Data", "ExtraData", });
        internal__static_bnet_protocol_exchange_BlobFromOfType__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_exchange_BlobFromOfType__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BlobFromOfType, global::bnet.protocol.exchange.BlobFromOfType.Builder>(internal__static_bnet_protocol_exchange_BlobFromOfType__Descriptor,
                new string[] { "Source", "Type", "Data", });
        internal__static_bnet_protocol_exchange_ActionResultDetail__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_exchange_ActionResultDetail__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.ActionResultDetail, global::bnet.protocol.exchange.ActionResultDetail.Builder>(internal__static_bnet_protocol_exchange_ActionResultDetail__Descriptor,
                new string[] { "Category", "ResultReason", });
        internal__static_bnet_protocol_exchange_BillingAddress__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_exchange_BillingAddress__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.exchange.BillingAddress, global::bnet.protocol.exchange.BillingAddress.Builder>(internal__static_bnet_protocol_exchange_BillingAddress__Descriptor,
                new string[] { "CountryId", "City", "State", "PostalCode", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.FieldOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PartitionId : pb::GeneratedMessage<PartitionId, PartitionId.Builder> {
    private PartitionId() { }
    private static readonly PartitionId defaultInstance = new PartitionId().MakeReadOnly();
    private static readonly string[] _partitionIdFieldNames = new string[] { "high", "low" };
    private static readonly uint[] _partitionIdFieldTags = new uint[] { 9, 17 };
    public static PartitionId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PartitionId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PartitionId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_PartitionId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PartitionId, PartitionId.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_PartitionId__FieldAccessorTable; }
    }
    
    public const int HighFieldNumber = 1;
    private bool hasHigh;
    private ulong high_;
    public bool HasHigh {
      get { return hasHigh; }
    }
    public ulong High {
      get { return high_; }
    }
    
    public const int LowFieldNumber = 2;
    private bool hasLow;
    private ulong low_;
    public bool HasLow {
      get { return hasLow; }
    }
    public ulong Low {
      get { return low_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHigh) return false;
        if (!hasLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _partitionIdFieldNames;
      if (hasHigh) {
        output.WriteFixed64(1, field_names[0], High);
      }
      if (hasLow) {
        output.WriteFixed64(2, field_names[1], Low);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHigh) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, High);
        }
        if (hasLow) {
          size += pb::CodedOutputStream.ComputeFixed64Size(2, Low);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PartitionId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PartitionId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PartitionId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PartitionId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PartitionId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PartitionId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PartitionId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PartitionId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PartitionId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PartitionId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PartitionId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PartitionId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PartitionId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PartitionId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PartitionId result;
      
      private PartitionId PrepareBuilder() {
        if (resultIsReadOnly) {
          PartitionId original = result;
          result = new PartitionId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PartitionId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange.PartitionId.Descriptor; }
      }
      
      public override PartitionId DefaultInstanceForType {
        get { return global::bnet.protocol.exchange.PartitionId.DefaultInstance; }
      }
      
      public override PartitionId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PartitionId) {
          return MergeFrom((PartitionId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PartitionId other) {
        if (other == global::bnet.protocol.exchange.PartitionId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHigh) {
          High = other.High;
        }
        if (other.HasLow) {
          Low = other.Low;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_partitionIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _partitionIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasHigh = input.ReadFixed64(ref result.high_);
              break;
            }
            case 17: {
              result.hasLow = input.ReadFixed64(ref result.low_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHigh {
        get { return result.hasHigh; }
      }
      public ulong High {
        get { return result.High; }
        set { SetHigh(value); }
      }
      public Builder SetHigh(ulong value) {
        PrepareBuilder();
        result.hasHigh = true;
        result.high_ = value;
        return this;
      }
      public Builder ClearHigh() {
        PrepareBuilder();
        result.hasHigh = false;
        result.high_ = 0;
        return this;
      }
      
      public bool HasLow {
        get { return result.hasLow; }
      }
      public ulong Low {
        get { return result.Low; }
        set { SetLow(value); }
      }
      public Builder SetLow(ulong value) {
        PrepareBuilder();
        result.hasLow = true;
        result.low_ = value;
        return this;
      }
      public Builder ClearLow() {
        PrepareBuilder();
        result.hasLow = false;
        result.low_ = 0;
        return this;
      }
    }
    static PartitionId() {
      object.ReferenceEquals(global::bnet.protocol.exchange.Exchange.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BlobFrom : pb::GeneratedMessage<BlobFrom, BlobFrom.Builder> {
    private BlobFrom() { }
    private static readonly BlobFrom defaultInstance = new BlobFrom().MakeReadOnly();
    private static readonly string[] _blobFromFieldNames = new string[] { "data", "extra_data", "source" };
    private static readonly uint[] _blobFromFieldTags = new uint[] { 18, 26, 13 };
    public static BlobFrom DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BlobFrom DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BlobFrom ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobFrom__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BlobFrom, BlobFrom.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobFrom__FieldAccessorTable; }
    }
    
    public const int SourceFieldNumber = 1;
    private bool hasSource;
    private uint source_;
    public bool HasSource {
      get { return hasSource; }
    }
    public uint Source {
      get { return source_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public const int ExtraDataFieldNumber = 3;
    private bool hasExtraData;
    private pb::ByteString extraData_ = pb::ByteString.Empty;
    public bool HasExtraData {
      get { return hasExtraData; }
    }
    public pb::ByteString ExtraData {
      get { return extraData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSource) return false;
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _blobFromFieldNames;
      if (hasSource) {
        output.WriteFixed32(1, field_names[2], Source);
      }
      if (hasData) {
        output.WriteBytes(2, field_names[0], Data);
      }
      if (hasExtraData) {
        output.WriteBytes(3, field_names[1], ExtraData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSource) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Source);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Data);
        }
        if (hasExtraData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, ExtraData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BlobFrom ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobFrom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobFrom ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobFrom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobFrom ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobFrom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BlobFrom ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BlobFrom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BlobFrom ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobFrom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BlobFrom MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BlobFrom prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BlobFrom, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BlobFrom cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BlobFrom result;
      
      private BlobFrom PrepareBuilder() {
        if (resultIsReadOnly) {
          BlobFrom original = result;
          result = new BlobFrom();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BlobFrom MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange.BlobFrom.Descriptor; }
      }
      
      public override BlobFrom DefaultInstanceForType {
        get { return global::bnet.protocol.exchange.BlobFrom.DefaultInstance; }
      }
      
      public override BlobFrom BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BlobFrom) {
          return MergeFrom((BlobFrom) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BlobFrom other) {
        if (other == global::bnet.protocol.exchange.BlobFrom.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSource) {
          Source = other.Source;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        if (other.HasExtraData) {
          ExtraData = other.ExtraData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_blobFromFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _blobFromFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSource = input.ReadFixed32(ref result.source_);
              break;
            }
            case 18: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
            case 26: {
              result.hasExtraData = input.ReadBytes(ref result.extraData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSource {
        get { return result.hasSource; }
      }
      public uint Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(uint value) {
        PrepareBuilder();
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder ClearSource() {
        PrepareBuilder();
        result.hasSource = false;
        result.source_ = 0;
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasExtraData {
        get { return result.hasExtraData; }
      }
      public pb::ByteString ExtraData {
        get { return result.ExtraData; }
        set { SetExtraData(value); }
      }
      public Builder SetExtraData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtraData = true;
        result.extraData_ = value;
        return this;
      }
      public Builder ClearExtraData() {
        PrepareBuilder();
        result.hasExtraData = false;
        result.extraData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static BlobFrom() {
      object.ReferenceEquals(global::bnet.protocol.exchange.Exchange.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BlobOfType : pb::GeneratedMessage<BlobOfType, BlobOfType.Builder> {
    private BlobOfType() { }
    private static readonly BlobOfType defaultInstance = new BlobOfType().MakeReadOnly();
    private static readonly string[] _blobOfTypeFieldNames = new string[] { "data", "extra_data", "type" };
    private static readonly uint[] _blobOfTypeFieldTags = new uint[] { 18, 26, 10 };
    public static BlobOfType DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BlobOfType DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BlobOfType ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobOfType__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BlobOfType, BlobOfType.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobOfType__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public const int ExtraDataFieldNumber = 3;
    private bool hasExtraData;
    private pb::ByteString extraData_ = pb::ByteString.Empty;
    public bool HasExtraData {
      get { return hasExtraData; }
    }
    public pb::ByteString ExtraData {
      get { return extraData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _blobOfTypeFieldNames;
      if (hasType) {
        output.WriteString(1, field_names[2], Type);
      }
      if (hasData) {
        output.WriteBytes(2, field_names[0], Data);
      }
      if (hasExtraData) {
        output.WriteBytes(3, field_names[1], ExtraData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Type);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Data);
        }
        if (hasExtraData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, ExtraData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BlobOfType ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobOfType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobOfType ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobOfType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobOfType ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobOfType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BlobOfType ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BlobOfType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BlobOfType ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobOfType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BlobOfType MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BlobOfType prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BlobOfType, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BlobOfType cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BlobOfType result;
      
      private BlobOfType PrepareBuilder() {
        if (resultIsReadOnly) {
          BlobOfType original = result;
          result = new BlobOfType();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BlobOfType MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange.BlobOfType.Descriptor; }
      }
      
      public override BlobOfType DefaultInstanceForType {
        get { return global::bnet.protocol.exchange.BlobOfType.DefaultInstance; }
      }
      
      public override BlobOfType BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BlobOfType) {
          return MergeFrom((BlobOfType) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BlobOfType other) {
        if (other == global::bnet.protocol.exchange.BlobOfType.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        if (other.HasExtraData) {
          ExtraData = other.ExtraData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_blobOfTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _blobOfTypeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 18: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
            case 26: {
              result.hasExtraData = input.ReadBytes(ref result.extraData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasExtraData {
        get { return result.hasExtraData; }
      }
      public pb::ByteString ExtraData {
        get { return result.ExtraData; }
        set { SetExtraData(value); }
      }
      public Builder SetExtraData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtraData = true;
        result.extraData_ = value;
        return this;
      }
      public Builder ClearExtraData() {
        PrepareBuilder();
        result.hasExtraData = false;
        result.extraData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static BlobOfType() {
      object.ReferenceEquals(global::bnet.protocol.exchange.Exchange.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BlobFromOfType : pb::GeneratedMessage<BlobFromOfType, BlobFromOfType.Builder> {
    private BlobFromOfType() { }
    private static readonly BlobFromOfType defaultInstance = new BlobFromOfType().MakeReadOnly();
    private static readonly string[] _blobFromOfTypeFieldNames = new string[] { "data", "source", "type" };
    private static readonly uint[] _blobFromOfTypeFieldTags = new uint[] { 26, 13, 18 };
    public static BlobFromOfType DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BlobFromOfType DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BlobFromOfType ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobFromOfType__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BlobFromOfType, BlobFromOfType.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BlobFromOfType__FieldAccessorTable; }
    }
    
    public const int SourceFieldNumber = 1;
    private bool hasSource;
    private uint source_;
    public bool HasSource {
      get { return hasSource; }
    }
    public uint Source {
      get { return source_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int DataFieldNumber = 3;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSource) return false;
        if (!hasType) return false;
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _blobFromOfTypeFieldNames;
      if (hasSource) {
        output.WriteFixed32(1, field_names[1], Source);
      }
      if (hasType) {
        output.WriteString(2, field_names[2], Type);
      }
      if (hasData) {
        output.WriteBytes(3, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSource) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Source);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Type);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BlobFromOfType ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BlobFromOfType ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BlobFromOfType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlobFromOfType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BlobFromOfType MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BlobFromOfType prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BlobFromOfType, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BlobFromOfType cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BlobFromOfType result;
      
      private BlobFromOfType PrepareBuilder() {
        if (resultIsReadOnly) {
          BlobFromOfType original = result;
          result = new BlobFromOfType();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BlobFromOfType MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange.BlobFromOfType.Descriptor; }
      }
      
      public override BlobFromOfType DefaultInstanceForType {
        get { return global::bnet.protocol.exchange.BlobFromOfType.DefaultInstance; }
      }
      
      public override BlobFromOfType BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BlobFromOfType) {
          return MergeFrom((BlobFromOfType) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BlobFromOfType other) {
        if (other == global::bnet.protocol.exchange.BlobFromOfType.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSource) {
          Source = other.Source;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_blobFromOfTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _blobFromOfTypeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSource = input.ReadFixed32(ref result.source_);
              break;
            }
            case 18: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 26: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSource {
        get { return result.hasSource; }
      }
      public uint Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(uint value) {
        PrepareBuilder();
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder ClearSource() {
        PrepareBuilder();
        result.hasSource = false;
        result.source_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static BlobFromOfType() {
      object.ReferenceEquals(global::bnet.protocol.exchange.Exchange.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ActionResultDetail : pb::GeneratedMessage<ActionResultDetail, ActionResultDetail.Builder> {
    private ActionResultDetail() { }
    private static readonly ActionResultDetail defaultInstance = new ActionResultDetail().MakeReadOnly();
    private static readonly string[] _actionResultDetailFieldNames = new string[] { "category", "result_reason" };
    private static readonly uint[] _actionResultDetailFieldTags = new uint[] { 8, 16 };
    public static ActionResultDetail DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ActionResultDetail DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ActionResultDetail ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_ActionResultDetail__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ActionResultDetail, ActionResultDetail.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_ActionResultDetail__FieldAccessorTable; }
    }
    
    public const int CategoryFieldNumber = 1;
    private bool hasCategory;
    private uint category_;
    public bool HasCategory {
      get { return hasCategory; }
    }
    public uint Category {
      get { return category_; }
    }
    
    public const int ResultReasonFieldNumber = 2;
    private bool hasResultReason;
    private uint resultReason_;
    public bool HasResultReason {
      get { return hasResultReason; }
    }
    public uint ResultReason {
      get { return resultReason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCategory) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _actionResultDetailFieldNames;
      if (hasCategory) {
        output.WriteUInt32(1, field_names[0], Category);
      }
      if (hasResultReason) {
        output.WriteUInt32(2, field_names[1], ResultReason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Category);
        }
        if (hasResultReason) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, ResultReason);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ActionResultDetail ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionResultDetail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionResultDetail ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionResultDetail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionResultDetail ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionResultDetail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ActionResultDetail ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ActionResultDetail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ActionResultDetail ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionResultDetail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActionResultDetail MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ActionResultDetail prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ActionResultDetail, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActionResultDetail cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ActionResultDetail result;
      
      private ActionResultDetail PrepareBuilder() {
        if (resultIsReadOnly) {
          ActionResultDetail original = result;
          result = new ActionResultDetail();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ActionResultDetail MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange.ActionResultDetail.Descriptor; }
      }
      
      public override ActionResultDetail DefaultInstanceForType {
        get { return global::bnet.protocol.exchange.ActionResultDetail.DefaultInstance; }
      }
      
      public override ActionResultDetail BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ActionResultDetail) {
          return MergeFrom((ActionResultDetail) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ActionResultDetail other) {
        if (other == global::bnet.protocol.exchange.ActionResultDetail.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasResultReason) {
          ResultReason = other.ResultReason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_actionResultDetailFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _actionResultDetailFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCategory = input.ReadUInt32(ref result.category_);
              break;
            }
            case 16: {
              result.hasResultReason = input.ReadUInt32(ref result.resultReason_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCategory {
        get { return result.hasCategory; }
      }
      public uint Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(uint value) {
        PrepareBuilder();
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.hasCategory = false;
        result.category_ = 0;
        return this;
      }
      
      public bool HasResultReason {
        get { return result.hasResultReason; }
      }
      public uint ResultReason {
        get { return result.ResultReason; }
        set { SetResultReason(value); }
      }
      public Builder SetResultReason(uint value) {
        PrepareBuilder();
        result.hasResultReason = true;
        result.resultReason_ = value;
        return this;
      }
      public Builder ClearResultReason() {
        PrepareBuilder();
        result.hasResultReason = false;
        result.resultReason_ = 0;
        return this;
      }
    }
    static ActionResultDetail() {
      object.ReferenceEquals(global::bnet.protocol.exchange.Exchange.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BillingAddress : pb::GeneratedMessage<BillingAddress, BillingAddress.Builder> {
    private BillingAddress() { }
    private static readonly BillingAddress defaultInstance = new BillingAddress().MakeReadOnly();
    private static readonly string[] _billingAddressFieldNames = new string[] { "city", "country_id", "postal_code", "state" };
    private static readonly uint[] _billingAddressFieldTags = new uint[] { 18, 8, 34, 26 };
    public static BillingAddress DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BillingAddress DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BillingAddress ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BillingAddress__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BillingAddress, BillingAddress.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.exchange.Exchange.internal__static_bnet_protocol_exchange_BillingAddress__FieldAccessorTable; }
    }
    
    public const int CountryIdFieldNumber = 1;
    private bool hasCountryId;
    private int countryId_;
    public bool HasCountryId {
      get { return hasCountryId; }
    }
    public int CountryId {
      get { return countryId_; }
    }
    
    public const int CityFieldNumber = 2;
    private bool hasCity;
    private string city_ = "";
    public bool HasCity {
      get { return hasCity; }
    }
    public string City {
      get { return city_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private string state_ = "";
    public bool HasState {
      get { return hasState; }
    }
    public string State {
      get { return state_; }
    }
    
    public const int PostalCodeFieldNumber = 4;
    private bool hasPostalCode;
    private string postalCode_ = "";
    public bool HasPostalCode {
      get { return hasPostalCode; }
    }
    public string PostalCode {
      get { return postalCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCountryId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _billingAddressFieldNames;
      if (hasCountryId) {
        output.WriteInt32(1, field_names[1], CountryId);
      }
      if (hasCity) {
        output.WriteString(2, field_names[0], City);
      }
      if (hasState) {
        output.WriteString(3, field_names[3], State);
      }
      if (hasPostalCode) {
        output.WriteString(4, field_names[2], PostalCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCountryId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, CountryId);
        }
        if (hasCity) {
          size += pb::CodedOutputStream.ComputeStringSize(2, City);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeStringSize(3, State);
        }
        if (hasPostalCode) {
          size += pb::CodedOutputStream.ComputeStringSize(4, PostalCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BillingAddress ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BillingAddress ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BillingAddress ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BillingAddress ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BillingAddress ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BillingAddress ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BillingAddress ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BillingAddress ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BillingAddress ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BillingAddress ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BillingAddress MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BillingAddress prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BillingAddress, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BillingAddress cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BillingAddress result;
      
      private BillingAddress PrepareBuilder() {
        if (resultIsReadOnly) {
          BillingAddress original = result;
          result = new BillingAddress();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BillingAddress MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.exchange.BillingAddress.Descriptor; }
      }
      
      public override BillingAddress DefaultInstanceForType {
        get { return global::bnet.protocol.exchange.BillingAddress.DefaultInstance; }
      }
      
      public override BillingAddress BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BillingAddress) {
          return MergeFrom((BillingAddress) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BillingAddress other) {
        if (other == global::bnet.protocol.exchange.BillingAddress.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCountryId) {
          CountryId = other.CountryId;
        }
        if (other.HasCity) {
          City = other.City;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasPostalCode) {
          PostalCode = other.PostalCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_billingAddressFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _billingAddressFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCountryId = input.ReadInt32(ref result.countryId_);
              break;
            }
            case 18: {
              result.hasCity = input.ReadString(ref result.city_);
              break;
            }
            case 26: {
              result.hasState = input.ReadString(ref result.state_);
              break;
            }
            case 34: {
              result.hasPostalCode = input.ReadString(ref result.postalCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCountryId {
        get { return result.hasCountryId; }
      }
      public int CountryId {
        get { return result.CountryId; }
        set { SetCountryId(value); }
      }
      public Builder SetCountryId(int value) {
        PrepareBuilder();
        result.hasCountryId = true;
        result.countryId_ = value;
        return this;
      }
      public Builder ClearCountryId() {
        PrepareBuilder();
        result.hasCountryId = false;
        result.countryId_ = 0;
        return this;
      }
      
      public bool HasCity {
        get { return result.hasCity; }
      }
      public string City {
        get { return result.City; }
        set { SetCity(value); }
      }
      public Builder SetCity(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCity = true;
        result.city_ = value;
        return this;
      }
      public Builder ClearCity() {
        PrepareBuilder();
        result.hasCity = false;
        result.city_ = "";
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public string State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = "";
        return this;
      }
      
      public bool HasPostalCode {
        get { return result.hasPostalCode; }
      }
      public string PostalCode {
        get { return result.PostalCode; }
        set { SetPostalCode(value); }
      }
      public Builder SetPostalCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPostalCode = true;
        result.postalCode_ = value;
        return this;
      }
      public Builder ClearPostalCode() {
        PrepareBuilder();
        result.hasPostalCode = false;
        result.postalCode_ = "";
        return this;
      }
    }
    static BillingAddress() {
      object.ReferenceEquals(global::bnet.protocol.exchange.Exchange.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
