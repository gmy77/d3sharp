// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.game_utilities {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class GameUtilitiesService {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_ClientRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ClientRequest, global::bnet.protocol.game_utilities.ClientRequest.Builder> internal__static_bnet_protocol_game_utilities_ClientRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_ClientResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ClientResponse, global::bnet.protocol.game_utilities.ClientResponse.Builder> internal__static_bnet_protocol_game_utilities_ClientResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_ServerRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ServerRequest, global::bnet.protocol.game_utilities.ServerRequest.Builder> internal__static_bnet_protocol_game_utilities_ServerRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_ServerResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ServerResponse, global::bnet.protocol.game_utilities.ServerResponse.Builder> internal__static_bnet_protocol_game_utilities_ServerResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest, global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.Builder> internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.PlayerVariablesRequest, global::bnet.protocol.game_utilities.PlayerVariablesRequest.Builder> internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_GameVariablesRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.GameVariablesRequest, global::bnet.protocol.game_utilities.GameVariablesRequest.Builder> internal__static_bnet_protocol_game_utilities_GameVariablesRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_VariablesResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.VariablesResponse, global::bnet.protocol.game_utilities.VariablesResponse.Builder> internal__static_bnet_protocol_game_utilities_VariablesResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_GameAccountOnlineNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.GameAccountOnlineNotification, global::bnet.protocol.game_utilities.GameAccountOnlineNotification.Builder> internal__static_bnet_protocol_game_utilities_GameAccountOnlineNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_utilities_GameAccountOfflineNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.GameAccountOfflineNotification, global::bnet.protocol.game_utilities.GameAccountOfflineNotification.Builder> internal__static_bnet_protocol_game_utilities_GameAccountOfflineNotification__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameUtilitiesService() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CiFibmV0L2dhbWVfdXRpbGl0aWVzX3NlcnZpY2UucHJvdG8SHGJuZXQucHJv" + 
          "dG9jb2wuZ2FtZV91dGlsaXRpZXMaHmJuZXQvZ2FtZV9tYXN0ZXJfc2Vydmlj" + 
          "ZS5wcm90bxoeYm5ldC9zZXJ2ZXJfcG9vbF9zZXJ2aWNlLnByb3RvGhRibmV0" + 
          "L2F0dHJpYnV0ZS5wcm90bxoRYm5ldC9lbnRpdHkucHJvdG8aDmJuZXQvcnBj" + 
          "LnByb3RvItIBCg1DbGllbnRSZXF1ZXN0EjUKCWF0dHJpYnV0ZRgBIAMoCzIi" + 
          "LmJuZXQucHJvdG9jb2wuYXR0cmlidXRlLkF0dHJpYnV0ZRImCgRob3N0GAIg" + 
          "ASgLMhguYm5ldC5wcm90b2NvbC5Qcm9jZXNzSWQSMAoPYm5ldF9hY2NvdW50" + 
          "X2lkGAMgASgLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBIwCg9nYW1lX2Fj" + 
          "Y291bnRfaWQYBCABKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkIkcKDkNs" + 
          "aWVudFJlc3BvbnNlEjUKCWF0dHJpYnV0ZRgBIAMoCzIiLmJuZXQucHJvdG9j" + 
          "b2wuYXR0cmlidXRlLkF0dHJpYnV0ZSJ/Cg1TZXJ2ZXJSZXF1ZXN0EjUKCWF0" + 
          "dHJpYnV0ZRgBIAMoCzIiLmJuZXQucHJvdG9jb2wuYXR0cmlidXRlLkF0dHJp" + 
          "YnV0ZRIPCgdwcm9ncmFtGAIgAigHEiYKBGhvc3QYAyABKAsyGC5ibmV0LnBy" + 
          "b3RvY29sLlByb2Nlc3NJZCJHCg5TZXJ2ZXJSZXNwb25zZRI1CglhdHRyaWJ1" + 
          "dGUYASADKAsyIi5ibmV0LnByb3RvY29sLmF0dHJpYnV0ZS5BdHRyaWJ1dGUi" + 
          "0AEKHVByZXNlbmNlQ2hhbm5lbENyZWF0ZWRSZXF1ZXN0EiMKAmlkGAEgAigL" + 
          "MhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBIwCg9nYW1lX2FjY291bnRfaWQY" + 
          "AyABKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEjAKD2JuZXRfYWNjb3Vu" + 
          "dF9pZBgEIAEoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSJgoEaG9zdBgF" + 
          "IAEoCzIYLmJuZXQucHJvdG9jb2wuUHJvY2Vzc0lkIrYBChZQbGF5ZXJWYXJp" + 
          "YWJsZXNSZXF1ZXN0EjAKD2JuZXRfYWNjb3VudF9pZBgBIAIoCzIXLmJuZXQu" + 
          "cHJvdG9jb2wuRW50aXR5SWQSMAoPZ2FtZV9hY2NvdW50X2lkGAIgAigLMhcu" + 
          "Ym5ldC5wcm90b2NvbC5FbnRpdHlJZBIQCgh2YXJpYWJsZRgEIAMoCRImCgRo" + 
          "b3N0GAUgASgLMhguYm5ldC5wcm90b2NvbC5Qcm9jZXNzSWQihwEKFEdhbWVW" + 
          "YXJpYWJsZXNSZXF1ZXN0EjUKCWF0dHJpYnV0ZRgBIAMoCzIiLmJuZXQucHJv" + 
          "dG9jb2wuYXR0cmlidXRlLkF0dHJpYnV0ZRIQCgh2YXJpYWJsZRgCIAMoCRIm" + 
          "CgRob3N0GAMgASgLMhguYm5ldC5wcm90b2NvbC5Qcm9jZXNzSWQiJgoRVmFy" + 
          "aWFibGVzUmVzcG9uc2USEQoFdmFsdWUYASADKAJCAhABInkKHUdhbWVBY2Nv" + 
          "dW50T25saW5lTm90aWZpY2F0aW9uEjAKD2dhbWVfYWNjb3VudF9pZBgBIAIo" + 
          "CzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSJgoEaG9zdBgCIAEoCzIYLmJu" + 
          "ZXQucHJvdG9jb2wuUHJvY2Vzc0lkInoKHkdhbWVBY2NvdW50T2ZmbGluZU5v" + 
          "dGlmaWNhdGlvbhIwCg9nYW1lX2FjY291bnRfaWQYASACKAsyFy5ibmV0LnBy" + 
          "b3RvY29sLkVudGl0eUlkEiYKBGhvc3QYAiABKAsyGC5ibmV0LnByb3RvY29s" + 
          "LlByb2Nlc3NJZDLSBwoNR2FtZVV0aWxpdGllcxJ3ChRQcm9jZXNzQ2xpZW50" + 
          "UmVxdWVzdBIrLmJuZXQucHJvdG9jb2wuZ2FtZV91dGlsaXRpZXMuQ2xpZW50" + 
          "UmVxdWVzdBosLmJuZXQucHJvdG9jb2wuZ2FtZV91dGlsaXRpZXMuQ2xpZW50" + 
          "UmVzcG9uc2UiBIC1GAEScgoWUHJlc2VuY2VDaGFubmVsQ3JlYXRlZBI7LmJu" + 
          "ZXQucHJvdG9jb2wuZ2FtZV91dGlsaXRpZXMuUHJlc2VuY2VDaGFubmVsQ3Jl" + 
          "YXRlZFJlcXVlc3QaFS5ibmV0LnByb3RvY29sLk5vRGF0YSIEgLUYAhKBAQoS" + 
          "R2V0UGxheWVyVmFyaWFibGVzEjQuYm5ldC5wcm90b2NvbC5nYW1lX3V0aWxp" + 
          "dGllcy5QbGF5ZXJWYXJpYWJsZXNSZXF1ZXN0Gi8uYm5ldC5wcm90b2NvbC5n" + 
          "YW1lX3V0aWxpdGllcy5WYXJpYWJsZXNSZXNwb25zZSIEgLUYAxJ9ChBHZXRH" + 
          "YW1lVmFyaWFibGVzEjIuYm5ldC5wcm90b2NvbC5nYW1lX3V0aWxpdGllcy5H" + 
          "YW1lVmFyaWFibGVzUmVxdWVzdBovLmJuZXQucHJvdG9jb2wuZ2FtZV91dGls" + 
          "aXRpZXMuVmFyaWFibGVzUmVzcG9uc2UiBIC1GAQSYgoHR2V0TG9hZBIpLmJu" + 
          "ZXQucHJvdG9jb2wuc2VydmVyX3Bvb2wuR2V0TG9hZFJlcXVlc3QaJi5ibmV0" + 
          "LnByb3RvY29sLnNlcnZlcl9wb29sLlNlcnZlclN0YXRlIgSAtRgFEncKFFBy" + 
          "b2Nlc3NTZXJ2ZXJSZXF1ZXN0EisuYm5ldC5wcm90b2NvbC5nYW1lX3V0aWxp" + 
          "dGllcy5TZXJ2ZXJSZXF1ZXN0GiwuYm5ldC5wcm90b2NvbC5nYW1lX3V0aWxp" + 
          "dGllcy5TZXJ2ZXJSZXNwb25zZSIEgLUYBhJ4ChdOb3RpZnlHYW1lQWNjb3Vu" + 
          "dE9ubGluZRI7LmJuZXQucHJvdG9jb2wuZ2FtZV91dGlsaXRpZXMuR2FtZUFj" + 
          "Y291bnRPbmxpbmVOb3RpZmljYXRpb24aGi5ibmV0LnByb3RvY29sLk5PX1JF" + 
          "U1BPTlNFIgSAtRgHEnoKGE5vdGlmeUdhbWVBY2NvdW50T2ZmbGluZRI8LmJu" + 
          "ZXQucHJvdG9jb2wuZ2FtZV91dGlsaXRpZXMuR2FtZUFjY291bnRPZmZsaW5l" + 
          "Tm90aWZpY2F0aW9uGhouYm5ldC5wcm90b2NvbC5OT19SRVNQT05TRSIEgLUY" + 
          "CEIDgAEA");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_game_utilities_ClientRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_game_utilities_ClientRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ClientRequest, global::bnet.protocol.game_utilities.ClientRequest.Builder>(internal__static_bnet_protocol_game_utilities_ClientRequest__Descriptor,
                new string[] { "Attribute", "Host", "BnetAccountId", "GameAccountId", });
        internal__static_bnet_protocol_game_utilities_ClientResponse__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_game_utilities_ClientResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ClientResponse, global::bnet.protocol.game_utilities.ClientResponse.Builder>(internal__static_bnet_protocol_game_utilities_ClientResponse__Descriptor,
                new string[] { "Attribute", });
        internal__static_bnet_protocol_game_utilities_ServerRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_game_utilities_ServerRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ServerRequest, global::bnet.protocol.game_utilities.ServerRequest.Builder>(internal__static_bnet_protocol_game_utilities_ServerRequest__Descriptor,
                new string[] { "Attribute", "Program", "Host", });
        internal__static_bnet_protocol_game_utilities_ServerResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_game_utilities_ServerResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.ServerResponse, global::bnet.protocol.game_utilities.ServerResponse.Builder>(internal__static_bnet_protocol_game_utilities_ServerResponse__Descriptor,
                new string[] { "Attribute", });
        internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest, global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.Builder>(internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__Descriptor,
                new string[] { "Id", "GameAccountId", "BnetAccountId", "Host", });
        internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.PlayerVariablesRequest, global::bnet.protocol.game_utilities.PlayerVariablesRequest.Builder>(internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__Descriptor,
                new string[] { "BnetAccountId", "GameAccountId", "Variable", "Host", });
        internal__static_bnet_protocol_game_utilities_GameVariablesRequest__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bnet_protocol_game_utilities_GameVariablesRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.GameVariablesRequest, global::bnet.protocol.game_utilities.GameVariablesRequest.Builder>(internal__static_bnet_protocol_game_utilities_GameVariablesRequest__Descriptor,
                new string[] { "Attribute", "Variable", "Host", });
        internal__static_bnet_protocol_game_utilities_VariablesResponse__Descriptor = Descriptor.MessageTypes[7];
        internal__static_bnet_protocol_game_utilities_VariablesResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.VariablesResponse, global::bnet.protocol.game_utilities.VariablesResponse.Builder>(internal__static_bnet_protocol_game_utilities_VariablesResponse__Descriptor,
                new string[] { "Value", });
        internal__static_bnet_protocol_game_utilities_GameAccountOnlineNotification__Descriptor = Descriptor.MessageTypes[8];
        internal__static_bnet_protocol_game_utilities_GameAccountOnlineNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.GameAccountOnlineNotification, global::bnet.protocol.game_utilities.GameAccountOnlineNotification.Builder>(internal__static_bnet_protocol_game_utilities_GameAccountOnlineNotification__Descriptor,
                new string[] { "GameAccountId", "Host", });
        internal__static_bnet_protocol_game_utilities_GameAccountOfflineNotification__Descriptor = Descriptor.MessageTypes[9];
        internal__static_bnet_protocol_game_utilities_GameAccountOfflineNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_utilities.GameAccountOfflineNotification, global::bnet.protocol.game_utilities.GameAccountOfflineNotification.Builder>(internal__static_bnet_protocol_game_utilities_GameAccountOfflineNotification__Descriptor,
                new string[] { "GameAccountId", "Host", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::bnet.protocol.game_master.GameMasterService.RegisterAllExtensions(registry);
        global::bnet.protocol.server_pool.Proto.ServerPoolService.RegisterAllExtensions(registry);
        global::bnet.protocol.attribute.Proto.Attribute.RegisterAllExtensions(registry);
        global::bnet.protocol.Entity.RegisterAllExtensions(registry);
        global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.game_master.GameMasterService.Descriptor, 
          global::bnet.protocol.server_pool.Proto.ServerPoolService.Descriptor, 
          global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
          global::bnet.protocol.Entity.Descriptor, 
          global::bnet.protocol.Rpc.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ClientRequest : pb::GeneratedMessage<ClientRequest, ClientRequest.Builder> {
    private ClientRequest() { }
    private static readonly ClientRequest defaultInstance = new ClientRequest().MakeReadOnly();
    private static readonly string[] _clientRequestFieldNames = new string[] { "attribute", "bnet_account_id", "game_account_id", "host" };
    private static readonly uint[] _clientRequestFieldTags = new uint[] { 10, 26, 34, 18 };
    public static ClientRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClientRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_ClientRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientRequest, ClientRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_ClientRequest__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int HostFieldNumber = 2;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public const int BnetAccountIdFieldNumber = 3;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int GameAccountIdFieldNumber = 4;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        if (HasBnetAccountId) {
          if (!BnetAccountId.IsInitialized) return false;
        }
        if (HasGameAccountId) {
          if (!GameAccountId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clientRequestFieldNames;
      if (attribute_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], attribute_);
      }
      if (hasHost) {
        output.WriteMessage(2, field_names[3], Host);
      }
      if (hasBnetAccountId) {
        output.WriteMessage(3, field_names[1], BnetAccountId);
      }
      if (hasGameAccountId) {
        output.WriteMessage(4, field_names[2], GameAccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Host);
        }
        if (hasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, BnetAccountId);
        }
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, GameAccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClientRequest MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ClientRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClientRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClientRequest result;
      
      private ClientRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ClientRequest original = result;
          result = new ClientRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClientRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.ClientRequest.Descriptor; }
      }
      
      public override ClientRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.ClientRequest.DefaultInstance; }
      }
      
      public override ClientRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientRequest) {
          return MergeFrom((ClientRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientRequest other) {
        if (other == global::bnet.protocol.game_utilities.ClientRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clientRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clientRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
      
      public bool HasBnetAccountId {
       get { return result.hasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        PrepareBuilder();
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = null;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
    }
    static ClientRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.GameUtilitiesService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ClientResponse : pb::GeneratedMessage<ClientResponse, ClientResponse.Builder> {
    private ClientResponse() { }
    private static readonly ClientResponse defaultInstance = new ClientResponse().MakeReadOnly();
    private static readonly string[] _clientResponseFieldNames = new string[] { "attribute" };
    private static readonly uint[] _clientResponseFieldTags = new uint[] { 10 };
    public static ClientResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClientResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_ClientResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientResponse, ClientResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_ClientResponse__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clientResponseFieldNames;
      if (attribute_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], attribute_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClientResponse MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ClientResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClientResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClientResponse result;
      
      private ClientResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ClientResponse original = result;
          result = new ClientResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClientResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.ClientResponse.Descriptor; }
      }
      
      public override ClientResponse DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.ClientResponse.DefaultInstance; }
      }
      
      public override ClientResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientResponse) {
          return MergeFrom((ClientResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientResponse other) {
        if (other == global::bnet.protocol.game_utilities.ClientResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clientResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clientResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
    }
    static ClientResponse() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.GameUtilitiesService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerRequest : pb::GeneratedMessage<ServerRequest, ServerRequest.Builder> {
    private ServerRequest() { }
    private static readonly ServerRequest defaultInstance = new ServerRequest().MakeReadOnly();
    private static readonly string[] _serverRequestFieldNames = new string[] { "attribute", "host", "program" };
    private static readonly uint[] _serverRequestFieldTags = new uint[] { 10, 26, 21 };
    public static ServerRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_ServerRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerRequest, ServerRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_ServerRequest__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int ProgramFieldNumber = 2;
    private bool hasProgram;
    private uint program_;
    public bool HasProgram {
      get { return hasProgram; }
    }
    public uint Program {
      get { return program_; }
    }
    
    public const int HostFieldNumber = 3;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProgram) return false;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverRequestFieldNames;
      if (attribute_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], attribute_);
      }
      if (hasProgram) {
        output.WriteFixed32(2, field_names[2], Program);
      }
      if (hasHost) {
        output.WriteMessage(3, field_names[1], Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasProgram) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, Program);
        }
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerRequest MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerRequest result;
      
      private ServerRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerRequest original = result;
          result = new ServerRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.ServerRequest.Descriptor; }
      }
      
      public override ServerRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.ServerRequest.DefaultInstance; }
      }
      
      public override ServerRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerRequest) {
          return MergeFrom((ServerRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerRequest other) {
        if (other == global::bnet.protocol.game_utilities.ServerRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasProgram) {
          Program = other.Program;
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 21: {
              result.hasProgram = input.ReadFixed32(ref result.program_);
              break;
            }
            case 26: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasProgram {
        get { return result.hasProgram; }
      }
      public uint Program {
        get { return result.Program; }
        set { SetProgram(value); }
      }
      public Builder SetProgram(uint value) {
        PrepareBuilder();
        result.hasProgram = true;
        result.program_ = value;
        return this;
      }
      public Builder ClearProgram() {
        PrepareBuilder();
        result.hasProgram = false;
        result.program_ = 0;
        return this;
      }
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
    }
    static ServerRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.GameUtilitiesService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerResponse : pb::GeneratedMessage<ServerResponse, ServerResponse.Builder> {
    private ServerResponse() { }
    private static readonly ServerResponse defaultInstance = new ServerResponse().MakeReadOnly();
    private static readonly string[] _serverResponseFieldNames = new string[] { "attribute" };
    private static readonly uint[] _serverResponseFieldTags = new uint[] { 10 };
    public static ServerResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_ServerResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerResponse, ServerResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_ServerResponse__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverResponseFieldNames;
      if (attribute_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], attribute_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerResponse MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerResponse result;
      
      private ServerResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerResponse original = result;
          result = new ServerResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.ServerResponse.Descriptor; }
      }
      
      public override ServerResponse DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.ServerResponse.DefaultInstance; }
      }
      
      public override ServerResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerResponse) {
          return MergeFrom((ServerResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerResponse other) {
        if (other == global::bnet.protocol.game_utilities.ServerResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
    }
    static ServerResponse() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.GameUtilitiesService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PresenceChannelCreatedRequest : pb::GeneratedMessage<PresenceChannelCreatedRequest, PresenceChannelCreatedRequest.Builder> {
    private PresenceChannelCreatedRequest() { }
    private static readonly PresenceChannelCreatedRequest defaultInstance = new PresenceChannelCreatedRequest().MakeReadOnly();
    private static readonly string[] _presenceChannelCreatedRequestFieldNames = new string[] { "bnet_account_id", "game_account_id", "host", "id" };
    private static readonly uint[] _presenceChannelCreatedRequestFieldTags = new uint[] { 34, 26, 42, 10 };
    public static PresenceChannelCreatedRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PresenceChannelCreatedRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PresenceChannelCreatedRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PresenceChannelCreatedRequest, PresenceChannelCreatedRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_PresenceChannelCreatedRequest__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::bnet.protocol.EntityId id_;
    public bool HasId {
      get { return hasId; }
    }
    public global::bnet.protocol.EntityId Id {
      get { return id_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int GameAccountIdFieldNumber = 3;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int BnetAccountIdFieldNumber = 4;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int HostFieldNumber = 5;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!Id.IsInitialized) return false;
        if (HasGameAccountId) {
          if (!GameAccountId.IsInitialized) return false;
        }
        if (HasBnetAccountId) {
          if (!BnetAccountId.IsInitialized) return false;
        }
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _presenceChannelCreatedRequestFieldNames;
      if (hasId) {
        output.WriteMessage(1, field_names[3], Id);
      }
      if (hasGameAccountId) {
        output.WriteMessage(3, field_names[1], GameAccountId);
      }
      if (hasBnetAccountId) {
        output.WriteMessage(4, field_names[0], BnetAccountId);
      }
      if (hasHost) {
        output.WriteMessage(5, field_names[2], Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, GameAccountId);
        }
        if (hasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, BnetAccountId);
        }
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PresenceChannelCreatedRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PresenceChannelCreatedRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PresenceChannelCreatedRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PresenceChannelCreatedRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PresenceChannelCreatedRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PresenceChannelCreatedRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PresenceChannelCreatedRequest result;
      
      private PresenceChannelCreatedRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PresenceChannelCreatedRequest original = result;
          result = new PresenceChannelCreatedRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PresenceChannelCreatedRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.Descriptor; }
      }
      
      public override PresenceChannelCreatedRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.DefaultInstance; }
      }
      
      public override PresenceChannelCreatedRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PresenceChannelCreatedRequest) {
          return MergeFrom((PresenceChannelCreatedRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PresenceChannelCreatedRequest other) {
        if (other == global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_presenceChannelCreatedRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _presenceChannelCreatedRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
       get { return result.hasId; }
      }
      public global::bnet.protocol.EntityId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasId &&
            result.id_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.id_ = global::bnet.protocol.EntityId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = null;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
      
      public bool HasBnetAccountId {
       get { return result.hasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        PrepareBuilder();
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = null;
        return this;
      }
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
    }
    static PresenceChannelCreatedRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.GameUtilitiesService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PlayerVariablesRequest : pb::GeneratedMessage<PlayerVariablesRequest, PlayerVariablesRequest.Builder> {
    private PlayerVariablesRequest() { }
    private static readonly PlayerVariablesRequest defaultInstance = new PlayerVariablesRequest().MakeReadOnly();
    private static readonly string[] _playerVariablesRequestFieldNames = new string[] { "bnet_account_id", "game_account_id", "host", "variable" };
    private static readonly uint[] _playerVariablesRequestFieldTags = new uint[] { 10, 18, 42, 34 };
    public static PlayerVariablesRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerVariablesRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerVariablesRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerVariablesRequest, PlayerVariablesRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_PlayerVariablesRequest__FieldAccessorTable; }
    }
    
    public const int BnetAccountIdFieldNumber = 1;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int GameAccountIdFieldNumber = 2;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int VariableFieldNumber = 4;
    private pbc::PopsicleList<string> variable_ = new pbc::PopsicleList<string>();
    public scg::IList<string> VariableList {
      get { return pbc::Lists.AsReadOnly(variable_); }
    }
    public int VariableCount {
      get { return variable_.Count; }
    }
    public string GetVariable(int index) {
      return variable_[index];
    }
    
    public const int HostFieldNumber = 5;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBnetAccountId) return false;
        if (!hasGameAccountId) return false;
        if (!BnetAccountId.IsInitialized) return false;
        if (!GameAccountId.IsInitialized) return false;
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerVariablesRequestFieldNames;
      if (hasBnetAccountId) {
        output.WriteMessage(1, field_names[0], BnetAccountId);
      }
      if (hasGameAccountId) {
        output.WriteMessage(2, field_names[1], GameAccountId);
      }
      if (variable_.Count > 0) {
        output.WriteStringArray(4, field_names[3], variable_);
      }
      if (hasHost) {
        output.WriteMessage(5, field_names[2], Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BnetAccountId);
        }
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GameAccountId);
        }
        {
          int dataSize = 0;
          foreach (string element in VariableList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * variable_.Count;
        }
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerVariablesRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerVariablesRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerVariablesRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerVariablesRequest MakeReadOnly() {
      variable_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerVariablesRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerVariablesRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerVariablesRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerVariablesRequest result;
      
      private PlayerVariablesRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerVariablesRequest original = result;
          result = new PlayerVariablesRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerVariablesRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.PlayerVariablesRequest.Descriptor; }
      }
      
      public override PlayerVariablesRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.PlayerVariablesRequest.DefaultInstance; }
      }
      
      public override PlayerVariablesRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerVariablesRequest) {
          return MergeFrom((PlayerVariablesRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerVariablesRequest other) {
        if (other == global::bnet.protocol.game_utilities.PlayerVariablesRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.variable_.Count != 0) {
          result.variable_.Add(other.variable_);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerVariablesRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerVariablesRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.variable_);
              break;
            }
            case 42: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBnetAccountId {
       get { return result.hasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        PrepareBuilder();
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = null;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<string> VariableList {
        get { return PrepareBuilder().variable_; }
      }
      public int VariableCount {
        get { return result.VariableCount; }
      }
      public string GetVariable(int index) {
        return result.GetVariable(index);
      }
      public Builder SetVariable(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.variable_[index] = value;
        return this;
      }
      public Builder AddVariable(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.variable_.Add(value);
        return this;
      }
      public Builder AddRangeVariable(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.variable_.Add(values);
        return this;
      }
      public Builder ClearVariable() {
        PrepareBuilder();
        result.variable_.Clear();
        return this;
      }
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
    }
    static PlayerVariablesRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.GameUtilitiesService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameVariablesRequest : pb::GeneratedMessage<GameVariablesRequest, GameVariablesRequest.Builder> {
    private GameVariablesRequest() { }
    private static readonly GameVariablesRequest defaultInstance = new GameVariablesRequest().MakeReadOnly();
    private static readonly string[] _gameVariablesRequestFieldNames = new string[] { "attribute", "host", "variable" };
    private static readonly uint[] _gameVariablesRequestFieldTags = new uint[] { 10, 26, 18 };
    public static GameVariablesRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameVariablesRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameVariablesRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_GameVariablesRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameVariablesRequest, GameVariablesRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_GameVariablesRequest__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int VariableFieldNumber = 2;
    private pbc::PopsicleList<string> variable_ = new pbc::PopsicleList<string>();
    public scg::IList<string> VariableList {
      get { return pbc::Lists.AsReadOnly(variable_); }
    }
    public int VariableCount {
      get { return variable_.Count; }
    }
    public string GetVariable(int index) {
      return variable_[index];
    }
    
    public const int HostFieldNumber = 3;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameVariablesRequestFieldNames;
      if (attribute_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], attribute_);
      }
      if (variable_.Count > 0) {
        output.WriteStringArray(2, field_names[2], variable_);
      }
      if (hasHost) {
        output.WriteMessage(3, field_names[1], Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        {
          int dataSize = 0;
          foreach (string element in VariableList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * variable_.Count;
        }
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameVariablesRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameVariablesRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameVariablesRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameVariablesRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameVariablesRequest MakeReadOnly() {
      attribute_.MakeReadOnly();
      variable_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameVariablesRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameVariablesRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameVariablesRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameVariablesRequest result;
      
      private GameVariablesRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GameVariablesRequest original = result;
          result = new GameVariablesRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameVariablesRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.GameVariablesRequest.Descriptor; }
      }
      
      public override GameVariablesRequest DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.GameVariablesRequest.DefaultInstance; }
      }
      
      public override GameVariablesRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameVariablesRequest) {
          return MergeFrom((GameVariablesRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameVariablesRequest other) {
        if (other == global::bnet.protocol.game_utilities.GameVariablesRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.variable_.Count != 0) {
          result.variable_.Add(other.variable_);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameVariablesRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameVariablesRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.variable_);
              break;
            }
            case 26: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> VariableList {
        get { return PrepareBuilder().variable_; }
      }
      public int VariableCount {
        get { return result.VariableCount; }
      }
      public string GetVariable(int index) {
        return result.GetVariable(index);
      }
      public Builder SetVariable(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.variable_[index] = value;
        return this;
      }
      public Builder AddVariable(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.variable_.Add(value);
        return this;
      }
      public Builder AddRangeVariable(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.variable_.Add(values);
        return this;
      }
      public Builder ClearVariable() {
        PrepareBuilder();
        result.variable_.Clear();
        return this;
      }
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
    }
    static GameVariablesRequest() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.GameUtilitiesService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class VariablesResponse : pb::GeneratedMessage<VariablesResponse, VariablesResponse.Builder> {
    private VariablesResponse() { }
    private static readonly VariablesResponse defaultInstance = new VariablesResponse().MakeReadOnly();
    private static readonly string[] _variablesResponseFieldNames = new string[] { "value" };
    private static readonly uint[] _variablesResponseFieldTags = new uint[] { 10 };
    public static VariablesResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VariablesResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VariablesResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_VariablesResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VariablesResponse, VariablesResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_VariablesResponse__FieldAccessorTable; }
    }
    
    public const int ValueFieldNumber = 1;
    private int valueMemoizedSerializedSize;
    private pbc::PopsicleList<float> value_ = new pbc::PopsicleList<float>();
    public scg::IList<float> ValueList {
      get { return pbc::Lists.AsReadOnly(value_); }
    }
    public int ValueCount {
      get { return value_.Count; }
    }
    public float GetValue(int index) {
      return value_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _variablesResponseFieldNames;
      if (value_.Count > 0) {
        output.WritePackedFloatArray(1, field_names[0], valueMemoizedSerializedSize, value_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * value_.Count;
          size += dataSize;
          if (value_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          valueMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VariablesResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VariablesResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VariablesResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VariablesResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VariablesResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VariablesResponse MakeReadOnly() {
      value_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VariablesResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<VariablesResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VariablesResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VariablesResponse result;
      
      private VariablesResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          VariablesResponse original = result;
          result = new VariablesResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VariablesResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.VariablesResponse.Descriptor; }
      }
      
      public override VariablesResponse DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance; }
      }
      
      public override VariablesResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VariablesResponse) {
          return MergeFrom((VariablesResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VariablesResponse other) {
        if (other == global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.value_.Count != 0) {
          result.value_.Add(other.value_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_variablesResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _variablesResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadFloatArray(tag, field_name, result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<float> ValueList {
        get { return PrepareBuilder().value_; }
      }
      public int ValueCount {
        get { return result.ValueCount; }
      }
      public float GetValue(int index) {
        return result.GetValue(index);
      }
      public Builder SetValue(int index, float value) {
        PrepareBuilder();
        result.value_[index] = value;
        return this;
      }
      public Builder AddValue(float value) {
        PrepareBuilder();
        result.value_.Add(value);
        return this;
      }
      public Builder AddRangeValue(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.value_.Add(values);
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.value_.Clear();
        return this;
      }
    }
    static VariablesResponse() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.GameUtilitiesService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameAccountOnlineNotification : pb::GeneratedMessage<GameAccountOnlineNotification, GameAccountOnlineNotification.Builder> {
    private GameAccountOnlineNotification() { }
    private static readonly GameAccountOnlineNotification defaultInstance = new GameAccountOnlineNotification().MakeReadOnly();
    private static readonly string[] _gameAccountOnlineNotificationFieldNames = new string[] { "game_account_id", "host" };
    private static readonly uint[] _gameAccountOnlineNotificationFieldTags = new uint[] { 10, 18 };
    public static GameAccountOnlineNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameAccountOnlineNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameAccountOnlineNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_GameAccountOnlineNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameAccountOnlineNotification, GameAccountOnlineNotification.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_GameAccountOnlineNotification__FieldAccessorTable; }
    }
    
    public const int GameAccountIdFieldNumber = 1;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int HostFieldNumber = 2;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccountId) return false;
        if (!GameAccountId.IsInitialized) return false;
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameAccountOnlineNotificationFieldNames;
      if (hasGameAccountId) {
        output.WriteMessage(1, field_names[0], GameAccountId);
      }
      if (hasHost) {
        output.WriteMessage(2, field_names[1], Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GameAccountId);
        }
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameAccountOnlineNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountOnlineNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountOnlineNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountOnlineNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountOnlineNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountOnlineNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameAccountOnlineNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameAccountOnlineNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameAccountOnlineNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountOnlineNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameAccountOnlineNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameAccountOnlineNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameAccountOnlineNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameAccountOnlineNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameAccountOnlineNotification result;
      
      private GameAccountOnlineNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          GameAccountOnlineNotification original = result;
          result = new GameAccountOnlineNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameAccountOnlineNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.GameAccountOnlineNotification.Descriptor; }
      }
      
      public override GameAccountOnlineNotification DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.GameAccountOnlineNotification.DefaultInstance; }
      }
      
      public override GameAccountOnlineNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameAccountOnlineNotification) {
          return MergeFrom((GameAccountOnlineNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameAccountOnlineNotification other) {
        if (other == global::bnet.protocol.game_utilities.GameAccountOnlineNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameAccountOnlineNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameAccountOnlineNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
    }
    static GameAccountOnlineNotification() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.GameUtilitiesService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameAccountOfflineNotification : pb::GeneratedMessage<GameAccountOfflineNotification, GameAccountOfflineNotification.Builder> {
    private GameAccountOfflineNotification() { }
    private static readonly GameAccountOfflineNotification defaultInstance = new GameAccountOfflineNotification().MakeReadOnly();
    private static readonly string[] _gameAccountOfflineNotificationFieldNames = new string[] { "game_account_id", "host" };
    private static readonly uint[] _gameAccountOfflineNotificationFieldTags = new uint[] { 10, 18 };
    public static GameAccountOfflineNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameAccountOfflineNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameAccountOfflineNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_GameAccountOfflineNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameAccountOfflineNotification, GameAccountOfflineNotification.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_utilities.GameUtilitiesService.internal__static_bnet_protocol_game_utilities_GameAccountOfflineNotification__FieldAccessorTable; }
    }
    
    public const int GameAccountIdFieldNumber = 1;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int HostFieldNumber = 2;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccountId) return false;
        if (!GameAccountId.IsInitialized) return false;
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameAccountOfflineNotificationFieldNames;
      if (hasGameAccountId) {
        output.WriteMessage(1, field_names[0], GameAccountId);
      }
      if (hasHost) {
        output.WriteMessage(2, field_names[1], Host);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GameAccountId);
        }
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Host);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameAccountOfflineNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountOfflineNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountOfflineNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountOfflineNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountOfflineNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountOfflineNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameAccountOfflineNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameAccountOfflineNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameAccountOfflineNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountOfflineNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameAccountOfflineNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameAccountOfflineNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameAccountOfflineNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameAccountOfflineNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameAccountOfflineNotification result;
      
      private GameAccountOfflineNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          GameAccountOfflineNotification original = result;
          result = new GameAccountOfflineNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameAccountOfflineNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_utilities.GameAccountOfflineNotification.Descriptor; }
      }
      
      public override GameAccountOfflineNotification DefaultInstanceForType {
        get { return global::bnet.protocol.game_utilities.GameAccountOfflineNotification.DefaultInstance; }
      }
      
      public override GameAccountOfflineNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameAccountOfflineNotification) {
          return MergeFrom((GameAccountOfflineNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameAccountOfflineNotification other) {
        if (other == global::bnet.protocol.game_utilities.GameAccountOfflineNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameAccountOfflineNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameAccountOfflineNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
    }
    static GameAccountOfflineNotification() {
      object.ReferenceEquals(global::bnet.protocol.game_utilities.GameUtilitiesService.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class GameUtilities : pb::IService {
    public abstract void ProcessClientRequest(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.ClientRequest request,
        global::System.Action<global::bnet.protocol.game_utilities.ClientResponse> done);
    public abstract void PresenceChannelCreated(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    public abstract void GetPlayerVariables(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.PlayerVariablesRequest request,
        global::System.Action<global::bnet.protocol.game_utilities.VariablesResponse> done);
    public abstract void GetGameVariables(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.GameVariablesRequest request,
        global::System.Action<global::bnet.protocol.game_utilities.VariablesResponse> done);
    public abstract void GetLoad(
        pb::IRpcController controller,
        global::bnet.protocol.server_pool.GetLoadRequest request,
        global::System.Action<global::bnet.protocol.server_pool.ServerState> done);
    public abstract void ProcessServerRequest(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.ServerRequest request,
        global::System.Action<global::bnet.protocol.game_utilities.ServerResponse> done);
    public abstract void NotifyGameAccountOnline(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.GameAccountOnlineNotification request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    public abstract void NotifyGameAccountOffline(
        pb::IRpcController controller,
        global::bnet.protocol.game_utilities.GameAccountOfflineNotification request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return GameUtilitiesService.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.ProcessClientRequest(controller, (global::bnet.protocol.game_utilities.ClientRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.game_utilities.ClientResponse>(
              done));
          return;
        case 1:
          this.PresenceChannelCreated(controller, (global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        case 2:
          this.GetPlayerVariables(controller, (global::bnet.protocol.game_utilities.PlayerVariablesRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.game_utilities.VariablesResponse>(
              done));
          return;
        case 3:
          this.GetGameVariables(controller, (global::bnet.protocol.game_utilities.GameVariablesRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.game_utilities.VariablesResponse>(
              done));
          return;
        case 4:
          this.GetLoad(controller, (global::bnet.protocol.server_pool.GetLoadRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.server_pool.ServerState>(
              done));
          return;
        case 5:
          this.ProcessServerRequest(controller, (global::bnet.protocol.game_utilities.ServerRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.game_utilities.ServerResponse>(
              done));
          return;
        case 6:
          this.NotifyGameAccountOnline(controller, (global::bnet.protocol.game_utilities.GameAccountOnlineNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        case 7:
          this.NotifyGameAccountOffline(controller, (global::bnet.protocol.game_utilities.GameAccountOfflineNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.game_utilities.ClientRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.game_utilities.PlayerVariablesRequest.DefaultInstance;
        case 3:
          return global::bnet.protocol.game_utilities.GameVariablesRequest.DefaultInstance;
        case 4:
          return global::bnet.protocol.server_pool.GetLoadRequest.DefaultInstance;
        case 5:
          return global::bnet.protocol.game_utilities.ServerRequest.DefaultInstance;
        case 6:
          return global::bnet.protocol.game_utilities.GameAccountOnlineNotification.DefaultInstance;
        case 7:
          return global::bnet.protocol.game_utilities.GameAccountOfflineNotification.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.game_utilities.ClientResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.NoData.DefaultInstance;
        case 2:
          return global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance;
        case 3:
          return global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance;
        case 4:
          return global::bnet.protocol.server_pool.ServerState.DefaultInstance;
        case 5:
          return global::bnet.protocol.game_utilities.ServerResponse.DefaultInstance;
        case 6:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        case 7:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.game_utilities.GameUtilities {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void ProcessClientRequest(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.ClientRequest request,
          global::System.Action<global::bnet.protocol.game_utilities.ClientResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.game_utilities.ClientResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.game_utilities.ClientResponse, global::bnet.protocol.game_utilities.ClientResponse.Builder>(done, global::bnet.protocol.game_utilities.ClientResponse.DefaultInstance));
      }
      
      public override void PresenceChannelCreated(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.PresenceChannelCreatedRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
      
      public override void GetPlayerVariables(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.PlayerVariablesRequest request,
          global::System.Action<global::bnet.protocol.game_utilities.VariablesResponse> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.game_utilities.VariablesResponse, global::bnet.protocol.game_utilities.VariablesResponse.Builder>(done, global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance));
      }
      
      public override void GetGameVariables(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.GameVariablesRequest request,
          global::System.Action<global::bnet.protocol.game_utilities.VariablesResponse> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.game_utilities.VariablesResponse, global::bnet.protocol.game_utilities.VariablesResponse.Builder>(done, global::bnet.protocol.game_utilities.VariablesResponse.DefaultInstance));
      }
      
      public override void GetLoad(
          pb::IRpcController controller,
          global::bnet.protocol.server_pool.GetLoadRequest request,
          global::System.Action<global::bnet.protocol.server_pool.ServerState> done) {
        channel.CallMethod(Descriptor.Methods[4],
            controller, request, global::bnet.protocol.server_pool.ServerState.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.server_pool.ServerState, global::bnet.protocol.server_pool.ServerState.Builder>(done, global::bnet.protocol.server_pool.ServerState.DefaultInstance));
      }
      
      public override void ProcessServerRequest(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.ServerRequest request,
          global::System.Action<global::bnet.protocol.game_utilities.ServerResponse> done) {
        channel.CallMethod(Descriptor.Methods[5],
            controller, request, global::bnet.protocol.game_utilities.ServerResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.game_utilities.ServerResponse, global::bnet.protocol.game_utilities.ServerResponse.Builder>(done, global::bnet.protocol.game_utilities.ServerResponse.DefaultInstance));
      }
      
      public override void NotifyGameAccountOnline(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.GameAccountOnlineNotification request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[6],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void NotifyGameAccountOffline(
          pb::IRpcController controller,
          global::bnet.protocol.game_utilities.GameAccountOfflineNotification request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[7],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
