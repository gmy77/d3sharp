// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.game_master {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class GameMasterTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_master_Player__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.Player, global::bnet.protocol.game_master.Player.Builder> internal__static_bnet_protocol_game_master_Player__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_master_ConnectInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.ConnectInfo, global::bnet.protocol.game_master.ConnectInfo.Builder> internal__static_bnet_protocol_game_master_ConnectInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_master_GameStatsBucket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameStatsBucket, global::bnet.protocol.game_master.GameStatsBucket.Builder> internal__static_bnet_protocol_game_master_GameStatsBucket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_master_GameFactoryDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameFactoryDescription, global::bnet.protocol.game_master.GameFactoryDescription.Builder> internal__static_bnet_protocol_game_master_GameFactoryDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_game_master_GameHandle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameHandle, global::bnet.protocol.game_master.GameHandle.Builder> internal__static_bnet_protocol_game_master_GameHandle__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameMasterTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CjZzZXJ2aWNlL2dhbWVfbWFzdGVyL2RlZmluaXRpb24vZ2FtZV9tYXN0ZXJf" + 
          "dHlwZXMucHJvdG8SGWJuZXQucHJvdG9jb2wuZ2FtZV9tYXN0ZXIaHGxpYi9w" + 
          "cm90b2NvbC9hdHRyaWJ1dGUucHJvdG8aGWxpYi9wcm90b2NvbC9lbnRpdHku" + 
          "cHJvdG8iqQIKBlBsYXllchI6CgR0eXBlGAEgASgOMiYuYm5ldC5wcm90b2Nv" + 
          "bC5nYW1lX21hc3Rlci5QbGF5ZXIuVHlwZToEVE9PThIoCgd0b29uX2lkGAIg" + 
          "ASgLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBIwCg9nYW1lX2FjY291bnRf" + 
          "aWQYAyABKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEjAKD2JuZXRfYWNj" + 
          "b3VudF9pZBgEIAEoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSNQoJYXR0" + 
          "cmlidXRlGAUgAygLMiIuYm5ldC5wcm90b2NvbC5hdHRyaWJ1dGUuQXR0cmli" + 
          "dXRlIh4KBFR5cGUSCAoEVE9PThAAEgwKCENPTVBVVEVSEAEimQEKC0Nvbm5l" + 
          "Y3RJbmZvEigKB3Rvb25faWQYASACKAsyFy5ibmV0LnByb3RvY29sLkVudGl0" + 
          "eUlkEgwKBGhvc3QYAiACKAkSDAoEcG9ydBgDIAIoBRINCgV0b2tlbhgEIAEo" + 
          "DBI1CglhdHRyaWJ1dGUYBSADKAsyIi5ibmV0LnByb3RvY29sLmF0dHJpYnV0" + 
          "ZS5BdHRyaWJ1dGUi7wEKD0dhbWVTdGF0c0J1Y2tldBIVCgpidWNrZXRfbWlu" + 
          "GAEgASgCOgEwEiIKCmJ1Y2tldF9tYXgYAiABKAI6DjQuMjk0OTY3M2UrMDA5" + 
          "EhwKEXdhaXRfbWlsbGlzZWNvbmRzGAMgASgNOgEwEhkKDmdhbWVzX3Blcl9o" + 
          "b3VyGAQgASgNOgEwEhcKDGFjdGl2ZV9nYW1lcxgFIAEoDToBMBIZCg5hY3Rp" + 
          "dmVfcGxheWVycxgGIAEoDToBMBIYCg1mb3JtaW5nX2dhbWVzGAcgASgNOgEw" + 
          "EhoKD3dhaXRpbmdfcGxheWVycxgIIAEoDToBMCKrAQoWR2FtZUZhY3RvcnlE" + 
          "ZXNjcmlwdGlvbhIKCgJpZBgBIAIoBhIMCgRuYW1lGAIgASgJEjUKCWF0dHJp" + 
          "YnV0ZRgDIAMoCzIiLmJuZXQucHJvdG9jb2wuYXR0cmlidXRlLkF0dHJpYnV0" + 
          "ZRJACgxzdGF0c19idWNrZXQYBCADKAsyKi5ibmV0LnByb3RvY29sLmdhbWVf" + 
          "bWFzdGVyLkdhbWVTdGF0c0J1Y2tldCJKCgpHYW1lSGFuZGxlEhIKCmZhY3Rv" + 
          "cnlfaWQYASACKAYSKAoHZ2FtZV9pZBgCIAIoCzIXLmJuZXQucHJvdG9jb2wu" + 
          "RW50aXR5SWQ=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_game_master_Player__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_game_master_Player__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.Player, global::bnet.protocol.game_master.Player.Builder>(internal__static_bnet_protocol_game_master_Player__Descriptor,
                new string[] { "Type", "ToonId", "GameAccountId", "BnetAccountId", "Attribute", });
        internal__static_bnet_protocol_game_master_ConnectInfo__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_game_master_ConnectInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.ConnectInfo, global::bnet.protocol.game_master.ConnectInfo.Builder>(internal__static_bnet_protocol_game_master_ConnectInfo__Descriptor,
                new string[] { "ToonId", "Host", "Port", "Token", "Attribute", });
        internal__static_bnet_protocol_game_master_GameStatsBucket__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_game_master_GameStatsBucket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameStatsBucket, global::bnet.protocol.game_master.GameStatsBucket.Builder>(internal__static_bnet_protocol_game_master_GameStatsBucket__Descriptor,
                new string[] { "BucketMin", "BucketMax", "WaitMilliseconds", "GamesPerHour", "ActiveGames", "ActivePlayers", "FormingGames", "WaitingPlayers", });
        internal__static_bnet_protocol_game_master_GameFactoryDescription__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_game_master_GameFactoryDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameFactoryDescription, global::bnet.protocol.game_master.GameFactoryDescription.Builder>(internal__static_bnet_protocol_game_master_GameFactoryDescription__Descriptor,
                new string[] { "Id", "Name", "Attribute", "StatsBucket", });
        internal__static_bnet_protocol_game_master_GameHandle__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_game_master_GameHandle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.game_master.GameHandle, global::bnet.protocol.game_master.GameHandle.Builder>(internal__static_bnet_protocol_game_master_GameHandle__Descriptor,
                new string[] { "FactoryId", "GameId", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
          global::bnet.protocol.Entity.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Player : pb::GeneratedMessage<Player, Player.Builder> {
    private Player() { }
    private static readonly Player defaultInstance = new Player().MakeReadOnly();
    private static readonly string[] _playerFieldNames = new string[] { "attribute", "bnet_account_id", "game_account_id", "toon_id", "type" };
    private static readonly uint[] _playerFieldTags = new uint[] { 42, 34, 26, 18, 8 };
    public static Player DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Player DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Player ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_Player__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Player, Player.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_Player__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Type {
        TOON = 0,
        COMPUTER = 1,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::bnet.protocol.game_master.Player.Types.Type type_ = global::bnet.protocol.game_master.Player.Types.Type.TOON;
    public bool HasType {
      get { return hasType; }
    }
    public global::bnet.protocol.game_master.Player.Types.Type Type {
      get { return type_; }
    }
    
    public const int ToonIdFieldNumber = 2;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int GameAccountIdFieldNumber = 3;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int BnetAccountIdFieldNumber = 4;
    private bool hasBnetAccountId;
    private global::bnet.protocol.EntityId bnetAccountId_;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public global::bnet.protocol.EntityId BnetAccountId {
      get { return bnetAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int AttributeFieldNumber = 5;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasToonId) {
          if (!ToonId.IsInitialized) return false;
        }
        if (HasGameAccountId) {
          if (!GameAccountId.IsInitialized) return false;
        }
        if (HasBnetAccountId) {
          if (!BnetAccountId.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[4], (int) Type, Type);
      }
      if (hasToonId) {
        output.WriteMessage(2, field_names[3], ToonId);
      }
      if (hasGameAccountId) {
        output.WriteMessage(3, field_names[2], GameAccountId);
      }
      if (hasBnetAccountId) {
        output.WriteMessage(4, field_names[1], BnetAccountId);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(5, field_names[0], attribute_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ToonId);
        }
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, GameAccountId);
        }
        if (hasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, BnetAccountId);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Player ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Player ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Player ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Player ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Player ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Player ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Player ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Player ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Player ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Player ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Player MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Player prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Player, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Player cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Player result;
      
      private Player PrepareBuilder() {
        if (resultIsReadOnly) {
          Player original = result;
          result = new Player();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Player MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_master.Player.Descriptor; }
      }
      
      public override Player DefaultInstanceForType {
        get { return global::bnet.protocol.game_master.Player.DefaultInstance; }
      }
      
      public override Player BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Player) {
          return MergeFrom((Player) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Player other) {
        if (other == global::bnet.protocol.game_master.Player.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasBnetAccountId) {
          MergeBnetAccountId(other.BnetAccountId);
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasBnetAccountId) {
                subBuilder.MergeFrom(BnetAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BnetAccountId = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::bnet.protocol.game_master.Player.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::bnet.protocol.game_master.Player.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::bnet.protocol.game_master.Player.Types.Type.TOON;
        return this;
      }
      
      public bool HasToonId {
       get { return result.hasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        PrepareBuilder();
        result.hasToonId = false;
        result.toonId_ = null;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
      
      public bool HasBnetAccountId {
       get { return result.hasBnetAccountId; }
      }
      public global::bnet.protocol.EntityId BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder SetBnetAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBnetAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBnetAccountId &&
            result.bnetAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.bnetAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.bnetAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder ClearBnetAccountId() {
        PrepareBuilder();
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
    }
    static Player() {
      object.ReferenceEquals(global::bnet.protocol.game_master.GameMasterTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConnectInfo : pb::GeneratedMessage<ConnectInfo, ConnectInfo.Builder> {
    private ConnectInfo() { }
    private static readonly ConnectInfo defaultInstance = new ConnectInfo().MakeReadOnly();
    private static readonly string[] _connectInfoFieldNames = new string[] { "attribute", "host", "port", "token", "toon_id" };
    private static readonly uint[] _connectInfoFieldTags = new uint[] { 42, 18, 24, 34, 10 };
    public static ConnectInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConnectInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConnectInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_ConnectInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConnectInfo, ConnectInfo.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_ConnectInfo__FieldAccessorTable; }
    }
    
    public const int ToonIdFieldNumber = 1;
    private bool hasToonId;
    private global::bnet.protocol.EntityId toonId_;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public global::bnet.protocol.EntityId ToonId {
      get { return toonId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int HostFieldNumber = 2;
    private bool hasHost;
    private string host_ = "";
    public bool HasHost {
      get { return hasHost; }
    }
    public string Host {
      get { return host_; }
    }
    
    public const int PortFieldNumber = 3;
    private bool hasPort;
    private int port_;
    public bool HasPort {
      get { return hasPort; }
    }
    public int Port {
      get { return port_; }
    }
    
    public const int TokenFieldNumber = 4;
    private bool hasToken;
    private pb::ByteString token_ = pb::ByteString.Empty;
    public bool HasToken {
      get { return hasToken; }
    }
    public pb::ByteString Token {
      get { return token_; }
    }
    
    public const int AttributeFieldNumber = 5;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToonId) return false;
        if (!hasHost) return false;
        if (!hasPort) return false;
        if (!ToonId.IsInitialized) return false;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _connectInfoFieldNames;
      if (hasToonId) {
        output.WriteMessage(1, field_names[4], ToonId);
      }
      if (hasHost) {
        output.WriteString(2, field_names[1], Host);
      }
      if (hasPort) {
        output.WriteInt32(3, field_names[2], Port);
      }
      if (hasToken) {
        output.WriteBytes(4, field_names[3], Token);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(5, field_names[0], attribute_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasToonId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ToonId);
        }
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Host);
        }
        if (hasPort) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Port);
        }
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeBytesSize(4, Token);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConnectInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConnectInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConnectInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConnectInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConnectInfo MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConnectInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConnectInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConnectInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConnectInfo result;
      
      private ConnectInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ConnectInfo original = result;
          result = new ConnectInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConnectInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_master.ConnectInfo.Descriptor; }
      }
      
      public override ConnectInfo DefaultInstanceForType {
        get { return global::bnet.protocol.game_master.ConnectInfo.DefaultInstance; }
      }
      
      public override ConnectInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConnectInfo) {
          return MergeFrom((ConnectInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConnectInfo other) {
        if (other == global::bnet.protocol.game_master.ConnectInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToonId) {
          MergeToonId(other.ToonId);
        }
        if (other.HasHost) {
          Host = other.Host;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_connectInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _connectInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasToonId) {
                subBuilder.MergeFrom(ToonId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToonId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasHost = input.ReadString(ref result.host_);
              break;
            }
            case 24: {
              result.hasPort = input.ReadInt32(ref result.port_);
              break;
            }
            case 34: {
              result.hasToken = input.ReadBytes(ref result.token_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToonId {
       get { return result.hasToonId; }
      }
      public global::bnet.protocol.EntityId ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder SetToonId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasToonId = true;
        result.toonId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToonId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasToonId &&
            result.toonId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.toonId_ = global::bnet.protocol.EntityId.CreateBuilder(result.toonId_).MergeFrom(value).BuildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder ClearToonId() {
        PrepareBuilder();
        result.hasToonId = false;
        result.toonId_ = null;
        return this;
      }
      
      public bool HasHost {
        get { return result.hasHost; }
      }
      public string Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      public int Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      public Builder SetPort(int value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public pb::ByteString Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
    }
    static ConnectInfo() {
      object.ReferenceEquals(global::bnet.protocol.game_master.GameMasterTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameStatsBucket : pb::GeneratedMessage<GameStatsBucket, GameStatsBucket.Builder> {
    private GameStatsBucket() { }
    private static readonly GameStatsBucket defaultInstance = new GameStatsBucket().MakeReadOnly();
    private static readonly string[] _gameStatsBucketFieldNames = new string[] { "active_games", "active_players", "bucket_max", "bucket_min", "forming_games", "games_per_hour", "wait_milliseconds", "waiting_players" };
    private static readonly uint[] _gameStatsBucketFieldTags = new uint[] { 40, 48, 21, 13, 56, 32, 24, 64 };
    public static GameStatsBucket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameStatsBucket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameStatsBucket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameStatsBucket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameStatsBucket, GameStatsBucket.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameStatsBucket__FieldAccessorTable; }
    }
    
    public const int BucketMinFieldNumber = 1;
    private bool hasBucketMin;
    private float bucketMin_;
    public bool HasBucketMin {
      get { return hasBucketMin; }
    }
    public float BucketMin {
      get { return bucketMin_; }
    }
    
    public const int BucketMaxFieldNumber = 2;
    private bool hasBucketMax;
    private float bucketMax_ = 4.294967E+09F;
    public bool HasBucketMax {
      get { return hasBucketMax; }
    }
    public float BucketMax {
      get { return bucketMax_; }
    }
    
    public const int WaitMillisecondsFieldNumber = 3;
    private bool hasWaitMilliseconds;
    private uint waitMilliseconds_;
    public bool HasWaitMilliseconds {
      get { return hasWaitMilliseconds; }
    }
    public uint WaitMilliseconds {
      get { return waitMilliseconds_; }
    }
    
    public const int GamesPerHourFieldNumber = 4;
    private bool hasGamesPerHour;
    private uint gamesPerHour_;
    public bool HasGamesPerHour {
      get { return hasGamesPerHour; }
    }
    public uint GamesPerHour {
      get { return gamesPerHour_; }
    }
    
    public const int ActiveGamesFieldNumber = 5;
    private bool hasActiveGames;
    private uint activeGames_;
    public bool HasActiveGames {
      get { return hasActiveGames; }
    }
    public uint ActiveGames {
      get { return activeGames_; }
    }
    
    public const int ActivePlayersFieldNumber = 6;
    private bool hasActivePlayers;
    private uint activePlayers_;
    public bool HasActivePlayers {
      get { return hasActivePlayers; }
    }
    public uint ActivePlayers {
      get { return activePlayers_; }
    }
    
    public const int FormingGamesFieldNumber = 7;
    private bool hasFormingGames;
    private uint formingGames_;
    public bool HasFormingGames {
      get { return hasFormingGames; }
    }
    public uint FormingGames {
      get { return formingGames_; }
    }
    
    public const int WaitingPlayersFieldNumber = 8;
    private bool hasWaitingPlayers;
    private uint waitingPlayers_;
    public bool HasWaitingPlayers {
      get { return hasWaitingPlayers; }
    }
    public uint WaitingPlayers {
      get { return waitingPlayers_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameStatsBucketFieldNames;
      if (hasBucketMin) {
        output.WriteFloat(1, field_names[3], BucketMin);
      }
      if (hasBucketMax) {
        output.WriteFloat(2, field_names[2], BucketMax);
      }
      if (hasWaitMilliseconds) {
        output.WriteUInt32(3, field_names[6], WaitMilliseconds);
      }
      if (hasGamesPerHour) {
        output.WriteUInt32(4, field_names[5], GamesPerHour);
      }
      if (hasActiveGames) {
        output.WriteUInt32(5, field_names[0], ActiveGames);
      }
      if (hasActivePlayers) {
        output.WriteUInt32(6, field_names[1], ActivePlayers);
      }
      if (hasFormingGames) {
        output.WriteUInt32(7, field_names[4], FormingGames);
      }
      if (hasWaitingPlayers) {
        output.WriteUInt32(8, field_names[7], WaitingPlayers);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBucketMin) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, BucketMin);
        }
        if (hasBucketMax) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, BucketMax);
        }
        if (hasWaitMilliseconds) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, WaitMilliseconds);
        }
        if (hasGamesPerHour) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, GamesPerHour);
        }
        if (hasActiveGames) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, ActiveGames);
        }
        if (hasActivePlayers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, ActivePlayers);
        }
        if (hasFormingGames) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, FormingGames);
        }
        if (hasWaitingPlayers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, WaitingPlayers);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameStatsBucket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameStatsBucket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameStatsBucket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameStatsBucket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameStatsBucket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameStatsBucket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameStatsBucket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameStatsBucket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameStatsBucket result;
      
      private GameStatsBucket PrepareBuilder() {
        if (resultIsReadOnly) {
          GameStatsBucket original = result;
          result = new GameStatsBucket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameStatsBucket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_master.GameStatsBucket.Descriptor; }
      }
      
      public override GameStatsBucket DefaultInstanceForType {
        get { return global::bnet.protocol.game_master.GameStatsBucket.DefaultInstance; }
      }
      
      public override GameStatsBucket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameStatsBucket) {
          return MergeFrom((GameStatsBucket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameStatsBucket other) {
        if (other == global::bnet.protocol.game_master.GameStatsBucket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBucketMin) {
          BucketMin = other.BucketMin;
        }
        if (other.HasBucketMax) {
          BucketMax = other.BucketMax;
        }
        if (other.HasWaitMilliseconds) {
          WaitMilliseconds = other.WaitMilliseconds;
        }
        if (other.HasGamesPerHour) {
          GamesPerHour = other.GamesPerHour;
        }
        if (other.HasActiveGames) {
          ActiveGames = other.ActiveGames;
        }
        if (other.HasActivePlayers) {
          ActivePlayers = other.ActivePlayers;
        }
        if (other.HasFormingGames) {
          FormingGames = other.FormingGames;
        }
        if (other.HasWaitingPlayers) {
          WaitingPlayers = other.WaitingPlayers;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameStatsBucketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameStatsBucketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasBucketMin = input.ReadFloat(ref result.bucketMin_);
              break;
            }
            case 21: {
              result.hasBucketMax = input.ReadFloat(ref result.bucketMax_);
              break;
            }
            case 24: {
              result.hasWaitMilliseconds = input.ReadUInt32(ref result.waitMilliseconds_);
              break;
            }
            case 32: {
              result.hasGamesPerHour = input.ReadUInt32(ref result.gamesPerHour_);
              break;
            }
            case 40: {
              result.hasActiveGames = input.ReadUInt32(ref result.activeGames_);
              break;
            }
            case 48: {
              result.hasActivePlayers = input.ReadUInt32(ref result.activePlayers_);
              break;
            }
            case 56: {
              result.hasFormingGames = input.ReadUInt32(ref result.formingGames_);
              break;
            }
            case 64: {
              result.hasWaitingPlayers = input.ReadUInt32(ref result.waitingPlayers_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBucketMin {
        get { return result.hasBucketMin; }
      }
      public float BucketMin {
        get { return result.BucketMin; }
        set { SetBucketMin(value); }
      }
      public Builder SetBucketMin(float value) {
        PrepareBuilder();
        result.hasBucketMin = true;
        result.bucketMin_ = value;
        return this;
      }
      public Builder ClearBucketMin() {
        PrepareBuilder();
        result.hasBucketMin = false;
        result.bucketMin_ = 0F;
        return this;
      }
      
      public bool HasBucketMax {
        get { return result.hasBucketMax; }
      }
      public float BucketMax {
        get { return result.BucketMax; }
        set { SetBucketMax(value); }
      }
      public Builder SetBucketMax(float value) {
        PrepareBuilder();
        result.hasBucketMax = true;
        result.bucketMax_ = value;
        return this;
      }
      public Builder ClearBucketMax() {
        PrepareBuilder();
        result.hasBucketMax = false;
        result.bucketMax_ = 4.294967E+09F;
        return this;
      }
      
      public bool HasWaitMilliseconds {
        get { return result.hasWaitMilliseconds; }
      }
      public uint WaitMilliseconds {
        get { return result.WaitMilliseconds; }
        set { SetWaitMilliseconds(value); }
      }
      public Builder SetWaitMilliseconds(uint value) {
        PrepareBuilder();
        result.hasWaitMilliseconds = true;
        result.waitMilliseconds_ = value;
        return this;
      }
      public Builder ClearWaitMilliseconds() {
        PrepareBuilder();
        result.hasWaitMilliseconds = false;
        result.waitMilliseconds_ = 0;
        return this;
      }
      
      public bool HasGamesPerHour {
        get { return result.hasGamesPerHour; }
      }
      public uint GamesPerHour {
        get { return result.GamesPerHour; }
        set { SetGamesPerHour(value); }
      }
      public Builder SetGamesPerHour(uint value) {
        PrepareBuilder();
        result.hasGamesPerHour = true;
        result.gamesPerHour_ = value;
        return this;
      }
      public Builder ClearGamesPerHour() {
        PrepareBuilder();
        result.hasGamesPerHour = false;
        result.gamesPerHour_ = 0;
        return this;
      }
      
      public bool HasActiveGames {
        get { return result.hasActiveGames; }
      }
      public uint ActiveGames {
        get { return result.ActiveGames; }
        set { SetActiveGames(value); }
      }
      public Builder SetActiveGames(uint value) {
        PrepareBuilder();
        result.hasActiveGames = true;
        result.activeGames_ = value;
        return this;
      }
      public Builder ClearActiveGames() {
        PrepareBuilder();
        result.hasActiveGames = false;
        result.activeGames_ = 0;
        return this;
      }
      
      public bool HasActivePlayers {
        get { return result.hasActivePlayers; }
      }
      public uint ActivePlayers {
        get { return result.ActivePlayers; }
        set { SetActivePlayers(value); }
      }
      public Builder SetActivePlayers(uint value) {
        PrepareBuilder();
        result.hasActivePlayers = true;
        result.activePlayers_ = value;
        return this;
      }
      public Builder ClearActivePlayers() {
        PrepareBuilder();
        result.hasActivePlayers = false;
        result.activePlayers_ = 0;
        return this;
      }
      
      public bool HasFormingGames {
        get { return result.hasFormingGames; }
      }
      public uint FormingGames {
        get { return result.FormingGames; }
        set { SetFormingGames(value); }
      }
      public Builder SetFormingGames(uint value) {
        PrepareBuilder();
        result.hasFormingGames = true;
        result.formingGames_ = value;
        return this;
      }
      public Builder ClearFormingGames() {
        PrepareBuilder();
        result.hasFormingGames = false;
        result.formingGames_ = 0;
        return this;
      }
      
      public bool HasWaitingPlayers {
        get { return result.hasWaitingPlayers; }
      }
      public uint WaitingPlayers {
        get { return result.WaitingPlayers; }
        set { SetWaitingPlayers(value); }
      }
      public Builder SetWaitingPlayers(uint value) {
        PrepareBuilder();
        result.hasWaitingPlayers = true;
        result.waitingPlayers_ = value;
        return this;
      }
      public Builder ClearWaitingPlayers() {
        PrepareBuilder();
        result.hasWaitingPlayers = false;
        result.waitingPlayers_ = 0;
        return this;
      }
    }
    static GameStatsBucket() {
      object.ReferenceEquals(global::bnet.protocol.game_master.GameMasterTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameFactoryDescription : pb::GeneratedMessage<GameFactoryDescription, GameFactoryDescription.Builder> {
    private GameFactoryDescription() { }
    private static readonly GameFactoryDescription defaultInstance = new GameFactoryDescription().MakeReadOnly();
    private static readonly string[] _gameFactoryDescriptionFieldNames = new string[] { "attribute", "id", "name", "stats_bucket" };
    private static readonly uint[] _gameFactoryDescriptionFieldTags = new uint[] { 26, 9, 18, 34 };
    public static GameFactoryDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameFactoryDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameFactoryDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameFactoryDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameFactoryDescription, GameFactoryDescription.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameFactoryDescription__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int AttributeFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.attribute.Attribute> attribute_ = new pbc::PopsicleList<global::bnet.protocol.attribute.Attribute>();
    public scg::IList<global::bnet.protocol.attribute.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int StatsBucketFieldNumber = 4;
    private pbc::PopsicleList<global::bnet.protocol.game_master.GameStatsBucket> statsBucket_ = new pbc::PopsicleList<global::bnet.protocol.game_master.GameStatsBucket>();
    public scg::IList<global::bnet.protocol.game_master.GameStatsBucket> StatsBucketList {
      get { return statsBucket_; }
    }
    public int StatsBucketCount {
      get { return statsBucket_.Count; }
    }
    public global::bnet.protocol.game_master.GameStatsBucket GetStatsBucket(int index) {
      return statsBucket_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameFactoryDescriptionFieldNames;
      if (hasId) {
        output.WriteFixed64(1, field_names[1], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attribute_);
      }
      if (statsBucket_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], statsBucket_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        foreach (global::bnet.protocol.attribute.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::bnet.protocol.game_master.GameStatsBucket element in StatsBucketList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameFactoryDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameFactoryDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameFactoryDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameFactoryDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameFactoryDescription MakeReadOnly() {
      attribute_.MakeReadOnly();
      statsBucket_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameFactoryDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameFactoryDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameFactoryDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameFactoryDescription result;
      
      private GameFactoryDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          GameFactoryDescription original = result;
          result = new GameFactoryDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameFactoryDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_master.GameFactoryDescription.Descriptor; }
      }
      
      public override GameFactoryDescription DefaultInstanceForType {
        get { return global::bnet.protocol.game_master.GameFactoryDescription.DefaultInstance; }
      }
      
      public override GameFactoryDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameFactoryDescription) {
          return MergeFrom((GameFactoryDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameFactoryDescription other) {
        if (other == global::bnet.protocol.game_master.GameFactoryDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.statsBucket_.Count != 0) {
          result.statsBucket_.Add(other.statsBucket_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameFactoryDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameFactoryDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasId = input.ReadFixed64(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bnet.protocol.attribute.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.statsBucket_, global::bnet.protocol.game_master.GameStatsBucket.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.attribute.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bnet.protocol.attribute.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bnet.protocol.attribute.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bnet.protocol.attribute.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.game_master.GameStatsBucket> StatsBucketList {
        get { return PrepareBuilder().statsBucket_; }
      }
      public int StatsBucketCount {
        get { return result.StatsBucketCount; }
      }
      public global::bnet.protocol.game_master.GameStatsBucket GetStatsBucket(int index) {
        return result.GetStatsBucket(index);
      }
      public Builder SetStatsBucket(int index, global::bnet.protocol.game_master.GameStatsBucket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.statsBucket_[index] = value;
        return this;
      }
      public Builder SetStatsBucket(int index, global::bnet.protocol.game_master.GameStatsBucket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.statsBucket_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStatsBucket(global::bnet.protocol.game_master.GameStatsBucket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.statsBucket_.Add(value);
        return this;
      }
      public Builder AddStatsBucket(global::bnet.protocol.game_master.GameStatsBucket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.statsBucket_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStatsBucket(scg::IEnumerable<global::bnet.protocol.game_master.GameStatsBucket> values) {
        PrepareBuilder();
        result.statsBucket_.Add(values);
        return this;
      }
      public Builder ClearStatsBucket() {
        PrepareBuilder();
        result.statsBucket_.Clear();
        return this;
      }
    }
    static GameFactoryDescription() {
      object.ReferenceEquals(global::bnet.protocol.game_master.GameMasterTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameHandle : pb::GeneratedMessage<GameHandle, GameHandle.Builder> {
    private GameHandle() { }
    private static readonly GameHandle defaultInstance = new GameHandle().MakeReadOnly();
    private static readonly string[] _gameHandleFieldNames = new string[] { "factory_id", "game_id" };
    private static readonly uint[] _gameHandleFieldTags = new uint[] { 9, 18 };
    public static GameHandle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameHandle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameHandle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameHandle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameHandle, GameHandle.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.game_master.GameMasterTypes.internal__static_bnet_protocol_game_master_GameHandle__FieldAccessorTable; }
    }
    
    public const int FactoryIdFieldNumber = 1;
    private bool hasFactoryId;
    private ulong factoryId_;
    public bool HasFactoryId {
      get { return hasFactoryId; }
    }
    public ulong FactoryId {
      get { return factoryId_; }
    }
    
    public const int GameIdFieldNumber = 2;
    private bool hasGameId;
    private global::bnet.protocol.EntityId gameId_;
    public bool HasGameId {
      get { return hasGameId; }
    }
    public global::bnet.protocol.EntityId GameId {
      get { return gameId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFactoryId) return false;
        if (!hasGameId) return false;
        if (!GameId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameHandleFieldNames;
      if (hasFactoryId) {
        output.WriteFixed64(1, field_names[0], FactoryId);
      }
      if (hasGameId) {
        output.WriteMessage(2, field_names[1], GameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFactoryId) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, FactoryId);
        }
        if (hasGameId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GameId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameHandle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameHandle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameHandle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameHandle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameHandle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameHandle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameHandle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameHandle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameHandle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameHandle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameHandle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameHandle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameHandle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameHandle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameHandle result;
      
      private GameHandle PrepareBuilder() {
        if (resultIsReadOnly) {
          GameHandle original = result;
          result = new GameHandle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameHandle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.game_master.GameHandle.Descriptor; }
      }
      
      public override GameHandle DefaultInstanceForType {
        get { return global::bnet.protocol.game_master.GameHandle.DefaultInstance; }
      }
      
      public override GameHandle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameHandle) {
          return MergeFrom((GameHandle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameHandle other) {
        if (other == global::bnet.protocol.game_master.GameHandle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFactoryId) {
          FactoryId = other.FactoryId;
        }
        if (other.HasGameId) {
          MergeGameId(other.GameId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameHandleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameHandleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasFactoryId = input.ReadFixed64(ref result.factoryId_);
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasGameId) {
                subBuilder.MergeFrom(GameId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFactoryId {
        get { return result.hasFactoryId; }
      }
      public ulong FactoryId {
        get { return result.FactoryId; }
        set { SetFactoryId(value); }
      }
      public Builder SetFactoryId(ulong value) {
        PrepareBuilder();
        result.hasFactoryId = true;
        result.factoryId_ = value;
        return this;
      }
      public Builder ClearFactoryId() {
        PrepareBuilder();
        result.hasFactoryId = false;
        result.factoryId_ = 0;
        return this;
      }
      
      public bool HasGameId {
       get { return result.hasGameId; }
      }
      public global::bnet.protocol.EntityId GameId {
        get { return result.GameId; }
        set { SetGameId(value); }
      }
      public Builder SetGameId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameId = true;
        result.gameId_ = value;
        return this;
      }
      public Builder SetGameId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameId = true;
        result.gameId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameId &&
            result.gameId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameId_ = value;
        }
        result.hasGameId = true;
        return this;
      }
      public Builder ClearGameId() {
        PrepareBuilder();
        result.hasGameId = false;
        result.gameId_ = null;
        return this;
      }
    }
    static GameHandle() {
      object.ReferenceEquals(global::bnet.protocol.game_master.GameMasterTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
