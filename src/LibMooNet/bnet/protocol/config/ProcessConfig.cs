// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.config {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class ProcessConfig {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_Var__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.Var, global::bnet.protocol.config.Var.Builder> internal__static_bnet_protocol_config_Var__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_Resource__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.Resource, global::bnet.protocol.config.Resource.Builder> internal__static_bnet_protocol_config_Resource__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_ProgramResources__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ProgramResources, global::bnet.protocol.config.ProgramResources.Builder> internal__static_bnet_protocol_config_ProgramResources__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_ServerAddress__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ServerAddress, global::bnet.protocol.config.ServerAddress.Builder> internal__static_bnet_protocol_config_ServerAddress__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_ServerSet__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ServerSet, global::bnet.protocol.config.ServerSet.Builder> internal__static_bnet_protocol_config_ServerSet__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_SupplementalService__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.SupplementalService, global::bnet.protocol.config.SupplementalService.Builder> internal__static_bnet_protocol_config_SupplementalService__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_ListenPoint__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ListenPoint, global::bnet.protocol.config.ListenPoint.Builder> internal__static_bnet_protocol_config_ListenPoint__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_ServiceShard__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ServiceShard, global::bnet.protocol.config.ServiceShard.Builder> internal__static_bnet_protocol_config_ServiceShard__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_ServiceConfig__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ServiceConfig, global::bnet.protocol.config.ServiceConfig.Builder> internal__static_bnet_protocol_config_ServiceConfig__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_RPCServerConfig__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.RPCServerConfig, global::bnet.protocol.config.RPCServerConfig.Builder> internal__static_bnet_protocol_config_RPCServerConfig__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_ProcessConfig__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ProcessConfig, global::bnet.protocol.config.ProcessConfig.Builder> internal__static_bnet_protocol_config_ProcessConfig__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ProcessConfig() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "Ch9saWIvY29uZmlnL3Byb2Nlc3NfY29uZmlnLnByb3RvEhRibmV0LnByb3Rv" + 
            "Y29sLmNvbmZpZxoRbGliL3JwYy9ycGMucHJvdG8iIgoDVmFyEgwKBG5hbWUY" + 
            "ASACKAkSDQoFdmFsdWUYAiACKAkiJQoIUmVzb3VyY2USDAoEbmFtZRgBIAIo" + 
            "CRILCgN1cmwYAiACKAkiQwoQUHJvZ3JhbVJlc291cmNlcxIvCgdwcm9ncmFt" + 
            "GAEgAygLMh4uYm5ldC5wcm90b2NvbC5jb25maWcuUmVzb3VyY2UiYwoNU2Vy" + 
            "dmVyQWRkcmVzcxInCgdhZGRyZXNzGAEgAigLMhYuYm5ldC5wcm90b2NvbC5B" + 
            "ZGRyZXNzEhQKDHByb2Nlc3NfbmFtZRgCIAIoCRITCgtzZXJ2ZXJfbmFtZRgD" + 
            "IAEoCSJ8CglTZXJ2ZXJTZXQSOwoOc2VydmVyX2FkZHJlc3MYASADKAsyIy5i" + 
            "bmV0LnByb3RvY29sLmNvbmZpZy5TZXJ2ZXJBZGRyZXNzEhgKEGV4cG9ydGVk" + 
            "X3NlcnZpY2UYAiADKAkSGAoQaW1wb3J0ZWRfc2VydmljZRgDIAMoCSIxChNT" + 
            "dXBwbGVtZW50YWxTZXJ2aWNlEgwKBG5hbWUYASACKAkSDAoEcG9ydBgCIAIo" + 
            "DSJmCgtMaXN0ZW5Qb2ludBIMCgRwb3J0GAEgAigNEhgKB2FkZHJlc3MYAiAB" + 
            "KAk6BzAuMC4wLjASLwoGYWNjZXB0GAMgAygLMh8uYm5ldC5wcm90b2NvbC5j" + 
            "b25maWcuU2VydmVyU2V0IiQKDFNlcnZpY2VTaGFyZBIUCgxwcm9jZXNzX25h" + 
            "bWUYASACKAkiXQoNU2VydmljZUNvbmZpZxIMCgRuYW1lGAEgAigJEgsKA3Vy" + 
            "bBgCIAIoCRIxCgVzaGFyZBgDIAMoCzIiLmJuZXQucHJvdG9jb2wuY29uZmln" + 
            "LlNlcnZpY2VTaGFyZCKEAQoPUlBDU2VydmVyQ29uZmlnEgwKBG5hbWUYASAC" + 
            "KAkSMQoGbGlzdGVuGAIgASgLMiEuYm5ldC5wcm90b2NvbC5jb25maWcuTGlz" + 
            "dGVuUG9pbnQSMAoHY29ubmVjdBgDIAMoCzIfLmJuZXQucHJvdG9jb2wuY29u" + 
            "ZmlnLlNlcnZlclNldCKWAwoNUHJvY2Vzc0NvbmZpZxIUCgxwcm9jZXNzX25h" + 
            "bWUYASACKAkSLQohY3B1X2FmZmluaXR5X21haW5fZXZlbnRfcHJvY2Vzc29y" + 
            "GAcgAygNQgIQARIwCiRjcHVfYWZmaW5pdHlfbmV0d29ya19ldmVudF9wcm9j" + 
            "ZXNzb3IYCCADKA1CAhABEjUKBnNlcnZlchgCIAMoCzIlLmJuZXQucHJvdG9j" + 
            "b2wuY29uZmlnLlJQQ1NlcnZlckNvbmZpZxIwCghyZXNvdXJjZRgDIAMoCzIe" + 
            "LmJuZXQucHJvdG9jb2wuY29uZmlnLlJlc291cmNlEjQKB3NlcnZpY2UYBCAD" + 
            "KAsyIy5ibmV0LnByb3RvY29sLmNvbmZpZy5TZXJ2aWNlQ29uZmlnEiYKA3Zh" + 
            "chgFIAMoCzIZLmJuZXQucHJvdG9jb2wuY29uZmlnLlZhchJHChRzdXBwbGVt" + 
            "ZW50YWxfc2VydmljZRgGIAMoCzIpLmJuZXQucHJvdG9jb2wuY29uZmlnLlN1" + 
            "cHBsZW1lbnRhbFNlcnZpY2U=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_config_Var__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_config_Var__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.Var, global::bnet.protocol.config.Var.Builder>(internal__static_bnet_protocol_config_Var__Descriptor,
                  new string[] { "Name", "Value", });
          internal__static_bnet_protocol_config_Resource__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bnet_protocol_config_Resource__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.Resource, global::bnet.protocol.config.Resource.Builder>(internal__static_bnet_protocol_config_Resource__Descriptor,
                  new string[] { "Name", "Url", });
          internal__static_bnet_protocol_config_ProgramResources__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bnet_protocol_config_ProgramResources__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ProgramResources, global::bnet.protocol.config.ProgramResources.Builder>(internal__static_bnet_protocol_config_ProgramResources__Descriptor,
                  new string[] { "Program", });
          internal__static_bnet_protocol_config_ServerAddress__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bnet_protocol_config_ServerAddress__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ServerAddress, global::bnet.protocol.config.ServerAddress.Builder>(internal__static_bnet_protocol_config_ServerAddress__Descriptor,
                  new string[] { "Address", "ProcessName", "ServerName", });
          internal__static_bnet_protocol_config_ServerSet__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bnet_protocol_config_ServerSet__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ServerSet, global::bnet.protocol.config.ServerSet.Builder>(internal__static_bnet_protocol_config_ServerSet__Descriptor,
                  new string[] { "ServerAddress", "ExportedService", "ImportedService", });
          internal__static_bnet_protocol_config_SupplementalService__Descriptor = Descriptor.MessageTypes[5];
          internal__static_bnet_protocol_config_SupplementalService__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.SupplementalService, global::bnet.protocol.config.SupplementalService.Builder>(internal__static_bnet_protocol_config_SupplementalService__Descriptor,
                  new string[] { "Name", "Port", });
          internal__static_bnet_protocol_config_ListenPoint__Descriptor = Descriptor.MessageTypes[6];
          internal__static_bnet_protocol_config_ListenPoint__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ListenPoint, global::bnet.protocol.config.ListenPoint.Builder>(internal__static_bnet_protocol_config_ListenPoint__Descriptor,
                  new string[] { "Port", "Address", "Accept", });
          internal__static_bnet_protocol_config_ServiceShard__Descriptor = Descriptor.MessageTypes[7];
          internal__static_bnet_protocol_config_ServiceShard__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ServiceShard, global::bnet.protocol.config.ServiceShard.Builder>(internal__static_bnet_protocol_config_ServiceShard__Descriptor,
                  new string[] { "ProcessName", });
          internal__static_bnet_protocol_config_ServiceConfig__Descriptor = Descriptor.MessageTypes[8];
          internal__static_bnet_protocol_config_ServiceConfig__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ServiceConfig, global::bnet.protocol.config.ServiceConfig.Builder>(internal__static_bnet_protocol_config_ServiceConfig__Descriptor,
                  new string[] { "Name", "Url", "Shard", });
          internal__static_bnet_protocol_config_RPCServerConfig__Descriptor = Descriptor.MessageTypes[9];
          internal__static_bnet_protocol_config_RPCServerConfig__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.RPCServerConfig, global::bnet.protocol.config.RPCServerConfig.Builder>(internal__static_bnet_protocol_config_RPCServerConfig__Descriptor,
                  new string[] { "Name", "Listen", "Connect", });
          internal__static_bnet_protocol_config_ProcessConfig__Descriptor = Descriptor.MessageTypes[10];
          internal__static_bnet_protocol_config_ProcessConfig__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.ProcessConfig, global::bnet.protocol.config.ProcessConfig.Builder>(internal__static_bnet_protocol_config_ProcessConfig__Descriptor,
                  new string[] { "ProcessName", "CpuAffinityMainEventProcessor", "CpuAffinityNetworkEventProcessor", "Server", "Resource", "Service", "Var", "SupplementalService", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bnet.protocol.Rpc.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Var : pb::GeneratedMessage<Var, Var.Builder> {
    private Var() { }
    private static readonly Var defaultInstance = new Var().MakeReadOnly();
    private static readonly string[] _varFieldNames = new string[] { "name", "value" };
    private static readonly uint[] _varFieldTags = new uint[] { 10, 18 };
    public static Var DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Var DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Var ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_Var__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Var, Var.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_Var__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _varFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasValue) {
        output.WriteString(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Var ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Var ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Var ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Var ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Var ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Var ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Var ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Var ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Var ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Var ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Var MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Var prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Var, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Var cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Var result;
      
      private Var PrepareBuilder() {
        if (resultIsReadOnly) {
          Var original = result;
          result = new Var();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Var MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.Var.Descriptor; }
      }
      
      public override Var DefaultInstanceForType {
        get { return global::bnet.protocol.config.Var.DefaultInstance; }
      }
      
      public override Var BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Var) {
          return MergeFrom((Var) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Var other) {
        if (other == global::bnet.protocol.config.Var.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_varFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _varFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static Var() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Resource : pb::GeneratedMessage<Resource, Resource.Builder> {
    private Resource() { }
    private static readonly Resource defaultInstance = new Resource().MakeReadOnly();
    private static readonly string[] _resourceFieldNames = new string[] { "name", "url" };
    private static readonly uint[] _resourceFieldTags = new uint[] { 10, 18 };
    public static Resource DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Resource DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Resource ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_Resource__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Resource, Resource.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_Resource__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int UrlFieldNumber = 2;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasUrl) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _resourceFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasUrl) {
        output.WriteString(2, field_names[1], Url);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Url);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Resource ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Resource ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Resource ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Resource ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Resource ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Resource ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Resource ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Resource ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Resource ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Resource ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Resource MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Resource prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Resource, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Resource cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Resource result;
      
      private Resource PrepareBuilder() {
        if (resultIsReadOnly) {
          Resource original = result;
          result = new Resource();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Resource MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.Resource.Descriptor; }
      }
      
      public override Resource DefaultInstanceForType {
        get { return global::bnet.protocol.config.Resource.DefaultInstance; }
      }
      
      public override Resource BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Resource) {
          return MergeFrom((Resource) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Resource other) {
        if (other == global::bnet.protocol.config.Resource.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resourceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resourceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
    }
    static Resource() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ProgramResources : pb::GeneratedMessage<ProgramResources, ProgramResources.Builder> {
    private ProgramResources() { }
    private static readonly ProgramResources defaultInstance = new ProgramResources().MakeReadOnly();
    private static readonly string[] _programResourcesFieldNames = new string[] { "program" };
    private static readonly uint[] _programResourcesFieldTags = new uint[] { 10 };
    public static ProgramResources DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProgramResources DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProgramResources ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ProgramResources__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProgramResources, ProgramResources.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ProgramResources__FieldAccessorTable; }
    }
    
    public const int ProgramFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.config.Resource> program_ = new pbc::PopsicleList<global::bnet.protocol.config.Resource>();
    public scg::IList<global::bnet.protocol.config.Resource> ProgramList {
      get { return program_; }
    }
    public int ProgramCount {
      get { return program_.Count; }
    }
    public global::bnet.protocol.config.Resource GetProgram(int index) {
      return program_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.config.Resource element in ProgramList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _programResourcesFieldNames;
      if (program_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], program_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.config.Resource element in ProgramList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProgramResources ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProgramResources ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProgramResources ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProgramResources ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProgramResources ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProgramResources ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProgramResources ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProgramResources ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProgramResources ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProgramResources ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProgramResources MakeReadOnly() {
      program_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProgramResources prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ProgramResources, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProgramResources cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProgramResources result;
      
      private ProgramResources PrepareBuilder() {
        if (resultIsReadOnly) {
          ProgramResources original = result;
          result = new ProgramResources();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProgramResources MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.ProgramResources.Descriptor; }
      }
      
      public override ProgramResources DefaultInstanceForType {
        get { return global::bnet.protocol.config.ProgramResources.DefaultInstance; }
      }
      
      public override ProgramResources BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProgramResources) {
          return MergeFrom((ProgramResources) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProgramResources other) {
        if (other == global::bnet.protocol.config.ProgramResources.DefaultInstance) return this;
        PrepareBuilder();
        if (other.program_.Count != 0) {
          result.program_.Add(other.program_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_programResourcesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _programResourcesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.program_, global::bnet.protocol.config.Resource.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.config.Resource> ProgramList {
        get { return PrepareBuilder().program_; }
      }
      public int ProgramCount {
        get { return result.ProgramCount; }
      }
      public global::bnet.protocol.config.Resource GetProgram(int index) {
        return result.GetProgram(index);
      }
      public Builder SetProgram(int index, global::bnet.protocol.config.Resource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.program_[index] = value;
        return this;
      }
      public Builder SetProgram(int index, global::bnet.protocol.config.Resource.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.program_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddProgram(global::bnet.protocol.config.Resource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.program_.Add(value);
        return this;
      }
      public Builder AddProgram(global::bnet.protocol.config.Resource.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.program_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeProgram(scg::IEnumerable<global::bnet.protocol.config.Resource> values) {
        PrepareBuilder();
        result.program_.Add(values);
        return this;
      }
      public Builder ClearProgram() {
        PrepareBuilder();
        result.program_.Clear();
        return this;
      }
    }
    static ProgramResources() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerAddress : pb::GeneratedMessage<ServerAddress, ServerAddress.Builder> {
    private ServerAddress() { }
    private static readonly ServerAddress defaultInstance = new ServerAddress().MakeReadOnly();
    private static readonly string[] _serverAddressFieldNames = new string[] { "address", "process_name", "server_name" };
    private static readonly uint[] _serverAddressFieldTags = new uint[] { 10, 18, 26 };
    public static ServerAddress DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerAddress DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerAddress ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ServerAddress__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerAddress, ServerAddress.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ServerAddress__FieldAccessorTable; }
    }
    
    public const int AddressFieldNumber = 1;
    private bool hasAddress;
    private global::bnet.protocol.Address address_;
    public bool HasAddress {
      get { return hasAddress; }
    }
    public global::bnet.protocol.Address Address {
      get { return address_ ?? global::bnet.protocol.Address.DefaultInstance; }
    }
    
    public const int ProcessNameFieldNumber = 2;
    private bool hasProcessName;
    private string processName_ = "";
    public bool HasProcessName {
      get { return hasProcessName; }
    }
    public string ProcessName {
      get { return processName_; }
    }
    
    public const int ServerNameFieldNumber = 3;
    private bool hasServerName;
    private string serverName_ = "";
    public bool HasServerName {
      get { return hasServerName; }
    }
    public string ServerName {
      get { return serverName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddress) return false;
        if (!hasProcessName) return false;
        if (!Address.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverAddressFieldNames;
      if (hasAddress) {
        output.WriteMessage(1, field_names[0], Address);
      }
      if (hasProcessName) {
        output.WriteString(2, field_names[1], ProcessName);
      }
      if (hasServerName) {
        output.WriteString(3, field_names[2], ServerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddress) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Address);
        }
        if (hasProcessName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ProcessName);
        }
        if (hasServerName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ServerName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerAddress ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerAddress ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerAddress ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerAddress ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerAddress ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerAddress ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerAddress ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerAddress ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerAddress ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerAddress ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerAddress MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerAddress prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerAddress, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerAddress cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerAddress result;
      
      private ServerAddress PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerAddress original = result;
          result = new ServerAddress();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerAddress MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.ServerAddress.Descriptor; }
      }
      
      public override ServerAddress DefaultInstanceForType {
        get { return global::bnet.protocol.config.ServerAddress.DefaultInstance; }
      }
      
      public override ServerAddress BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerAddress) {
          return MergeFrom((ServerAddress) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerAddress other) {
        if (other == global::bnet.protocol.config.ServerAddress.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddress) {
          MergeAddress(other.Address);
        }
        if (other.HasProcessName) {
          ProcessName = other.ProcessName;
        }
        if (other.HasServerName) {
          ServerName = other.ServerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverAddressFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverAddressFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.Address.Builder subBuilder = global::bnet.protocol.Address.CreateBuilder();
              if (result.hasAddress) {
                subBuilder.MergeFrom(Address);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Address = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasProcessName = input.ReadString(ref result.processName_);
              break;
            }
            case 26: {
              result.hasServerName = input.ReadString(ref result.serverName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddress {
       get { return result.hasAddress; }
      }
      public global::bnet.protocol.Address Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      public Builder SetAddress(global::bnet.protocol.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder SetAddress(global::bnet.protocol.Address.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAddress(global::bnet.protocol.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAddress &&
            result.address_ != global::bnet.protocol.Address.DefaultInstance) {
            result.address_ = global::bnet.protocol.Address.CreateBuilder(result.address_).MergeFrom(value).BuildPartial();
        } else {
          result.address_ = value;
        }
        result.hasAddress = true;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = null;
        return this;
      }
      
      public bool HasProcessName {
        get { return result.hasProcessName; }
      }
      public string ProcessName {
        get { return result.ProcessName; }
        set { SetProcessName(value); }
      }
      public Builder SetProcessName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProcessName = true;
        result.processName_ = value;
        return this;
      }
      public Builder ClearProcessName() {
        PrepareBuilder();
        result.hasProcessName = false;
        result.processName_ = "";
        return this;
      }
      
      public bool HasServerName {
        get { return result.hasServerName; }
      }
      public string ServerName {
        get { return result.ServerName; }
        set { SetServerName(value); }
      }
      public Builder SetServerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerName = true;
        result.serverName_ = value;
        return this;
      }
      public Builder ClearServerName() {
        PrepareBuilder();
        result.hasServerName = false;
        result.serverName_ = "";
        return this;
      }
    }
    static ServerAddress() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerSet : pb::GeneratedMessage<ServerSet, ServerSet.Builder> {
    private ServerSet() { }
    private static readonly ServerSet defaultInstance = new ServerSet().MakeReadOnly();
    private static readonly string[] _serverSetFieldNames = new string[] { "exported_service", "imported_service", "server_address" };
    private static readonly uint[] _serverSetFieldTags = new uint[] { 18, 26, 10 };
    public static ServerSet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerSet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerSet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ServerSet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerSet, ServerSet.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ServerSet__FieldAccessorTable; }
    }
    
    public const int ServerAddressFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.config.ServerAddress> serverAddress_ = new pbc::PopsicleList<global::bnet.protocol.config.ServerAddress>();
    public scg::IList<global::bnet.protocol.config.ServerAddress> ServerAddressList {
      get { return serverAddress_; }
    }
    public int ServerAddressCount {
      get { return serverAddress_.Count; }
    }
    public global::bnet.protocol.config.ServerAddress GetServerAddress(int index) {
      return serverAddress_[index];
    }
    
    public const int ExportedServiceFieldNumber = 2;
    private pbc::PopsicleList<string> exportedService_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ExportedServiceList {
      get { return pbc::Lists.AsReadOnly(exportedService_); }
    }
    public int ExportedServiceCount {
      get { return exportedService_.Count; }
    }
    public string GetExportedService(int index) {
      return exportedService_[index];
    }
    
    public const int ImportedServiceFieldNumber = 3;
    private pbc::PopsicleList<string> importedService_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ImportedServiceList {
      get { return pbc::Lists.AsReadOnly(importedService_); }
    }
    public int ImportedServiceCount {
      get { return importedService_.Count; }
    }
    public string GetImportedService(int index) {
      return importedService_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.config.ServerAddress element in ServerAddressList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverSetFieldNames;
      if (serverAddress_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], serverAddress_);
      }
      if (exportedService_.Count > 0) {
        output.WriteStringArray(2, field_names[0], exportedService_);
      }
      if (importedService_.Count > 0) {
        output.WriteStringArray(3, field_names[1], importedService_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.config.ServerAddress element in ServerAddressList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        {
          int dataSize = 0;
          foreach (string element in ExportedServiceList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * exportedService_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in ImportedServiceList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * importedService_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerSet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerSet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerSet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerSet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerSet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerSet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerSet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerSet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerSet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerSet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerSet MakeReadOnly() {
      serverAddress_.MakeReadOnly();
      exportedService_.MakeReadOnly();
      importedService_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerSet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerSet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerSet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerSet result;
      
      private ServerSet PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerSet original = result;
          result = new ServerSet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerSet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.ServerSet.Descriptor; }
      }
      
      public override ServerSet DefaultInstanceForType {
        get { return global::bnet.protocol.config.ServerSet.DefaultInstance; }
      }
      
      public override ServerSet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerSet) {
          return MergeFrom((ServerSet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerSet other) {
        if (other == global::bnet.protocol.config.ServerSet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.serverAddress_.Count != 0) {
          result.serverAddress_.Add(other.serverAddress_);
        }
        if (other.exportedService_.Count != 0) {
          result.exportedService_.Add(other.exportedService_);
        }
        if (other.importedService_.Count != 0) {
          result.importedService_.Add(other.importedService_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverSetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverSetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.serverAddress_, global::bnet.protocol.config.ServerAddress.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.exportedService_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.importedService_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.config.ServerAddress> ServerAddressList {
        get { return PrepareBuilder().serverAddress_; }
      }
      public int ServerAddressCount {
        get { return result.ServerAddressCount; }
      }
      public global::bnet.protocol.config.ServerAddress GetServerAddress(int index) {
        return result.GetServerAddress(index);
      }
      public Builder SetServerAddress(int index, global::bnet.protocol.config.ServerAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.serverAddress_[index] = value;
        return this;
      }
      public Builder SetServerAddress(int index, global::bnet.protocol.config.ServerAddress.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.serverAddress_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddServerAddress(global::bnet.protocol.config.ServerAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.serverAddress_.Add(value);
        return this;
      }
      public Builder AddServerAddress(global::bnet.protocol.config.ServerAddress.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.serverAddress_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeServerAddress(scg::IEnumerable<global::bnet.protocol.config.ServerAddress> values) {
        PrepareBuilder();
        result.serverAddress_.Add(values);
        return this;
      }
      public Builder ClearServerAddress() {
        PrepareBuilder();
        result.serverAddress_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> ExportedServiceList {
        get { return PrepareBuilder().exportedService_; }
      }
      public int ExportedServiceCount {
        get { return result.ExportedServiceCount; }
      }
      public string GetExportedService(int index) {
        return result.GetExportedService(index);
      }
      public Builder SetExportedService(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exportedService_[index] = value;
        return this;
      }
      public Builder AddExportedService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exportedService_.Add(value);
        return this;
      }
      public Builder AddRangeExportedService(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.exportedService_.Add(values);
        return this;
      }
      public Builder ClearExportedService() {
        PrepareBuilder();
        result.exportedService_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> ImportedServiceList {
        get { return PrepareBuilder().importedService_; }
      }
      public int ImportedServiceCount {
        get { return result.ImportedServiceCount; }
      }
      public string GetImportedService(int index) {
        return result.GetImportedService(index);
      }
      public Builder SetImportedService(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.importedService_[index] = value;
        return this;
      }
      public Builder AddImportedService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.importedService_.Add(value);
        return this;
      }
      public Builder AddRangeImportedService(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.importedService_.Add(values);
        return this;
      }
      public Builder ClearImportedService() {
        PrepareBuilder();
        result.importedService_.Clear();
        return this;
      }
    }
    static ServerSet() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SupplementalService : pb::GeneratedMessage<SupplementalService, SupplementalService.Builder> {
    private SupplementalService() { }
    private static readonly SupplementalService defaultInstance = new SupplementalService().MakeReadOnly();
    private static readonly string[] _supplementalServiceFieldNames = new string[] { "name", "port" };
    private static readonly uint[] _supplementalServiceFieldTags = new uint[] { 10, 16 };
    public static SupplementalService DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SupplementalService DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SupplementalService ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_SupplementalService__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SupplementalService, SupplementalService.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_SupplementalService__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int PortFieldNumber = 2;
    private bool hasPort;
    private uint port_;
    public bool HasPort {
      get { return hasPort; }
    }
    public uint Port {
      get { return port_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasPort) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _supplementalServiceFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasPort) {
        output.WriteUInt32(2, field_names[1], Port);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasPort) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Port);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SupplementalService ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SupplementalService ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SupplementalService ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SupplementalService ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SupplementalService ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SupplementalService ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SupplementalService ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SupplementalService ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SupplementalService ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SupplementalService ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SupplementalService MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SupplementalService prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SupplementalService, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SupplementalService cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SupplementalService result;
      
      private SupplementalService PrepareBuilder() {
        if (resultIsReadOnly) {
          SupplementalService original = result;
          result = new SupplementalService();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SupplementalService MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.SupplementalService.Descriptor; }
      }
      
      public override SupplementalService DefaultInstanceForType {
        get { return global::bnet.protocol.config.SupplementalService.DefaultInstance; }
      }
      
      public override SupplementalService BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SupplementalService) {
          return MergeFrom((SupplementalService) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SupplementalService other) {
        if (other == global::bnet.protocol.config.SupplementalService.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_supplementalServiceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _supplementalServiceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 16: {
              result.hasPort = input.ReadUInt32(ref result.port_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      public uint Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      public Builder SetPort(uint value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
    }
    static SupplementalService() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ListenPoint : pb::GeneratedMessage<ListenPoint, ListenPoint.Builder> {
    private ListenPoint() { }
    private static readonly ListenPoint defaultInstance = new ListenPoint().MakeReadOnly();
    private static readonly string[] _listenPointFieldNames = new string[] { "accept", "address", "port" };
    private static readonly uint[] _listenPointFieldTags = new uint[] { 26, 18, 8 };
    public static ListenPoint DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ListenPoint DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ListenPoint ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ListenPoint__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ListenPoint, ListenPoint.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ListenPoint__FieldAccessorTable; }
    }
    
    public const int PortFieldNumber = 1;
    private bool hasPort;
    private uint port_;
    public bool HasPort {
      get { return hasPort; }
    }
    public uint Port {
      get { return port_; }
    }
    
    public const int AddressFieldNumber = 2;
    private bool hasAddress;
    private string address_ = "0.0.0.0";
    public bool HasAddress {
      get { return hasAddress; }
    }
    public string Address {
      get { return address_; }
    }
    
    public const int AcceptFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.config.ServerSet> accept_ = new pbc::PopsicleList<global::bnet.protocol.config.ServerSet>();
    public scg::IList<global::bnet.protocol.config.ServerSet> AcceptList {
      get { return accept_; }
    }
    public int AcceptCount {
      get { return accept_.Count; }
    }
    public global::bnet.protocol.config.ServerSet GetAccept(int index) {
      return accept_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPort) return false;
        foreach (global::bnet.protocol.config.ServerSet element in AcceptList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _listenPointFieldNames;
      if (hasPort) {
        output.WriteUInt32(1, field_names[2], Port);
      }
      if (hasAddress) {
        output.WriteString(2, field_names[1], Address);
      }
      if (accept_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], accept_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPort) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Port);
        }
        if (hasAddress) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Address);
        }
        foreach (global::bnet.protocol.config.ServerSet element in AcceptList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ListenPoint ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListenPoint ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListenPoint ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListenPoint ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListenPoint ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListenPoint ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ListenPoint ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ListenPoint ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ListenPoint ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListenPoint ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ListenPoint MakeReadOnly() {
      accept_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ListenPoint prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ListenPoint, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ListenPoint cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ListenPoint result;
      
      private ListenPoint PrepareBuilder() {
        if (resultIsReadOnly) {
          ListenPoint original = result;
          result = new ListenPoint();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ListenPoint MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.ListenPoint.Descriptor; }
      }
      
      public override ListenPoint DefaultInstanceForType {
        get { return global::bnet.protocol.config.ListenPoint.DefaultInstance; }
      }
      
      public override ListenPoint BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ListenPoint) {
          return MergeFrom((ListenPoint) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ListenPoint other) {
        if (other == global::bnet.protocol.config.ListenPoint.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasAddress) {
          Address = other.Address;
        }
        if (other.accept_.Count != 0) {
          result.accept_.Add(other.accept_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_listenPointFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _listenPointFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPort = input.ReadUInt32(ref result.port_);
              break;
            }
            case 18: {
              result.hasAddress = input.ReadString(ref result.address_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.accept_, global::bnet.protocol.config.ServerSet.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      public uint Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      public Builder SetPort(uint value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      public bool HasAddress {
        get { return result.hasAddress; }
      }
      public string Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      public Builder SetAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = "0.0.0.0";
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.config.ServerSet> AcceptList {
        get { return PrepareBuilder().accept_; }
      }
      public int AcceptCount {
        get { return result.AcceptCount; }
      }
      public global::bnet.protocol.config.ServerSet GetAccept(int index) {
        return result.GetAccept(index);
      }
      public Builder SetAccept(int index, global::bnet.protocol.config.ServerSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.accept_[index] = value;
        return this;
      }
      public Builder SetAccept(int index, global::bnet.protocol.config.ServerSet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.accept_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAccept(global::bnet.protocol.config.ServerSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.accept_.Add(value);
        return this;
      }
      public Builder AddAccept(global::bnet.protocol.config.ServerSet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.accept_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAccept(scg::IEnumerable<global::bnet.protocol.config.ServerSet> values) {
        PrepareBuilder();
        result.accept_.Add(values);
        return this;
      }
      public Builder ClearAccept() {
        PrepareBuilder();
        result.accept_.Clear();
        return this;
      }
    }
    static ListenPoint() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServiceShard : pb::GeneratedMessage<ServiceShard, ServiceShard.Builder> {
    private ServiceShard() { }
    private static readonly ServiceShard defaultInstance = new ServiceShard().MakeReadOnly();
    private static readonly string[] _serviceShardFieldNames = new string[] { "process_name" };
    private static readonly uint[] _serviceShardFieldTags = new uint[] { 10 };
    public static ServiceShard DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServiceShard DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServiceShard ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ServiceShard__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServiceShard, ServiceShard.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ServiceShard__FieldAccessorTable; }
    }
    
    public const int ProcessNameFieldNumber = 1;
    private bool hasProcessName;
    private string processName_ = "";
    public bool HasProcessName {
      get { return hasProcessName; }
    }
    public string ProcessName {
      get { return processName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProcessName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serviceShardFieldNames;
      if (hasProcessName) {
        output.WriteString(1, field_names[0], ProcessName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasProcessName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ProcessName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServiceShard ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceShard ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceShard ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceShard ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceShard ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceShard ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServiceShard ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServiceShard ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServiceShard ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceShard ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServiceShard MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServiceShard prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServiceShard, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServiceShard cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServiceShard result;
      
      private ServiceShard PrepareBuilder() {
        if (resultIsReadOnly) {
          ServiceShard original = result;
          result = new ServiceShard();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServiceShard MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.ServiceShard.Descriptor; }
      }
      
      public override ServiceShard DefaultInstanceForType {
        get { return global::bnet.protocol.config.ServiceShard.DefaultInstance; }
      }
      
      public override ServiceShard BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServiceShard) {
          return MergeFrom((ServiceShard) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServiceShard other) {
        if (other == global::bnet.protocol.config.ServiceShard.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProcessName) {
          ProcessName = other.ProcessName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceShardFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceShardFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasProcessName = input.ReadString(ref result.processName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProcessName {
        get { return result.hasProcessName; }
      }
      public string ProcessName {
        get { return result.ProcessName; }
        set { SetProcessName(value); }
      }
      public Builder SetProcessName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProcessName = true;
        result.processName_ = value;
        return this;
      }
      public Builder ClearProcessName() {
        PrepareBuilder();
        result.hasProcessName = false;
        result.processName_ = "";
        return this;
      }
    }
    static ServiceShard() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServiceConfig : pb::GeneratedMessage<ServiceConfig, ServiceConfig.Builder> {
    private ServiceConfig() { }
    private static readonly ServiceConfig defaultInstance = new ServiceConfig().MakeReadOnly();
    private static readonly string[] _serviceConfigFieldNames = new string[] { "name", "shard", "url" };
    private static readonly uint[] _serviceConfigFieldTags = new uint[] { 10, 26, 18 };
    public static ServiceConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServiceConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServiceConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ServiceConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServiceConfig, ServiceConfig.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ServiceConfig__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int UrlFieldNumber = 2;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int ShardFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.config.ServiceShard> shard_ = new pbc::PopsicleList<global::bnet.protocol.config.ServiceShard>();
    public scg::IList<global::bnet.protocol.config.ServiceShard> ShardList {
      get { return shard_; }
    }
    public int ShardCount {
      get { return shard_.Count; }
    }
    public global::bnet.protocol.config.ServiceShard GetShard(int index) {
      return shard_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasUrl) return false;
        foreach (global::bnet.protocol.config.ServiceShard element in ShardList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serviceConfigFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasUrl) {
        output.WriteString(2, field_names[2], Url);
      }
      if (shard_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], shard_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Url);
        }
        foreach (global::bnet.protocol.config.ServiceShard element in ShardList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServiceConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServiceConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServiceConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServiceConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServiceConfig MakeReadOnly() {
      shard_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServiceConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServiceConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServiceConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServiceConfig result;
      
      private ServiceConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          ServiceConfig original = result;
          result = new ServiceConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServiceConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.ServiceConfig.Descriptor; }
      }
      
      public override ServiceConfig DefaultInstanceForType {
        get { return global::bnet.protocol.config.ServiceConfig.DefaultInstance; }
      }
      
      public override ServiceConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServiceConfig) {
          return MergeFrom((ServiceConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServiceConfig other) {
        if (other == global::bnet.protocol.config.ServiceConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.shard_.Count != 0) {
          result.shard_.Add(other.shard_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.shard_, global::bnet.protocol.config.ServiceShard.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.config.ServiceShard> ShardList {
        get { return PrepareBuilder().shard_; }
      }
      public int ShardCount {
        get { return result.ShardCount; }
      }
      public global::bnet.protocol.config.ServiceShard GetShard(int index) {
        return result.GetShard(index);
      }
      public Builder SetShard(int index, global::bnet.protocol.config.ServiceShard value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.shard_[index] = value;
        return this;
      }
      public Builder SetShard(int index, global::bnet.protocol.config.ServiceShard.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.shard_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddShard(global::bnet.protocol.config.ServiceShard value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.shard_.Add(value);
        return this;
      }
      public Builder AddShard(global::bnet.protocol.config.ServiceShard.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.shard_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeShard(scg::IEnumerable<global::bnet.protocol.config.ServiceShard> values) {
        PrepareBuilder();
        result.shard_.Add(values);
        return this;
      }
      public Builder ClearShard() {
        PrepareBuilder();
        result.shard_.Clear();
        return this;
      }
    }
    static ServiceConfig() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RPCServerConfig : pb::GeneratedMessage<RPCServerConfig, RPCServerConfig.Builder> {
    private RPCServerConfig() { }
    private static readonly RPCServerConfig defaultInstance = new RPCServerConfig().MakeReadOnly();
    private static readonly string[] _rPCServerConfigFieldNames = new string[] { "connect", "listen", "name" };
    private static readonly uint[] _rPCServerConfigFieldTags = new uint[] { 26, 18, 10 };
    public static RPCServerConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RPCServerConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RPCServerConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_RPCServerConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RPCServerConfig, RPCServerConfig.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_RPCServerConfig__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ListenFieldNumber = 2;
    private bool hasListen;
    private global::bnet.protocol.config.ListenPoint listen_;
    public bool HasListen {
      get { return hasListen; }
    }
    public global::bnet.protocol.config.ListenPoint Listen {
      get { return listen_ ?? global::bnet.protocol.config.ListenPoint.DefaultInstance; }
    }
    
    public const int ConnectFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.config.ServerSet> connect_ = new pbc::PopsicleList<global::bnet.protocol.config.ServerSet>();
    public scg::IList<global::bnet.protocol.config.ServerSet> ConnectList {
      get { return connect_; }
    }
    public int ConnectCount {
      get { return connect_.Count; }
    }
    public global::bnet.protocol.config.ServerSet GetConnect(int index) {
      return connect_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (HasListen) {
          if (!Listen.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.config.ServerSet element in ConnectList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rPCServerConfigFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[2], Name);
      }
      if (hasListen) {
        output.WriteMessage(2, field_names[1], Listen);
      }
      if (connect_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], connect_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasListen) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Listen);
        }
        foreach (global::bnet.protocol.config.ServerSet element in ConnectList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RPCServerConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RPCServerConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RPCServerConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RPCServerConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RPCServerConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RPCServerConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RPCServerConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RPCServerConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RPCServerConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RPCServerConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RPCServerConfig MakeReadOnly() {
      connect_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RPCServerConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RPCServerConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RPCServerConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RPCServerConfig result;
      
      private RPCServerConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          RPCServerConfig original = result;
          result = new RPCServerConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RPCServerConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.RPCServerConfig.Descriptor; }
      }
      
      public override RPCServerConfig DefaultInstanceForType {
        get { return global::bnet.protocol.config.RPCServerConfig.DefaultInstance; }
      }
      
      public override RPCServerConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RPCServerConfig) {
          return MergeFrom((RPCServerConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RPCServerConfig other) {
        if (other == global::bnet.protocol.config.RPCServerConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasListen) {
          MergeListen(other.Listen);
        }
        if (other.connect_.Count != 0) {
          result.connect_.Add(other.connect_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rPCServerConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rPCServerConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              global::bnet.protocol.config.ListenPoint.Builder subBuilder = global::bnet.protocol.config.ListenPoint.CreateBuilder();
              if (result.hasListen) {
                subBuilder.MergeFrom(Listen);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Listen = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.connect_, global::bnet.protocol.config.ServerSet.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasListen {
       get { return result.hasListen; }
      }
      public global::bnet.protocol.config.ListenPoint Listen {
        get { return result.Listen; }
        set { SetListen(value); }
      }
      public Builder SetListen(global::bnet.protocol.config.ListenPoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasListen = true;
        result.listen_ = value;
        return this;
      }
      public Builder SetListen(global::bnet.protocol.config.ListenPoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasListen = true;
        result.listen_ = builderForValue.Build();
        return this;
      }
      public Builder MergeListen(global::bnet.protocol.config.ListenPoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasListen &&
            result.listen_ != global::bnet.protocol.config.ListenPoint.DefaultInstance) {
            result.listen_ = global::bnet.protocol.config.ListenPoint.CreateBuilder(result.listen_).MergeFrom(value).BuildPartial();
        } else {
          result.listen_ = value;
        }
        result.hasListen = true;
        return this;
      }
      public Builder ClearListen() {
        PrepareBuilder();
        result.hasListen = false;
        result.listen_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.config.ServerSet> ConnectList {
        get { return PrepareBuilder().connect_; }
      }
      public int ConnectCount {
        get { return result.ConnectCount; }
      }
      public global::bnet.protocol.config.ServerSet GetConnect(int index) {
        return result.GetConnect(index);
      }
      public Builder SetConnect(int index, global::bnet.protocol.config.ServerSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.connect_[index] = value;
        return this;
      }
      public Builder SetConnect(int index, global::bnet.protocol.config.ServerSet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.connect_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddConnect(global::bnet.protocol.config.ServerSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.connect_.Add(value);
        return this;
      }
      public Builder AddConnect(global::bnet.protocol.config.ServerSet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.connect_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeConnect(scg::IEnumerable<global::bnet.protocol.config.ServerSet> values) {
        PrepareBuilder();
        result.connect_.Add(values);
        return this;
      }
      public Builder ClearConnect() {
        PrepareBuilder();
        result.connect_.Clear();
        return this;
      }
    }
    static RPCServerConfig() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ProcessConfig : pb::GeneratedMessage<ProcessConfig, ProcessConfig.Builder> {
    private ProcessConfig() { }
    private static readonly ProcessConfig defaultInstance = new ProcessConfig().MakeReadOnly();
    private static readonly string[] _processConfigFieldNames = new string[] { "cpu_affinity_main_event_processor", "cpu_affinity_network_event_processor", "process_name", "resource", "server", "service", "supplemental_service", "var" };
    private static readonly uint[] _processConfigFieldTags = new uint[] { 58, 66, 10, 26, 18, 34, 50, 42 };
    public static ProcessConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProcessConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProcessConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ProcessConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProcessConfig, ProcessConfig.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.ProcessConfig.internal__static_bnet_protocol_config_ProcessConfig__FieldAccessorTable; }
    }
    
    public const int ProcessNameFieldNumber = 1;
    private bool hasProcessName;
    private string processName_ = "";
    public bool HasProcessName {
      get { return hasProcessName; }
    }
    public string ProcessName {
      get { return processName_; }
    }
    
    public const int CpuAffinityMainEventProcessorFieldNumber = 7;
    private int cpuAffinityMainEventProcessorMemoizedSerializedSize;
    private pbc::PopsicleList<uint> cpuAffinityMainEventProcessor_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> CpuAffinityMainEventProcessorList {
      get { return pbc::Lists.AsReadOnly(cpuAffinityMainEventProcessor_); }
    }
    public int CpuAffinityMainEventProcessorCount {
      get { return cpuAffinityMainEventProcessor_.Count; }
    }
    public uint GetCpuAffinityMainEventProcessor(int index) {
      return cpuAffinityMainEventProcessor_[index];
    }
    
    public const int CpuAffinityNetworkEventProcessorFieldNumber = 8;
    private int cpuAffinityNetworkEventProcessorMemoizedSerializedSize;
    private pbc::PopsicleList<uint> cpuAffinityNetworkEventProcessor_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> CpuAffinityNetworkEventProcessorList {
      get { return pbc::Lists.AsReadOnly(cpuAffinityNetworkEventProcessor_); }
    }
    public int CpuAffinityNetworkEventProcessorCount {
      get { return cpuAffinityNetworkEventProcessor_.Count; }
    }
    public uint GetCpuAffinityNetworkEventProcessor(int index) {
      return cpuAffinityNetworkEventProcessor_[index];
    }
    
    public const int ServerFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.config.RPCServerConfig> server_ = new pbc::PopsicleList<global::bnet.protocol.config.RPCServerConfig>();
    public scg::IList<global::bnet.protocol.config.RPCServerConfig> ServerList {
      get { return server_; }
    }
    public int ServerCount {
      get { return server_.Count; }
    }
    public global::bnet.protocol.config.RPCServerConfig GetServer(int index) {
      return server_[index];
    }
    
    public const int ResourceFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.config.Resource> resource_ = new pbc::PopsicleList<global::bnet.protocol.config.Resource>();
    public scg::IList<global::bnet.protocol.config.Resource> ResourceList {
      get { return resource_; }
    }
    public int ResourceCount {
      get { return resource_.Count; }
    }
    public global::bnet.protocol.config.Resource GetResource(int index) {
      return resource_[index];
    }
    
    public const int ServiceFieldNumber = 4;
    private pbc::PopsicleList<global::bnet.protocol.config.ServiceConfig> service_ = new pbc::PopsicleList<global::bnet.protocol.config.ServiceConfig>();
    public scg::IList<global::bnet.protocol.config.ServiceConfig> ServiceList {
      get { return service_; }
    }
    public int ServiceCount {
      get { return service_.Count; }
    }
    public global::bnet.protocol.config.ServiceConfig GetService(int index) {
      return service_[index];
    }
    
    public const int VarFieldNumber = 5;
    private pbc::PopsicleList<global::bnet.protocol.config.Var> var_ = new pbc::PopsicleList<global::bnet.protocol.config.Var>();
    public scg::IList<global::bnet.protocol.config.Var> VarList {
      get { return var_; }
    }
    public int VarCount {
      get { return var_.Count; }
    }
    public global::bnet.protocol.config.Var GetVar(int index) {
      return var_[index];
    }
    
    public const int SupplementalServiceFieldNumber = 6;
    private pbc::PopsicleList<global::bnet.protocol.config.SupplementalService> supplementalService_ = new pbc::PopsicleList<global::bnet.protocol.config.SupplementalService>();
    public scg::IList<global::bnet.protocol.config.SupplementalService> SupplementalServiceList {
      get { return supplementalService_; }
    }
    public int SupplementalServiceCount {
      get { return supplementalService_.Count; }
    }
    public global::bnet.protocol.config.SupplementalService GetSupplementalService(int index) {
      return supplementalService_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProcessName) return false;
        foreach (global::bnet.protocol.config.RPCServerConfig element in ServerList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.config.Resource element in ResourceList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.config.ServiceConfig element in ServiceList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.config.Var element in VarList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.config.SupplementalService element in SupplementalServiceList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _processConfigFieldNames;
      if (hasProcessName) {
        output.WriteString(1, field_names[2], ProcessName);
      }
      if (server_.Count > 0) {
        output.WriteMessageArray(2, field_names[4], server_);
      }
      if (resource_.Count > 0) {
        output.WriteMessageArray(3, field_names[3], resource_);
      }
      if (service_.Count > 0) {
        output.WriteMessageArray(4, field_names[5], service_);
      }
      if (var_.Count > 0) {
        output.WriteMessageArray(5, field_names[7], var_);
      }
      if (supplementalService_.Count > 0) {
        output.WriteMessageArray(6, field_names[6], supplementalService_);
      }
      if (cpuAffinityMainEventProcessor_.Count > 0) {
        output.WritePackedUInt32Array(7, field_names[0], cpuAffinityMainEventProcessorMemoizedSerializedSize, cpuAffinityMainEventProcessor_);
      }
      if (cpuAffinityNetworkEventProcessor_.Count > 0) {
        output.WritePackedUInt32Array(8, field_names[1], cpuAffinityNetworkEventProcessorMemoizedSerializedSize, cpuAffinityNetworkEventProcessor_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasProcessName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ProcessName);
        }
        {
          int dataSize = 0;
          foreach (uint element in CpuAffinityMainEventProcessorList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (cpuAffinityMainEventProcessor_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          cpuAffinityMainEventProcessorMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (uint element in CpuAffinityNetworkEventProcessorList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (cpuAffinityNetworkEventProcessor_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          cpuAffinityNetworkEventProcessorMemoizedSerializedSize = dataSize;
        }
        foreach (global::bnet.protocol.config.RPCServerConfig element in ServerList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::bnet.protocol.config.Resource element in ResourceList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::bnet.protocol.config.ServiceConfig element in ServiceList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::bnet.protocol.config.Var element in VarList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::bnet.protocol.config.SupplementalService element in SupplementalServiceList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProcessConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProcessConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProcessConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProcessConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProcessConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProcessConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProcessConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProcessConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProcessConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProcessConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProcessConfig MakeReadOnly() {
      cpuAffinityMainEventProcessor_.MakeReadOnly();
      cpuAffinityNetworkEventProcessor_.MakeReadOnly();
      server_.MakeReadOnly();
      resource_.MakeReadOnly();
      service_.MakeReadOnly();
      var_.MakeReadOnly();
      supplementalService_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProcessConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ProcessConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProcessConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProcessConfig result;
      
      private ProcessConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          ProcessConfig original = result;
          result = new ProcessConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProcessConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.ProcessConfig.Descriptor; }
      }
      
      public override ProcessConfig DefaultInstanceForType {
        get { return global::bnet.protocol.config.ProcessConfig.DefaultInstance; }
      }
      
      public override ProcessConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProcessConfig) {
          return MergeFrom((ProcessConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProcessConfig other) {
        if (other == global::bnet.protocol.config.ProcessConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProcessName) {
          ProcessName = other.ProcessName;
        }
        if (other.cpuAffinityMainEventProcessor_.Count != 0) {
          result.cpuAffinityMainEventProcessor_.Add(other.cpuAffinityMainEventProcessor_);
        }
        if (other.cpuAffinityNetworkEventProcessor_.Count != 0) {
          result.cpuAffinityNetworkEventProcessor_.Add(other.cpuAffinityNetworkEventProcessor_);
        }
        if (other.server_.Count != 0) {
          result.server_.Add(other.server_);
        }
        if (other.resource_.Count != 0) {
          result.resource_.Add(other.resource_);
        }
        if (other.service_.Count != 0) {
          result.service_.Add(other.service_);
        }
        if (other.var_.Count != 0) {
          result.var_.Add(other.var_);
        }
        if (other.supplementalService_.Count != 0) {
          result.supplementalService_.Add(other.supplementalService_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_processConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _processConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasProcessName = input.ReadString(ref result.processName_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.server_, global::bnet.protocol.config.RPCServerConfig.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.resource_, global::bnet.protocol.config.Resource.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.service_, global::bnet.protocol.config.ServiceConfig.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.var_, global::bnet.protocol.config.Var.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.supplementalService_, global::bnet.protocol.config.SupplementalService.DefaultInstance, extensionRegistry);
              break;
            }
            case 58:
            case 56: {
              input.ReadUInt32Array(tag, field_name, result.cpuAffinityMainEventProcessor_);
              break;
            }
            case 66:
            case 64: {
              input.ReadUInt32Array(tag, field_name, result.cpuAffinityNetworkEventProcessor_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProcessName {
        get { return result.hasProcessName; }
      }
      public string ProcessName {
        get { return result.ProcessName; }
        set { SetProcessName(value); }
      }
      public Builder SetProcessName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProcessName = true;
        result.processName_ = value;
        return this;
      }
      public Builder ClearProcessName() {
        PrepareBuilder();
        result.hasProcessName = false;
        result.processName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<uint> CpuAffinityMainEventProcessorList {
        get { return PrepareBuilder().cpuAffinityMainEventProcessor_; }
      }
      public int CpuAffinityMainEventProcessorCount {
        get { return result.CpuAffinityMainEventProcessorCount; }
      }
      public uint GetCpuAffinityMainEventProcessor(int index) {
        return result.GetCpuAffinityMainEventProcessor(index);
      }
      public Builder SetCpuAffinityMainEventProcessor(int index, uint value) {
        PrepareBuilder();
        result.cpuAffinityMainEventProcessor_[index] = value;
        return this;
      }
      public Builder AddCpuAffinityMainEventProcessor(uint value) {
        PrepareBuilder();
        result.cpuAffinityMainEventProcessor_.Add(value);
        return this;
      }
      public Builder AddRangeCpuAffinityMainEventProcessor(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.cpuAffinityMainEventProcessor_.Add(values);
        return this;
      }
      public Builder ClearCpuAffinityMainEventProcessor() {
        PrepareBuilder();
        result.cpuAffinityMainEventProcessor_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<uint> CpuAffinityNetworkEventProcessorList {
        get { return PrepareBuilder().cpuAffinityNetworkEventProcessor_; }
      }
      public int CpuAffinityNetworkEventProcessorCount {
        get { return result.CpuAffinityNetworkEventProcessorCount; }
      }
      public uint GetCpuAffinityNetworkEventProcessor(int index) {
        return result.GetCpuAffinityNetworkEventProcessor(index);
      }
      public Builder SetCpuAffinityNetworkEventProcessor(int index, uint value) {
        PrepareBuilder();
        result.cpuAffinityNetworkEventProcessor_[index] = value;
        return this;
      }
      public Builder AddCpuAffinityNetworkEventProcessor(uint value) {
        PrepareBuilder();
        result.cpuAffinityNetworkEventProcessor_.Add(value);
        return this;
      }
      public Builder AddRangeCpuAffinityNetworkEventProcessor(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.cpuAffinityNetworkEventProcessor_.Add(values);
        return this;
      }
      public Builder ClearCpuAffinityNetworkEventProcessor() {
        PrepareBuilder();
        result.cpuAffinityNetworkEventProcessor_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.config.RPCServerConfig> ServerList {
        get { return PrepareBuilder().server_; }
      }
      public int ServerCount {
        get { return result.ServerCount; }
      }
      public global::bnet.protocol.config.RPCServerConfig GetServer(int index) {
        return result.GetServer(index);
      }
      public Builder SetServer(int index, global::bnet.protocol.config.RPCServerConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.server_[index] = value;
        return this;
      }
      public Builder SetServer(int index, global::bnet.protocol.config.RPCServerConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.server_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddServer(global::bnet.protocol.config.RPCServerConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.server_.Add(value);
        return this;
      }
      public Builder AddServer(global::bnet.protocol.config.RPCServerConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.server_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeServer(scg::IEnumerable<global::bnet.protocol.config.RPCServerConfig> values) {
        PrepareBuilder();
        result.server_.Add(values);
        return this;
      }
      public Builder ClearServer() {
        PrepareBuilder();
        result.server_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.config.Resource> ResourceList {
        get { return PrepareBuilder().resource_; }
      }
      public int ResourceCount {
        get { return result.ResourceCount; }
      }
      public global::bnet.protocol.config.Resource GetResource(int index) {
        return result.GetResource(index);
      }
      public Builder SetResource(int index, global::bnet.protocol.config.Resource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.resource_[index] = value;
        return this;
      }
      public Builder SetResource(int index, global::bnet.protocol.config.Resource.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.resource_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResource(global::bnet.protocol.config.Resource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.resource_.Add(value);
        return this;
      }
      public Builder AddResource(global::bnet.protocol.config.Resource.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.resource_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResource(scg::IEnumerable<global::bnet.protocol.config.Resource> values) {
        PrepareBuilder();
        result.resource_.Add(values);
        return this;
      }
      public Builder ClearResource() {
        PrepareBuilder();
        result.resource_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.config.ServiceConfig> ServiceList {
        get { return PrepareBuilder().service_; }
      }
      public int ServiceCount {
        get { return result.ServiceCount; }
      }
      public global::bnet.protocol.config.ServiceConfig GetService(int index) {
        return result.GetService(index);
      }
      public Builder SetService(int index, global::bnet.protocol.config.ServiceConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.service_[index] = value;
        return this;
      }
      public Builder SetService(int index, global::bnet.protocol.config.ServiceConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.service_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddService(global::bnet.protocol.config.ServiceConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.service_.Add(value);
        return this;
      }
      public Builder AddService(global::bnet.protocol.config.ServiceConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.service_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeService(scg::IEnumerable<global::bnet.protocol.config.ServiceConfig> values) {
        PrepareBuilder();
        result.service_.Add(values);
        return this;
      }
      public Builder ClearService() {
        PrepareBuilder();
        result.service_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.config.Var> VarList {
        get { return PrepareBuilder().var_; }
      }
      public int VarCount {
        get { return result.VarCount; }
      }
      public global::bnet.protocol.config.Var GetVar(int index) {
        return result.GetVar(index);
      }
      public Builder SetVar(int index, global::bnet.protocol.config.Var value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.var_[index] = value;
        return this;
      }
      public Builder SetVar(int index, global::bnet.protocol.config.Var.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.var_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVar(global::bnet.protocol.config.Var value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.var_.Add(value);
        return this;
      }
      public Builder AddVar(global::bnet.protocol.config.Var.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.var_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVar(scg::IEnumerable<global::bnet.protocol.config.Var> values) {
        PrepareBuilder();
        result.var_.Add(values);
        return this;
      }
      public Builder ClearVar() {
        PrepareBuilder();
        result.var_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.config.SupplementalService> SupplementalServiceList {
        get { return PrepareBuilder().supplementalService_; }
      }
      public int SupplementalServiceCount {
        get { return result.SupplementalServiceCount; }
      }
      public global::bnet.protocol.config.SupplementalService GetSupplementalService(int index) {
        return result.GetSupplementalService(index);
      }
      public Builder SetSupplementalService(int index, global::bnet.protocol.config.SupplementalService value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.supplementalService_[index] = value;
        return this;
      }
      public Builder SetSupplementalService(int index, global::bnet.protocol.config.SupplementalService.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.supplementalService_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSupplementalService(global::bnet.protocol.config.SupplementalService value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.supplementalService_.Add(value);
        return this;
      }
      public Builder AddSupplementalService(global::bnet.protocol.config.SupplementalService.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.supplementalService_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSupplementalService(scg::IEnumerable<global::bnet.protocol.config.SupplementalService> values) {
        PrepareBuilder();
        result.supplementalService_.Add(values);
        return this;
      }
      public Builder ClearSupplementalService() {
        PrepareBuilder();
        result.supplementalService_.Clear();
        return this;
      }
    }
    static ProcessConfig() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.ProcessConfig.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
