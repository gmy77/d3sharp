// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.config {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class Locale {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_Locale__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.Locale, global::bnet.protocol.config.Locale.Builder> internal__static_bnet_protocol_config_Locale__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_Locales__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.Locales, global::bnet.protocol.config.Locales.Builder> internal__static_bnet_protocol_config_Locales__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Locale() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChFibmV0L2xvY2FsZS5wcm90bxIUYm5ldC5wcm90b2NvbC5jb25maWciPwoG" + 
            "TG9jYWxlEhIKCmlkZW50aWZpZXIYASACKAkSEwoLZGVzY3JpcHRpb24YAiAC" + 
            "KAkSDAoEZmxhZxgDIAMoCSI3CgdMb2NhbGVzEiwKBmxvY2FsZRgBIAMoCzIc" + 
            "LmJuZXQucHJvdG9jb2wuY29uZmlnLkxvY2FsZQ==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_config_Locale__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_config_Locale__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.Locale, global::bnet.protocol.config.Locale.Builder>(internal__static_bnet_protocol_config_Locale__Descriptor,
                  new string[] { "Identifier", "Description", "Flag", });
          internal__static_bnet_protocol_config_Locales__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bnet_protocol_config_Locales__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.Locales, global::bnet.protocol.config.Locales.Builder>(internal__static_bnet_protocol_config_Locales__Descriptor,
                  new string[] { "Locale", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Locale : pb::GeneratedMessage<Locale, Locale.Builder> {
    private Locale() { }
    private static readonly Locale defaultInstance = new Locale().MakeReadOnly();
    private static readonly string[] _localeFieldNames = new string[] { "description", "flag", "identifier" };
    private static readonly uint[] _localeFieldTags = new uint[] { 18, 26, 10 };
    public static Locale DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Locale DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Locale ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.Locale.internal__static_bnet_protocol_config_Locale__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Locale, Locale.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.Locale.internal__static_bnet_protocol_config_Locale__FieldAccessorTable; }
    }
    
    public const int IdentifierFieldNumber = 1;
    private bool hasIdentifier;
    private string identifier_ = "";
    public bool HasIdentifier {
      get { return hasIdentifier; }
    }
    public string Identifier {
      get { return identifier_; }
    }
    
    public const int DescriptionFieldNumber = 2;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int FlagFieldNumber = 3;
    private pbc::PopsicleList<string> flag_ = new pbc::PopsicleList<string>();
    public scg::IList<string> FlagList {
      get { return pbc::Lists.AsReadOnly(flag_); }
    }
    public int FlagCount {
      get { return flag_.Count; }
    }
    public string GetFlag(int index) {
      return flag_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdentifier) return false;
        if (!hasDescription) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _localeFieldNames;
      if (hasIdentifier) {
        output.WriteString(1, field_names[2], Identifier);
      }
      if (hasDescription) {
        output.WriteString(2, field_names[0], Description);
      }
      if (flag_.Count > 0) {
        output.WriteStringArray(3, field_names[1], flag_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdentifier) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Identifier);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Description);
        }
        {
          int dataSize = 0;
          foreach (string element in FlagList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * flag_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Locale ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Locale ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Locale ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Locale ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Locale ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Locale ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Locale ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Locale ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Locale ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Locale ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Locale MakeReadOnly() {
      flag_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Locale prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Locale, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Locale cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Locale result;
      
      private Locale PrepareBuilder() {
        if (resultIsReadOnly) {
          Locale original = result;
          result = new Locale();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Locale MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.Locale.Descriptor; }
      }
      
      public override Locale DefaultInstanceForType {
        get { return global::bnet.protocol.config.Locale.DefaultInstance; }
      }
      
      public override Locale BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Locale) {
          return MergeFrom((Locale) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Locale other) {
        if (other == global::bnet.protocol.config.Locale.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdentifier) {
          Identifier = other.Identifier;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.flag_.Count != 0) {
          result.flag_.Add(other.flag_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_localeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _localeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasIdentifier = input.ReadString(ref result.identifier_);
              break;
            }
            case 18: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.flag_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdentifier {
        get { return result.hasIdentifier; }
      }
      public string Identifier {
        get { return result.Identifier; }
        set { SetIdentifier(value); }
      }
      public Builder SetIdentifier(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentifier = true;
        result.identifier_ = value;
        return this;
      }
      public Builder ClearIdentifier() {
        PrepareBuilder();
        result.hasIdentifier = false;
        result.identifier_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> FlagList {
        get { return PrepareBuilder().flag_; }
      }
      public int FlagCount {
        get { return result.FlagCount; }
      }
      public string GetFlag(int index) {
        return result.GetFlag(index);
      }
      public Builder SetFlag(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.flag_[index] = value;
        return this;
      }
      public Builder AddFlag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.flag_.Add(value);
        return this;
      }
      public Builder AddRangeFlag(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.flag_.Add(values);
        return this;
      }
      public Builder ClearFlag() {
        PrepareBuilder();
        result.flag_.Clear();
        return this;
      }
    }
    static Locale() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.Locale.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Locales : pb::GeneratedMessage<Locales, Locales.Builder> {
    private Locales() { }
    private static readonly Locales defaultInstance = new Locales().MakeReadOnly();
    private static readonly string[] _localesFieldNames = new string[] { "locale" };
    private static readonly uint[] _localesFieldTags = new uint[] { 10 };
    public static Locales DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Locales DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Locales ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.Proto.Locale.internal__static_bnet_protocol_config_Locales__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Locales, Locales.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.Proto.Locale.internal__static_bnet_protocol_config_Locales__FieldAccessorTable; }
    }
    
    public const int LocaleFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.config.Locale> locale_ = new pbc::PopsicleList<global::bnet.protocol.config.Locale>();
    public scg::IList<global::bnet.protocol.config.Locale> LocaleList {
      get { return locale_; }
    }
    public int LocaleCount {
      get { return locale_.Count; }
    }
    public global::bnet.protocol.config.Locale GetLocale(int index) {
      return locale_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.config.Locale element in LocaleList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _localesFieldNames;
      if (locale_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], locale_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.config.Locale element in LocaleList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Locales ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Locales ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Locales ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Locales ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Locales ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Locales ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Locales ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Locales ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Locales ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Locales ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Locales MakeReadOnly() {
      locale_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Locales prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Locales, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Locales cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Locales result;
      
      private Locales PrepareBuilder() {
        if (resultIsReadOnly) {
          Locales original = result;
          result = new Locales();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Locales MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.Locales.Descriptor; }
      }
      
      public override Locales DefaultInstanceForType {
        get { return global::bnet.protocol.config.Locales.DefaultInstance; }
      }
      
      public override Locales BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Locales) {
          return MergeFrom((Locales) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Locales other) {
        if (other == global::bnet.protocol.config.Locales.DefaultInstance) return this;
        PrepareBuilder();
        if (other.locale_.Count != 0) {
          result.locale_.Add(other.locale_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_localesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _localesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.locale_, global::bnet.protocol.config.Locale.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.config.Locale> LocaleList {
        get { return PrepareBuilder().locale_; }
      }
      public int LocaleCount {
        get { return result.LocaleCount; }
      }
      public global::bnet.protocol.config.Locale GetLocale(int index) {
        return result.GetLocale(index);
      }
      public Builder SetLocale(int index, global::bnet.protocol.config.Locale value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.locale_[index] = value;
        return this;
      }
      public Builder SetLocale(int index, global::bnet.protocol.config.Locale.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.locale_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLocale(global::bnet.protocol.config.Locale value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.locale_.Add(value);
        return this;
      }
      public Builder AddLocale(global::bnet.protocol.config.Locale.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.locale_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLocale(scg::IEnumerable<global::bnet.protocol.config.Locale> values) {
        PrepareBuilder();
        result.locale_.Add(values);
        return this;
      }
      public Builder ClearLocale() {
        PrepareBuilder();
        result.locale_.Clear();
        return this;
      }
    }
    static Locales() {
      object.ReferenceEquals(global::bnet.protocol.config.Proto.Locale.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
