// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.config {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class RpcConfig {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_RPCMethodConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.RPCMethodConfig, global::bnet.protocol.config.RPCMethodConfig.Builder> internal__static_bnet_protocol_config_RPCMethodConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_config_RPCMeterConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.RPCMeterConfig, global::bnet.protocol.config.RPCMeterConfig.Builder> internal__static_bnet_protocol_config_RPCMeterConfig__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static RpcConfig() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChVibmV0L3JwY19jb25maWcucHJvdG8SFGJuZXQucHJvdG9jb2wuY29uZmln" + 
          "Gg5ibmV0L3JwYy5wcm90byKnAgoPUlBDTWV0aG9kQ29uZmlnEhQKDHNlcnZp" + 
          "Y2VfbmFtZRgBIAEoCRITCgttZXRob2RfbmFtZRgCIAEoCRIaCg9maXhlZF9j" + 
          "YWxsX2Nvc3QYAyABKA06ATESHAoRZml4ZWRfcGFja2V0X3NpemUYBCABKA06" + 
          "ATASHgoTdmFyaWFibGVfbXVsdGlwbGllchgFIAEoAjoBMBIVCgptdWx0aXBs" + 
          "aWVyGAYgASgCOgExEhgKEHJhdGVfbGltaXRfY291bnQYByABKA0SGgoScmF0" + 
          "ZV9saW1pdF9zZWNvbmRzGAggASgNEhcKD21heF9wYWNrZXRfc2l6ZRgJIAEo" + 
          "DRIYChBtYXhfZW5jb2RlZF9zaXplGAogASgNEg8KB3RpbWVvdXQYCyABKAIi" + 
          "rgEKDlJQQ01ldGVyQ29uZmlnEjUKBm1ldGhvZBgBIAMoCzIlLmJuZXQucHJv" + 
          "dG9jb2wuY29uZmlnLlJQQ01ldGhvZENvbmZpZxIcChFpbmNvbWVfcGVyX3Nl" + 
          "Y29uZBgCIAEoDToBMRIXCg9pbml0aWFsX2JhbGFuY2UYAyABKA0SEwoLY2Fw" + 
          "X2JhbGFuY2UYBCABKA0SGQoOc3RhcnR1cF9wZXJpb2QYBSABKAI6ATA=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_config_RPCMethodConfig__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_config_RPCMethodConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.RPCMethodConfig, global::bnet.protocol.config.RPCMethodConfig.Builder>(internal__static_bnet_protocol_config_RPCMethodConfig__Descriptor,
                new string[] { "ServiceName", "MethodName", "FixedCallCost", "FixedPacketSize", "VariableMultiplier", "Multiplier", "RateLimitCount", "RateLimitSeconds", "MaxPacketSize", "MaxEncodedSize", "Timeout", });
        internal__static_bnet_protocol_config_RPCMeterConfig__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_config_RPCMeterConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.config.RPCMeterConfig, global::bnet.protocol.config.RPCMeterConfig.Builder>(internal__static_bnet_protocol_config_RPCMeterConfig__Descriptor,
                new string[] { "Method", "IncomePerSecond", "InitialBalance", "CapBalance", "StartupPeriod", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.Rpc.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RPCMethodConfig : pb::GeneratedMessage<RPCMethodConfig, RPCMethodConfig.Builder> {
    private RPCMethodConfig() { }
    private static readonly RPCMethodConfig defaultInstance = new RPCMethodConfig().MakeReadOnly();
    private static readonly string[] _rPCMethodConfigFieldNames = new string[] { "fixed_call_cost", "fixed_packet_size", "max_encoded_size", "max_packet_size", "method_name", "multiplier", "rate_limit_count", "rate_limit_seconds", "service_name", "timeout", "variable_multiplier" };
    private static readonly uint[] _rPCMethodConfigFieldTags = new uint[] { 24, 32, 80, 72, 18, 53, 56, 64, 10, 93, 45 };
    public static RPCMethodConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RPCMethodConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RPCMethodConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.RpcConfig.internal__static_bnet_protocol_config_RPCMethodConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RPCMethodConfig, RPCMethodConfig.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.RpcConfig.internal__static_bnet_protocol_config_RPCMethodConfig__FieldAccessorTable; }
    }
    
    public const int ServiceNameFieldNumber = 1;
    private bool hasServiceName;
    private string serviceName_ = "";
    public bool HasServiceName {
      get { return hasServiceName; }
    }
    public string ServiceName {
      get { return serviceName_; }
    }
    
    public const int MethodNameFieldNumber = 2;
    private bool hasMethodName;
    private string methodName_ = "";
    public bool HasMethodName {
      get { return hasMethodName; }
    }
    public string MethodName {
      get { return methodName_; }
    }
    
    public const int FixedCallCostFieldNumber = 3;
    private bool hasFixedCallCost;
    private uint fixedCallCost_ = 1;
    public bool HasFixedCallCost {
      get { return hasFixedCallCost; }
    }
    public uint FixedCallCost {
      get { return fixedCallCost_; }
    }
    
    public const int FixedPacketSizeFieldNumber = 4;
    private bool hasFixedPacketSize;
    private uint fixedPacketSize_;
    public bool HasFixedPacketSize {
      get { return hasFixedPacketSize; }
    }
    public uint FixedPacketSize {
      get { return fixedPacketSize_; }
    }
    
    public const int VariableMultiplierFieldNumber = 5;
    private bool hasVariableMultiplier;
    private float variableMultiplier_;
    public bool HasVariableMultiplier {
      get { return hasVariableMultiplier; }
    }
    public float VariableMultiplier {
      get { return variableMultiplier_; }
    }
    
    public const int MultiplierFieldNumber = 6;
    private bool hasMultiplier;
    private float multiplier_ = 1F;
    public bool HasMultiplier {
      get { return hasMultiplier; }
    }
    public float Multiplier {
      get { return multiplier_; }
    }
    
    public const int RateLimitCountFieldNumber = 7;
    private bool hasRateLimitCount;
    private uint rateLimitCount_;
    public bool HasRateLimitCount {
      get { return hasRateLimitCount; }
    }
    public uint RateLimitCount {
      get { return rateLimitCount_; }
    }
    
    public const int RateLimitSecondsFieldNumber = 8;
    private bool hasRateLimitSeconds;
    private uint rateLimitSeconds_;
    public bool HasRateLimitSeconds {
      get { return hasRateLimitSeconds; }
    }
    public uint RateLimitSeconds {
      get { return rateLimitSeconds_; }
    }
    
    public const int MaxPacketSizeFieldNumber = 9;
    private bool hasMaxPacketSize;
    private uint maxPacketSize_;
    public bool HasMaxPacketSize {
      get { return hasMaxPacketSize; }
    }
    public uint MaxPacketSize {
      get { return maxPacketSize_; }
    }
    
    public const int MaxEncodedSizeFieldNumber = 10;
    private bool hasMaxEncodedSize;
    private uint maxEncodedSize_;
    public bool HasMaxEncodedSize {
      get { return hasMaxEncodedSize; }
    }
    public uint MaxEncodedSize {
      get { return maxEncodedSize_; }
    }
    
    public const int TimeoutFieldNumber = 11;
    private bool hasTimeout;
    private float timeout_;
    public bool HasTimeout {
      get { return hasTimeout; }
    }
    public float Timeout {
      get { return timeout_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rPCMethodConfigFieldNames;
      if (hasServiceName) {
        output.WriteString(1, field_names[8], ServiceName);
      }
      if (hasMethodName) {
        output.WriteString(2, field_names[4], MethodName);
      }
      if (hasFixedCallCost) {
        output.WriteUInt32(3, field_names[0], FixedCallCost);
      }
      if (hasFixedPacketSize) {
        output.WriteUInt32(4, field_names[1], FixedPacketSize);
      }
      if (hasVariableMultiplier) {
        output.WriteFloat(5, field_names[10], VariableMultiplier);
      }
      if (hasMultiplier) {
        output.WriteFloat(6, field_names[5], Multiplier);
      }
      if (hasRateLimitCount) {
        output.WriteUInt32(7, field_names[6], RateLimitCount);
      }
      if (hasRateLimitSeconds) {
        output.WriteUInt32(8, field_names[7], RateLimitSeconds);
      }
      if (hasMaxPacketSize) {
        output.WriteUInt32(9, field_names[3], MaxPacketSize);
      }
      if (hasMaxEncodedSize) {
        output.WriteUInt32(10, field_names[2], MaxEncodedSize);
      }
      if (hasTimeout) {
        output.WriteFloat(11, field_names[9], Timeout);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServiceName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ServiceName);
        }
        if (hasMethodName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, MethodName);
        }
        if (hasFixedCallCost) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, FixedCallCost);
        }
        if (hasFixedPacketSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, FixedPacketSize);
        }
        if (hasVariableMultiplier) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, VariableMultiplier);
        }
        if (hasMultiplier) {
          size += pb::CodedOutputStream.ComputeFloatSize(6, Multiplier);
        }
        if (hasRateLimitCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, RateLimitCount);
        }
        if (hasRateLimitSeconds) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, RateLimitSeconds);
        }
        if (hasMaxPacketSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, MaxPacketSize);
        }
        if (hasMaxEncodedSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, MaxEncodedSize);
        }
        if (hasTimeout) {
          size += pb::CodedOutputStream.ComputeFloatSize(11, Timeout);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RPCMethodConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RPCMethodConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RPCMethodConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RPCMethodConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RPCMethodConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RPCMethodConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RPCMethodConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RPCMethodConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RPCMethodConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RPCMethodConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RPCMethodConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RPCMethodConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RPCMethodConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RPCMethodConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RPCMethodConfig result;
      
      private RPCMethodConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          RPCMethodConfig original = result;
          result = new RPCMethodConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RPCMethodConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.RPCMethodConfig.Descriptor; }
      }
      
      public override RPCMethodConfig DefaultInstanceForType {
        get { return global::bnet.protocol.config.RPCMethodConfig.DefaultInstance; }
      }
      
      public override RPCMethodConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RPCMethodConfig) {
          return MergeFrom((RPCMethodConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RPCMethodConfig other) {
        if (other == global::bnet.protocol.config.RPCMethodConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServiceName) {
          ServiceName = other.ServiceName;
        }
        if (other.HasMethodName) {
          MethodName = other.MethodName;
        }
        if (other.HasFixedCallCost) {
          FixedCallCost = other.FixedCallCost;
        }
        if (other.HasFixedPacketSize) {
          FixedPacketSize = other.FixedPacketSize;
        }
        if (other.HasVariableMultiplier) {
          VariableMultiplier = other.VariableMultiplier;
        }
        if (other.HasMultiplier) {
          Multiplier = other.Multiplier;
        }
        if (other.HasRateLimitCount) {
          RateLimitCount = other.RateLimitCount;
        }
        if (other.HasRateLimitSeconds) {
          RateLimitSeconds = other.RateLimitSeconds;
        }
        if (other.HasMaxPacketSize) {
          MaxPacketSize = other.MaxPacketSize;
        }
        if (other.HasMaxEncodedSize) {
          MaxEncodedSize = other.MaxEncodedSize;
        }
        if (other.HasTimeout) {
          Timeout = other.Timeout;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rPCMethodConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rPCMethodConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasServiceName = input.ReadString(ref result.serviceName_);
              break;
            }
            case 18: {
              result.hasMethodName = input.ReadString(ref result.methodName_);
              break;
            }
            case 24: {
              result.hasFixedCallCost = input.ReadUInt32(ref result.fixedCallCost_);
              break;
            }
            case 32: {
              result.hasFixedPacketSize = input.ReadUInt32(ref result.fixedPacketSize_);
              break;
            }
            case 45: {
              result.hasVariableMultiplier = input.ReadFloat(ref result.variableMultiplier_);
              break;
            }
            case 53: {
              result.hasMultiplier = input.ReadFloat(ref result.multiplier_);
              break;
            }
            case 56: {
              result.hasRateLimitCount = input.ReadUInt32(ref result.rateLimitCount_);
              break;
            }
            case 64: {
              result.hasRateLimitSeconds = input.ReadUInt32(ref result.rateLimitSeconds_);
              break;
            }
            case 72: {
              result.hasMaxPacketSize = input.ReadUInt32(ref result.maxPacketSize_);
              break;
            }
            case 80: {
              result.hasMaxEncodedSize = input.ReadUInt32(ref result.maxEncodedSize_);
              break;
            }
            case 93: {
              result.hasTimeout = input.ReadFloat(ref result.timeout_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServiceName {
        get { return result.hasServiceName; }
      }
      public string ServiceName {
        get { return result.ServiceName; }
        set { SetServiceName(value); }
      }
      public Builder SetServiceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServiceName = true;
        result.serviceName_ = value;
        return this;
      }
      public Builder ClearServiceName() {
        PrepareBuilder();
        result.hasServiceName = false;
        result.serviceName_ = "";
        return this;
      }
      
      public bool HasMethodName {
        get { return result.hasMethodName; }
      }
      public string MethodName {
        get { return result.MethodName; }
        set { SetMethodName(value); }
      }
      public Builder SetMethodName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMethodName = true;
        result.methodName_ = value;
        return this;
      }
      public Builder ClearMethodName() {
        PrepareBuilder();
        result.hasMethodName = false;
        result.methodName_ = "";
        return this;
      }
      
      public bool HasFixedCallCost {
        get { return result.hasFixedCallCost; }
      }
      public uint FixedCallCost {
        get { return result.FixedCallCost; }
        set { SetFixedCallCost(value); }
      }
      public Builder SetFixedCallCost(uint value) {
        PrepareBuilder();
        result.hasFixedCallCost = true;
        result.fixedCallCost_ = value;
        return this;
      }
      public Builder ClearFixedCallCost() {
        PrepareBuilder();
        result.hasFixedCallCost = false;
        result.fixedCallCost_ = 1;
        return this;
      }
      
      public bool HasFixedPacketSize {
        get { return result.hasFixedPacketSize; }
      }
      public uint FixedPacketSize {
        get { return result.FixedPacketSize; }
        set { SetFixedPacketSize(value); }
      }
      public Builder SetFixedPacketSize(uint value) {
        PrepareBuilder();
        result.hasFixedPacketSize = true;
        result.fixedPacketSize_ = value;
        return this;
      }
      public Builder ClearFixedPacketSize() {
        PrepareBuilder();
        result.hasFixedPacketSize = false;
        result.fixedPacketSize_ = 0;
        return this;
      }
      
      public bool HasVariableMultiplier {
        get { return result.hasVariableMultiplier; }
      }
      public float VariableMultiplier {
        get { return result.VariableMultiplier; }
        set { SetVariableMultiplier(value); }
      }
      public Builder SetVariableMultiplier(float value) {
        PrepareBuilder();
        result.hasVariableMultiplier = true;
        result.variableMultiplier_ = value;
        return this;
      }
      public Builder ClearVariableMultiplier() {
        PrepareBuilder();
        result.hasVariableMultiplier = false;
        result.variableMultiplier_ = 0F;
        return this;
      }
      
      public bool HasMultiplier {
        get { return result.hasMultiplier; }
      }
      public float Multiplier {
        get { return result.Multiplier; }
        set { SetMultiplier(value); }
      }
      public Builder SetMultiplier(float value) {
        PrepareBuilder();
        result.hasMultiplier = true;
        result.multiplier_ = value;
        return this;
      }
      public Builder ClearMultiplier() {
        PrepareBuilder();
        result.hasMultiplier = false;
        result.multiplier_ = 1F;
        return this;
      }
      
      public bool HasRateLimitCount {
        get { return result.hasRateLimitCount; }
      }
      public uint RateLimitCount {
        get { return result.RateLimitCount; }
        set { SetRateLimitCount(value); }
      }
      public Builder SetRateLimitCount(uint value) {
        PrepareBuilder();
        result.hasRateLimitCount = true;
        result.rateLimitCount_ = value;
        return this;
      }
      public Builder ClearRateLimitCount() {
        PrepareBuilder();
        result.hasRateLimitCount = false;
        result.rateLimitCount_ = 0;
        return this;
      }
      
      public bool HasRateLimitSeconds {
        get { return result.hasRateLimitSeconds; }
      }
      public uint RateLimitSeconds {
        get { return result.RateLimitSeconds; }
        set { SetRateLimitSeconds(value); }
      }
      public Builder SetRateLimitSeconds(uint value) {
        PrepareBuilder();
        result.hasRateLimitSeconds = true;
        result.rateLimitSeconds_ = value;
        return this;
      }
      public Builder ClearRateLimitSeconds() {
        PrepareBuilder();
        result.hasRateLimitSeconds = false;
        result.rateLimitSeconds_ = 0;
        return this;
      }
      
      public bool HasMaxPacketSize {
        get { return result.hasMaxPacketSize; }
      }
      public uint MaxPacketSize {
        get { return result.MaxPacketSize; }
        set { SetMaxPacketSize(value); }
      }
      public Builder SetMaxPacketSize(uint value) {
        PrepareBuilder();
        result.hasMaxPacketSize = true;
        result.maxPacketSize_ = value;
        return this;
      }
      public Builder ClearMaxPacketSize() {
        PrepareBuilder();
        result.hasMaxPacketSize = false;
        result.maxPacketSize_ = 0;
        return this;
      }
      
      public bool HasMaxEncodedSize {
        get { return result.hasMaxEncodedSize; }
      }
      public uint MaxEncodedSize {
        get { return result.MaxEncodedSize; }
        set { SetMaxEncodedSize(value); }
      }
      public Builder SetMaxEncodedSize(uint value) {
        PrepareBuilder();
        result.hasMaxEncodedSize = true;
        result.maxEncodedSize_ = value;
        return this;
      }
      public Builder ClearMaxEncodedSize() {
        PrepareBuilder();
        result.hasMaxEncodedSize = false;
        result.maxEncodedSize_ = 0;
        return this;
      }
      
      public bool HasTimeout {
        get { return result.hasTimeout; }
      }
      public float Timeout {
        get { return result.Timeout; }
        set { SetTimeout(value); }
      }
      public Builder SetTimeout(float value) {
        PrepareBuilder();
        result.hasTimeout = true;
        result.timeout_ = value;
        return this;
      }
      public Builder ClearTimeout() {
        PrepareBuilder();
        result.hasTimeout = false;
        result.timeout_ = 0F;
        return this;
      }
    }
    static RPCMethodConfig() {
      object.ReferenceEquals(global::bnet.protocol.config.RpcConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RPCMeterConfig : pb::GeneratedMessage<RPCMeterConfig, RPCMeterConfig.Builder> {
    private RPCMeterConfig() { }
    private static readonly RPCMeterConfig defaultInstance = new RPCMeterConfig().MakeReadOnly();
    private static readonly string[] _rPCMeterConfigFieldNames = new string[] { "cap_balance", "income_per_second", "initial_balance", "method", "startup_period" };
    private static readonly uint[] _rPCMeterConfigFieldTags = new uint[] { 32, 16, 24, 10, 45 };
    public static RPCMeterConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RPCMeterConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RPCMeterConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.config.RpcConfig.internal__static_bnet_protocol_config_RPCMeterConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RPCMeterConfig, RPCMeterConfig.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.config.RpcConfig.internal__static_bnet_protocol_config_RPCMeterConfig__FieldAccessorTable; }
    }
    
    public const int MethodFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.config.RPCMethodConfig> method_ = new pbc::PopsicleList<global::bnet.protocol.config.RPCMethodConfig>();
    public scg::IList<global::bnet.protocol.config.RPCMethodConfig> MethodList {
      get { return method_; }
    }
    public int MethodCount {
      get { return method_.Count; }
    }
    public global::bnet.protocol.config.RPCMethodConfig GetMethod(int index) {
      return method_[index];
    }
    
    public const int IncomePerSecondFieldNumber = 2;
    private bool hasIncomePerSecond;
    private uint incomePerSecond_ = 1;
    public bool HasIncomePerSecond {
      get { return hasIncomePerSecond; }
    }
    public uint IncomePerSecond {
      get { return incomePerSecond_; }
    }
    
    public const int InitialBalanceFieldNumber = 3;
    private bool hasInitialBalance;
    private uint initialBalance_;
    public bool HasInitialBalance {
      get { return hasInitialBalance; }
    }
    public uint InitialBalance {
      get { return initialBalance_; }
    }
    
    public const int CapBalanceFieldNumber = 4;
    private bool hasCapBalance;
    private uint capBalance_;
    public bool HasCapBalance {
      get { return hasCapBalance; }
    }
    public uint CapBalance {
      get { return capBalance_; }
    }
    
    public const int StartupPeriodFieldNumber = 5;
    private bool hasStartupPeriod;
    private float startupPeriod_;
    public bool HasStartupPeriod {
      get { return hasStartupPeriod; }
    }
    public float StartupPeriod {
      get { return startupPeriod_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rPCMeterConfigFieldNames;
      if (method_.Count > 0) {
        output.WriteMessageArray(1, field_names[3], method_);
      }
      if (hasIncomePerSecond) {
        output.WriteUInt32(2, field_names[1], IncomePerSecond);
      }
      if (hasInitialBalance) {
        output.WriteUInt32(3, field_names[2], InitialBalance);
      }
      if (hasCapBalance) {
        output.WriteUInt32(4, field_names[0], CapBalance);
      }
      if (hasStartupPeriod) {
        output.WriteFloat(5, field_names[4], StartupPeriod);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.config.RPCMethodConfig element in MethodList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasIncomePerSecond) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, IncomePerSecond);
        }
        if (hasInitialBalance) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, InitialBalance);
        }
        if (hasCapBalance) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, CapBalance);
        }
        if (hasStartupPeriod) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, StartupPeriod);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RPCMeterConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RPCMeterConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RPCMeterConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RPCMeterConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RPCMeterConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RPCMeterConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RPCMeterConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RPCMeterConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RPCMeterConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RPCMeterConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RPCMeterConfig MakeReadOnly() {
      method_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RPCMeterConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RPCMeterConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RPCMeterConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RPCMeterConfig result;
      
      private RPCMeterConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          RPCMeterConfig original = result;
          result = new RPCMeterConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RPCMeterConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.config.RPCMeterConfig.Descriptor; }
      }
      
      public override RPCMeterConfig DefaultInstanceForType {
        get { return global::bnet.protocol.config.RPCMeterConfig.DefaultInstance; }
      }
      
      public override RPCMeterConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RPCMeterConfig) {
          return MergeFrom((RPCMeterConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RPCMeterConfig other) {
        if (other == global::bnet.protocol.config.RPCMeterConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.method_.Count != 0) {
          result.method_.Add(other.method_);
        }
        if (other.HasIncomePerSecond) {
          IncomePerSecond = other.IncomePerSecond;
        }
        if (other.HasInitialBalance) {
          InitialBalance = other.InitialBalance;
        }
        if (other.HasCapBalance) {
          CapBalance = other.CapBalance;
        }
        if (other.HasStartupPeriod) {
          StartupPeriod = other.StartupPeriod;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rPCMeterConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rPCMeterConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.method_, global::bnet.protocol.config.RPCMethodConfig.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasIncomePerSecond = input.ReadUInt32(ref result.incomePerSecond_);
              break;
            }
            case 24: {
              result.hasInitialBalance = input.ReadUInt32(ref result.initialBalance_);
              break;
            }
            case 32: {
              result.hasCapBalance = input.ReadUInt32(ref result.capBalance_);
              break;
            }
            case 45: {
              result.hasStartupPeriod = input.ReadFloat(ref result.startupPeriod_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.config.RPCMethodConfig> MethodList {
        get { return PrepareBuilder().method_; }
      }
      public int MethodCount {
        get { return result.MethodCount; }
      }
      public global::bnet.protocol.config.RPCMethodConfig GetMethod(int index) {
        return result.GetMethod(index);
      }
      public Builder SetMethod(int index, global::bnet.protocol.config.RPCMethodConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.method_[index] = value;
        return this;
      }
      public Builder SetMethod(int index, global::bnet.protocol.config.RPCMethodConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.method_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMethod(global::bnet.protocol.config.RPCMethodConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.method_.Add(value);
        return this;
      }
      public Builder AddMethod(global::bnet.protocol.config.RPCMethodConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.method_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMethod(scg::IEnumerable<global::bnet.protocol.config.RPCMethodConfig> values) {
        PrepareBuilder();
        result.method_.Add(values);
        return this;
      }
      public Builder ClearMethod() {
        PrepareBuilder();
        result.method_.Clear();
        return this;
      }
      
      public bool HasIncomePerSecond {
        get { return result.hasIncomePerSecond; }
      }
      public uint IncomePerSecond {
        get { return result.IncomePerSecond; }
        set { SetIncomePerSecond(value); }
      }
      public Builder SetIncomePerSecond(uint value) {
        PrepareBuilder();
        result.hasIncomePerSecond = true;
        result.incomePerSecond_ = value;
        return this;
      }
      public Builder ClearIncomePerSecond() {
        PrepareBuilder();
        result.hasIncomePerSecond = false;
        result.incomePerSecond_ = 1;
        return this;
      }
      
      public bool HasInitialBalance {
        get { return result.hasInitialBalance; }
      }
      public uint InitialBalance {
        get { return result.InitialBalance; }
        set { SetInitialBalance(value); }
      }
      public Builder SetInitialBalance(uint value) {
        PrepareBuilder();
        result.hasInitialBalance = true;
        result.initialBalance_ = value;
        return this;
      }
      public Builder ClearInitialBalance() {
        PrepareBuilder();
        result.hasInitialBalance = false;
        result.initialBalance_ = 0;
        return this;
      }
      
      public bool HasCapBalance {
        get { return result.hasCapBalance; }
      }
      public uint CapBalance {
        get { return result.CapBalance; }
        set { SetCapBalance(value); }
      }
      public Builder SetCapBalance(uint value) {
        PrepareBuilder();
        result.hasCapBalance = true;
        result.capBalance_ = value;
        return this;
      }
      public Builder ClearCapBalance() {
        PrepareBuilder();
        result.hasCapBalance = false;
        result.capBalance_ = 0;
        return this;
      }
      
      public bool HasStartupPeriod {
        get { return result.hasStartupPeriod; }
      }
      public float StartupPeriod {
        get { return result.StartupPeriod; }
        set { SetStartupPeriod(value); }
      }
      public Builder SetStartupPeriod(float value) {
        PrepareBuilder();
        result.hasStartupPeriod = true;
        result.startupPeriod_ = value;
        return this;
      }
      public Builder ClearStartupPeriod() {
        PrepareBuilder();
        result.hasStartupPeriod = false;
        result.startupPeriod_ = 0F;
        return this;
      }
    }
    static RPCMeterConfig() {
      object.ReferenceEquals(global::bnet.protocol.config.RpcConfig.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
