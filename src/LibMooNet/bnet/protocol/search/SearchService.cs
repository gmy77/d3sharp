// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.search {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class SearchService {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_search_FindMatchesRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.FindMatchesRequest, global::bnet.protocol.search.FindMatchesRequest.Builder> internal__static_bnet_protocol_search_FindMatchesRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_search_FindMatchesResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.FindMatchesResponse, global::bnet.protocol.search.FindMatchesResponse.Builder> internal__static_bnet_protocol_search_FindMatchesResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_search_SetObjectRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.SetObjectRequest, global::bnet.protocol.search.SetObjectRequest.Builder> internal__static_bnet_protocol_search_SetObjectRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_search_RemoveObjectsRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.RemoveObjectsRequest, global::bnet.protocol.search.RemoveObjectsRequest.Builder> internal__static_bnet_protocol_search_RemoveObjectsRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_search_SearchConfig__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.SearchConfig, global::bnet.protocol.search.SearchConfig.Builder> internal__static_bnet_protocol_search_SearchConfig__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_search_SearchUniverseLicenseConfig__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.SearchUniverseLicenseConfig, global::bnet.protocol.search.SearchUniverseLicenseConfig.Builder> internal__static_bnet_protocol_search_SearchUniverseLicenseConfig__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_search_SearchLicenseConfig__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.SearchLicenseConfig, global::bnet.protocol.search.SearchLicenseConfig.Builder> internal__static_bnet_protocol_search_SearchLicenseConfig__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static SearchService() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChlibmV0L3NlYXJjaF9zZXJ2aWNlLnByb3RvEhRibmV0LnByb3RvY29sLnNl" + 
            "YXJjaBoOYm5ldC9ycGMucHJvdG8aF2JuZXQvc2VhcmNoX3R5cGVzLnByb3Rv" + 
            "IoIBChJGaW5kTWF0Y2hlc1JlcXVlc3QSEAoIdW5pdmVyc2UYASACKAkSLQoH" + 
            "ZmlsdGVycxgCIAMoCzIcLmJuZXQucHJvdG9jb2wuc2VhcmNoLkZpbHRlchIZ" + 
            "Cg5zdGFydGluZ19pbmRleBgDIAEoDToBMBIQCgVjb3VudBgEIAEoDToBMCJ+" + 
            "ChNGaW5kTWF0Y2hlc1Jlc3BvbnNlEhoKEnRvdGFsX2NvdW50X2NhcHBlZBgB" + 
            "IAIoDRItCgdvYmplY3RzGAIgAygLMhwuYm5ldC5wcm90b2NvbC5zZWFyY2gu" + 
            "T2JqZWN0EhwKFHRvdGFsX2NvdW50X3VuY2FwcGVkGAMgASgNIkEKEFNldE9i" + 
            "amVjdFJlcXVlc3QSLQoHb2JqZWN0cxgBIAMoCzIcLmJuZXQucHJvdG9jb2wu" + 
            "c2VhcmNoLk9iamVjdCI4ChRSZW1vdmVPYmplY3RzUmVxdWVzdBIQCghzdGFy" + 
            "dF9pZBgBIAIoDBIOCgZlbmRfaWQYAiACKAwiDgoMU2VhcmNoQ29uZmlnInYK" + 
            "G1NlYXJjaFVuaXZlcnNlTGljZW5zZUNvbmZpZxIQCgh1bml2ZXJzZRgBIAIo" + 
            "CRIhChZzZWFyY2hfZW5hYmxlZF9saWNlbnNlGAIgASgNOgEwEiIKF3NlYXJj" + 
            "aF9kaXNhYmxlZF9saWNlbnNlGAMgASgNOgEwImMKE1NlYXJjaExpY2Vuc2VD" + 
            "b25maWcSTAoRdW5pdmVyc2VfbGljZW5zZXMYASADKAsyMS5ibmV0LnByb3Rv" + 
            "Y29sLnNlYXJjaC5TZWFyY2hVbml2ZXJzZUxpY2Vuc2VDb25maWcyrwIKDVNl" + 
            "YXJjaFNlcnZpY2USaAoLRmluZE1hdGNoZXMSKC5ibmV0LnByb3RvY29sLnNl" + 
            "YXJjaC5GaW5kTWF0Y2hlc1JlcXVlc3QaKS5ibmV0LnByb3RvY29sLnNlYXJj" + 
            "aC5GaW5kTWF0Y2hlc1Jlc3BvbnNlIgSAtRgBElUKCVNldE9iamVjdBImLmJu" + 
            "ZXQucHJvdG9jb2wuc2VhcmNoLlNldE9iamVjdFJlcXVlc3QaGi5ibmV0LnBy" + 
            "b3RvY29sLk5PX1JFU1BPTlNFIgSAtRgCEl0KDVJlbW92ZU9iamVjdHMSKi5i" + 
            "bmV0LnByb3RvY29sLnNlYXJjaC5SZW1vdmVPYmplY3RzUmVxdWVzdBoaLmJu" + 
            "ZXQucHJvdG9jb2wuTk9fUkVTUE9OU0UiBIC1GANCA4ABAA==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_search_FindMatchesRequest__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_search_FindMatchesRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.FindMatchesRequest, global::bnet.protocol.search.FindMatchesRequest.Builder>(internal__static_bnet_protocol_search_FindMatchesRequest__Descriptor,
                  new string[] { "Universe", "Filters", "StartingIndex", "Count", });
          internal__static_bnet_protocol_search_FindMatchesResponse__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bnet_protocol_search_FindMatchesResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.FindMatchesResponse, global::bnet.protocol.search.FindMatchesResponse.Builder>(internal__static_bnet_protocol_search_FindMatchesResponse__Descriptor,
                  new string[] { "TotalCountCapped", "Objects", "TotalCountUncapped", });
          internal__static_bnet_protocol_search_SetObjectRequest__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bnet_protocol_search_SetObjectRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.SetObjectRequest, global::bnet.protocol.search.SetObjectRequest.Builder>(internal__static_bnet_protocol_search_SetObjectRequest__Descriptor,
                  new string[] { "Objects", });
          internal__static_bnet_protocol_search_RemoveObjectsRequest__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bnet_protocol_search_RemoveObjectsRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.RemoveObjectsRequest, global::bnet.protocol.search.RemoveObjectsRequest.Builder>(internal__static_bnet_protocol_search_RemoveObjectsRequest__Descriptor,
                  new string[] { "StartId", "EndId", });
          internal__static_bnet_protocol_search_SearchConfig__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bnet_protocol_search_SearchConfig__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.SearchConfig, global::bnet.protocol.search.SearchConfig.Builder>(internal__static_bnet_protocol_search_SearchConfig__Descriptor,
                  new string[] { });
          internal__static_bnet_protocol_search_SearchUniverseLicenseConfig__Descriptor = Descriptor.MessageTypes[5];
          internal__static_bnet_protocol_search_SearchUniverseLicenseConfig__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.SearchUniverseLicenseConfig, global::bnet.protocol.search.SearchUniverseLicenseConfig.Builder>(internal__static_bnet_protocol_search_SearchUniverseLicenseConfig__Descriptor,
                  new string[] { "Universe", "SearchEnabledLicense", "SearchDisabledLicense", });
          internal__static_bnet_protocol_search_SearchLicenseConfig__Descriptor = Descriptor.MessageTypes[6];
          internal__static_bnet_protocol_search_SearchLicenseConfig__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.search.SearchLicenseConfig, global::bnet.protocol.search.SearchLicenseConfig.Builder>(internal__static_bnet_protocol_search_SearchLicenseConfig__Descriptor,
                  new string[] { "UniverseLicenses", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
          global::bnet.protocol.search.SearchTypes.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bnet.protocol.Rpc.Descriptor, 
            global::bnet.protocol.search.SearchTypes.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FindMatchesRequest : pb::GeneratedMessage<FindMatchesRequest, FindMatchesRequest.Builder> {
    private FindMatchesRequest() { }
    private static readonly FindMatchesRequest defaultInstance = new FindMatchesRequest().MakeReadOnly();
    private static readonly string[] _findMatchesRequestFieldNames = new string[] { "count", "filters", "starting_index", "universe" };
    private static readonly uint[] _findMatchesRequestFieldTags = new uint[] { 32, 18, 24, 10 };
    public static FindMatchesRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FindMatchesRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FindMatchesRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_FindMatchesRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FindMatchesRequest, FindMatchesRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_FindMatchesRequest__FieldAccessorTable; }
    }
    
    public const int UniverseFieldNumber = 1;
    private bool hasUniverse;
    private string universe_ = "";
    public bool HasUniverse {
      get { return hasUniverse; }
    }
    public string Universe {
      get { return universe_; }
    }
    
    public const int FiltersFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.search.Filter> filters_ = new pbc::PopsicleList<global::bnet.protocol.search.Filter>();
    public scg::IList<global::bnet.protocol.search.Filter> FiltersList {
      get { return filters_; }
    }
    public int FiltersCount {
      get { return filters_.Count; }
    }
    public global::bnet.protocol.search.Filter GetFilters(int index) {
      return filters_[index];
    }
    
    public const int StartingIndexFieldNumber = 3;
    private bool hasStartingIndex;
    private uint startingIndex_;
    public bool HasStartingIndex {
      get { return hasStartingIndex; }
    }
    public uint StartingIndex {
      get { return startingIndex_; }
    }
    
    public const int CountFieldNumber = 4;
    private bool hasCount;
    private uint count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public uint Count {
      get { return count_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUniverse) return false;
        foreach (global::bnet.protocol.search.Filter element in FiltersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _findMatchesRequestFieldNames;
      if (hasUniverse) {
        output.WriteString(1, field_names[3], Universe);
      }
      if (filters_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], filters_);
      }
      if (hasStartingIndex) {
        output.WriteUInt32(3, field_names[2], StartingIndex);
      }
      if (hasCount) {
        output.WriteUInt32(4, field_names[0], Count);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUniverse) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Universe);
        }
        foreach (global::bnet.protocol.search.Filter element in FiltersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasStartingIndex) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, StartingIndex);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Count);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FindMatchesRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindMatchesRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindMatchesRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindMatchesRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindMatchesRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindMatchesRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FindMatchesRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FindMatchesRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FindMatchesRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindMatchesRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FindMatchesRequest MakeReadOnly() {
      filters_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FindMatchesRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FindMatchesRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FindMatchesRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FindMatchesRequest result;
      
      private FindMatchesRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          FindMatchesRequest original = result;
          result = new FindMatchesRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FindMatchesRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.search.FindMatchesRequest.Descriptor; }
      }
      
      public override FindMatchesRequest DefaultInstanceForType {
        get { return global::bnet.protocol.search.FindMatchesRequest.DefaultInstance; }
      }
      
      public override FindMatchesRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FindMatchesRequest) {
          return MergeFrom((FindMatchesRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FindMatchesRequest other) {
        if (other == global::bnet.protocol.search.FindMatchesRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUniverse) {
          Universe = other.Universe;
        }
        if (other.filters_.Count != 0) {
          result.filters_.Add(other.filters_);
        }
        if (other.HasStartingIndex) {
          StartingIndex = other.StartingIndex;
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_findMatchesRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _findMatchesRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUniverse = input.ReadString(ref result.universe_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.filters_, global::bnet.protocol.search.Filter.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasStartingIndex = input.ReadUInt32(ref result.startingIndex_);
              break;
            }
            case 32: {
              result.hasCount = input.ReadUInt32(ref result.count_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUniverse {
        get { return result.hasUniverse; }
      }
      public string Universe {
        get { return result.Universe; }
        set { SetUniverse(value); }
      }
      public Builder SetUniverse(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUniverse = true;
        result.universe_ = value;
        return this;
      }
      public Builder ClearUniverse() {
        PrepareBuilder();
        result.hasUniverse = false;
        result.universe_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.search.Filter> FiltersList {
        get { return PrepareBuilder().filters_; }
      }
      public int FiltersCount {
        get { return result.FiltersCount; }
      }
      public global::bnet.protocol.search.Filter GetFilters(int index) {
        return result.GetFilters(index);
      }
      public Builder SetFilters(int index, global::bnet.protocol.search.Filter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filters_[index] = value;
        return this;
      }
      public Builder SetFilters(int index, global::bnet.protocol.search.Filter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.filters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFilters(global::bnet.protocol.search.Filter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filters_.Add(value);
        return this;
      }
      public Builder AddFilters(global::bnet.protocol.search.Filter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.filters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFilters(scg::IEnumerable<global::bnet.protocol.search.Filter> values) {
        PrepareBuilder();
        result.filters_.Add(values);
        return this;
      }
      public Builder ClearFilters() {
        PrepareBuilder();
        result.filters_.Clear();
        return this;
      }
      
      public bool HasStartingIndex {
        get { return result.hasStartingIndex; }
      }
      public uint StartingIndex {
        get { return result.StartingIndex; }
        set { SetStartingIndex(value); }
      }
      public Builder SetStartingIndex(uint value) {
        PrepareBuilder();
        result.hasStartingIndex = true;
        result.startingIndex_ = value;
        return this;
      }
      public Builder ClearStartingIndex() {
        PrepareBuilder();
        result.hasStartingIndex = false;
        result.startingIndex_ = 0;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public uint Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(uint value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
    }
    static FindMatchesRequest() {
      object.ReferenceEquals(global::bnet.protocol.search.Proto.SearchService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FindMatchesResponse : pb::GeneratedMessage<FindMatchesResponse, FindMatchesResponse.Builder> {
    private FindMatchesResponse() { }
    private static readonly FindMatchesResponse defaultInstance = new FindMatchesResponse().MakeReadOnly();
    private static readonly string[] _findMatchesResponseFieldNames = new string[] { "objects", "total_count_capped", "total_count_uncapped" };
    private static readonly uint[] _findMatchesResponseFieldTags = new uint[] { 18, 8, 24 };
    public static FindMatchesResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FindMatchesResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FindMatchesResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_FindMatchesResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FindMatchesResponse, FindMatchesResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_FindMatchesResponse__FieldAccessorTable; }
    }
    
    public const int TotalCountCappedFieldNumber = 1;
    private bool hasTotalCountCapped;
    private uint totalCountCapped_;
    public bool HasTotalCountCapped {
      get { return hasTotalCountCapped; }
    }
    public uint TotalCountCapped {
      get { return totalCountCapped_; }
    }
    
    public const int ObjectsFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.search.Object> objects_ = new pbc::PopsicleList<global::bnet.protocol.search.Object>();
    public scg::IList<global::bnet.protocol.search.Object> ObjectsList {
      get { return objects_; }
    }
    public int ObjectsCount {
      get { return objects_.Count; }
    }
    public global::bnet.protocol.search.Object GetObjects(int index) {
      return objects_[index];
    }
    
    public const int TotalCountUncappedFieldNumber = 3;
    private bool hasTotalCountUncapped;
    private uint totalCountUncapped_;
    public bool HasTotalCountUncapped {
      get { return hasTotalCountUncapped; }
    }
    public uint TotalCountUncapped {
      get { return totalCountUncapped_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTotalCountCapped) return false;
        foreach (global::bnet.protocol.search.Object element in ObjectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _findMatchesResponseFieldNames;
      if (hasTotalCountCapped) {
        output.WriteUInt32(1, field_names[1], TotalCountCapped);
      }
      if (objects_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], objects_);
      }
      if (hasTotalCountUncapped) {
        output.WriteUInt32(3, field_names[2], TotalCountUncapped);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTotalCountCapped) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, TotalCountCapped);
        }
        foreach (global::bnet.protocol.search.Object element in ObjectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasTotalCountUncapped) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, TotalCountUncapped);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FindMatchesResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindMatchesResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindMatchesResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindMatchesResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindMatchesResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindMatchesResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FindMatchesResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FindMatchesResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FindMatchesResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindMatchesResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FindMatchesResponse MakeReadOnly() {
      objects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FindMatchesResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FindMatchesResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FindMatchesResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FindMatchesResponse result;
      
      private FindMatchesResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          FindMatchesResponse original = result;
          result = new FindMatchesResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FindMatchesResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.search.FindMatchesResponse.Descriptor; }
      }
      
      public override FindMatchesResponse DefaultInstanceForType {
        get { return global::bnet.protocol.search.FindMatchesResponse.DefaultInstance; }
      }
      
      public override FindMatchesResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FindMatchesResponse) {
          return MergeFrom((FindMatchesResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FindMatchesResponse other) {
        if (other == global::bnet.protocol.search.FindMatchesResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTotalCountCapped) {
          TotalCountCapped = other.TotalCountCapped;
        }
        if (other.objects_.Count != 0) {
          result.objects_.Add(other.objects_);
        }
        if (other.HasTotalCountUncapped) {
          TotalCountUncapped = other.TotalCountUncapped;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_findMatchesResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _findMatchesResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTotalCountCapped = input.ReadUInt32(ref result.totalCountCapped_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.objects_, global::bnet.protocol.search.Object.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasTotalCountUncapped = input.ReadUInt32(ref result.totalCountUncapped_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTotalCountCapped {
        get { return result.hasTotalCountCapped; }
      }
      public uint TotalCountCapped {
        get { return result.TotalCountCapped; }
        set { SetTotalCountCapped(value); }
      }
      public Builder SetTotalCountCapped(uint value) {
        PrepareBuilder();
        result.hasTotalCountCapped = true;
        result.totalCountCapped_ = value;
        return this;
      }
      public Builder ClearTotalCountCapped() {
        PrepareBuilder();
        result.hasTotalCountCapped = false;
        result.totalCountCapped_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.search.Object> ObjectsList {
        get { return PrepareBuilder().objects_; }
      }
      public int ObjectsCount {
        get { return result.ObjectsCount; }
      }
      public global::bnet.protocol.search.Object GetObjects(int index) {
        return result.GetObjects(index);
      }
      public Builder SetObjects(int index, global::bnet.protocol.search.Object value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.objects_[index] = value;
        return this;
      }
      public Builder SetObjects(int index, global::bnet.protocol.search.Object.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.objects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddObjects(global::bnet.protocol.search.Object value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.objects_.Add(value);
        return this;
      }
      public Builder AddObjects(global::bnet.protocol.search.Object.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.objects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeObjects(scg::IEnumerable<global::bnet.protocol.search.Object> values) {
        PrepareBuilder();
        result.objects_.Add(values);
        return this;
      }
      public Builder ClearObjects() {
        PrepareBuilder();
        result.objects_.Clear();
        return this;
      }
      
      public bool HasTotalCountUncapped {
        get { return result.hasTotalCountUncapped; }
      }
      public uint TotalCountUncapped {
        get { return result.TotalCountUncapped; }
        set { SetTotalCountUncapped(value); }
      }
      public Builder SetTotalCountUncapped(uint value) {
        PrepareBuilder();
        result.hasTotalCountUncapped = true;
        result.totalCountUncapped_ = value;
        return this;
      }
      public Builder ClearTotalCountUncapped() {
        PrepareBuilder();
        result.hasTotalCountUncapped = false;
        result.totalCountUncapped_ = 0;
        return this;
      }
    }
    static FindMatchesResponse() {
      object.ReferenceEquals(global::bnet.protocol.search.Proto.SearchService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SetObjectRequest : pb::GeneratedMessage<SetObjectRequest, SetObjectRequest.Builder> {
    private SetObjectRequest() { }
    private static readonly SetObjectRequest defaultInstance = new SetObjectRequest().MakeReadOnly();
    private static readonly string[] _setObjectRequestFieldNames = new string[] { "objects" };
    private static readonly uint[] _setObjectRequestFieldTags = new uint[] { 10 };
    public static SetObjectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SetObjectRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SetObjectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_SetObjectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SetObjectRequest, SetObjectRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_SetObjectRequest__FieldAccessorTable; }
    }
    
    public const int ObjectsFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.search.Object> objects_ = new pbc::PopsicleList<global::bnet.protocol.search.Object>();
    public scg::IList<global::bnet.protocol.search.Object> ObjectsList {
      get { return objects_; }
    }
    public int ObjectsCount {
      get { return objects_.Count; }
    }
    public global::bnet.protocol.search.Object GetObjects(int index) {
      return objects_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.search.Object element in ObjectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _setObjectRequestFieldNames;
      if (objects_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], objects_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.search.Object element in ObjectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SetObjectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SetObjectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SetObjectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SetObjectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SetObjectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SetObjectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SetObjectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SetObjectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SetObjectRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SetObjectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SetObjectRequest MakeReadOnly() {
      objects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SetObjectRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SetObjectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SetObjectRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SetObjectRequest result;
      
      private SetObjectRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SetObjectRequest original = result;
          result = new SetObjectRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SetObjectRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.search.SetObjectRequest.Descriptor; }
      }
      
      public override SetObjectRequest DefaultInstanceForType {
        get { return global::bnet.protocol.search.SetObjectRequest.DefaultInstance; }
      }
      
      public override SetObjectRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SetObjectRequest) {
          return MergeFrom((SetObjectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SetObjectRequest other) {
        if (other == global::bnet.protocol.search.SetObjectRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.objects_.Count != 0) {
          result.objects_.Add(other.objects_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_setObjectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _setObjectRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.objects_, global::bnet.protocol.search.Object.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.search.Object> ObjectsList {
        get { return PrepareBuilder().objects_; }
      }
      public int ObjectsCount {
        get { return result.ObjectsCount; }
      }
      public global::bnet.protocol.search.Object GetObjects(int index) {
        return result.GetObjects(index);
      }
      public Builder SetObjects(int index, global::bnet.protocol.search.Object value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.objects_[index] = value;
        return this;
      }
      public Builder SetObjects(int index, global::bnet.protocol.search.Object.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.objects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddObjects(global::bnet.protocol.search.Object value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.objects_.Add(value);
        return this;
      }
      public Builder AddObjects(global::bnet.protocol.search.Object.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.objects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeObjects(scg::IEnumerable<global::bnet.protocol.search.Object> values) {
        PrepareBuilder();
        result.objects_.Add(values);
        return this;
      }
      public Builder ClearObjects() {
        PrepareBuilder();
        result.objects_.Clear();
        return this;
      }
    }
    static SetObjectRequest() {
      object.ReferenceEquals(global::bnet.protocol.search.Proto.SearchService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RemoveObjectsRequest : pb::GeneratedMessage<RemoveObjectsRequest, RemoveObjectsRequest.Builder> {
    private RemoveObjectsRequest() { }
    private static readonly RemoveObjectsRequest defaultInstance = new RemoveObjectsRequest().MakeReadOnly();
    private static readonly string[] _removeObjectsRequestFieldNames = new string[] { "end_id", "start_id" };
    private static readonly uint[] _removeObjectsRequestFieldTags = new uint[] { 18, 10 };
    public static RemoveObjectsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RemoveObjectsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RemoveObjectsRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_RemoveObjectsRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RemoveObjectsRequest, RemoveObjectsRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_RemoveObjectsRequest__FieldAccessorTable; }
    }
    
    public const int StartIdFieldNumber = 1;
    private bool hasStartId;
    private pb::ByteString startId_ = pb::ByteString.Empty;
    public bool HasStartId {
      get { return hasStartId; }
    }
    public pb::ByteString StartId {
      get { return startId_; }
    }
    
    public const int EndIdFieldNumber = 2;
    private bool hasEndId;
    private pb::ByteString endId_ = pb::ByteString.Empty;
    public bool HasEndId {
      get { return hasEndId; }
    }
    public pb::ByteString EndId {
      get { return endId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStartId) return false;
        if (!hasEndId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _removeObjectsRequestFieldNames;
      if (hasStartId) {
        output.WriteBytes(1, field_names[1], StartId);
      }
      if (hasEndId) {
        output.WriteBytes(2, field_names[0], EndId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStartId) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, StartId);
        }
        if (hasEndId) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, EndId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RemoveObjectsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoveObjectsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoveObjectsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoveObjectsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoveObjectsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoveObjectsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RemoveObjectsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RemoveObjectsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RemoveObjectsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoveObjectsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RemoveObjectsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RemoveObjectsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RemoveObjectsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RemoveObjectsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RemoveObjectsRequest result;
      
      private RemoveObjectsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RemoveObjectsRequest original = result;
          result = new RemoveObjectsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RemoveObjectsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.search.RemoveObjectsRequest.Descriptor; }
      }
      
      public override RemoveObjectsRequest DefaultInstanceForType {
        get { return global::bnet.protocol.search.RemoveObjectsRequest.DefaultInstance; }
      }
      
      public override RemoveObjectsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RemoveObjectsRequest) {
          return MergeFrom((RemoveObjectsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RemoveObjectsRequest other) {
        if (other == global::bnet.protocol.search.RemoveObjectsRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartId) {
          StartId = other.StartId;
        }
        if (other.HasEndId) {
          EndId = other.EndId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_removeObjectsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _removeObjectsRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasStartId = input.ReadBytes(ref result.startId_);
              break;
            }
            case 18: {
              result.hasEndId = input.ReadBytes(ref result.endId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStartId {
        get { return result.hasStartId; }
      }
      public pb::ByteString StartId {
        get { return result.StartId; }
        set { SetStartId(value); }
      }
      public Builder SetStartId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStartId = true;
        result.startId_ = value;
        return this;
      }
      public Builder ClearStartId() {
        PrepareBuilder();
        result.hasStartId = false;
        result.startId_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasEndId {
        get { return result.hasEndId; }
      }
      public pb::ByteString EndId {
        get { return result.EndId; }
        set { SetEndId(value); }
      }
      public Builder SetEndId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEndId = true;
        result.endId_ = value;
        return this;
      }
      public Builder ClearEndId() {
        PrepareBuilder();
        result.hasEndId = false;
        result.endId_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RemoveObjectsRequest() {
      object.ReferenceEquals(global::bnet.protocol.search.Proto.SearchService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SearchConfig : pb::GeneratedMessage<SearchConfig, SearchConfig.Builder> {
    private SearchConfig() { }
    private static readonly SearchConfig defaultInstance = new SearchConfig().MakeReadOnly();
    private static readonly string[] _searchConfigFieldNames = new string[] {  };
    private static readonly uint[] _searchConfigFieldTags = new uint[] {  };
    public static SearchConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SearchConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SearchConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_SearchConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SearchConfig, SearchConfig.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_SearchConfig__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _searchConfigFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SearchConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SearchConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SearchConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SearchConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SearchConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SearchConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SearchConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SearchConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SearchConfig result;
      
      private SearchConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          SearchConfig original = result;
          result = new SearchConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SearchConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.search.SearchConfig.Descriptor; }
      }
      
      public override SearchConfig DefaultInstanceForType {
        get { return global::bnet.protocol.search.SearchConfig.DefaultInstance; }
      }
      
      public override SearchConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SearchConfig) {
          return MergeFrom((SearchConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SearchConfig other) {
        if (other == global::bnet.protocol.search.SearchConfig.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_searchConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _searchConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static SearchConfig() {
      object.ReferenceEquals(global::bnet.protocol.search.Proto.SearchService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SearchUniverseLicenseConfig : pb::GeneratedMessage<SearchUniverseLicenseConfig, SearchUniverseLicenseConfig.Builder> {
    private SearchUniverseLicenseConfig() { }
    private static readonly SearchUniverseLicenseConfig defaultInstance = new SearchUniverseLicenseConfig().MakeReadOnly();
    private static readonly string[] _searchUniverseLicenseConfigFieldNames = new string[] { "search_disabled_license", "search_enabled_license", "universe" };
    private static readonly uint[] _searchUniverseLicenseConfigFieldTags = new uint[] { 24, 16, 10 };
    public static SearchUniverseLicenseConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SearchUniverseLicenseConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SearchUniverseLicenseConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_SearchUniverseLicenseConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SearchUniverseLicenseConfig, SearchUniverseLicenseConfig.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_SearchUniverseLicenseConfig__FieldAccessorTable; }
    }
    
    public const int UniverseFieldNumber = 1;
    private bool hasUniverse;
    private string universe_ = "";
    public bool HasUniverse {
      get { return hasUniverse; }
    }
    public string Universe {
      get { return universe_; }
    }
    
    public const int SearchEnabledLicenseFieldNumber = 2;
    private bool hasSearchEnabledLicense;
    private uint searchEnabledLicense_;
    public bool HasSearchEnabledLicense {
      get { return hasSearchEnabledLicense; }
    }
    public uint SearchEnabledLicense {
      get { return searchEnabledLicense_; }
    }
    
    public const int SearchDisabledLicenseFieldNumber = 3;
    private bool hasSearchDisabledLicense;
    private uint searchDisabledLicense_;
    public bool HasSearchDisabledLicense {
      get { return hasSearchDisabledLicense; }
    }
    public uint SearchDisabledLicense {
      get { return searchDisabledLicense_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUniverse) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _searchUniverseLicenseConfigFieldNames;
      if (hasUniverse) {
        output.WriteString(1, field_names[2], Universe);
      }
      if (hasSearchEnabledLicense) {
        output.WriteUInt32(2, field_names[1], SearchEnabledLicense);
      }
      if (hasSearchDisabledLicense) {
        output.WriteUInt32(3, field_names[0], SearchDisabledLicense);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUniverse) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Universe);
        }
        if (hasSearchEnabledLicense) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SearchEnabledLicense);
        }
        if (hasSearchDisabledLicense) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, SearchDisabledLicense);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SearchUniverseLicenseConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchUniverseLicenseConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchUniverseLicenseConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchUniverseLicenseConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchUniverseLicenseConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchUniverseLicenseConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SearchUniverseLicenseConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SearchUniverseLicenseConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SearchUniverseLicenseConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchUniverseLicenseConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SearchUniverseLicenseConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SearchUniverseLicenseConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SearchUniverseLicenseConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SearchUniverseLicenseConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SearchUniverseLicenseConfig result;
      
      private SearchUniverseLicenseConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          SearchUniverseLicenseConfig original = result;
          result = new SearchUniverseLicenseConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SearchUniverseLicenseConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.search.SearchUniverseLicenseConfig.Descriptor; }
      }
      
      public override SearchUniverseLicenseConfig DefaultInstanceForType {
        get { return global::bnet.protocol.search.SearchUniverseLicenseConfig.DefaultInstance; }
      }
      
      public override SearchUniverseLicenseConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SearchUniverseLicenseConfig) {
          return MergeFrom((SearchUniverseLicenseConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SearchUniverseLicenseConfig other) {
        if (other == global::bnet.protocol.search.SearchUniverseLicenseConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUniverse) {
          Universe = other.Universe;
        }
        if (other.HasSearchEnabledLicense) {
          SearchEnabledLicense = other.SearchEnabledLicense;
        }
        if (other.HasSearchDisabledLicense) {
          SearchDisabledLicense = other.SearchDisabledLicense;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_searchUniverseLicenseConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _searchUniverseLicenseConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUniverse = input.ReadString(ref result.universe_);
              break;
            }
            case 16: {
              result.hasSearchEnabledLicense = input.ReadUInt32(ref result.searchEnabledLicense_);
              break;
            }
            case 24: {
              result.hasSearchDisabledLicense = input.ReadUInt32(ref result.searchDisabledLicense_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUniverse {
        get { return result.hasUniverse; }
      }
      public string Universe {
        get { return result.Universe; }
        set { SetUniverse(value); }
      }
      public Builder SetUniverse(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUniverse = true;
        result.universe_ = value;
        return this;
      }
      public Builder ClearUniverse() {
        PrepareBuilder();
        result.hasUniverse = false;
        result.universe_ = "";
        return this;
      }
      
      public bool HasSearchEnabledLicense {
        get { return result.hasSearchEnabledLicense; }
      }
      public uint SearchEnabledLicense {
        get { return result.SearchEnabledLicense; }
        set { SetSearchEnabledLicense(value); }
      }
      public Builder SetSearchEnabledLicense(uint value) {
        PrepareBuilder();
        result.hasSearchEnabledLicense = true;
        result.searchEnabledLicense_ = value;
        return this;
      }
      public Builder ClearSearchEnabledLicense() {
        PrepareBuilder();
        result.hasSearchEnabledLicense = false;
        result.searchEnabledLicense_ = 0;
        return this;
      }
      
      public bool HasSearchDisabledLicense {
        get { return result.hasSearchDisabledLicense; }
      }
      public uint SearchDisabledLicense {
        get { return result.SearchDisabledLicense; }
        set { SetSearchDisabledLicense(value); }
      }
      public Builder SetSearchDisabledLicense(uint value) {
        PrepareBuilder();
        result.hasSearchDisabledLicense = true;
        result.searchDisabledLicense_ = value;
        return this;
      }
      public Builder ClearSearchDisabledLicense() {
        PrepareBuilder();
        result.hasSearchDisabledLicense = false;
        result.searchDisabledLicense_ = 0;
        return this;
      }
    }
    static SearchUniverseLicenseConfig() {
      object.ReferenceEquals(global::bnet.protocol.search.Proto.SearchService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SearchLicenseConfig : pb::GeneratedMessage<SearchLicenseConfig, SearchLicenseConfig.Builder> {
    private SearchLicenseConfig() { }
    private static readonly SearchLicenseConfig defaultInstance = new SearchLicenseConfig().MakeReadOnly();
    private static readonly string[] _searchLicenseConfigFieldNames = new string[] { "universe_licenses" };
    private static readonly uint[] _searchLicenseConfigFieldTags = new uint[] { 10 };
    public static SearchLicenseConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SearchLicenseConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SearchLicenseConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_SearchLicenseConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SearchLicenseConfig, SearchLicenseConfig.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.search.Proto.SearchService.internal__static_bnet_protocol_search_SearchLicenseConfig__FieldAccessorTable; }
    }
    
    public const int UniverseLicensesFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.search.SearchUniverseLicenseConfig> universeLicenses_ = new pbc::PopsicleList<global::bnet.protocol.search.SearchUniverseLicenseConfig>();
    public scg::IList<global::bnet.protocol.search.SearchUniverseLicenseConfig> UniverseLicensesList {
      get { return universeLicenses_; }
    }
    public int UniverseLicensesCount {
      get { return universeLicenses_.Count; }
    }
    public global::bnet.protocol.search.SearchUniverseLicenseConfig GetUniverseLicenses(int index) {
      return universeLicenses_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.search.SearchUniverseLicenseConfig element in UniverseLicensesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _searchLicenseConfigFieldNames;
      if (universeLicenses_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], universeLicenses_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.search.SearchUniverseLicenseConfig element in UniverseLicensesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SearchLicenseConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchLicenseConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchLicenseConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchLicenseConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchLicenseConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchLicenseConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SearchLicenseConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SearchLicenseConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SearchLicenseConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchLicenseConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SearchLicenseConfig MakeReadOnly() {
      universeLicenses_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SearchLicenseConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SearchLicenseConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SearchLicenseConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SearchLicenseConfig result;
      
      private SearchLicenseConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          SearchLicenseConfig original = result;
          result = new SearchLicenseConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SearchLicenseConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.search.SearchLicenseConfig.Descriptor; }
      }
      
      public override SearchLicenseConfig DefaultInstanceForType {
        get { return global::bnet.protocol.search.SearchLicenseConfig.DefaultInstance; }
      }
      
      public override SearchLicenseConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SearchLicenseConfig) {
          return MergeFrom((SearchLicenseConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SearchLicenseConfig other) {
        if (other == global::bnet.protocol.search.SearchLicenseConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.universeLicenses_.Count != 0) {
          result.universeLicenses_.Add(other.universeLicenses_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_searchLicenseConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _searchLicenseConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.universeLicenses_, global::bnet.protocol.search.SearchUniverseLicenseConfig.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.search.SearchUniverseLicenseConfig> UniverseLicensesList {
        get { return PrepareBuilder().universeLicenses_; }
      }
      public int UniverseLicensesCount {
        get { return result.UniverseLicensesCount; }
      }
      public global::bnet.protocol.search.SearchUniverseLicenseConfig GetUniverseLicenses(int index) {
        return result.GetUniverseLicenses(index);
      }
      public Builder SetUniverseLicenses(int index, global::bnet.protocol.search.SearchUniverseLicenseConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.universeLicenses_[index] = value;
        return this;
      }
      public Builder SetUniverseLicenses(int index, global::bnet.protocol.search.SearchUniverseLicenseConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.universeLicenses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUniverseLicenses(global::bnet.protocol.search.SearchUniverseLicenseConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.universeLicenses_.Add(value);
        return this;
      }
      public Builder AddUniverseLicenses(global::bnet.protocol.search.SearchUniverseLicenseConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.universeLicenses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUniverseLicenses(scg::IEnumerable<global::bnet.protocol.search.SearchUniverseLicenseConfig> values) {
        PrepareBuilder();
        result.universeLicenses_.Add(values);
        return this;
      }
      public Builder ClearUniverseLicenses() {
        PrepareBuilder();
        result.universeLicenses_.Clear();
        return this;
      }
    }
    static SearchLicenseConfig() {
      object.ReferenceEquals(global::bnet.protocol.search.Proto.SearchService.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class SearchService : pb::IService {
    public abstract void FindMatches(
        pb::IRpcController controller,
        global::bnet.protocol.search.FindMatchesRequest request,
        global::System.Action<global::bnet.protocol.search.FindMatchesResponse> done);
    public abstract void SetObject(
        pb::IRpcController controller,
        global::bnet.protocol.search.SetObjectRequest request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    public abstract void RemoveObjects(
        pb::IRpcController controller,
        global::bnet.protocol.search.RemoveObjectsRequest request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.SearchService.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.FindMatches(controller, (global::bnet.protocol.search.FindMatchesRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.search.FindMatchesResponse>(
              done));
          return;
        case 1:
          this.SetObject(controller, (global::bnet.protocol.search.SetObjectRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        case 2:
          this.RemoveObjects(controller, (global::bnet.protocol.search.RemoveObjectsRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.search.FindMatchesRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.search.SetObjectRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.search.RemoveObjectsRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.search.FindMatchesResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        case 2:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.search.SearchService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void FindMatches(
          pb::IRpcController controller,
          global::bnet.protocol.search.FindMatchesRequest request,
          global::System.Action<global::bnet.protocol.search.FindMatchesResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.search.FindMatchesResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.search.FindMatchesResponse, global::bnet.protocol.search.FindMatchesResponse.Builder>(done, global::bnet.protocol.search.FindMatchesResponse.DefaultInstance));
      }
      
      public override void SetObject(
          pb::IRpcController controller,
          global::bnet.protocol.search.SetObjectRequest request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void RemoveObjects(
          pb::IRpcController controller,
          global::bnet.protocol.search.RemoveObjectsRequest request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
