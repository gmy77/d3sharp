// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Rpc {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      registry.Add(global::bnet.protocol.Rpc.MethodId);
    }
    #endregion
    #region Extensions
    public const int MethodIdFieldNumber = 50000;
    public static pb::GeneratedExtensionBase<uint> MethodId;
    #endregion
    
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_NO_RESPONSE__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder> internal__static_bnet_protocol_NO_RESPONSE__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_Address__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.Address, global::bnet.protocol.Address.Builder> internal__static_bnet_protocol_Address__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_ProcessId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.ProcessId, global::bnet.protocol.ProcessId.Builder> internal__static_bnet_protocol_ProcessId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_ObjectAddress__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.ObjectAddress, global::bnet.protocol.ObjectAddress.Builder> internal__static_bnet_protocol_ObjectAddress__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_NoData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder> internal__static_bnet_protocol_NoData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_ErrorInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.ErrorInfo, global::bnet.protocol.ErrorInfo.Builder> internal__static_bnet_protocol_ErrorInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_Header__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.Header, global::bnet.protocol.Header.Builder> internal__static_bnet_protocol_Header__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Rpc() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5ibmV0L3JwYy5wcm90bxINYm5ldC5wcm90b2NvbBogZ29vZ2xlL3Byb3Rv" + 
          "YnVmL2Rlc2NyaXB0b3IucHJvdG8iDQoLTk9fUkVTUE9OU0UiKAoHQWRkcmVz" + 
          "cxIPCgdhZGRyZXNzGAEgAigJEgwKBHBvcnQYAiABKA0iKQoJUHJvY2Vzc0lk" + 
          "Eg0KBWxhYmVsGAEgAigNEg0KBWVwb2NoGAIgAigNIk0KDU9iamVjdEFkZHJl" + 
          "c3MSJgoEaG9zdBgBIAIoCzIYLmJuZXQucHJvdG9jb2wuUHJvY2Vzc0lkEhQK" + 
          "CW9iamVjdF9pZBgCIAEoBDoBMCIICgZOb0RhdGEiegoJRXJyb3JJbmZvEjQK" + 
          "Dm9iamVjdF9hZGRyZXNzGAEgAigLMhwuYm5ldC5wcm90b2NvbC5PYmplY3RB" + 
          "ZGRyZXNzEg4KBnN0YXR1cxgCIAIoDRIUCgxzZXJ2aWNlX2hhc2gYAyACKA0S" + 
          "EQoJbWV0aG9kX2lkGAQgAigNIqEBCgZIZWFkZXISEgoKc2VydmljZV9pZBgB" + 
          "IAIoDRIRCgltZXRob2RfaWQYAiABKA0SDQoFdG9rZW4YAyACKA0SFAoJb2Jq" + 
          "ZWN0X2lkGAQgASgEOgEwEg8KBHNpemUYBSABKA06ATASEQoGc3RhdHVzGAYg" + 
          "ASgNOgEwEicKBWVycm9yGAcgAygLMhguYm5ldC5wcm90b2NvbC5FcnJvcklu" + 
          "Zm86MwoJbWV0aG9kX2lkEh4uZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlv" + 
          "bnMY0IYDIAEoDQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_NO_RESPONSE__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_NO_RESPONSE__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(internal__static_bnet_protocol_NO_RESPONSE__Descriptor,
                new string[] { });
        internal__static_bnet_protocol_Address__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_Address__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.Address, global::bnet.protocol.Address.Builder>(internal__static_bnet_protocol_Address__Descriptor,
                new string[] { "Address_", "Port", });
        internal__static_bnet_protocol_ProcessId__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_ProcessId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.ProcessId, global::bnet.protocol.ProcessId.Builder>(internal__static_bnet_protocol_ProcessId__Descriptor,
                new string[] { "Label", "Epoch", });
        internal__static_bnet_protocol_ObjectAddress__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_ObjectAddress__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.ObjectAddress, global::bnet.protocol.ObjectAddress.Builder>(internal__static_bnet_protocol_ObjectAddress__Descriptor,
                new string[] { "Host", "ObjectId", });
        internal__static_bnet_protocol_NoData__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_NoData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(internal__static_bnet_protocol_NoData__Descriptor,
                new string[] { });
        internal__static_bnet_protocol_ErrorInfo__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_ErrorInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.ErrorInfo, global::bnet.protocol.ErrorInfo.Builder>(internal__static_bnet_protocol_ErrorInfo__Descriptor,
                new string[] { "ObjectAddress", "Status", "ServiceHash", "MethodId", });
        internal__static_bnet_protocol_Header__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bnet_protocol_Header__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.Header, global::bnet.protocol.Header.Builder>(internal__static_bnet_protocol_Header__Descriptor,
                new string[] { "ServiceId", "MethodId", "Token", "ObjectId", "Size", "Status", "Error", });
        global::bnet.protocol.Rpc.MethodId = pb::GeneratedSingleExtension<uint>.CreateInstance(global::bnet.protocol.Rpc.Descriptor.Extensions[0]);
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.DescriptorProtoFile.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NO_RESPONSE : pb::GeneratedMessage<NO_RESPONSE, NO_RESPONSE.Builder> {
    private NO_RESPONSE() { }
    private static readonly NO_RESPONSE defaultInstance = new NO_RESPONSE().MakeReadOnly();
    private static readonly string[] _nORESPONSEFieldNames = new string[] {  };
    private static readonly uint[] _nORESPONSEFieldTags = new uint[] {  };
    public static NO_RESPONSE DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NO_RESPONSE DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NO_RESPONSE ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_NO_RESPONSE__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NO_RESPONSE, NO_RESPONSE.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_NO_RESPONSE__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nORESPONSEFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NO_RESPONSE ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NO_RESPONSE ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NO_RESPONSE ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NO_RESPONSE ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NO_RESPONSE ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NO_RESPONSE ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NO_RESPONSE ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NO_RESPONSE ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NO_RESPONSE ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NO_RESPONSE ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NO_RESPONSE MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NO_RESPONSE prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NO_RESPONSE, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NO_RESPONSE cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NO_RESPONSE result;
      
      private NO_RESPONSE PrepareBuilder() {
        if (resultIsReadOnly) {
          NO_RESPONSE original = result;
          result = new NO_RESPONSE();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NO_RESPONSE MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.NO_RESPONSE.Descriptor; }
      }
      
      public override NO_RESPONSE DefaultInstanceForType {
        get { return global::bnet.protocol.NO_RESPONSE.DefaultInstance; }
      }
      
      public override NO_RESPONSE BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NO_RESPONSE) {
          return MergeFrom((NO_RESPONSE) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NO_RESPONSE other) {
        if (other == global::bnet.protocol.NO_RESPONSE.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nORESPONSEFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nORESPONSEFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NO_RESPONSE() {
      object.ReferenceEquals(global::bnet.protocol.Rpc.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Address : pb::GeneratedMessage<Address, Address.Builder> {
    private Address() { }
    private static readonly Address defaultInstance = new Address().MakeReadOnly();
    private static readonly string[] _addressFieldNames = new string[] { "address", "port" };
    private static readonly uint[] _addressFieldTags = new uint[] { 10, 16 };
    public static Address DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Address DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Address ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_Address__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Address, Address.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_Address__FieldAccessorTable; }
    }
    
    public const int Address_FieldNumber = 1;
    private bool hasAddress_;
    private string address_ = "";
    public bool HasAddress_ {
      get { return hasAddress_; }
    }
    public string Address_ {
      get { return address_; }
    }
    
    public const int PortFieldNumber = 2;
    private bool hasPort;
    private uint port_;
    public bool HasPort {
      get { return hasPort; }
    }
    public uint Port {
      get { return port_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddress_) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _addressFieldNames;
      if (hasAddress_) {
        output.WriteString(1, field_names[0], Address_);
      }
      if (hasPort) {
        output.WriteUInt32(2, field_names[1], Port);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddress_) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Address_);
        }
        if (hasPort) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Port);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Address ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Address ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Address ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Address ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Address ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Address ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Address ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Address ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Address ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Address ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Address MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Address prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Address, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Address cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Address result;
      
      private Address PrepareBuilder() {
        if (resultIsReadOnly) {
          Address original = result;
          result = new Address();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Address MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.Address.Descriptor; }
      }
      
      public override Address DefaultInstanceForType {
        get { return global::bnet.protocol.Address.DefaultInstance; }
      }
      
      public override Address BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Address) {
          return MergeFrom((Address) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Address other) {
        if (other == global::bnet.protocol.Address.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddress_) {
          Address_ = other.Address_;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_addressFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _addressFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAddress_ = input.ReadString(ref result.address_);
              break;
            }
            case 16: {
              result.hasPort = input.ReadUInt32(ref result.port_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddress_ {
        get { return result.hasAddress_; }
      }
      public string Address_ {
        get { return result.Address_; }
        set { SetAddress_(value); }
      }
      public Builder SetAddress_(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAddress_ = true;
        result.address_ = value;
        return this;
      }
      public Builder ClearAddress_() {
        PrepareBuilder();
        result.hasAddress_ = false;
        result.address_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      public uint Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      public Builder SetPort(uint value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
    }
    static Address() {
      object.ReferenceEquals(global::bnet.protocol.Rpc.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ProcessId : pb::GeneratedMessage<ProcessId, ProcessId.Builder> {
    private ProcessId() { }
    private static readonly ProcessId defaultInstance = new ProcessId().MakeReadOnly();
    private static readonly string[] _processIdFieldNames = new string[] { "epoch", "label" };
    private static readonly uint[] _processIdFieldTags = new uint[] { 16, 8 };
    public static ProcessId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProcessId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProcessId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_ProcessId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProcessId, ProcessId.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_ProcessId__FieldAccessorTable; }
    }
    
    public const int LabelFieldNumber = 1;
    private bool hasLabel;
    private uint label_;
    public bool HasLabel {
      get { return hasLabel; }
    }
    public uint Label {
      get { return label_; }
    }
    
    public const int EpochFieldNumber = 2;
    private bool hasEpoch;
    private uint epoch_;
    public bool HasEpoch {
      get { return hasEpoch; }
    }
    public uint Epoch {
      get { return epoch_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLabel) return false;
        if (!hasEpoch) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _processIdFieldNames;
      if (hasLabel) {
        output.WriteUInt32(1, field_names[1], Label);
      }
      if (hasEpoch) {
        output.WriteUInt32(2, field_names[0], Epoch);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLabel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Label);
        }
        if (hasEpoch) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Epoch);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProcessId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProcessId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProcessId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProcessId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProcessId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProcessId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProcessId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProcessId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProcessId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProcessId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProcessId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProcessId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ProcessId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProcessId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProcessId result;
      
      private ProcessId PrepareBuilder() {
        if (resultIsReadOnly) {
          ProcessId original = result;
          result = new ProcessId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProcessId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.ProcessId.Descriptor; }
      }
      
      public override ProcessId DefaultInstanceForType {
        get { return global::bnet.protocol.ProcessId.DefaultInstance; }
      }
      
      public override ProcessId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProcessId) {
          return MergeFrom((ProcessId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProcessId other) {
        if (other == global::bnet.protocol.ProcessId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLabel) {
          Label = other.Label;
        }
        if (other.HasEpoch) {
          Epoch = other.Epoch;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_processIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _processIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLabel = input.ReadUInt32(ref result.label_);
              break;
            }
            case 16: {
              result.hasEpoch = input.ReadUInt32(ref result.epoch_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLabel {
        get { return result.hasLabel; }
      }
      public uint Label {
        get { return result.Label; }
        set { SetLabel(value); }
      }
      public Builder SetLabel(uint value) {
        PrepareBuilder();
        result.hasLabel = true;
        result.label_ = value;
        return this;
      }
      public Builder ClearLabel() {
        PrepareBuilder();
        result.hasLabel = false;
        result.label_ = 0;
        return this;
      }
      
      public bool HasEpoch {
        get { return result.hasEpoch; }
      }
      public uint Epoch {
        get { return result.Epoch; }
        set { SetEpoch(value); }
      }
      public Builder SetEpoch(uint value) {
        PrepareBuilder();
        result.hasEpoch = true;
        result.epoch_ = value;
        return this;
      }
      public Builder ClearEpoch() {
        PrepareBuilder();
        result.hasEpoch = false;
        result.epoch_ = 0;
        return this;
      }
    }
    static ProcessId() {
      object.ReferenceEquals(global::bnet.protocol.Rpc.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ObjectAddress : pb::GeneratedMessage<ObjectAddress, ObjectAddress.Builder> {
    private ObjectAddress() { }
    private static readonly ObjectAddress defaultInstance = new ObjectAddress().MakeReadOnly();
    private static readonly string[] _objectAddressFieldNames = new string[] { "host", "object_id" };
    private static readonly uint[] _objectAddressFieldTags = new uint[] { 10, 16 };
    public static ObjectAddress DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ObjectAddress DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ObjectAddress ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_ObjectAddress__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ObjectAddress, ObjectAddress.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_ObjectAddress__FieldAccessorTable; }
    }
    
    public const int HostFieldNumber = 1;
    private bool hasHost;
    private global::bnet.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bnet.protocol.ProcessId Host {
      get { return host_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public const int ObjectIdFieldNumber = 2;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHost) return false;
        if (!Host.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _objectAddressFieldNames;
      if (hasHost) {
        output.WriteMessage(1, field_names[0], Host);
      }
      if (hasObjectId) {
        output.WriteUInt64(2, field_names[1], ObjectId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Host);
        }
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ObjectId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ObjectAddress ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ObjectAddress ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ObjectAddress ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ObjectAddress ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ObjectAddress ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ObjectAddress ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ObjectAddress ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ObjectAddress ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ObjectAddress ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ObjectAddress ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ObjectAddress MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ObjectAddress prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ObjectAddress, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ObjectAddress cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ObjectAddress result;
      
      private ObjectAddress PrepareBuilder() {
        if (resultIsReadOnly) {
          ObjectAddress original = result;
          result = new ObjectAddress();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ObjectAddress MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.ObjectAddress.Descriptor; }
      }
      
      public override ObjectAddress DefaultInstanceForType {
        get { return global::bnet.protocol.ObjectAddress.DefaultInstance; }
      }
      
      public override ObjectAddress BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ObjectAddress) {
          return MergeFrom((ObjectAddress) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ObjectAddress other) {
        if (other == global::bnet.protocol.ObjectAddress.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_objectAddressFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _objectAddressFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bnet.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bnet.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
    }
    static ObjectAddress() {
      object.ReferenceEquals(global::bnet.protocol.Rpc.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NoData : pb::GeneratedMessage<NoData, NoData.Builder> {
    private NoData() { }
    private static readonly NoData defaultInstance = new NoData().MakeReadOnly();
    private static readonly string[] _noDataFieldNames = new string[] {  };
    private static readonly uint[] _noDataFieldTags = new uint[] {  };
    public static NoData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NoData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NoData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_NoData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NoData, NoData.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_NoData__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _noDataFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NoData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NoData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NoData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NoData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NoData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NoData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NoData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NoData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NoData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NoData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NoData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NoData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NoData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NoData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NoData result;
      
      private NoData PrepareBuilder() {
        if (resultIsReadOnly) {
          NoData original = result;
          result = new NoData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NoData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.NoData.Descriptor; }
      }
      
      public override NoData DefaultInstanceForType {
        get { return global::bnet.protocol.NoData.DefaultInstance; }
      }
      
      public override NoData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NoData) {
          return MergeFrom((NoData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NoData other) {
        if (other == global::bnet.protocol.NoData.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_noDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _noDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NoData() {
      object.ReferenceEquals(global::bnet.protocol.Rpc.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ErrorInfo : pb::GeneratedMessage<ErrorInfo, ErrorInfo.Builder> {
    private ErrorInfo() { }
    private static readonly ErrorInfo defaultInstance = new ErrorInfo().MakeReadOnly();
    private static readonly string[] _errorInfoFieldNames = new string[] { "method_id", "object_address", "service_hash", "status" };
    private static readonly uint[] _errorInfoFieldTags = new uint[] { 32, 10, 24, 16 };
    public static ErrorInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ErrorInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ErrorInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_ErrorInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ErrorInfo, ErrorInfo.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_ErrorInfo__FieldAccessorTable; }
    }
    
    public const int ObjectAddressFieldNumber = 1;
    private bool hasObjectAddress;
    private global::bnet.protocol.ObjectAddress objectAddress_;
    public bool HasObjectAddress {
      get { return hasObjectAddress; }
    }
    public global::bnet.protocol.ObjectAddress ObjectAddress {
      get { return objectAddress_ ?? global::bnet.protocol.ObjectAddress.DefaultInstance; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private uint status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public uint Status {
      get { return status_; }
    }
    
    public const int ServiceHashFieldNumber = 3;
    private bool hasServiceHash;
    private uint serviceHash_;
    public bool HasServiceHash {
      get { return hasServiceHash; }
    }
    public uint ServiceHash {
      get { return serviceHash_; }
    }
    
    public const int MethodIdFieldNumber = 4;
    private bool hasMethodId;
    private uint methodId_;
    public bool HasMethodId {
      get { return hasMethodId; }
    }
    public uint MethodId {
      get { return methodId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasObjectAddress) return false;
        if (!hasStatus) return false;
        if (!hasServiceHash) return false;
        if (!hasMethodId) return false;
        if (!ObjectAddress.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _errorInfoFieldNames;
      if (hasObjectAddress) {
        output.WriteMessage(1, field_names[1], ObjectAddress);
      }
      if (hasStatus) {
        output.WriteUInt32(2, field_names[3], Status);
      }
      if (hasServiceHash) {
        output.WriteUInt32(3, field_names[2], ServiceHash);
      }
      if (hasMethodId) {
        output.WriteUInt32(4, field_names[0], MethodId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasObjectAddress) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ObjectAddress);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Status);
        }
        if (hasServiceHash) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ServiceHash);
        }
        if (hasMethodId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, MethodId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ErrorInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ErrorInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ErrorInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ErrorInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ErrorInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ErrorInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ErrorInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ErrorInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ErrorInfo result;
      
      private ErrorInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ErrorInfo original = result;
          result = new ErrorInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ErrorInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.ErrorInfo.Descriptor; }
      }
      
      public override ErrorInfo DefaultInstanceForType {
        get { return global::bnet.protocol.ErrorInfo.DefaultInstance; }
      }
      
      public override ErrorInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ErrorInfo) {
          return MergeFrom((ErrorInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ErrorInfo other) {
        if (other == global::bnet.protocol.ErrorInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasObjectAddress) {
          MergeObjectAddress(other.ObjectAddress);
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasServiceHash) {
          ServiceHash = other.ServiceHash;
        }
        if (other.HasMethodId) {
          MethodId = other.MethodId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_errorInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _errorInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.ObjectAddress.Builder subBuilder = global::bnet.protocol.ObjectAddress.CreateBuilder();
              if (result.hasObjectAddress) {
                subBuilder.MergeFrom(ObjectAddress);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ObjectAddress = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasStatus = input.ReadUInt32(ref result.status_);
              break;
            }
            case 24: {
              result.hasServiceHash = input.ReadUInt32(ref result.serviceHash_);
              break;
            }
            case 32: {
              result.hasMethodId = input.ReadUInt32(ref result.methodId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasObjectAddress {
       get { return result.hasObjectAddress; }
      }
      public global::bnet.protocol.ObjectAddress ObjectAddress {
        get { return result.ObjectAddress; }
        set { SetObjectAddress(value); }
      }
      public Builder SetObjectAddress(global::bnet.protocol.ObjectAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasObjectAddress = true;
        result.objectAddress_ = value;
        return this;
      }
      public Builder SetObjectAddress(global::bnet.protocol.ObjectAddress.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasObjectAddress = true;
        result.objectAddress_ = builderForValue.Build();
        return this;
      }
      public Builder MergeObjectAddress(global::bnet.protocol.ObjectAddress value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasObjectAddress &&
            result.objectAddress_ != global::bnet.protocol.ObjectAddress.DefaultInstance) {
            result.objectAddress_ = global::bnet.protocol.ObjectAddress.CreateBuilder(result.objectAddress_).MergeFrom(value).BuildPartial();
        } else {
          result.objectAddress_ = value;
        }
        result.hasObjectAddress = true;
        return this;
      }
      public Builder ClearObjectAddress() {
        PrepareBuilder();
        result.hasObjectAddress = false;
        result.objectAddress_ = null;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public uint Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(uint value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasServiceHash {
        get { return result.hasServiceHash; }
      }
      public uint ServiceHash {
        get { return result.ServiceHash; }
        set { SetServiceHash(value); }
      }
      public Builder SetServiceHash(uint value) {
        PrepareBuilder();
        result.hasServiceHash = true;
        result.serviceHash_ = value;
        return this;
      }
      public Builder ClearServiceHash() {
        PrepareBuilder();
        result.hasServiceHash = false;
        result.serviceHash_ = 0;
        return this;
      }
      
      public bool HasMethodId {
        get { return result.hasMethodId; }
      }
      public uint MethodId {
        get { return result.MethodId; }
        set { SetMethodId(value); }
      }
      public Builder SetMethodId(uint value) {
        PrepareBuilder();
        result.hasMethodId = true;
        result.methodId_ = value;
        return this;
      }
      public Builder ClearMethodId() {
        PrepareBuilder();
        result.hasMethodId = false;
        result.methodId_ = 0;
        return this;
      }
    }
    static ErrorInfo() {
      object.ReferenceEquals(global::bnet.protocol.Rpc.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Header : pb::GeneratedMessage<Header, Header.Builder> {
    private Header() { }
    private static readonly Header defaultInstance = new Header().MakeReadOnly();
    private static readonly string[] _headerFieldNames = new string[] { "error", "method_id", "object_id", "service_id", "size", "status", "token" };
    private static readonly uint[] _headerFieldTags = new uint[] { 58, 16, 32, 8, 40, 48, 24 };
    public static Header DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Header DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Header ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_Header__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Header, Header.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.Rpc.internal__static_bnet_protocol_Header__FieldAccessorTable; }
    }
    
    public const int ServiceIdFieldNumber = 1;
    private bool hasServiceId;
    private uint serviceId_;
    public bool HasServiceId {
      get { return hasServiceId; }
    }
    public uint ServiceId {
      get { return serviceId_; }
    }
    
    public const int MethodIdFieldNumber = 2;
    private bool hasMethodId;
    private uint methodId_;
    public bool HasMethodId {
      get { return hasMethodId; }
    }
    public uint MethodId {
      get { return methodId_; }
    }
    
    public const int TokenFieldNumber = 3;
    private bool hasToken;
    private uint token_;
    public bool HasToken {
      get { return hasToken; }
    }
    public uint Token {
      get { return token_; }
    }
    
    public const int ObjectIdFieldNumber = 4;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int SizeFieldNumber = 5;
    private bool hasSize;
    private uint size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public uint Size {
      get { return size_; }
    }
    
    public const int StatusFieldNumber = 6;
    private bool hasStatus;
    private uint status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public uint Status {
      get { return status_; }
    }
    
    public const int ErrorFieldNumber = 7;
    private pbc::PopsicleList<global::bnet.protocol.ErrorInfo> error_ = new pbc::PopsicleList<global::bnet.protocol.ErrorInfo>();
    public scg::IList<global::bnet.protocol.ErrorInfo> ErrorList {
      get { return error_; }
    }
    public int ErrorCount {
      get { return error_.Count; }
    }
    public global::bnet.protocol.ErrorInfo GetError(int index) {
      return error_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServiceId) return false;
        if (!hasToken) return false;
        foreach (global::bnet.protocol.ErrorInfo element in ErrorList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _headerFieldNames;
      if (hasServiceId) {
        output.WriteUInt32(1, field_names[3], ServiceId);
      }
      if (hasMethodId) {
        output.WriteUInt32(2, field_names[1], MethodId);
      }
      if (hasToken) {
        output.WriteUInt32(3, field_names[6], Token);
      }
      if (hasObjectId) {
        output.WriteUInt64(4, field_names[2], ObjectId);
      }
      if (hasSize) {
        output.WriteUInt32(5, field_names[4], Size);
      }
      if (hasStatus) {
        output.WriteUInt32(6, field_names[5], Status);
      }
      if (error_.Count > 0) {
        output.WriteMessageArray(7, field_names[0], error_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServiceId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ServiceId);
        }
        if (hasMethodId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MethodId);
        }
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Token);
        }
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, ObjectId);
        }
        if (hasSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, Size);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, Status);
        }
        foreach (global::bnet.protocol.ErrorInfo element in ErrorList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Header ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Header MakeReadOnly() {
      error_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Header prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Header, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Header cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Header result;
      
      private Header PrepareBuilder() {
        if (resultIsReadOnly) {
          Header original = result;
          result = new Header();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Header MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.Header.Descriptor; }
      }
      
      public override Header DefaultInstanceForType {
        get { return global::bnet.protocol.Header.DefaultInstance; }
      }
      
      public override Header BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Header) {
          return MergeFrom((Header) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Header other) {
        if (other == global::bnet.protocol.Header.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServiceId) {
          ServiceId = other.ServiceId;
        }
        if (other.HasMethodId) {
          MethodId = other.MethodId;
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.HasSize) {
          Size = other.Size;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.error_.Count != 0) {
          result.error_.Add(other.error_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_headerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _headerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasServiceId = input.ReadUInt32(ref result.serviceId_);
              break;
            }
            case 16: {
              result.hasMethodId = input.ReadUInt32(ref result.methodId_);
              break;
            }
            case 24: {
              result.hasToken = input.ReadUInt32(ref result.token_);
              break;
            }
            case 32: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
            case 40: {
              result.hasSize = input.ReadUInt32(ref result.size_);
              break;
            }
            case 48: {
              result.hasStatus = input.ReadUInt32(ref result.status_);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.error_, global::bnet.protocol.ErrorInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServiceId {
        get { return result.hasServiceId; }
      }
      public uint ServiceId {
        get { return result.ServiceId; }
        set { SetServiceId(value); }
      }
      public Builder SetServiceId(uint value) {
        PrepareBuilder();
        result.hasServiceId = true;
        result.serviceId_ = value;
        return this;
      }
      public Builder ClearServiceId() {
        PrepareBuilder();
        result.hasServiceId = false;
        result.serviceId_ = 0;
        return this;
      }
      
      public bool HasMethodId {
        get { return result.hasMethodId; }
      }
      public uint MethodId {
        get { return result.MethodId; }
        set { SetMethodId(value); }
      }
      public Builder SetMethodId(uint value) {
        PrepareBuilder();
        result.hasMethodId = true;
        result.methodId_ = value;
        return this;
      }
      public Builder ClearMethodId() {
        PrepareBuilder();
        result.hasMethodId = false;
        result.methodId_ = 0;
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public uint Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(uint value) {
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = 0;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
      
      public bool HasSize {
        get { return result.hasSize; }
      }
      public uint Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(uint value) {
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public uint Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(uint value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.ErrorInfo> ErrorList {
        get { return PrepareBuilder().error_; }
      }
      public int ErrorCount {
        get { return result.ErrorCount; }
      }
      public global::bnet.protocol.ErrorInfo GetError(int index) {
        return result.GetError(index);
      }
      public Builder SetError(int index, global::bnet.protocol.ErrorInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.error_[index] = value;
        return this;
      }
      public Builder SetError(int index, global::bnet.protocol.ErrorInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.error_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddError(global::bnet.protocol.ErrorInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.error_.Add(value);
        return this;
      }
      public Builder AddError(global::bnet.protocol.ErrorInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.error_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeError(scg::IEnumerable<global::bnet.protocol.ErrorInfo> values) {
        PrepareBuilder();
        result.error_.Add(values);
        return this;
      }
      public Builder ClearError() {
        PrepareBuilder();
        result.error_.Clear();
        return this;
      }
    }
    static Header() {
      object.ReferenceEquals(global::bnet.protocol.Rpc.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
