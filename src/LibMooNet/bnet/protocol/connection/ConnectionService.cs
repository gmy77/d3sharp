// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.connection {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class ConnectionService {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_ConnectRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.ConnectRequest, global::bnet.protocol.connection.ConnectRequest.Builder> internal__static_bnet_protocol_connection_ConnectRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_ConnectionMeteringContentHandles__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.ConnectionMeteringContentHandles, global::bnet.protocol.connection.ConnectionMeteringContentHandles.Builder> internal__static_bnet_protocol_connection_ConnectionMeteringContentHandles__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_ConnectResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.ConnectResponse, global::bnet.protocol.connection.ConnectResponse.Builder> internal__static_bnet_protocol_connection_ConnectResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_BoundService__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BoundService, global::bnet.protocol.connection.BoundService.Builder> internal__static_bnet_protocol_connection_BoundService__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_BindRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BindRequest, global::bnet.protocol.connection.BindRequest.Builder> internal__static_bnet_protocol_connection_BindRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_BindResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BindResponse, global::bnet.protocol.connection.BindResponse.Builder> internal__static_bnet_protocol_connection_BindResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_EchoRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EchoRequest, global::bnet.protocol.connection.EchoRequest.Builder> internal__static_bnet_protocol_connection_EchoRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_EchoResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EchoResponse, global::bnet.protocol.connection.EchoResponse.Builder> internal__static_bnet_protocol_connection_EchoResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_DisconnectRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.DisconnectRequest, global::bnet.protocol.connection.DisconnectRequest.Builder> internal__static_bnet_protocol_connection_DisconnectRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_DisconnectNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.DisconnectNotification, global::bnet.protocol.connection.DisconnectNotification.Builder> internal__static_bnet_protocol_connection_DisconnectNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_NullRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.NullRequest, global::bnet.protocol.connection.NullRequest.Builder> internal__static_bnet_protocol_connection_NullRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_connection_EncryptRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EncryptRequest, global::bnet.protocol.connection.EncryptRequest.Builder> internal__static_bnet_protocol_connection_EncryptRequest__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ConnectionService() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "Ch1ibmV0L2Nvbm5lY3Rpb25fc2VydmljZS5wcm90bxIYYm5ldC5wcm90b2Nv" + 
            "bC5jb25uZWN0aW9uGhlibmV0L2NvbnRlbnRfaGFuZGxlLnByb3RvGg5ibmV0" + 
            "L3JwYy5wcm90byJ6Cg5Db25uZWN0UmVxdWVzdBIrCgljbGllbnRfaWQYASAB" + 
            "KAsyGC5ibmV0LnByb3RvY29sLlByb2Nlc3NJZBI7CgxiaW5kX3JlcXVlc3QY" + 
            "AiABKAsyJS5ibmV0LnByb3RvY29sLmNvbm5lY3Rpb24uQmluZFJlcXVlc3Qi" + 
            "WAogQ29ubmVjdGlvbk1ldGVyaW5nQ29udGVudEhhbmRsZXMSNAoOY29udGVu" + 
            "dF9oYW5kbGUYASADKAsyHC5ibmV0LnByb3RvY29sLkNvbnRlbnRIYW5kbGUi" + 
            "mQIKD0Nvbm5lY3RSZXNwb25zZRIrCglzZXJ2ZXJfaWQYASACKAsyGC5ibmV0" + 
            "LnByb3RvY29sLlByb2Nlc3NJZBIrCgljbGllbnRfaWQYAiABKAsyGC5ibmV0" + 
            "LnByb3RvY29sLlByb2Nlc3NJZBITCgtiaW5kX3Jlc3VsdBgDIAEoDRI9Cg1i" + 
            "aW5kX3Jlc3BvbnNlGAQgASgLMiYuYm5ldC5wcm90b2NvbC5jb25uZWN0aW9u" + 
            "LkJpbmRSZXNwb25zZRJYChRjb250ZW50X2hhbmRsZV9hcnJheRgFIAEoCzI6" + 
            "LmJuZXQucHJvdG9jb2wuY29ubmVjdGlvbi5Db25uZWN0aW9uTWV0ZXJpbmdD" + 
            "b250ZW50SGFuZGxlcyIoCgxCb3VuZFNlcnZpY2USDAoEaGFzaBgBIAIoBxIK" + 
            "CgJpZBgCIAIoDSJyCgtCaW5kUmVxdWVzdBIhChVpbXBvcnRlZF9zZXJ2aWNl" + 
            "X2hhc2gYASADKAdCAhABEkAKEGV4cG9ydGVkX3NlcnZpY2UYAiADKAsyJi5i" + 
            "bmV0LnByb3RvY29sLmNvbm5lY3Rpb24uQm91bmRTZXJ2aWNlIi8KDEJpbmRS" + 
            "ZXNwb25zZRIfChNpbXBvcnRlZF9zZXJ2aWNlX2lkGAEgAygNQgIQASJJCgtF" + 
            "Y2hvUmVxdWVzdBIMCgR0aW1lGAEgASgGEhsKDG5ldHdvcmtfb25seRgCIAEo" + 
            "CDoFZmFsc2USDwoHcGF5bG9hZBgDIAEoDCItCgxFY2hvUmVzcG9uc2USDAoE" + 
            "dGltZRgBIAEoBhIPCgdwYXlsb2FkGAIgASgMIicKEURpc2Nvbm5lY3RSZXF1" + 
            "ZXN0EhIKCmVycm9yX2NvZGUYASACKA0iPAoWRGlzY29ubmVjdE5vdGlmaWNh" + 
            "dGlvbhISCgplcnJvcl9jb2RlGAEgAigNEg4KBnJlYXNvbhgCIAEoCSINCgtO" + 
            "dWxsUmVxdWVzdCIQCg5FbmNyeXB0UmVxdWVzdDKhBQoRQ29ubmVjdGlvblNl" + 
            "cnZpY2USZAoHQ29ubmVjdBIoLmJuZXQucHJvdG9jb2wuY29ubmVjdGlvbi5D" + 
            "b25uZWN0UmVxdWVzdBopLmJuZXQucHJvdG9jb2wuY29ubmVjdGlvbi5Db25u" + 
            "ZWN0UmVzcG9uc2UiBIC1GAESWwoEQmluZBIlLmJuZXQucHJvdG9jb2wuY29u" + 
            "bmVjdGlvbi5CaW5kUmVxdWVzdBomLmJuZXQucHJvdG9jb2wuY29ubmVjdGlv" + 
            "bi5CaW5kUmVzcG9uc2UiBIC1GAISWwoERWNobxIlLmJuZXQucHJvdG9jb2wu" + 
            "Y29ubmVjdGlvbi5FY2hvUmVxdWVzdBomLmJuZXQucHJvdG9jb2wuY29ubmVj" + 
            "dGlvbi5FY2hvUmVzcG9uc2UiBIC1GAMSZQoPRm9yY2VEaXNjb25uZWN0EjAu" + 
            "Ym5ldC5wcm90b2NvbC5jb25uZWN0aW9uLkRpc2Nvbm5lY3ROb3RpZmljYXRp" + 
            "b24aGi5ibmV0LnByb3RvY29sLk5PX1JFU1BPTlNFIgSAtRgEEk8KBE51bGwS" + 
            "JS5ibmV0LnByb3RvY29sLmNvbm5lY3Rpb24uTnVsbFJlcXVlc3QaGi5ibmV0" + 
            "LnByb3RvY29sLk5PX1JFU1BPTlNFIgSAtRgFElAKB0VuY3J5cHQSKC5ibmV0" + 
            "LnByb3RvY29sLmNvbm5lY3Rpb24uRW5jcnlwdFJlcXVlc3QaFS5ibmV0LnBy" + 
            "b3RvY29sLk5vRGF0YSIEgLUYBhJiChFSZXF1ZXN0RGlzY29ubmVjdBIrLmJu" + 
            "ZXQucHJvdG9jb2wuY29ubmVjdGlvbi5EaXNjb25uZWN0UmVxdWVzdBoaLmJu" + 
            "ZXQucHJvdG9jb2wuTk9fUkVTUE9OU0UiBIC1GAdCA4ABAA==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_connection_ConnectRequest__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_connection_ConnectRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.ConnectRequest, global::bnet.protocol.connection.ConnectRequest.Builder>(internal__static_bnet_protocol_connection_ConnectRequest__Descriptor,
                  new string[] { "ClientId", "BindRequest", });
          internal__static_bnet_protocol_connection_ConnectionMeteringContentHandles__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bnet_protocol_connection_ConnectionMeteringContentHandles__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.ConnectionMeteringContentHandles, global::bnet.protocol.connection.ConnectionMeteringContentHandles.Builder>(internal__static_bnet_protocol_connection_ConnectionMeteringContentHandles__Descriptor,
                  new string[] { "ContentHandle", });
          internal__static_bnet_protocol_connection_ConnectResponse__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bnet_protocol_connection_ConnectResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.ConnectResponse, global::bnet.protocol.connection.ConnectResponse.Builder>(internal__static_bnet_protocol_connection_ConnectResponse__Descriptor,
                  new string[] { "ServerId", "ClientId", "BindResult", "BindResponse", "ContentHandleArray", });
          internal__static_bnet_protocol_connection_BoundService__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bnet_protocol_connection_BoundService__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BoundService, global::bnet.protocol.connection.BoundService.Builder>(internal__static_bnet_protocol_connection_BoundService__Descriptor,
                  new string[] { "Hash", "Id", });
          internal__static_bnet_protocol_connection_BindRequest__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bnet_protocol_connection_BindRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BindRequest, global::bnet.protocol.connection.BindRequest.Builder>(internal__static_bnet_protocol_connection_BindRequest__Descriptor,
                  new string[] { "ImportedServiceHash", "ExportedService", });
          internal__static_bnet_protocol_connection_BindResponse__Descriptor = Descriptor.MessageTypes[5];
          internal__static_bnet_protocol_connection_BindResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.BindResponse, global::bnet.protocol.connection.BindResponse.Builder>(internal__static_bnet_protocol_connection_BindResponse__Descriptor,
                  new string[] { "ImportedServiceId", });
          internal__static_bnet_protocol_connection_EchoRequest__Descriptor = Descriptor.MessageTypes[6];
          internal__static_bnet_protocol_connection_EchoRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EchoRequest, global::bnet.protocol.connection.EchoRequest.Builder>(internal__static_bnet_protocol_connection_EchoRequest__Descriptor,
                  new string[] { "Time", "NetworkOnly", "Payload", });
          internal__static_bnet_protocol_connection_EchoResponse__Descriptor = Descriptor.MessageTypes[7];
          internal__static_bnet_protocol_connection_EchoResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EchoResponse, global::bnet.protocol.connection.EchoResponse.Builder>(internal__static_bnet_protocol_connection_EchoResponse__Descriptor,
                  new string[] { "Time", "Payload", });
          internal__static_bnet_protocol_connection_DisconnectRequest__Descriptor = Descriptor.MessageTypes[8];
          internal__static_bnet_protocol_connection_DisconnectRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.DisconnectRequest, global::bnet.protocol.connection.DisconnectRequest.Builder>(internal__static_bnet_protocol_connection_DisconnectRequest__Descriptor,
                  new string[] { "ErrorCode", });
          internal__static_bnet_protocol_connection_DisconnectNotification__Descriptor = Descriptor.MessageTypes[9];
          internal__static_bnet_protocol_connection_DisconnectNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.DisconnectNotification, global::bnet.protocol.connection.DisconnectNotification.Builder>(internal__static_bnet_protocol_connection_DisconnectNotification__Descriptor,
                  new string[] { "ErrorCode", "Reason", });
          internal__static_bnet_protocol_connection_NullRequest__Descriptor = Descriptor.MessageTypes[10];
          internal__static_bnet_protocol_connection_NullRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.NullRequest, global::bnet.protocol.connection.NullRequest.Builder>(internal__static_bnet_protocol_connection_NullRequest__Descriptor,
                  new string[] { });
          internal__static_bnet_protocol_connection_EncryptRequest__Descriptor = Descriptor.MessageTypes[11];
          internal__static_bnet_protocol_connection_EncryptRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.connection.EncryptRequest, global::bnet.protocol.connection.EncryptRequest.Builder>(internal__static_bnet_protocol_connection_EncryptRequest__Descriptor,
                  new string[] { });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bnet.protocol.Proto.ContentHandle.RegisterAllExtensions(registry);
          global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bnet.protocol.Proto.ContentHandle.Descriptor, 
            global::bnet.protocol.Rpc.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConnectRequest : pb::GeneratedMessage<ConnectRequest, ConnectRequest.Builder> {
    private ConnectRequest() { }
    private static readonly ConnectRequest defaultInstance = new ConnectRequest().MakeReadOnly();
    private static readonly string[] _connectRequestFieldNames = new string[] { "bind_request", "client_id" };
    private static readonly uint[] _connectRequestFieldTags = new uint[] { 18, 10 };
    public static ConnectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConnectRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConnectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_ConnectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConnectRequest, ConnectRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_ConnectRequest__FieldAccessorTable; }
    }
    
    public const int ClientIdFieldNumber = 1;
    private bool hasClientId;
    private global::bnet.protocol.ProcessId clientId_;
    public bool HasClientId {
      get { return hasClientId; }
    }
    public global::bnet.protocol.ProcessId ClientId {
      get { return clientId_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public const int BindRequestFieldNumber = 2;
    private bool hasBindRequest;
    private global::bnet.protocol.connection.BindRequest bindRequest_;
    public bool HasBindRequest {
      get { return hasBindRequest; }
    }
    public global::bnet.protocol.connection.BindRequest BindRequest {
      get { return bindRequest_ ?? global::bnet.protocol.connection.BindRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasClientId) {
          if (!ClientId.IsInitialized) return false;
        }
        if (HasBindRequest) {
          if (!BindRequest.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _connectRequestFieldNames;
      if (hasClientId) {
        output.WriteMessage(1, field_names[1], ClientId);
      }
      if (hasBindRequest) {
        output.WriteMessage(2, field_names[0], BindRequest);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClientId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ClientId);
        }
        if (hasBindRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, BindRequest);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConnectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConnectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConnectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConnectRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConnectRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConnectRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConnectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConnectRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConnectRequest result;
      
      private ConnectRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ConnectRequest original = result;
          result = new ConnectRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConnectRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.ConnectRequest.Descriptor; }
      }
      
      public override ConnectRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.ConnectRequest.DefaultInstance; }
      }
      
      public override ConnectRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConnectRequest) {
          return MergeFrom((ConnectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConnectRequest other) {
        if (other == global::bnet.protocol.connection.ConnectRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClientId) {
          MergeClientId(other.ClientId);
        }
        if (other.HasBindRequest) {
          MergeBindRequest(other.BindRequest);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_connectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _connectRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasClientId) {
                subBuilder.MergeFrom(ClientId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.connection.BindRequest.Builder subBuilder = global::bnet.protocol.connection.BindRequest.CreateBuilder();
              if (result.hasBindRequest) {
                subBuilder.MergeFrom(BindRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BindRequest = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClientId {
       get { return result.hasClientId; }
      }
      public global::bnet.protocol.ProcessId ClientId {
        get { return result.ClientId; }
        set { SetClientId(value); }
      }
      public Builder SetClientId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientId = true;
        result.clientId_ = value;
        return this;
      }
      public Builder SetClientId(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClientId = true;
        result.clientId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClientId &&
            result.clientId_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.clientId_ = global::bnet.protocol.ProcessId.CreateBuilder(result.clientId_).MergeFrom(value).BuildPartial();
        } else {
          result.clientId_ = value;
        }
        result.hasClientId = true;
        return this;
      }
      public Builder ClearClientId() {
        PrepareBuilder();
        result.hasClientId = false;
        result.clientId_ = null;
        return this;
      }
      
      public bool HasBindRequest {
       get { return result.hasBindRequest; }
      }
      public global::bnet.protocol.connection.BindRequest BindRequest {
        get { return result.BindRequest; }
        set { SetBindRequest(value); }
      }
      public Builder SetBindRequest(global::bnet.protocol.connection.BindRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBindRequest = true;
        result.bindRequest_ = value;
        return this;
      }
      public Builder SetBindRequest(global::bnet.protocol.connection.BindRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBindRequest = true;
        result.bindRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBindRequest(global::bnet.protocol.connection.BindRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBindRequest &&
            result.bindRequest_ != global::bnet.protocol.connection.BindRequest.DefaultInstance) {
            result.bindRequest_ = global::bnet.protocol.connection.BindRequest.CreateBuilder(result.bindRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.bindRequest_ = value;
        }
        result.hasBindRequest = true;
        return this;
      }
      public Builder ClearBindRequest() {
        PrepareBuilder();
        result.hasBindRequest = false;
        result.bindRequest_ = null;
        return this;
      }
    }
    static ConnectRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConnectionMeteringContentHandles : pb::GeneratedMessage<ConnectionMeteringContentHandles, ConnectionMeteringContentHandles.Builder> {
    private ConnectionMeteringContentHandles() { }
    private static readonly ConnectionMeteringContentHandles defaultInstance = new ConnectionMeteringContentHandles().MakeReadOnly();
    private static readonly string[] _connectionMeteringContentHandlesFieldNames = new string[] { "content_handle" };
    private static readonly uint[] _connectionMeteringContentHandlesFieldTags = new uint[] { 10 };
    public static ConnectionMeteringContentHandles DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConnectionMeteringContentHandles DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConnectionMeteringContentHandles ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_ConnectionMeteringContentHandles__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConnectionMeteringContentHandles, ConnectionMeteringContentHandles.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_ConnectionMeteringContentHandles__FieldAccessorTable; }
    }
    
    public const int ContentHandleFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.ContentHandle> contentHandle_ = new pbc::PopsicleList<global::bnet.protocol.ContentHandle>();
    public scg::IList<global::bnet.protocol.ContentHandle> ContentHandleList {
      get { return contentHandle_; }
    }
    public int ContentHandleCount {
      get { return contentHandle_.Count; }
    }
    public global::bnet.protocol.ContentHandle GetContentHandle(int index) {
      return contentHandle_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.ContentHandle element in ContentHandleList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _connectionMeteringContentHandlesFieldNames;
      if (contentHandle_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], contentHandle_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.ContentHandle element in ContentHandleList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConnectionMeteringContentHandles ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectionMeteringContentHandles ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectionMeteringContentHandles ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectionMeteringContentHandles ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectionMeteringContentHandles ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectionMeteringContentHandles ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConnectionMeteringContentHandles ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConnectionMeteringContentHandles ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConnectionMeteringContentHandles ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectionMeteringContentHandles ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConnectionMeteringContentHandles MakeReadOnly() {
      contentHandle_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConnectionMeteringContentHandles prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConnectionMeteringContentHandles, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConnectionMeteringContentHandles cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConnectionMeteringContentHandles result;
      
      private ConnectionMeteringContentHandles PrepareBuilder() {
        if (resultIsReadOnly) {
          ConnectionMeteringContentHandles original = result;
          result = new ConnectionMeteringContentHandles();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConnectionMeteringContentHandles MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.ConnectionMeteringContentHandles.Descriptor; }
      }
      
      public override ConnectionMeteringContentHandles DefaultInstanceForType {
        get { return global::bnet.protocol.connection.ConnectionMeteringContentHandles.DefaultInstance; }
      }
      
      public override ConnectionMeteringContentHandles BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConnectionMeteringContentHandles) {
          return MergeFrom((ConnectionMeteringContentHandles) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConnectionMeteringContentHandles other) {
        if (other == global::bnet.protocol.connection.ConnectionMeteringContentHandles.DefaultInstance) return this;
        PrepareBuilder();
        if (other.contentHandle_.Count != 0) {
          result.contentHandle_.Add(other.contentHandle_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_connectionMeteringContentHandlesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _connectionMeteringContentHandlesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.contentHandle_, global::bnet.protocol.ContentHandle.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.ContentHandle> ContentHandleList {
        get { return PrepareBuilder().contentHandle_; }
      }
      public int ContentHandleCount {
        get { return result.ContentHandleCount; }
      }
      public global::bnet.protocol.ContentHandle GetContentHandle(int index) {
        return result.GetContentHandle(index);
      }
      public Builder SetContentHandle(int index, global::bnet.protocol.ContentHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contentHandle_[index] = value;
        return this;
      }
      public Builder SetContentHandle(int index, global::bnet.protocol.ContentHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contentHandle_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContentHandle(global::bnet.protocol.ContentHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contentHandle_.Add(value);
        return this;
      }
      public Builder AddContentHandle(global::bnet.protocol.ContentHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contentHandle_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContentHandle(scg::IEnumerable<global::bnet.protocol.ContentHandle> values) {
        PrepareBuilder();
        result.contentHandle_.Add(values);
        return this;
      }
      public Builder ClearContentHandle() {
        PrepareBuilder();
        result.contentHandle_.Clear();
        return this;
      }
    }
    static ConnectionMeteringContentHandles() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConnectResponse : pb::GeneratedMessage<ConnectResponse, ConnectResponse.Builder> {
    private ConnectResponse() { }
    private static readonly ConnectResponse defaultInstance = new ConnectResponse().MakeReadOnly();
    private static readonly string[] _connectResponseFieldNames = new string[] { "bind_response", "bind_result", "client_id", "content_handle_array", "server_id" };
    private static readonly uint[] _connectResponseFieldTags = new uint[] { 34, 24, 18, 42, 10 };
    public static ConnectResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConnectResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConnectResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_ConnectResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConnectResponse, ConnectResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_ConnectResponse__FieldAccessorTable; }
    }
    
    public const int ServerIdFieldNumber = 1;
    private bool hasServerId;
    private global::bnet.protocol.ProcessId serverId_;
    public bool HasServerId {
      get { return hasServerId; }
    }
    public global::bnet.protocol.ProcessId ServerId {
      get { return serverId_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public const int ClientIdFieldNumber = 2;
    private bool hasClientId;
    private global::bnet.protocol.ProcessId clientId_;
    public bool HasClientId {
      get { return hasClientId; }
    }
    public global::bnet.protocol.ProcessId ClientId {
      get { return clientId_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public const int BindResultFieldNumber = 3;
    private bool hasBindResult;
    private uint bindResult_;
    public bool HasBindResult {
      get { return hasBindResult; }
    }
    public uint BindResult {
      get { return bindResult_; }
    }
    
    public const int BindResponseFieldNumber = 4;
    private bool hasBindResponse;
    private global::bnet.protocol.connection.BindResponse bindResponse_;
    public bool HasBindResponse {
      get { return hasBindResponse; }
    }
    public global::bnet.protocol.connection.BindResponse BindResponse {
      get { return bindResponse_ ?? global::bnet.protocol.connection.BindResponse.DefaultInstance; }
    }
    
    public const int ContentHandleArrayFieldNumber = 5;
    private bool hasContentHandleArray;
    private global::bnet.protocol.connection.ConnectionMeteringContentHandles contentHandleArray_;
    public bool HasContentHandleArray {
      get { return hasContentHandleArray; }
    }
    public global::bnet.protocol.connection.ConnectionMeteringContentHandles ContentHandleArray {
      get { return contentHandleArray_ ?? global::bnet.protocol.connection.ConnectionMeteringContentHandles.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServerId) return false;
        if (!ServerId.IsInitialized) return false;
        if (HasClientId) {
          if (!ClientId.IsInitialized) return false;
        }
        if (HasContentHandleArray) {
          if (!ContentHandleArray.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _connectResponseFieldNames;
      if (hasServerId) {
        output.WriteMessage(1, field_names[4], ServerId);
      }
      if (hasClientId) {
        output.WriteMessage(2, field_names[2], ClientId);
      }
      if (hasBindResult) {
        output.WriteUInt32(3, field_names[1], BindResult);
      }
      if (hasBindResponse) {
        output.WriteMessage(4, field_names[0], BindResponse);
      }
      if (hasContentHandleArray) {
        output.WriteMessage(5, field_names[3], ContentHandleArray);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServerId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ServerId);
        }
        if (hasClientId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ClientId);
        }
        if (hasBindResult) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, BindResult);
        }
        if (hasBindResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, BindResponse);
        }
        if (hasContentHandleArray) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ContentHandleArray);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConnectResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConnectResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConnectResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConnectResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConnectResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConnectResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConnectResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConnectResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConnectResponse result;
      
      private ConnectResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ConnectResponse original = result;
          result = new ConnectResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConnectResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.ConnectResponse.Descriptor; }
      }
      
      public override ConnectResponse DefaultInstanceForType {
        get { return global::bnet.protocol.connection.ConnectResponse.DefaultInstance; }
      }
      
      public override ConnectResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConnectResponse) {
          return MergeFrom((ConnectResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConnectResponse other) {
        if (other == global::bnet.protocol.connection.ConnectResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerId) {
          MergeServerId(other.ServerId);
        }
        if (other.HasClientId) {
          MergeClientId(other.ClientId);
        }
        if (other.HasBindResult) {
          BindResult = other.BindResult;
        }
        if (other.HasBindResponse) {
          MergeBindResponse(other.BindResponse);
        }
        if (other.HasContentHandleArray) {
          MergeContentHandleArray(other.ContentHandleArray);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_connectResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _connectResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasServerId) {
                subBuilder.MergeFrom(ServerId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ServerId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasClientId) {
                subBuilder.MergeFrom(ClientId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientId = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasBindResult = input.ReadUInt32(ref result.bindResult_);
              break;
            }
            case 34: {
              global::bnet.protocol.connection.BindResponse.Builder subBuilder = global::bnet.protocol.connection.BindResponse.CreateBuilder();
              if (result.hasBindResponse) {
                subBuilder.MergeFrom(BindResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BindResponse = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::bnet.protocol.connection.ConnectionMeteringContentHandles.Builder subBuilder = global::bnet.protocol.connection.ConnectionMeteringContentHandles.CreateBuilder();
              if (result.hasContentHandleArray) {
                subBuilder.MergeFrom(ContentHandleArray);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ContentHandleArray = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerId {
       get { return result.hasServerId; }
      }
      public global::bnet.protocol.ProcessId ServerId {
        get { return result.ServerId; }
        set { SetServerId(value); }
      }
      public Builder SetServerId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerId = true;
        result.serverId_ = value;
        return this;
      }
      public Builder SetServerId(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasServerId = true;
        result.serverId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeServerId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasServerId &&
            result.serverId_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.serverId_ = global::bnet.protocol.ProcessId.CreateBuilder(result.serverId_).MergeFrom(value).BuildPartial();
        } else {
          result.serverId_ = value;
        }
        result.hasServerId = true;
        return this;
      }
      public Builder ClearServerId() {
        PrepareBuilder();
        result.hasServerId = false;
        result.serverId_ = null;
        return this;
      }
      
      public bool HasClientId {
       get { return result.hasClientId; }
      }
      public global::bnet.protocol.ProcessId ClientId {
        get { return result.ClientId; }
        set { SetClientId(value); }
      }
      public Builder SetClientId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientId = true;
        result.clientId_ = value;
        return this;
      }
      public Builder SetClientId(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClientId = true;
        result.clientId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClientId &&
            result.clientId_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.clientId_ = global::bnet.protocol.ProcessId.CreateBuilder(result.clientId_).MergeFrom(value).BuildPartial();
        } else {
          result.clientId_ = value;
        }
        result.hasClientId = true;
        return this;
      }
      public Builder ClearClientId() {
        PrepareBuilder();
        result.hasClientId = false;
        result.clientId_ = null;
        return this;
      }
      
      public bool HasBindResult {
        get { return result.hasBindResult; }
      }
      public uint BindResult {
        get { return result.BindResult; }
        set { SetBindResult(value); }
      }
      public Builder SetBindResult(uint value) {
        PrepareBuilder();
        result.hasBindResult = true;
        result.bindResult_ = value;
        return this;
      }
      public Builder ClearBindResult() {
        PrepareBuilder();
        result.hasBindResult = false;
        result.bindResult_ = 0;
        return this;
      }
      
      public bool HasBindResponse {
       get { return result.hasBindResponse; }
      }
      public global::bnet.protocol.connection.BindResponse BindResponse {
        get { return result.BindResponse; }
        set { SetBindResponse(value); }
      }
      public Builder SetBindResponse(global::bnet.protocol.connection.BindResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBindResponse = true;
        result.bindResponse_ = value;
        return this;
      }
      public Builder SetBindResponse(global::bnet.protocol.connection.BindResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBindResponse = true;
        result.bindResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBindResponse(global::bnet.protocol.connection.BindResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBindResponse &&
            result.bindResponse_ != global::bnet.protocol.connection.BindResponse.DefaultInstance) {
            result.bindResponse_ = global::bnet.protocol.connection.BindResponse.CreateBuilder(result.bindResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.bindResponse_ = value;
        }
        result.hasBindResponse = true;
        return this;
      }
      public Builder ClearBindResponse() {
        PrepareBuilder();
        result.hasBindResponse = false;
        result.bindResponse_ = null;
        return this;
      }
      
      public bool HasContentHandleArray {
       get { return result.hasContentHandleArray; }
      }
      public global::bnet.protocol.connection.ConnectionMeteringContentHandles ContentHandleArray {
        get { return result.ContentHandleArray; }
        set { SetContentHandleArray(value); }
      }
      public Builder SetContentHandleArray(global::bnet.protocol.connection.ConnectionMeteringContentHandles value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContentHandleArray = true;
        result.contentHandleArray_ = value;
        return this;
      }
      public Builder SetContentHandleArray(global::bnet.protocol.connection.ConnectionMeteringContentHandles.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContentHandleArray = true;
        result.contentHandleArray_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContentHandleArray(global::bnet.protocol.connection.ConnectionMeteringContentHandles value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContentHandleArray &&
            result.contentHandleArray_ != global::bnet.protocol.connection.ConnectionMeteringContentHandles.DefaultInstance) {
            result.contentHandleArray_ = global::bnet.protocol.connection.ConnectionMeteringContentHandles.CreateBuilder(result.contentHandleArray_).MergeFrom(value).BuildPartial();
        } else {
          result.contentHandleArray_ = value;
        }
        result.hasContentHandleArray = true;
        return this;
      }
      public Builder ClearContentHandleArray() {
        PrepareBuilder();
        result.hasContentHandleArray = false;
        result.contentHandleArray_ = null;
        return this;
      }
    }
    static ConnectResponse() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BoundService : pb::GeneratedMessage<BoundService, BoundService.Builder> {
    private BoundService() { }
    private static readonly BoundService defaultInstance = new BoundService().MakeReadOnly();
    private static readonly string[] _boundServiceFieldNames = new string[] { "hash", "id" };
    private static readonly uint[] _boundServiceFieldTags = new uint[] { 13, 16 };
    public static BoundService DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BoundService DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BoundService ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_BoundService__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BoundService, BoundService.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_BoundService__FieldAccessorTable; }
    }
    
    public const int HashFieldNumber = 1;
    private bool hasHash;
    private uint hash_;
    public bool HasHash {
      get { return hasHash; }
    }
    public uint Hash {
      get { return hash_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHash) return false;
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _boundServiceFieldNames;
      if (hasHash) {
        output.WriteFixed32(1, field_names[0], Hash);
      }
      if (hasId) {
        output.WriteUInt32(2, field_names[1], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHash) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Hash);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BoundService ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BoundService ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BoundService ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BoundService ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BoundService ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BoundService ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BoundService ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BoundService ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BoundService ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BoundService ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BoundService MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BoundService prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BoundService, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BoundService cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BoundService result;
      
      private BoundService PrepareBuilder() {
        if (resultIsReadOnly) {
          BoundService original = result;
          result = new BoundService();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BoundService MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.BoundService.Descriptor; }
      }
      
      public override BoundService DefaultInstanceForType {
        get { return global::bnet.protocol.connection.BoundService.DefaultInstance; }
      }
      
      public override BoundService BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BoundService) {
          return MergeFrom((BoundService) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BoundService other) {
        if (other == global::bnet.protocol.connection.BoundService.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHash) {
          Hash = other.Hash;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_boundServiceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _boundServiceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasHash = input.ReadFixed32(ref result.hash_);
              break;
            }
            case 16: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHash {
        get { return result.hasHash; }
      }
      public uint Hash {
        get { return result.Hash; }
        set { SetHash(value); }
      }
      public Builder SetHash(uint value) {
        PrepareBuilder();
        result.hasHash = true;
        result.hash_ = value;
        return this;
      }
      public Builder ClearHash() {
        PrepareBuilder();
        result.hasHash = false;
        result.hash_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static BoundService() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BindRequest : pb::GeneratedMessage<BindRequest, BindRequest.Builder> {
    private BindRequest() { }
    private static readonly BindRequest defaultInstance = new BindRequest().MakeReadOnly();
    private static readonly string[] _bindRequestFieldNames = new string[] { "exported_service", "imported_service_hash" };
    private static readonly uint[] _bindRequestFieldTags = new uint[] { 18, 10 };
    public static BindRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BindRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_BindRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindRequest, BindRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_BindRequest__FieldAccessorTable; }
    }
    
    public const int ImportedServiceHashFieldNumber = 1;
    private int importedServiceHashMemoizedSerializedSize;
    private pbc::PopsicleList<uint> importedServiceHash_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> ImportedServiceHashList {
      get { return pbc::Lists.AsReadOnly(importedServiceHash_); }
    }
    public int ImportedServiceHashCount {
      get { return importedServiceHash_.Count; }
    }
    public uint GetImportedServiceHash(int index) {
      return importedServiceHash_[index];
    }
    
    public const int ExportedServiceFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.connection.BoundService> exportedService_ = new pbc::PopsicleList<global::bnet.protocol.connection.BoundService>();
    public scg::IList<global::bnet.protocol.connection.BoundService> ExportedServiceList {
      get { return exportedService_; }
    }
    public int ExportedServiceCount {
      get { return exportedService_.Count; }
    }
    public global::bnet.protocol.connection.BoundService GetExportedService(int index) {
      return exportedService_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.connection.BoundService element in ExportedServiceList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bindRequestFieldNames;
      if (importedServiceHash_.Count > 0) {
        output.WritePackedFixed32Array(1, field_names[1], importedServiceHashMemoizedSerializedSize, importedServiceHash_);
      }
      if (exportedService_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], exportedService_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * importedServiceHash_.Count;
          size += dataSize;
          if (importedServiceHash_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          importedServiceHashMemoizedSerializedSize = dataSize;
        }
        foreach (global::bnet.protocol.connection.BoundService element in ExportedServiceList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BindRequest MakeReadOnly() {
      importedServiceHash_.MakeReadOnly();
      exportedService_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BindRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BindRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BindRequest result;
      
      private BindRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          BindRequest original = result;
          result = new BindRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BindRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.BindRequest.Descriptor; }
      }
      
      public override BindRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.BindRequest.DefaultInstance; }
      }
      
      public override BindRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindRequest) {
          return MergeFrom((BindRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindRequest other) {
        if (other == global::bnet.protocol.connection.BindRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.importedServiceHash_.Count != 0) {
          result.importedServiceHash_.Add(other.importedServiceHash_);
        }
        if (other.exportedService_.Count != 0) {
          result.exportedService_.Add(other.exportedService_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bindRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bindRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadFixed32Array(tag, field_name, result.importedServiceHash_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.exportedService_, global::bnet.protocol.connection.BoundService.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<uint> ImportedServiceHashList {
        get { return PrepareBuilder().importedServiceHash_; }
      }
      public int ImportedServiceHashCount {
        get { return result.ImportedServiceHashCount; }
      }
      public uint GetImportedServiceHash(int index) {
        return result.GetImportedServiceHash(index);
      }
      public Builder SetImportedServiceHash(int index, uint value) {
        PrepareBuilder();
        result.importedServiceHash_[index] = value;
        return this;
      }
      public Builder AddImportedServiceHash(uint value) {
        PrepareBuilder();
        result.importedServiceHash_.Add(value);
        return this;
      }
      public Builder AddRangeImportedServiceHash(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.importedServiceHash_.Add(values);
        return this;
      }
      public Builder ClearImportedServiceHash() {
        PrepareBuilder();
        result.importedServiceHash_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.connection.BoundService> ExportedServiceList {
        get { return PrepareBuilder().exportedService_; }
      }
      public int ExportedServiceCount {
        get { return result.ExportedServiceCount; }
      }
      public global::bnet.protocol.connection.BoundService GetExportedService(int index) {
        return result.GetExportedService(index);
      }
      public Builder SetExportedService(int index, global::bnet.protocol.connection.BoundService value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exportedService_[index] = value;
        return this;
      }
      public Builder SetExportedService(int index, global::bnet.protocol.connection.BoundService.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.exportedService_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddExportedService(global::bnet.protocol.connection.BoundService value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exportedService_.Add(value);
        return this;
      }
      public Builder AddExportedService(global::bnet.protocol.connection.BoundService.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.exportedService_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeExportedService(scg::IEnumerable<global::bnet.protocol.connection.BoundService> values) {
        PrepareBuilder();
        result.exportedService_.Add(values);
        return this;
      }
      public Builder ClearExportedService() {
        PrepareBuilder();
        result.exportedService_.Clear();
        return this;
      }
    }
    static BindRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BindResponse : pb::GeneratedMessage<BindResponse, BindResponse.Builder> {
    private BindResponse() { }
    private static readonly BindResponse defaultInstance = new BindResponse().MakeReadOnly();
    private static readonly string[] _bindResponseFieldNames = new string[] { "imported_service_id" };
    private static readonly uint[] _bindResponseFieldTags = new uint[] { 10 };
    public static BindResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BindResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_BindResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindResponse, BindResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_BindResponse__FieldAccessorTable; }
    }
    
    public const int ImportedServiceIdFieldNumber = 1;
    private int importedServiceIdMemoizedSerializedSize;
    private pbc::PopsicleList<uint> importedServiceId_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> ImportedServiceIdList {
      get { return pbc::Lists.AsReadOnly(importedServiceId_); }
    }
    public int ImportedServiceIdCount {
      get { return importedServiceId_.Count; }
    }
    public uint GetImportedServiceId(int index) {
      return importedServiceId_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bindResponseFieldNames;
      if (importedServiceId_.Count > 0) {
        output.WritePackedUInt32Array(1, field_names[0], importedServiceIdMemoizedSerializedSize, importedServiceId_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (uint element in ImportedServiceIdList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (importedServiceId_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          importedServiceIdMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BindResponse MakeReadOnly() {
      importedServiceId_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BindResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BindResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BindResponse result;
      
      private BindResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          BindResponse original = result;
          result = new BindResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BindResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.BindResponse.Descriptor; }
      }
      
      public override BindResponse DefaultInstanceForType {
        get { return global::bnet.protocol.connection.BindResponse.DefaultInstance; }
      }
      
      public override BindResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindResponse) {
          return MergeFrom((BindResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindResponse other) {
        if (other == global::bnet.protocol.connection.BindResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.importedServiceId_.Count != 0) {
          result.importedServiceId_.Add(other.importedServiceId_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bindResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bindResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt32Array(tag, field_name, result.importedServiceId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<uint> ImportedServiceIdList {
        get { return PrepareBuilder().importedServiceId_; }
      }
      public int ImportedServiceIdCount {
        get { return result.ImportedServiceIdCount; }
      }
      public uint GetImportedServiceId(int index) {
        return result.GetImportedServiceId(index);
      }
      public Builder SetImportedServiceId(int index, uint value) {
        PrepareBuilder();
        result.importedServiceId_[index] = value;
        return this;
      }
      public Builder AddImportedServiceId(uint value) {
        PrepareBuilder();
        result.importedServiceId_.Add(value);
        return this;
      }
      public Builder AddRangeImportedServiceId(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.importedServiceId_.Add(values);
        return this;
      }
      public Builder ClearImportedServiceId() {
        PrepareBuilder();
        result.importedServiceId_.Clear();
        return this;
      }
    }
    static BindResponse() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EchoRequest : pb::GeneratedMessage<EchoRequest, EchoRequest.Builder> {
    private EchoRequest() { }
    private static readonly EchoRequest defaultInstance = new EchoRequest().MakeReadOnly();
    private static readonly string[] _echoRequestFieldNames = new string[] { "network_only", "payload", "time" };
    private static readonly uint[] _echoRequestFieldTags = new uint[] { 16, 26, 9 };
    public static EchoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EchoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EchoRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_EchoRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EchoRequest, EchoRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_EchoRequest__FieldAccessorTable; }
    }
    
    public const int TimeFieldNumber = 1;
    private bool hasTime;
    private ulong time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public ulong Time {
      get { return time_; }
    }
    
    public const int NetworkOnlyFieldNumber = 2;
    private bool hasNetworkOnly;
    private bool networkOnly_;
    public bool HasNetworkOnly {
      get { return hasNetworkOnly; }
    }
    public bool NetworkOnly {
      get { return networkOnly_; }
    }
    
    public const int PayloadFieldNumber = 3;
    private bool hasPayload;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public bool HasPayload {
      get { return hasPayload; }
    }
    public pb::ByteString Payload {
      get { return payload_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _echoRequestFieldNames;
      if (hasTime) {
        output.WriteFixed64(1, field_names[2], Time);
      }
      if (hasNetworkOnly) {
        output.WriteBool(2, field_names[0], NetworkOnly);
      }
      if (hasPayload) {
        output.WriteBytes(3, field_names[1], Payload);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, Time);
        }
        if (hasNetworkOnly) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, NetworkOnly);
        }
        if (hasPayload) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Payload);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EchoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EchoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EchoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EchoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EchoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EchoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EchoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EchoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EchoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EchoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EchoRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EchoRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EchoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EchoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EchoRequest result;
      
      private EchoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          EchoRequest original = result;
          result = new EchoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EchoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.EchoRequest.Descriptor; }
      }
      
      public override EchoRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.EchoRequest.DefaultInstance; }
      }
      
      public override EchoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EchoRequest) {
          return MergeFrom((EchoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EchoRequest other) {
        if (other == global::bnet.protocol.connection.EchoRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasNetworkOnly) {
          NetworkOnly = other.NetworkOnly;
        }
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_echoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _echoRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasTime = input.ReadFixed64(ref result.time_);
              break;
            }
            case 16: {
              result.hasNetworkOnly = input.ReadBool(ref result.networkOnly_);
              break;
            }
            case 26: {
              result.hasPayload = input.ReadBytes(ref result.payload_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public ulong Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(ulong value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0;
        return this;
      }
      
      public bool HasNetworkOnly {
        get { return result.hasNetworkOnly; }
      }
      public bool NetworkOnly {
        get { return result.NetworkOnly; }
        set { SetNetworkOnly(value); }
      }
      public Builder SetNetworkOnly(bool value) {
        PrepareBuilder();
        result.hasNetworkOnly = true;
        result.networkOnly_ = value;
        return this;
      }
      public Builder ClearNetworkOnly() {
        PrepareBuilder();
        result.hasNetworkOnly = false;
        result.networkOnly_ = false;
        return this;
      }
      
      public bool HasPayload {
        get { return result.hasPayload; }
      }
      public pb::ByteString Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.hasPayload = false;
        result.payload_ = pb::ByteString.Empty;
        return this;
      }
    }
    static EchoRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EchoResponse : pb::GeneratedMessage<EchoResponse, EchoResponse.Builder> {
    private EchoResponse() { }
    private static readonly EchoResponse defaultInstance = new EchoResponse().MakeReadOnly();
    private static readonly string[] _echoResponseFieldNames = new string[] { "payload", "time" };
    private static readonly uint[] _echoResponseFieldTags = new uint[] { 18, 9 };
    public static EchoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EchoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EchoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_EchoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EchoResponse, EchoResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_EchoResponse__FieldAccessorTable; }
    }
    
    public const int TimeFieldNumber = 1;
    private bool hasTime;
    private ulong time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public ulong Time {
      get { return time_; }
    }
    
    public const int PayloadFieldNumber = 2;
    private bool hasPayload;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public bool HasPayload {
      get { return hasPayload; }
    }
    public pb::ByteString Payload {
      get { return payload_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _echoResponseFieldNames;
      if (hasTime) {
        output.WriteFixed64(1, field_names[1], Time);
      }
      if (hasPayload) {
        output.WriteBytes(2, field_names[0], Payload);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, Time);
        }
        if (hasPayload) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Payload);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EchoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EchoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EchoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EchoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EchoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EchoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EchoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EchoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EchoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EchoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EchoResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EchoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EchoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EchoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EchoResponse result;
      
      private EchoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          EchoResponse original = result;
          result = new EchoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EchoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.EchoResponse.Descriptor; }
      }
      
      public override EchoResponse DefaultInstanceForType {
        get { return global::bnet.protocol.connection.EchoResponse.DefaultInstance; }
      }
      
      public override EchoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EchoResponse) {
          return MergeFrom((EchoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EchoResponse other) {
        if (other == global::bnet.protocol.connection.EchoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_echoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _echoResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasTime = input.ReadFixed64(ref result.time_);
              break;
            }
            case 18: {
              result.hasPayload = input.ReadBytes(ref result.payload_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public ulong Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(ulong value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0;
        return this;
      }
      
      public bool HasPayload {
        get { return result.hasPayload; }
      }
      public pb::ByteString Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.hasPayload = false;
        result.payload_ = pb::ByteString.Empty;
        return this;
      }
    }
    static EchoResponse() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DisconnectRequest : pb::GeneratedMessage<DisconnectRequest, DisconnectRequest.Builder> {
    private DisconnectRequest() { }
    private static readonly DisconnectRequest defaultInstance = new DisconnectRequest().MakeReadOnly();
    private static readonly string[] _disconnectRequestFieldNames = new string[] { "error_code" };
    private static readonly uint[] _disconnectRequestFieldTags = new uint[] { 8 };
    public static DisconnectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DisconnectRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DisconnectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_DisconnectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DisconnectRequest, DisconnectRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_DisconnectRequest__FieldAccessorTable; }
    }
    
    public const int ErrorCodeFieldNumber = 1;
    private bool hasErrorCode;
    private uint errorCode_;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    public uint ErrorCode {
      get { return errorCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasErrorCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _disconnectRequestFieldNames;
      if (hasErrorCode) {
        output.WriteUInt32(1, field_names[0], ErrorCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasErrorCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ErrorCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DisconnectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DisconnectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DisconnectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DisconnectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DisconnectRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DisconnectRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DisconnectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DisconnectRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DisconnectRequest result;
      
      private DisconnectRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          DisconnectRequest original = result;
          result = new DisconnectRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DisconnectRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.DisconnectRequest.Descriptor; }
      }
      
      public override DisconnectRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.DisconnectRequest.DefaultInstance; }
      }
      
      public override DisconnectRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DisconnectRequest) {
          return MergeFrom((DisconnectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DisconnectRequest other) {
        if (other == global::bnet.protocol.connection.DisconnectRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_disconnectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _disconnectRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasErrorCode = input.ReadUInt32(ref result.errorCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasErrorCode {
        get { return result.hasErrorCode; }
      }
      public uint ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      public Builder SetErrorCode(uint value) {
        PrepareBuilder();
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
    }
    static DisconnectRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DisconnectNotification : pb::GeneratedMessage<DisconnectNotification, DisconnectNotification.Builder> {
    private DisconnectNotification() { }
    private static readonly DisconnectNotification defaultInstance = new DisconnectNotification().MakeReadOnly();
    private static readonly string[] _disconnectNotificationFieldNames = new string[] { "error_code", "reason" };
    private static readonly uint[] _disconnectNotificationFieldTags = new uint[] { 8, 18 };
    public static DisconnectNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DisconnectNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DisconnectNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_DisconnectNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DisconnectNotification, DisconnectNotification.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_DisconnectNotification__FieldAccessorTable; }
    }
    
    public const int ErrorCodeFieldNumber = 1;
    private bool hasErrorCode;
    private uint errorCode_;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    public uint ErrorCode {
      get { return errorCode_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasErrorCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _disconnectNotificationFieldNames;
      if (hasErrorCode) {
        output.WriteUInt32(1, field_names[0], ErrorCode);
      }
      if (hasReason) {
        output.WriteString(2, field_names[1], Reason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasErrorCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ErrorCode);
        }
        if (hasReason) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Reason);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DisconnectNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DisconnectNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DisconnectNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DisconnectNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DisconnectNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DisconnectNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DisconnectNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DisconnectNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DisconnectNotification result;
      
      private DisconnectNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          DisconnectNotification original = result;
          result = new DisconnectNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DisconnectNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.DisconnectNotification.Descriptor; }
      }
      
      public override DisconnectNotification DefaultInstanceForType {
        get { return global::bnet.protocol.connection.DisconnectNotification.DefaultInstance; }
      }
      
      public override DisconnectNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DisconnectNotification) {
          return MergeFrom((DisconnectNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DisconnectNotification other) {
        if (other == global::bnet.protocol.connection.DisconnectNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_disconnectNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _disconnectNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasErrorCode = input.ReadUInt32(ref result.errorCode_);
              break;
            }
            case 18: {
              result.hasReason = input.ReadString(ref result.reason_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasErrorCode {
        get { return result.hasErrorCode; }
      }
      public uint ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      public Builder SetErrorCode(uint value) {
        PrepareBuilder();
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
    }
    static DisconnectNotification() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NullRequest : pb::GeneratedMessage<NullRequest, NullRequest.Builder> {
    private NullRequest() { }
    private static readonly NullRequest defaultInstance = new NullRequest().MakeReadOnly();
    private static readonly string[] _nullRequestFieldNames = new string[] {  };
    private static readonly uint[] _nullRequestFieldTags = new uint[] {  };
    public static NullRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NullRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NullRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_NullRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NullRequest, NullRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_NullRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nullRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NullRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NullRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NullRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NullRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NullRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NullRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NullRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NullRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NullRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NullRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NullRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NullRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NullRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NullRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NullRequest result;
      
      private NullRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NullRequest original = result;
          result = new NullRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NullRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.NullRequest.Descriptor; }
      }
      
      public override NullRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.NullRequest.DefaultInstance; }
      }
      
      public override NullRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NullRequest) {
          return MergeFrom((NullRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NullRequest other) {
        if (other == global::bnet.protocol.connection.NullRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nullRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nullRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NullRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EncryptRequest : pb::GeneratedMessage<EncryptRequest, EncryptRequest.Builder> {
    private EncryptRequest() { }
    private static readonly EncryptRequest defaultInstance = new EncryptRequest().MakeReadOnly();
    private static readonly string[] _encryptRequestFieldNames = new string[] {  };
    private static readonly uint[] _encryptRequestFieldTags = new uint[] {  };
    public static EncryptRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EncryptRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EncryptRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_EncryptRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EncryptRequest, EncryptRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.connection.Proto.ConnectionService.internal__static_bnet_protocol_connection_EncryptRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _encryptRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EncryptRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EncryptRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EncryptRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EncryptRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EncryptRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EncryptRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EncryptRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EncryptRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EncryptRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EncryptRequest result;
      
      private EncryptRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          EncryptRequest original = result;
          result = new EncryptRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EncryptRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.connection.EncryptRequest.Descriptor; }
      }
      
      public override EncryptRequest DefaultInstanceForType {
        get { return global::bnet.protocol.connection.EncryptRequest.DefaultInstance; }
      }
      
      public override EncryptRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EncryptRequest) {
          return MergeFrom((EncryptRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EncryptRequest other) {
        if (other == global::bnet.protocol.connection.EncryptRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_encryptRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _encryptRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static EncryptRequest() {
      object.ReferenceEquals(global::bnet.protocol.connection.Proto.ConnectionService.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class ConnectionService : pb::IService {
    public abstract void Connect(
        pb::IRpcController controller,
        global::bnet.protocol.connection.ConnectRequest request,
        global::System.Action<global::bnet.protocol.connection.ConnectResponse> done);
    public abstract void Bind(
        pb::IRpcController controller,
        global::bnet.protocol.connection.BindRequest request,
        global::System.Action<global::bnet.protocol.connection.BindResponse> done);
    public abstract void Echo(
        pb::IRpcController controller,
        global::bnet.protocol.connection.EchoRequest request,
        global::System.Action<global::bnet.protocol.connection.EchoResponse> done);
    public abstract void ForceDisconnect(
        pb::IRpcController controller,
        global::bnet.protocol.connection.DisconnectNotification request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    public abstract void Null(
        pb::IRpcController controller,
        global::bnet.protocol.connection.NullRequest request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    public abstract void Encrypt(
        pb::IRpcController controller,
        global::bnet.protocol.connection.EncryptRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    public abstract void RequestDisconnect(
        pb::IRpcController controller,
        global::bnet.protocol.connection.DisconnectRequest request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.ConnectionService.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.Connect(controller, (global::bnet.protocol.connection.ConnectRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.connection.ConnectResponse>(
              done));
          return;
        case 1:
          this.Bind(controller, (global::bnet.protocol.connection.BindRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.connection.BindResponse>(
              done));
          return;
        case 2:
          this.Echo(controller, (global::bnet.protocol.connection.EchoRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.connection.EchoResponse>(
              done));
          return;
        case 3:
          this.ForceDisconnect(controller, (global::bnet.protocol.connection.DisconnectNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        case 4:
          this.Null(controller, (global::bnet.protocol.connection.NullRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        case 5:
          this.Encrypt(controller, (global::bnet.protocol.connection.EncryptRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        case 6:
          this.RequestDisconnect(controller, (global::bnet.protocol.connection.DisconnectRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.connection.ConnectRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.connection.BindRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.connection.EchoRequest.DefaultInstance;
        case 3:
          return global::bnet.protocol.connection.DisconnectNotification.DefaultInstance;
        case 4:
          return global::bnet.protocol.connection.NullRequest.DefaultInstance;
        case 5:
          return global::bnet.protocol.connection.EncryptRequest.DefaultInstance;
        case 6:
          return global::bnet.protocol.connection.DisconnectRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.connection.ConnectResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.connection.BindResponse.DefaultInstance;
        case 2:
          return global::bnet.protocol.connection.EchoResponse.DefaultInstance;
        case 3:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        case 4:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        case 5:
          return global::bnet.protocol.NoData.DefaultInstance;
        case 6:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.connection.ConnectionService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void Connect(
          pb::IRpcController controller,
          global::bnet.protocol.connection.ConnectRequest request,
          global::System.Action<global::bnet.protocol.connection.ConnectResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.connection.ConnectResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.connection.ConnectResponse, global::bnet.protocol.connection.ConnectResponse.Builder>(done, global::bnet.protocol.connection.ConnectResponse.DefaultInstance));
      }
      
      public override void Bind(
          pb::IRpcController controller,
          global::bnet.protocol.connection.BindRequest request,
          global::System.Action<global::bnet.protocol.connection.BindResponse> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.connection.BindResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.connection.BindResponse, global::bnet.protocol.connection.BindResponse.Builder>(done, global::bnet.protocol.connection.BindResponse.DefaultInstance));
      }
      
      public override void Echo(
          pb::IRpcController controller,
          global::bnet.protocol.connection.EchoRequest request,
          global::System.Action<global::bnet.protocol.connection.EchoResponse> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.connection.EchoResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.connection.EchoResponse, global::bnet.protocol.connection.EchoResponse.Builder>(done, global::bnet.protocol.connection.EchoResponse.DefaultInstance));
      }
      
      public override void ForceDisconnect(
          pb::IRpcController controller,
          global::bnet.protocol.connection.DisconnectNotification request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void Null(
          pb::IRpcController controller,
          global::bnet.protocol.connection.NullRequest request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[4],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void Encrypt(
          pb::IRpcController controller,
          global::bnet.protocol.connection.EncryptRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[5],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
      
      public override void RequestDisconnect(
          pb::IRpcController controller,
          global::bnet.protocol.connection.DisconnectRequest request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[6],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
