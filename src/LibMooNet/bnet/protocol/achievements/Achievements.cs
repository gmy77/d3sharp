// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.achievements {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Achievements {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_AchievementUpdateRecord__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.AchievementUpdateRecord, global::bnet.protocol.achievements.AchievementUpdateRecord.Builder> internal__static_bnet_protocol_achievements_AchievementUpdateRecord__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.CriteriaUpdateRecord, global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder> internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_PostUpdateRecord__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateRecord, global::bnet.protocol.achievements.PostUpdateRecord.Builder> internal__static_bnet_protocol_achievements_PostUpdateRecord__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_PostUpdateRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateRequest, global::bnet.protocol.achievements.PostUpdateRequest.Builder> internal__static_bnet_protocol_achievements_PostUpdateRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_PostUpdateResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateResponse, global::bnet.protocol.achievements.PostUpdateResponse.Builder> internal__static_bnet_protocol_achievements_PostUpdateResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RegisterWithServiceRequest, global::bnet.protocol.achievements.RegisterWithServiceRequest.Builder> internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RegisterWithServiceResponse, global::bnet.protocol.achievements.RegisterWithServiceResponse.Builder> internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.UnregisterFromServiceRequest, global::bnet.protocol.achievements.UnregisterFromServiceRequest.Builder> internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_Snapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.Snapshot, global::bnet.protocol.achievements.Snapshot.Builder> internal__static_bnet_protocol_achievements_Snapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_RequestSnapshotRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RequestSnapshotRequest, global::bnet.protocol.achievements.RequestSnapshotRequest.Builder> internal__static_bnet_protocol_achievements_RequestSnapshotRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_RequestSnapshotResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RequestSnapshotResponse, global::bnet.protocol.achievements.RequestSnapshotResponse.Builder> internal__static_bnet_protocol_achievements_RequestSnapshotResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_InitializeRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.InitializeRequest, global::bnet.protocol.achievements.InitializeRequest.Builder> internal__static_bnet_protocol_achievements_InitializeRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_InitializeResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.InitializeResponse, global::bnet.protocol.achievements.InitializeResponse.Builder> internal__static_bnet_protocol_achievements_InitializeResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.SnapshotUpdateNotification, global::bnet.protocol.achievements.SnapshotUpdateNotification.Builder> internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Achievements() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CjJzZXJ2aWNlL2FjaGlldmVtZW50cy9kZWZpbml0aW9uL2FjaGlldmVtZW50" + 
          "cy5wcm90bxIaYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVudHMaEWxpYi9ycGMv" + 
          "cnBjLnByb3RvGhlsaWIvcHJvdG9jb2wvZW50aXR5LnByb3RvGiFsaWIvcHJv" + 
          "dG9jb2wvY29udGVudF9oYW5kbGUucHJvdG8iRQoXQWNoaWV2ZW1lbnRVcGRh" + 
          "dGVSZWNvcmQSFgoOYWNoaWV2ZW1lbnRfaWQYASACKAQSEgoKY29tcGxldGlv" + 
          "bhgCIAIoBSJpChRDcml0ZXJpYVVwZGF0ZVJlY29yZBITCgtjcml0ZXJpYV9J" + 
          "ZBgBIAIoBBIVCgpzdGFydF90aW1lGAIgASgEOgEwEhMKCHF1YW50aXR5GAMg" + 
          "ASgEOgEwEhAKBWZsYWdzGAQgASgNOgEwIoIBChBQb3N0VXBkYXRlUmVjb3Jk" + 
          "EioKCXRhcmdldF9pZBgBIAIoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQS" + 
          "QgoIY3JpdGVyaWEYAiADKAsyMC5ibmV0LnByb3RvY29sLmFjaGlldmVtZW50" + 
          "cy5Dcml0ZXJpYVVwZGF0ZVJlY29yZCJ0ChFQb3N0VXBkYXRlUmVxdWVzdBJI" + 
          "ChJwb3N0X3VwZGF0ZV9yZWNvcmQYASADKAsyLC5ibmV0LnByb3RvY29sLmFj" + 
          "aGlldmVtZW50cy5Qb3N0VXBkYXRlUmVjb3JkEhUKCnByb2dyYW1faWQYAiAB" + 
          "KAc6ATAiKAoSUG9zdFVwZGF0ZVJlc3BvbnNlEhIKCmVycm9yX2NvZGUYASAD" + 
          "KA0ijgEKGlJlZ2lzdGVyV2l0aFNlcnZpY2VSZXF1ZXN0EioKCXRhcmdldF9p" + 
          "ZBgBIAIoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQSEQoJb2JqZWN0X2lk" + 
          "GAIgAigEEhoKEnJlZ2lzdHJhdGlvbl9mbGFncxgDIAEoDRIVCgpwcm9ncmFt" + 
          "X2lkGAQgASgHOgEwIv4BChtSZWdpc3RlcldpdGhTZXJ2aWNlUmVzcG9uc2US" + 
          "IQoWbWF4X3JlY29yZHNfcGVyX3VwZGF0ZRgBIAEoDToBMBIiChdtYXhfY3Jp" + 
          "dGVyaWFfcGVyX3JlY29yZBgCIAEoDToBMBImChttYXhfYWNoaWV2ZW1lbnRz" + 
          "X3Blcl9yZWNvcmQYAyABKA06ATASHAoRbWF4X3JlZ2lzdHJhdGlvbnMYBCAB" + 
          "KA06ATASGgoPZmx1c2hfZnJlcXVlbmN5GAUgASgEOgEwEjYKCHNuYXBzaG90" + 
          "GAYgASgLMiQuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVudHMuU25hcHNob3Qi" + 
          "XQocVW5yZWdpc3RlckZyb21TZXJ2aWNlUmVxdWVzdBIqCgl0YXJnZXRfaWQY" + 
          "ASACKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEhEKCW9iamVjdF9pZBgC" + 
          "IAIoBCKqAQoIU25hcHNob3QSUQoUYWNoaWV2ZW1lbnRfc25hcHNob3QYASAD" + 
          "KAsyMy5ibmV0LnByb3RvY29sLmFjaGlldmVtZW50cy5BY2hpZXZlbWVudFVw" + 
          "ZGF0ZVJlY29yZBJLChFjcml0ZXJpYV9zbmFwc2hvdBgCIAMoCzIwLmJuZXQu" + 
          "cHJvdG9jb2wuYWNoaWV2ZW1lbnRzLkNyaXRlcmlhVXBkYXRlUmVjb3JkIlQK" + 
          "FlJlcXVlc3RTbmFwc2hvdFJlcXVlc3QSKgoJZW50aXR5X2lkGAEgAigLMhcu" + 
          "Ym5ldC5wcm90b2NvbC5FbnRpdHlJZBIOCgZmaWx0ZXIYAiACKA0iUQoXUmVx" + 
          "dWVzdFNuYXBzaG90UmVzcG9uc2USNgoIc25hcHNob3QYASABKAsyJC5ibmV0" + 
          "LnByb3RvY29sLmFjaGlldmVtZW50cy5TbmFwc2hvdCInChFJbml0aWFsaXpl" + 
          "UmVxdWVzdBISCgpwcm9ncmFtX2lkGAEgASgHIkoKEkluaXRpYWxpemVSZXNw" + 
          "b25zZRI0Cg5jb250ZW50X2hhbmRsZRgBIAIoCzIcLmJuZXQucHJvdG9jb2wu" + 
          "Q29udGVudEhhbmRsZSKAAQoaU25hcHNob3RVcGRhdGVOb3RpZmljYXRpb24S" + 
          "KgoJdGFyZ2V0X2lkGAEgAigLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBI2" + 
          "CghzbmFwc2hvdBgCIAIoCzIkLmJuZXQucHJvdG9jb2wuYWNoaWV2ZW1lbnRz" + 
          "LlNuYXBzaG90Mv0EChNBY2hpZXZlbWVudHNTZXJ2aWNlEnEKClBvc3RVcGRh" + 
          "dGUSLS5ibmV0LnByb3RvY29sLmFjaGlldmVtZW50cy5Qb3N0VXBkYXRlUmVx" + 
          "dWVzdBouLmJuZXQucHJvdG9jb2wuYWNoaWV2ZW1lbnRzLlBvc3RVcGRhdGVS" + 
          "ZXNwb25zZSIEgLUYARKMAQoTUmVnaXN0ZXJXaXRoU2VydmljZRI2LmJuZXQu" + 
          "cHJvdG9jb2wuYWNoaWV2ZW1lbnRzLlJlZ2lzdGVyV2l0aFNlcnZpY2VSZXF1" + 
          "ZXN0GjcuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVudHMuUmVnaXN0ZXJXaXRo" + 
          "U2VydmljZVJlc3BvbnNlIgSAtRgCEoABCg9SZXF1ZXN0U25hcHNob3QSMi5i" + 
          "bmV0LnByb3RvY29sLmFjaGlldmVtZW50cy5SZXF1ZXN0U25hcHNob3RSZXF1" + 
          "ZXN0GjMuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVudHMuUmVxdWVzdFNuYXBz" + 
          "aG90UmVzcG9uc2UiBIC1GAMSbgoVVW5yZWdpc3RlckZyb21TZXJ2aWNlEjgu" + 
          "Ym5ldC5wcm90b2NvbC5hY2hpZXZlbWVudHMuVW5yZWdpc3RlckZyb21TZXJ2" + 
          "aWNlUmVxdWVzdBoVLmJuZXQucHJvdG9jb2wuTm9EYXRhIgSAtRgEEnEKCklu" + 
          "aXRpYWxpemUSLS5ibmV0LnByb3RvY29sLmFjaGlldmVtZW50cy5Jbml0aWFs" + 
          "aXplUmVxdWVzdBouLmJuZXQucHJvdG9jb2wuYWNoaWV2ZW1lbnRzLkluaXRp" + 
          "YWxpemVSZXNwb25zZSIEgLUYBTKGAQoSQWNoaWV2ZW1lbnRzTm90aWZ5EnAK" + 
          "FE5vdGlmeVNuYXBzaG90VXBkYXRlEjYuYm5ldC5wcm90b2NvbC5hY2hpZXZl" + 
          "bWVudHMuU25hcHNob3RVcGRhdGVOb3RpZmljYXRpb24aGi5ibmV0LnByb3Rv" + 
          "Y29sLk5PX1JFU1BPTlNFIgSAtRgBQgOAAQA=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_achievements_AchievementUpdateRecord__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_achievements_AchievementUpdateRecord__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.AchievementUpdateRecord, global::bnet.protocol.achievements.AchievementUpdateRecord.Builder>(internal__static_bnet_protocol_achievements_AchievementUpdateRecord__Descriptor,
                new string[] { "AchievementId", "Completion", });
        internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.CriteriaUpdateRecord, global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder>(internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__Descriptor,
                new string[] { "CriteriaId", "StartTime", "Quantity", "Flags", });
        internal__static_bnet_protocol_achievements_PostUpdateRecord__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_achievements_PostUpdateRecord__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateRecord, global::bnet.protocol.achievements.PostUpdateRecord.Builder>(internal__static_bnet_protocol_achievements_PostUpdateRecord__Descriptor,
                new string[] { "TargetId", "Criteria", });
        internal__static_bnet_protocol_achievements_PostUpdateRequest__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_achievements_PostUpdateRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateRequest, global::bnet.protocol.achievements.PostUpdateRequest.Builder>(internal__static_bnet_protocol_achievements_PostUpdateRequest__Descriptor,
                new string[] { "PostUpdateRecord", "ProgramId", });
        internal__static_bnet_protocol_achievements_PostUpdateResponse__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_achievements_PostUpdateResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateResponse, global::bnet.protocol.achievements.PostUpdateResponse.Builder>(internal__static_bnet_protocol_achievements_PostUpdateResponse__Descriptor,
                new string[] { "ErrorCode", });
        internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RegisterWithServiceRequest, global::bnet.protocol.achievements.RegisterWithServiceRequest.Builder>(internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__Descriptor,
                new string[] { "TargetId", "ObjectId", "RegistrationFlags", "ProgramId", });
        internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RegisterWithServiceResponse, global::bnet.protocol.achievements.RegisterWithServiceResponse.Builder>(internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__Descriptor,
                new string[] { "MaxRecordsPerUpdate", "MaxCriteriaPerRecord", "MaxAchievementsPerRecord", "MaxRegistrations", "FlushFrequency", "Snapshot", });
        internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.UnregisterFromServiceRequest, global::bnet.protocol.achievements.UnregisterFromServiceRequest.Builder>(internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__Descriptor,
                new string[] { "TargetId", "ObjectId", });
        internal__static_bnet_protocol_achievements_Snapshot__Descriptor = Descriptor.MessageTypes[8];
        internal__static_bnet_protocol_achievements_Snapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.Snapshot, global::bnet.protocol.achievements.Snapshot.Builder>(internal__static_bnet_protocol_achievements_Snapshot__Descriptor,
                new string[] { "AchievementSnapshot", "CriteriaSnapshot", });
        internal__static_bnet_protocol_achievements_RequestSnapshotRequest__Descriptor = Descriptor.MessageTypes[9];
        internal__static_bnet_protocol_achievements_RequestSnapshotRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RequestSnapshotRequest, global::bnet.protocol.achievements.RequestSnapshotRequest.Builder>(internal__static_bnet_protocol_achievements_RequestSnapshotRequest__Descriptor,
                new string[] { "EntityId", "Filter", });
        internal__static_bnet_protocol_achievements_RequestSnapshotResponse__Descriptor = Descriptor.MessageTypes[10];
        internal__static_bnet_protocol_achievements_RequestSnapshotResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RequestSnapshotResponse, global::bnet.protocol.achievements.RequestSnapshotResponse.Builder>(internal__static_bnet_protocol_achievements_RequestSnapshotResponse__Descriptor,
                new string[] { "Snapshot", });
        internal__static_bnet_protocol_achievements_InitializeRequest__Descriptor = Descriptor.MessageTypes[11];
        internal__static_bnet_protocol_achievements_InitializeRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.InitializeRequest, global::bnet.protocol.achievements.InitializeRequest.Builder>(internal__static_bnet_protocol_achievements_InitializeRequest__Descriptor,
                new string[] { "ProgramId", });
        internal__static_bnet_protocol_achievements_InitializeResponse__Descriptor = Descriptor.MessageTypes[12];
        internal__static_bnet_protocol_achievements_InitializeResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.InitializeResponse, global::bnet.protocol.achievements.InitializeResponse.Builder>(internal__static_bnet_protocol_achievements_InitializeResponse__Descriptor,
                new string[] { "ContentHandle", });
        internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__Descriptor = Descriptor.MessageTypes[13];
        internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.SnapshotUpdateNotification, global::bnet.protocol.achievements.SnapshotUpdateNotification.Builder>(internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__Descriptor,
                new string[] { "TargetId", "Snapshot", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
        global::bnet.protocol.Entity.RegisterAllExtensions(registry);
        global::bnet.protocol.Proto.ContentHandle.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bnet.protocol.Rpc.Descriptor, 
          global::bnet.protocol.Entity.Descriptor, 
          global::bnet.protocol.Proto.ContentHandle.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementUpdateRecord : pb::GeneratedMessage<AchievementUpdateRecord, AchievementUpdateRecord.Builder> {
    private AchievementUpdateRecord() { }
    private static readonly AchievementUpdateRecord defaultInstance = new AchievementUpdateRecord().MakeReadOnly();
    private static readonly string[] _achievementUpdateRecordFieldNames = new string[] { "achievement_id", "completion" };
    private static readonly uint[] _achievementUpdateRecordFieldTags = new uint[] { 8, 16 };
    public static AchievementUpdateRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementUpdateRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementUpdateRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_AchievementUpdateRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementUpdateRecord, AchievementUpdateRecord.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_AchievementUpdateRecord__FieldAccessorTable; }
    }
    
    public const int AchievementIdFieldNumber = 1;
    private bool hasAchievementId;
    private ulong achievementId_;
    public bool HasAchievementId {
      get { return hasAchievementId; }
    }
    public ulong AchievementId {
      get { return achievementId_; }
    }
    
    public const int CompletionFieldNumber = 2;
    private bool hasCompletion;
    private int completion_;
    public bool HasCompletion {
      get { return hasCompletion; }
    }
    public int Completion {
      get { return completion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAchievementId) return false;
        if (!hasCompletion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementUpdateRecordFieldNames;
      if (hasAchievementId) {
        output.WriteUInt64(1, field_names[0], AchievementId);
      }
      if (hasCompletion) {
        output.WriteInt32(2, field_names[1], Completion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAchievementId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, AchievementId);
        }
        if (hasCompletion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Completion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementUpdateRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementUpdateRecord MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementUpdateRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementUpdateRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementUpdateRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementUpdateRecord result;
      
      private AchievementUpdateRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementUpdateRecord original = result;
          result = new AchievementUpdateRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementUpdateRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.AchievementUpdateRecord.Descriptor; }
      }
      
      public override AchievementUpdateRecord DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.AchievementUpdateRecord.DefaultInstance; }
      }
      
      public override AchievementUpdateRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementUpdateRecord) {
          return MergeFrom((AchievementUpdateRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementUpdateRecord other) {
        if (other == global::bnet.protocol.achievements.AchievementUpdateRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAchievementId) {
          AchievementId = other.AchievementId;
        }
        if (other.HasCompletion) {
          Completion = other.Completion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementUpdateRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementUpdateRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAchievementId = input.ReadUInt64(ref result.achievementId_);
              break;
            }
            case 16: {
              result.hasCompletion = input.ReadInt32(ref result.completion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAchievementId {
        get { return result.hasAchievementId; }
      }
      public ulong AchievementId {
        get { return result.AchievementId; }
        set { SetAchievementId(value); }
      }
      public Builder SetAchievementId(ulong value) {
        PrepareBuilder();
        result.hasAchievementId = true;
        result.achievementId_ = value;
        return this;
      }
      public Builder ClearAchievementId() {
        PrepareBuilder();
        result.hasAchievementId = false;
        result.achievementId_ = 0UL;
        return this;
      }
      
      public bool HasCompletion {
        get { return result.hasCompletion; }
      }
      public int Completion {
        get { return result.Completion; }
        set { SetCompletion(value); }
      }
      public Builder SetCompletion(int value) {
        PrepareBuilder();
        result.hasCompletion = true;
        result.completion_ = value;
        return this;
      }
      public Builder ClearCompletion() {
        PrepareBuilder();
        result.hasCompletion = false;
        result.completion_ = 0;
        return this;
      }
    }
    static AchievementUpdateRecord() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CriteriaUpdateRecord : pb::GeneratedMessage<CriteriaUpdateRecord, CriteriaUpdateRecord.Builder> {
    private CriteriaUpdateRecord() { }
    private static readonly CriteriaUpdateRecord defaultInstance = new CriteriaUpdateRecord().MakeReadOnly();
    private static readonly string[] _criteriaUpdateRecordFieldNames = new string[] { "criteria_Id", "flags", "quantity", "start_time" };
    private static readonly uint[] _criteriaUpdateRecordFieldTags = new uint[] { 8, 32, 24, 16 };
    public static CriteriaUpdateRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CriteriaUpdateRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CriteriaUpdateRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CriteriaUpdateRecord, CriteriaUpdateRecord.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__FieldAccessorTable; }
    }
    
    public const int CriteriaIdFieldNumber = 1;
    private bool hasCriteriaId;
    private ulong criteriaId_;
    public bool HasCriteriaId {
      get { return hasCriteriaId; }
    }
    public ulong CriteriaId {
      get { return criteriaId_; }
    }
    
    public const int StartTimeFieldNumber = 2;
    private bool hasStartTime;
    private ulong startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public ulong StartTime {
      get { return startTime_; }
    }
    
    public const int QuantityFieldNumber = 3;
    private bool hasQuantity;
    private ulong quantity_;
    public bool HasQuantity {
      get { return hasQuantity; }
    }
    public ulong Quantity {
      get { return quantity_; }
    }
    
    public const int FlagsFieldNumber = 4;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCriteriaId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _criteriaUpdateRecordFieldNames;
      if (hasCriteriaId) {
        output.WriteUInt64(1, field_names[0], CriteriaId);
      }
      if (hasStartTime) {
        output.WriteUInt64(2, field_names[3], StartTime);
      }
      if (hasQuantity) {
        output.WriteUInt64(3, field_names[2], Quantity);
      }
      if (hasFlags) {
        output.WriteUInt32(4, field_names[1], Flags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCriteriaId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, CriteriaId);
        }
        if (hasStartTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, StartTime);
        }
        if (hasQuantity) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Quantity);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Flags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CriteriaUpdateRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CriteriaUpdateRecord MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CriteriaUpdateRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CriteriaUpdateRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CriteriaUpdateRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CriteriaUpdateRecord result;
      
      private CriteriaUpdateRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          CriteriaUpdateRecord original = result;
          result = new CriteriaUpdateRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CriteriaUpdateRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.CriteriaUpdateRecord.Descriptor; }
      }
      
      public override CriteriaUpdateRecord DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.CriteriaUpdateRecord.DefaultInstance; }
      }
      
      public override CriteriaUpdateRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CriteriaUpdateRecord) {
          return MergeFrom((CriteriaUpdateRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CriteriaUpdateRecord other) {
        if (other == global::bnet.protocol.achievements.CriteriaUpdateRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCriteriaId) {
          CriteriaId = other.CriteriaId;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasQuantity) {
          Quantity = other.Quantity;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_criteriaUpdateRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _criteriaUpdateRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCriteriaId = input.ReadUInt64(ref result.criteriaId_);
              break;
            }
            case 16: {
              result.hasStartTime = input.ReadUInt64(ref result.startTime_);
              break;
            }
            case 24: {
              result.hasQuantity = input.ReadUInt64(ref result.quantity_);
              break;
            }
            case 32: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCriteriaId {
        get { return result.hasCriteriaId; }
      }
      public ulong CriteriaId {
        get { return result.CriteriaId; }
        set { SetCriteriaId(value); }
      }
      public Builder SetCriteriaId(ulong value) {
        PrepareBuilder();
        result.hasCriteriaId = true;
        result.criteriaId_ = value;
        return this;
      }
      public Builder ClearCriteriaId() {
        PrepareBuilder();
        result.hasCriteriaId = false;
        result.criteriaId_ = 0UL;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public ulong StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(ulong value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0UL;
        return this;
      }
      
      public bool HasQuantity {
        get { return result.hasQuantity; }
      }
      public ulong Quantity {
        get { return result.Quantity; }
        set { SetQuantity(value); }
      }
      public Builder SetQuantity(ulong value) {
        PrepareBuilder();
        result.hasQuantity = true;
        result.quantity_ = value;
        return this;
      }
      public Builder ClearQuantity() {
        PrepareBuilder();
        result.hasQuantity = false;
        result.quantity_ = 0UL;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
    }
    static CriteriaUpdateRecord() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PostUpdateRecord : pb::GeneratedMessage<PostUpdateRecord, PostUpdateRecord.Builder> {
    private PostUpdateRecord() { }
    private static readonly PostUpdateRecord defaultInstance = new PostUpdateRecord().MakeReadOnly();
    private static readonly string[] _postUpdateRecordFieldNames = new string[] { "criteria", "target_id" };
    private static readonly uint[] _postUpdateRecordFieldTags = new uint[] { 18, 10 };
    public static PostUpdateRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PostUpdateRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PostUpdateRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_PostUpdateRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PostUpdateRecord, PostUpdateRecord.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_PostUpdateRecord__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private global::bnet.protocol.EntityId targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public global::bnet.protocol.EntityId TargetId {
      get { return targetId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int CriteriaFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord> criteria_ = new pbc::PopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord>();
    public scg::IList<global::bnet.protocol.achievements.CriteriaUpdateRecord> CriteriaList {
      get { return criteria_; }
    }
    public int CriteriaCount {
      get { return criteria_.Count; }
    }
    public global::bnet.protocol.achievements.CriteriaUpdateRecord GetCriteria(int index) {
      return criteria_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!TargetId.IsInitialized) return false;
        foreach (global::bnet.protocol.achievements.CriteriaUpdateRecord element in CriteriaList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _postUpdateRecordFieldNames;
      if (hasTargetId) {
        output.WriteMessage(1, field_names[1], TargetId);
      }
      if (criteria_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], criteria_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TargetId);
        }
        foreach (global::bnet.protocol.achievements.CriteriaUpdateRecord element in CriteriaList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PostUpdateRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PostUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PostUpdateRecord MakeReadOnly() {
      criteria_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PostUpdateRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PostUpdateRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PostUpdateRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PostUpdateRecord result;
      
      private PostUpdateRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          PostUpdateRecord original = result;
          result = new PostUpdateRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PostUpdateRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.PostUpdateRecord.Descriptor; }
      }
      
      public override PostUpdateRecord DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.PostUpdateRecord.DefaultInstance; }
      }
      
      public override PostUpdateRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PostUpdateRecord) {
          return MergeFrom((PostUpdateRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PostUpdateRecord other) {
        if (other == global::bnet.protocol.achievements.PostUpdateRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          MergeTargetId(other.TargetId);
        }
        if (other.criteria_.Count != 0) {
          result.criteria_.Add(other.criteria_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_postUpdateRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _postUpdateRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasTargetId) {
                subBuilder.MergeFrom(TargetId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.criteria_, global::bnet.protocol.achievements.CriteriaUpdateRecord.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
       get { return result.hasTargetId; }
      }
      public global::bnet.protocol.EntityId TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetId &&
            result.targetId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.targetId_ = global::bnet.protocol.EntityId.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
        } else {
          result.targetId_ = value;
        }
        result.hasTargetId = true;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord> CriteriaList {
        get { return PrepareBuilder().criteria_; }
      }
      public int CriteriaCount {
        get { return result.CriteriaCount; }
      }
      public global::bnet.protocol.achievements.CriteriaUpdateRecord GetCriteria(int index) {
        return result.GetCriteria(index);
      }
      public Builder SetCriteria(int index, global::bnet.protocol.achievements.CriteriaUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteria_[index] = value;
        return this;
      }
      public Builder SetCriteria(int index, global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteria_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCriteria(global::bnet.protocol.achievements.CriteriaUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteria_.Add(value);
        return this;
      }
      public Builder AddCriteria(global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteria_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCriteria(scg::IEnumerable<global::bnet.protocol.achievements.CriteriaUpdateRecord> values) {
        PrepareBuilder();
        result.criteria_.Add(values);
        return this;
      }
      public Builder ClearCriteria() {
        PrepareBuilder();
        result.criteria_.Clear();
        return this;
      }
    }
    static PostUpdateRecord() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PostUpdateRequest : pb::GeneratedMessage<PostUpdateRequest, PostUpdateRequest.Builder> {
    private PostUpdateRequest() { }
    private static readonly PostUpdateRequest defaultInstance = new PostUpdateRequest().MakeReadOnly();
    private static readonly string[] _postUpdateRequestFieldNames = new string[] { "post_update_record", "program_id" };
    private static readonly uint[] _postUpdateRequestFieldTags = new uint[] { 10, 21 };
    public static PostUpdateRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PostUpdateRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PostUpdateRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_PostUpdateRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PostUpdateRequest, PostUpdateRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_PostUpdateRequest__FieldAccessorTable; }
    }
    
    public const int PostUpdateRecordFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.achievements.PostUpdateRecord> postUpdateRecord_ = new pbc::PopsicleList<global::bnet.protocol.achievements.PostUpdateRecord>();
    public scg::IList<global::bnet.protocol.achievements.PostUpdateRecord> PostUpdateRecordList {
      get { return postUpdateRecord_; }
    }
    public int PostUpdateRecordCount {
      get { return postUpdateRecord_.Count; }
    }
    public global::bnet.protocol.achievements.PostUpdateRecord GetPostUpdateRecord(int index) {
      return postUpdateRecord_[index];
    }
    
    public const int ProgramIdFieldNumber = 2;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.achievements.PostUpdateRecord element in PostUpdateRecordList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _postUpdateRequestFieldNames;
      if (postUpdateRecord_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], postUpdateRecord_);
      }
      if (hasProgramId) {
        output.WriteFixed32(2, field_names[1], ProgramId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.achievements.PostUpdateRecord element in PostUpdateRecordList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, ProgramId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PostUpdateRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PostUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PostUpdateRequest MakeReadOnly() {
      postUpdateRecord_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PostUpdateRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PostUpdateRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PostUpdateRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PostUpdateRequest result;
      
      private PostUpdateRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PostUpdateRequest original = result;
          result = new PostUpdateRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PostUpdateRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.PostUpdateRequest.Descriptor; }
      }
      
      public override PostUpdateRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.PostUpdateRequest.DefaultInstance; }
      }
      
      public override PostUpdateRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PostUpdateRequest) {
          return MergeFrom((PostUpdateRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PostUpdateRequest other) {
        if (other == global::bnet.protocol.achievements.PostUpdateRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.postUpdateRecord_.Count != 0) {
          result.postUpdateRecord_.Add(other.postUpdateRecord_);
        }
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_postUpdateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _postUpdateRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.postUpdateRecord_, global::bnet.protocol.achievements.PostUpdateRecord.DefaultInstance, extensionRegistry);
              break;
            }
            case 21: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.PostUpdateRecord> PostUpdateRecordList {
        get { return PrepareBuilder().postUpdateRecord_; }
      }
      public int PostUpdateRecordCount {
        get { return result.PostUpdateRecordCount; }
      }
      public global::bnet.protocol.achievements.PostUpdateRecord GetPostUpdateRecord(int index) {
        return result.GetPostUpdateRecord(index);
      }
      public Builder SetPostUpdateRecord(int index, global::bnet.protocol.achievements.PostUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.postUpdateRecord_[index] = value;
        return this;
      }
      public Builder SetPostUpdateRecord(int index, global::bnet.protocol.achievements.PostUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.postUpdateRecord_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPostUpdateRecord(global::bnet.protocol.achievements.PostUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.postUpdateRecord_.Add(value);
        return this;
      }
      public Builder AddPostUpdateRecord(global::bnet.protocol.achievements.PostUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.postUpdateRecord_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePostUpdateRecord(scg::IEnumerable<global::bnet.protocol.achievements.PostUpdateRecord> values) {
        PrepareBuilder();
        result.postUpdateRecord_.Add(values);
        return this;
      }
      public Builder ClearPostUpdateRecord() {
        PrepareBuilder();
        result.postUpdateRecord_.Clear();
        return this;
      }
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
    }
    static PostUpdateRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PostUpdateResponse : pb::GeneratedMessage<PostUpdateResponse, PostUpdateResponse.Builder> {
    private PostUpdateResponse() { }
    private static readonly PostUpdateResponse defaultInstance = new PostUpdateResponse().MakeReadOnly();
    private static readonly string[] _postUpdateResponseFieldNames = new string[] { "error_code" };
    private static readonly uint[] _postUpdateResponseFieldTags = new uint[] { 8 };
    public static PostUpdateResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PostUpdateResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PostUpdateResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_PostUpdateResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PostUpdateResponse, PostUpdateResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_PostUpdateResponse__FieldAccessorTable; }
    }
    
    public const int ErrorCodeFieldNumber = 1;
    private pbc::PopsicleList<uint> errorCode_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> ErrorCodeList {
      get { return pbc::Lists.AsReadOnly(errorCode_); }
    }
    public int ErrorCodeCount {
      get { return errorCode_.Count; }
    }
    public uint GetErrorCode(int index) {
      return errorCode_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _postUpdateResponseFieldNames;
      if (errorCode_.Count > 0) {
        output.WriteUInt32Array(1, field_names[0], errorCode_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (uint element in ErrorCodeList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * errorCode_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PostUpdateResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PostUpdateResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PostUpdateResponse MakeReadOnly() {
      errorCode_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PostUpdateResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PostUpdateResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PostUpdateResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PostUpdateResponse result;
      
      private PostUpdateResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PostUpdateResponse original = result;
          result = new PostUpdateResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PostUpdateResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.PostUpdateResponse.Descriptor; }
      }
      
      public override PostUpdateResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.PostUpdateResponse.DefaultInstance; }
      }
      
      public override PostUpdateResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PostUpdateResponse) {
          return MergeFrom((PostUpdateResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PostUpdateResponse other) {
        if (other == global::bnet.protocol.achievements.PostUpdateResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.errorCode_.Count != 0) {
          result.errorCode_.Add(other.errorCode_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_postUpdateResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _postUpdateResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt32Array(tag, field_name, result.errorCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<uint> ErrorCodeList {
        get { return PrepareBuilder().errorCode_; }
      }
      public int ErrorCodeCount {
        get { return result.ErrorCodeCount; }
      }
      public uint GetErrorCode(int index) {
        return result.GetErrorCode(index);
      }
      public Builder SetErrorCode(int index, uint value) {
        PrepareBuilder();
        result.errorCode_[index] = value;
        return this;
      }
      public Builder AddErrorCode(uint value) {
        PrepareBuilder();
        result.errorCode_.Add(value);
        return this;
      }
      public Builder AddRangeErrorCode(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.errorCode_.Add(values);
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.errorCode_.Clear();
        return this;
      }
    }
    static PostUpdateResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RegisterWithServiceRequest : pb::GeneratedMessage<RegisterWithServiceRequest, RegisterWithServiceRequest.Builder> {
    private RegisterWithServiceRequest() { }
    private static readonly RegisterWithServiceRequest defaultInstance = new RegisterWithServiceRequest().MakeReadOnly();
    private static readonly string[] _registerWithServiceRequestFieldNames = new string[] { "object_id", "program_id", "registration_flags", "target_id" };
    private static readonly uint[] _registerWithServiceRequestFieldTags = new uint[] { 16, 37, 24, 10 };
    public static RegisterWithServiceRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RegisterWithServiceRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegisterWithServiceRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RegisterWithServiceRequest, RegisterWithServiceRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private global::bnet.protocol.EntityId targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public global::bnet.protocol.EntityId TargetId {
      get { return targetId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ObjectIdFieldNumber = 2;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int RegistrationFlagsFieldNumber = 3;
    private bool hasRegistrationFlags;
    private uint registrationFlags_;
    public bool HasRegistrationFlags {
      get { return hasRegistrationFlags; }
    }
    public uint RegistrationFlags {
      get { return registrationFlags_; }
    }
    
    public const int ProgramIdFieldNumber = 4;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasObjectId) return false;
        if (!TargetId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registerWithServiceRequestFieldNames;
      if (hasTargetId) {
        output.WriteMessage(1, field_names[3], TargetId);
      }
      if (hasObjectId) {
        output.WriteUInt64(2, field_names[0], ObjectId);
      }
      if (hasRegistrationFlags) {
        output.WriteUInt32(3, field_names[2], RegistrationFlags);
      }
      if (hasProgramId) {
        output.WriteFixed32(4, field_names[1], ProgramId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TargetId);
        }
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ObjectId);
        }
        if (hasRegistrationFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, RegistrationFlags);
        }
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(4, ProgramId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RegisterWithServiceRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegisterWithServiceRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RegisterWithServiceRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RegisterWithServiceRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegisterWithServiceRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegisterWithServiceRequest result;
      
      private RegisterWithServiceRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RegisterWithServiceRequest original = result;
          result = new RegisterWithServiceRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegisterWithServiceRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.RegisterWithServiceRequest.Descriptor; }
      }
      
      public override RegisterWithServiceRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.RegisterWithServiceRequest.DefaultInstance; }
      }
      
      public override RegisterWithServiceRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RegisterWithServiceRequest) {
          return MergeFrom((RegisterWithServiceRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegisterWithServiceRequest other) {
        if (other == global::bnet.protocol.achievements.RegisterWithServiceRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          MergeTargetId(other.TargetId);
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.HasRegistrationFlags) {
          RegistrationFlags = other.RegistrationFlags;
        }
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registerWithServiceRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registerWithServiceRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasTargetId) {
                subBuilder.MergeFrom(TargetId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
            case 24: {
              result.hasRegistrationFlags = input.ReadUInt32(ref result.registrationFlags_);
              break;
            }
            case 37: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
       get { return result.hasTargetId; }
      }
      public global::bnet.protocol.EntityId TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetId &&
            result.targetId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.targetId_ = global::bnet.protocol.EntityId.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
        } else {
          result.targetId_ = value;
        }
        result.hasTargetId = true;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = null;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
      
      public bool HasRegistrationFlags {
        get { return result.hasRegistrationFlags; }
      }
      public uint RegistrationFlags {
        get { return result.RegistrationFlags; }
        set { SetRegistrationFlags(value); }
      }
      public Builder SetRegistrationFlags(uint value) {
        PrepareBuilder();
        result.hasRegistrationFlags = true;
        result.registrationFlags_ = value;
        return this;
      }
      public Builder ClearRegistrationFlags() {
        PrepareBuilder();
        result.hasRegistrationFlags = false;
        result.registrationFlags_ = 0;
        return this;
      }
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
    }
    static RegisterWithServiceRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RegisterWithServiceResponse : pb::GeneratedMessage<RegisterWithServiceResponse, RegisterWithServiceResponse.Builder> {
    private RegisterWithServiceResponse() { }
    private static readonly RegisterWithServiceResponse defaultInstance = new RegisterWithServiceResponse().MakeReadOnly();
    private static readonly string[] _registerWithServiceResponseFieldNames = new string[] { "flush_frequency", "max_achievements_per_record", "max_criteria_per_record", "max_records_per_update", "max_registrations", "snapshot" };
    private static readonly uint[] _registerWithServiceResponseFieldTags = new uint[] { 40, 24, 16, 8, 32, 50 };
    public static RegisterWithServiceResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RegisterWithServiceResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegisterWithServiceResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RegisterWithServiceResponse, RegisterWithServiceResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__FieldAccessorTable; }
    }
    
    public const int MaxRecordsPerUpdateFieldNumber = 1;
    private bool hasMaxRecordsPerUpdate;
    private uint maxRecordsPerUpdate_;
    public bool HasMaxRecordsPerUpdate {
      get { return hasMaxRecordsPerUpdate; }
    }
    public uint MaxRecordsPerUpdate {
      get { return maxRecordsPerUpdate_; }
    }
    
    public const int MaxCriteriaPerRecordFieldNumber = 2;
    private bool hasMaxCriteriaPerRecord;
    private uint maxCriteriaPerRecord_;
    public bool HasMaxCriteriaPerRecord {
      get { return hasMaxCriteriaPerRecord; }
    }
    public uint MaxCriteriaPerRecord {
      get { return maxCriteriaPerRecord_; }
    }
    
    public const int MaxAchievementsPerRecordFieldNumber = 3;
    private bool hasMaxAchievementsPerRecord;
    private uint maxAchievementsPerRecord_;
    public bool HasMaxAchievementsPerRecord {
      get { return hasMaxAchievementsPerRecord; }
    }
    public uint MaxAchievementsPerRecord {
      get { return maxAchievementsPerRecord_; }
    }
    
    public const int MaxRegistrationsFieldNumber = 4;
    private bool hasMaxRegistrations;
    private uint maxRegistrations_;
    public bool HasMaxRegistrations {
      get { return hasMaxRegistrations; }
    }
    public uint MaxRegistrations {
      get { return maxRegistrations_; }
    }
    
    public const int FlushFrequencyFieldNumber = 5;
    private bool hasFlushFrequency;
    private ulong flushFrequency_;
    public bool HasFlushFrequency {
      get { return hasFlushFrequency; }
    }
    public ulong FlushFrequency {
      get { return flushFrequency_; }
    }
    
    public const int SnapshotFieldNumber = 6;
    private bool hasSnapshot;
    private global::bnet.protocol.achievements.Snapshot snapshot_;
    public bool HasSnapshot {
      get { return hasSnapshot; }
    }
    public global::bnet.protocol.achievements.Snapshot Snapshot {
      get { return snapshot_ ?? global::bnet.protocol.achievements.Snapshot.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSnapshot) {
          if (!Snapshot.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registerWithServiceResponseFieldNames;
      if (hasMaxRecordsPerUpdate) {
        output.WriteUInt32(1, field_names[3], MaxRecordsPerUpdate);
      }
      if (hasMaxCriteriaPerRecord) {
        output.WriteUInt32(2, field_names[2], MaxCriteriaPerRecord);
      }
      if (hasMaxAchievementsPerRecord) {
        output.WriteUInt32(3, field_names[1], MaxAchievementsPerRecord);
      }
      if (hasMaxRegistrations) {
        output.WriteUInt32(4, field_names[4], MaxRegistrations);
      }
      if (hasFlushFrequency) {
        output.WriteUInt64(5, field_names[0], FlushFrequency);
      }
      if (hasSnapshot) {
        output.WriteMessage(6, field_names[5], Snapshot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMaxRecordsPerUpdate) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, MaxRecordsPerUpdate);
        }
        if (hasMaxCriteriaPerRecord) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MaxCriteriaPerRecord);
        }
        if (hasMaxAchievementsPerRecord) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, MaxAchievementsPerRecord);
        }
        if (hasMaxRegistrations) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, MaxRegistrations);
        }
        if (hasFlushFrequency) {
          size += pb::CodedOutputStream.ComputeUInt64Size(5, FlushFrequency);
        }
        if (hasSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Snapshot);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RegisterWithServiceResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegisterWithServiceResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RegisterWithServiceResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RegisterWithServiceResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegisterWithServiceResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegisterWithServiceResponse result;
      
      private RegisterWithServiceResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RegisterWithServiceResponse original = result;
          result = new RegisterWithServiceResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegisterWithServiceResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.RegisterWithServiceResponse.Descriptor; }
      }
      
      public override RegisterWithServiceResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.RegisterWithServiceResponse.DefaultInstance; }
      }
      
      public override RegisterWithServiceResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RegisterWithServiceResponse) {
          return MergeFrom((RegisterWithServiceResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegisterWithServiceResponse other) {
        if (other == global::bnet.protocol.achievements.RegisterWithServiceResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMaxRecordsPerUpdate) {
          MaxRecordsPerUpdate = other.MaxRecordsPerUpdate;
        }
        if (other.HasMaxCriteriaPerRecord) {
          MaxCriteriaPerRecord = other.MaxCriteriaPerRecord;
        }
        if (other.HasMaxAchievementsPerRecord) {
          MaxAchievementsPerRecord = other.MaxAchievementsPerRecord;
        }
        if (other.HasMaxRegistrations) {
          MaxRegistrations = other.MaxRegistrations;
        }
        if (other.HasFlushFrequency) {
          FlushFrequency = other.FlushFrequency;
        }
        if (other.HasSnapshot) {
          MergeSnapshot(other.Snapshot);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registerWithServiceResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registerWithServiceResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMaxRecordsPerUpdate = input.ReadUInt32(ref result.maxRecordsPerUpdate_);
              break;
            }
            case 16: {
              result.hasMaxCriteriaPerRecord = input.ReadUInt32(ref result.maxCriteriaPerRecord_);
              break;
            }
            case 24: {
              result.hasMaxAchievementsPerRecord = input.ReadUInt32(ref result.maxAchievementsPerRecord_);
              break;
            }
            case 32: {
              result.hasMaxRegistrations = input.ReadUInt32(ref result.maxRegistrations_);
              break;
            }
            case 40: {
              result.hasFlushFrequency = input.ReadUInt64(ref result.flushFrequency_);
              break;
            }
            case 50: {
              global::bnet.protocol.achievements.Snapshot.Builder subBuilder = global::bnet.protocol.achievements.Snapshot.CreateBuilder();
              if (result.hasSnapshot) {
                subBuilder.MergeFrom(Snapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Snapshot = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMaxRecordsPerUpdate {
        get { return result.hasMaxRecordsPerUpdate; }
      }
      public uint MaxRecordsPerUpdate {
        get { return result.MaxRecordsPerUpdate; }
        set { SetMaxRecordsPerUpdate(value); }
      }
      public Builder SetMaxRecordsPerUpdate(uint value) {
        PrepareBuilder();
        result.hasMaxRecordsPerUpdate = true;
        result.maxRecordsPerUpdate_ = value;
        return this;
      }
      public Builder ClearMaxRecordsPerUpdate() {
        PrepareBuilder();
        result.hasMaxRecordsPerUpdate = false;
        result.maxRecordsPerUpdate_ = 0;
        return this;
      }
      
      public bool HasMaxCriteriaPerRecord {
        get { return result.hasMaxCriteriaPerRecord; }
      }
      public uint MaxCriteriaPerRecord {
        get { return result.MaxCriteriaPerRecord; }
        set { SetMaxCriteriaPerRecord(value); }
      }
      public Builder SetMaxCriteriaPerRecord(uint value) {
        PrepareBuilder();
        result.hasMaxCriteriaPerRecord = true;
        result.maxCriteriaPerRecord_ = value;
        return this;
      }
      public Builder ClearMaxCriteriaPerRecord() {
        PrepareBuilder();
        result.hasMaxCriteriaPerRecord = false;
        result.maxCriteriaPerRecord_ = 0;
        return this;
      }
      
      public bool HasMaxAchievementsPerRecord {
        get { return result.hasMaxAchievementsPerRecord; }
      }
      public uint MaxAchievementsPerRecord {
        get { return result.MaxAchievementsPerRecord; }
        set { SetMaxAchievementsPerRecord(value); }
      }
      public Builder SetMaxAchievementsPerRecord(uint value) {
        PrepareBuilder();
        result.hasMaxAchievementsPerRecord = true;
        result.maxAchievementsPerRecord_ = value;
        return this;
      }
      public Builder ClearMaxAchievementsPerRecord() {
        PrepareBuilder();
        result.hasMaxAchievementsPerRecord = false;
        result.maxAchievementsPerRecord_ = 0;
        return this;
      }
      
      public bool HasMaxRegistrations {
        get { return result.hasMaxRegistrations; }
      }
      public uint MaxRegistrations {
        get { return result.MaxRegistrations; }
        set { SetMaxRegistrations(value); }
      }
      public Builder SetMaxRegistrations(uint value) {
        PrepareBuilder();
        result.hasMaxRegistrations = true;
        result.maxRegistrations_ = value;
        return this;
      }
      public Builder ClearMaxRegistrations() {
        PrepareBuilder();
        result.hasMaxRegistrations = false;
        result.maxRegistrations_ = 0;
        return this;
      }
      
      public bool HasFlushFrequency {
        get { return result.hasFlushFrequency; }
      }
      public ulong FlushFrequency {
        get { return result.FlushFrequency; }
        set { SetFlushFrequency(value); }
      }
      public Builder SetFlushFrequency(ulong value) {
        PrepareBuilder();
        result.hasFlushFrequency = true;
        result.flushFrequency_ = value;
        return this;
      }
      public Builder ClearFlushFrequency() {
        PrepareBuilder();
        result.hasFlushFrequency = false;
        result.flushFrequency_ = 0UL;
        return this;
      }
      
      public bool HasSnapshot {
       get { return result.hasSnapshot; }
      }
      public global::bnet.protocol.achievements.Snapshot Snapshot {
        get { return result.Snapshot; }
        set { SetSnapshot(value); }
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = value;
        return this;
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnapshot &&
            result.snapshot_ != global::bnet.protocol.achievements.Snapshot.DefaultInstance) {
            result.snapshot_ = global::bnet.protocol.achievements.Snapshot.CreateBuilder(result.snapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.snapshot_ = value;
        }
        result.hasSnapshot = true;
        return this;
      }
      public Builder ClearSnapshot() {
        PrepareBuilder();
        result.hasSnapshot = false;
        result.snapshot_ = null;
        return this;
      }
    }
    static RegisterWithServiceResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class UnregisterFromServiceRequest : pb::GeneratedMessage<UnregisterFromServiceRequest, UnregisterFromServiceRequest.Builder> {
    private UnregisterFromServiceRequest() { }
    private static readonly UnregisterFromServiceRequest defaultInstance = new UnregisterFromServiceRequest().MakeReadOnly();
    private static readonly string[] _unregisterFromServiceRequestFieldNames = new string[] { "object_id", "target_id" };
    private static readonly uint[] _unregisterFromServiceRequestFieldTags = new uint[] { 16, 10 };
    public static UnregisterFromServiceRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UnregisterFromServiceRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UnregisterFromServiceRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UnregisterFromServiceRequest, UnregisterFromServiceRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private global::bnet.protocol.EntityId targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public global::bnet.protocol.EntityId TargetId {
      get { return targetId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ObjectIdFieldNumber = 2;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasObjectId) return false;
        if (!TargetId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _unregisterFromServiceRequestFieldNames;
      if (hasTargetId) {
        output.WriteMessage(1, field_names[1], TargetId);
      }
      if (hasObjectId) {
        output.WriteUInt64(2, field_names[0], ObjectId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TargetId);
        }
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ObjectId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UnregisterFromServiceRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UnregisterFromServiceRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UnregisterFromServiceRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<UnregisterFromServiceRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UnregisterFromServiceRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UnregisterFromServiceRequest result;
      
      private UnregisterFromServiceRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          UnregisterFromServiceRequest original = result;
          result = new UnregisterFromServiceRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UnregisterFromServiceRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.UnregisterFromServiceRequest.Descriptor; }
      }
      
      public override UnregisterFromServiceRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.UnregisterFromServiceRequest.DefaultInstance; }
      }
      
      public override UnregisterFromServiceRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UnregisterFromServiceRequest) {
          return MergeFrom((UnregisterFromServiceRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UnregisterFromServiceRequest other) {
        if (other == global::bnet.protocol.achievements.UnregisterFromServiceRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          MergeTargetId(other.TargetId);
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_unregisterFromServiceRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _unregisterFromServiceRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasTargetId) {
                subBuilder.MergeFrom(TargetId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
       get { return result.hasTargetId; }
      }
      public global::bnet.protocol.EntityId TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetId &&
            result.targetId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.targetId_ = global::bnet.protocol.EntityId.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
        } else {
          result.targetId_ = value;
        }
        result.hasTargetId = true;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = null;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
    }
    static UnregisterFromServiceRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Snapshot : pb::GeneratedMessage<Snapshot, Snapshot.Builder> {
    private Snapshot() { }
    private static readonly Snapshot defaultInstance = new Snapshot().MakeReadOnly();
    private static readonly string[] _snapshotFieldNames = new string[] { "achievement_snapshot", "criteria_snapshot" };
    private static readonly uint[] _snapshotFieldTags = new uint[] { 10, 18 };
    public static Snapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Snapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Snapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_Snapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Snapshot, Snapshot.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_Snapshot__FieldAccessorTable; }
    }
    
    public const int AchievementSnapshotFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.achievements.AchievementUpdateRecord> achievementSnapshot_ = new pbc::PopsicleList<global::bnet.protocol.achievements.AchievementUpdateRecord>();
    public scg::IList<global::bnet.protocol.achievements.AchievementUpdateRecord> AchievementSnapshotList {
      get { return achievementSnapshot_; }
    }
    public int AchievementSnapshotCount {
      get { return achievementSnapshot_.Count; }
    }
    public global::bnet.protocol.achievements.AchievementUpdateRecord GetAchievementSnapshot(int index) {
      return achievementSnapshot_[index];
    }
    
    public const int CriteriaSnapshotFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord> criteriaSnapshot_ = new pbc::PopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord>();
    public scg::IList<global::bnet.protocol.achievements.CriteriaUpdateRecord> CriteriaSnapshotList {
      get { return criteriaSnapshot_; }
    }
    public int CriteriaSnapshotCount {
      get { return criteriaSnapshot_.Count; }
    }
    public global::bnet.protocol.achievements.CriteriaUpdateRecord GetCriteriaSnapshot(int index) {
      return criteriaSnapshot_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.achievements.AchievementUpdateRecord element in AchievementSnapshotList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.achievements.CriteriaUpdateRecord element in CriteriaSnapshotList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _snapshotFieldNames;
      if (achievementSnapshot_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], achievementSnapshot_);
      }
      if (criteriaSnapshot_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], criteriaSnapshot_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.achievements.AchievementUpdateRecord element in AchievementSnapshotList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::bnet.protocol.achievements.CriteriaUpdateRecord element in CriteriaSnapshotList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Snapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Snapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Snapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Snapshot MakeReadOnly() {
      achievementSnapshot_.MakeReadOnly();
      criteriaSnapshot_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Snapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Snapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Snapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Snapshot result;
      
      private Snapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          Snapshot original = result;
          result = new Snapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Snapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.Snapshot.Descriptor; }
      }
      
      public override Snapshot DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.Snapshot.DefaultInstance; }
      }
      
      public override Snapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Snapshot) {
          return MergeFrom((Snapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Snapshot other) {
        if (other == global::bnet.protocol.achievements.Snapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.achievementSnapshot_.Count != 0) {
          result.achievementSnapshot_.Add(other.achievementSnapshot_);
        }
        if (other.criteriaSnapshot_.Count != 0) {
          result.criteriaSnapshot_.Add(other.criteriaSnapshot_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.achievementSnapshot_, global::bnet.protocol.achievements.AchievementUpdateRecord.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.criteriaSnapshot_, global::bnet.protocol.achievements.CriteriaUpdateRecord.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.AchievementUpdateRecord> AchievementSnapshotList {
        get { return PrepareBuilder().achievementSnapshot_; }
      }
      public int AchievementSnapshotCount {
        get { return result.AchievementSnapshotCount; }
      }
      public global::bnet.protocol.achievements.AchievementUpdateRecord GetAchievementSnapshot(int index) {
        return result.GetAchievementSnapshot(index);
      }
      public Builder SetAchievementSnapshot(int index, global::bnet.protocol.achievements.AchievementUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementSnapshot_[index] = value;
        return this;
      }
      public Builder SetAchievementSnapshot(int index, global::bnet.protocol.achievements.AchievementUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementSnapshot_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAchievementSnapshot(global::bnet.protocol.achievements.AchievementUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementSnapshot_.Add(value);
        return this;
      }
      public Builder AddAchievementSnapshot(global::bnet.protocol.achievements.AchievementUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementSnapshot_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAchievementSnapshot(scg::IEnumerable<global::bnet.protocol.achievements.AchievementUpdateRecord> values) {
        PrepareBuilder();
        result.achievementSnapshot_.Add(values);
        return this;
      }
      public Builder ClearAchievementSnapshot() {
        PrepareBuilder();
        result.achievementSnapshot_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord> CriteriaSnapshotList {
        get { return PrepareBuilder().criteriaSnapshot_; }
      }
      public int CriteriaSnapshotCount {
        get { return result.CriteriaSnapshotCount; }
      }
      public global::bnet.protocol.achievements.CriteriaUpdateRecord GetCriteriaSnapshot(int index) {
        return result.GetCriteriaSnapshot(index);
      }
      public Builder SetCriteriaSnapshot(int index, global::bnet.protocol.achievements.CriteriaUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteriaSnapshot_[index] = value;
        return this;
      }
      public Builder SetCriteriaSnapshot(int index, global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteriaSnapshot_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCriteriaSnapshot(global::bnet.protocol.achievements.CriteriaUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteriaSnapshot_.Add(value);
        return this;
      }
      public Builder AddCriteriaSnapshot(global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteriaSnapshot_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCriteriaSnapshot(scg::IEnumerable<global::bnet.protocol.achievements.CriteriaUpdateRecord> values) {
        PrepareBuilder();
        result.criteriaSnapshot_.Add(values);
        return this;
      }
      public Builder ClearCriteriaSnapshot() {
        PrepareBuilder();
        result.criteriaSnapshot_.Clear();
        return this;
      }
    }
    static Snapshot() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RequestSnapshotRequest : pb::GeneratedMessage<RequestSnapshotRequest, RequestSnapshotRequest.Builder> {
    private RequestSnapshotRequest() { }
    private static readonly RequestSnapshotRequest defaultInstance = new RequestSnapshotRequest().MakeReadOnly();
    private static readonly string[] _requestSnapshotRequestFieldNames = new string[] { "entity_id", "filter" };
    private static readonly uint[] _requestSnapshotRequestFieldTags = new uint[] { 10, 16 };
    public static RequestSnapshotRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RequestSnapshotRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RequestSnapshotRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_RequestSnapshotRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RequestSnapshotRequest, RequestSnapshotRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_RequestSnapshotRequest__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private global::bnet.protocol.EntityId entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public global::bnet.protocol.EntityId EntityId {
      get { return entityId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int FilterFieldNumber = 2;
    private bool hasFilter;
    private uint filter_;
    public bool HasFilter {
      get { return hasFilter; }
    }
    public uint Filter {
      get { return filter_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasFilter) return false;
        if (!EntityId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _requestSnapshotRequestFieldNames;
      if (hasEntityId) {
        output.WriteMessage(1, field_names[0], EntityId);
      }
      if (hasFilter) {
        output.WriteUInt32(2, field_names[1], Filter);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEntityId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EntityId);
        }
        if (hasFilter) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Filter);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RequestSnapshotRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RequestSnapshotRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RequestSnapshotRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RequestSnapshotRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RequestSnapshotRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RequestSnapshotRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RequestSnapshotRequest result;
      
      private RequestSnapshotRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RequestSnapshotRequest original = result;
          result = new RequestSnapshotRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RequestSnapshotRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.RequestSnapshotRequest.Descriptor; }
      }
      
      public override RequestSnapshotRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.RequestSnapshotRequest.DefaultInstance; }
      }
      
      public override RequestSnapshotRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RequestSnapshotRequest) {
          return MergeFrom((RequestSnapshotRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RequestSnapshotRequest other) {
        if (other == global::bnet.protocol.achievements.RequestSnapshotRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          MergeEntityId(other.EntityId);
        }
        if (other.HasFilter) {
          Filter = other.Filter;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestSnapshotRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestSnapshotRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasEntityId) {
                subBuilder.MergeFrom(EntityId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EntityId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasFilter = input.ReadUInt32(ref result.filter_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
       get { return result.hasEntityId; }
      }
      public global::bnet.protocol.EntityId EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEntityId &&
            result.entityId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.entityId_ = global::bnet.protocol.EntityId.CreateBuilder(result.entityId_).MergeFrom(value).BuildPartial();
        } else {
          result.entityId_ = value;
        }
        result.hasEntityId = true;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = null;
        return this;
      }
      
      public bool HasFilter {
        get { return result.hasFilter; }
      }
      public uint Filter {
        get { return result.Filter; }
        set { SetFilter(value); }
      }
      public Builder SetFilter(uint value) {
        PrepareBuilder();
        result.hasFilter = true;
        result.filter_ = value;
        return this;
      }
      public Builder ClearFilter() {
        PrepareBuilder();
        result.hasFilter = false;
        result.filter_ = 0;
        return this;
      }
    }
    static RequestSnapshotRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RequestSnapshotResponse : pb::GeneratedMessage<RequestSnapshotResponse, RequestSnapshotResponse.Builder> {
    private RequestSnapshotResponse() { }
    private static readonly RequestSnapshotResponse defaultInstance = new RequestSnapshotResponse().MakeReadOnly();
    private static readonly string[] _requestSnapshotResponseFieldNames = new string[] { "snapshot" };
    private static readonly uint[] _requestSnapshotResponseFieldTags = new uint[] { 10 };
    public static RequestSnapshotResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RequestSnapshotResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RequestSnapshotResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_RequestSnapshotResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RequestSnapshotResponse, RequestSnapshotResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_RequestSnapshotResponse__FieldAccessorTable; }
    }
    
    public const int SnapshotFieldNumber = 1;
    private bool hasSnapshot;
    private global::bnet.protocol.achievements.Snapshot snapshot_;
    public bool HasSnapshot {
      get { return hasSnapshot; }
    }
    public global::bnet.protocol.achievements.Snapshot Snapshot {
      get { return snapshot_ ?? global::bnet.protocol.achievements.Snapshot.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSnapshot) {
          if (!Snapshot.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _requestSnapshotResponseFieldNames;
      if (hasSnapshot) {
        output.WriteMessage(1, field_names[0], Snapshot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Snapshot);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RequestSnapshotResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RequestSnapshotResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RequestSnapshotResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RequestSnapshotResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RequestSnapshotResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RequestSnapshotResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RequestSnapshotResponse result;
      
      private RequestSnapshotResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RequestSnapshotResponse original = result;
          result = new RequestSnapshotResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RequestSnapshotResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.RequestSnapshotResponse.Descriptor; }
      }
      
      public override RequestSnapshotResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.RequestSnapshotResponse.DefaultInstance; }
      }
      
      public override RequestSnapshotResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RequestSnapshotResponse) {
          return MergeFrom((RequestSnapshotResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RequestSnapshotResponse other) {
        if (other == global::bnet.protocol.achievements.RequestSnapshotResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnapshot) {
          MergeSnapshot(other.Snapshot);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestSnapshotResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestSnapshotResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.achievements.Snapshot.Builder subBuilder = global::bnet.protocol.achievements.Snapshot.CreateBuilder();
              if (result.hasSnapshot) {
                subBuilder.MergeFrom(Snapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Snapshot = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnapshot {
       get { return result.hasSnapshot; }
      }
      public global::bnet.protocol.achievements.Snapshot Snapshot {
        get { return result.Snapshot; }
        set { SetSnapshot(value); }
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = value;
        return this;
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnapshot &&
            result.snapshot_ != global::bnet.protocol.achievements.Snapshot.DefaultInstance) {
            result.snapshot_ = global::bnet.protocol.achievements.Snapshot.CreateBuilder(result.snapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.snapshot_ = value;
        }
        result.hasSnapshot = true;
        return this;
      }
      public Builder ClearSnapshot() {
        PrepareBuilder();
        result.hasSnapshot = false;
        result.snapshot_ = null;
        return this;
      }
    }
    static RequestSnapshotResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InitializeRequest : pb::GeneratedMessage<InitializeRequest, InitializeRequest.Builder> {
    private InitializeRequest() { }
    private static readonly InitializeRequest defaultInstance = new InitializeRequest().MakeReadOnly();
    private static readonly string[] _initializeRequestFieldNames = new string[] { "program_id" };
    private static readonly uint[] _initializeRequestFieldTags = new uint[] { 13 };
    public static InitializeRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InitializeRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InitializeRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_InitializeRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InitializeRequest, InitializeRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_InitializeRequest__FieldAccessorTable; }
    }
    
    public const int ProgramIdFieldNumber = 1;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _initializeRequestFieldNames;
      if (hasProgramId) {
        output.WriteFixed32(1, field_names[0], ProgramId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, ProgramId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InitializeRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InitializeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InitializeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InitializeRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InitializeRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InitializeRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InitializeRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InitializeRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InitializeRequest result;
      
      private InitializeRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          InitializeRequest original = result;
          result = new InitializeRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InitializeRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.InitializeRequest.Descriptor; }
      }
      
      public override InitializeRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.InitializeRequest.DefaultInstance; }
      }
      
      public override InitializeRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InitializeRequest) {
          return MergeFrom((InitializeRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InitializeRequest other) {
        if (other == global::bnet.protocol.achievements.InitializeRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_initializeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _initializeRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
    }
    static InitializeRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InitializeResponse : pb::GeneratedMessage<InitializeResponse, InitializeResponse.Builder> {
    private InitializeResponse() { }
    private static readonly InitializeResponse defaultInstance = new InitializeResponse().MakeReadOnly();
    private static readonly string[] _initializeResponseFieldNames = new string[] { "content_handle" };
    private static readonly uint[] _initializeResponseFieldTags = new uint[] { 10 };
    public static InitializeResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InitializeResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InitializeResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_InitializeResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InitializeResponse, InitializeResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_InitializeResponse__FieldAccessorTable; }
    }
    
    public const int ContentHandleFieldNumber = 1;
    private bool hasContentHandle;
    private global::bnet.protocol.ContentHandle contentHandle_;
    public bool HasContentHandle {
      get { return hasContentHandle; }
    }
    public global::bnet.protocol.ContentHandle ContentHandle {
      get { return contentHandle_ ?? global::bnet.protocol.ContentHandle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasContentHandle) return false;
        if (!ContentHandle.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _initializeResponseFieldNames;
      if (hasContentHandle) {
        output.WriteMessage(1, field_names[0], ContentHandle);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContentHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ContentHandle);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InitializeResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InitializeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InitializeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InitializeResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InitializeResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InitializeResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InitializeResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InitializeResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InitializeResponse result;
      
      private InitializeResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          InitializeResponse original = result;
          result = new InitializeResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InitializeResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.InitializeResponse.Descriptor; }
      }
      
      public override InitializeResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.InitializeResponse.DefaultInstance; }
      }
      
      public override InitializeResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InitializeResponse) {
          return MergeFrom((InitializeResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InitializeResponse other) {
        if (other == global::bnet.protocol.achievements.InitializeResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContentHandle) {
          MergeContentHandle(other.ContentHandle);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_initializeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _initializeResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.ContentHandle.Builder subBuilder = global::bnet.protocol.ContentHandle.CreateBuilder();
              if (result.hasContentHandle) {
                subBuilder.MergeFrom(ContentHandle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ContentHandle = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContentHandle {
       get { return result.hasContentHandle; }
      }
      public global::bnet.protocol.ContentHandle ContentHandle {
        get { return result.ContentHandle; }
        set { SetContentHandle(value); }
      }
      public Builder SetContentHandle(global::bnet.protocol.ContentHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContentHandle = true;
        result.contentHandle_ = value;
        return this;
      }
      public Builder SetContentHandle(global::bnet.protocol.ContentHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContentHandle = true;
        result.contentHandle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContentHandle(global::bnet.protocol.ContentHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContentHandle &&
            result.contentHandle_ != global::bnet.protocol.ContentHandle.DefaultInstance) {
            result.contentHandle_ = global::bnet.protocol.ContentHandle.CreateBuilder(result.contentHandle_).MergeFrom(value).BuildPartial();
        } else {
          result.contentHandle_ = value;
        }
        result.hasContentHandle = true;
        return this;
      }
      public Builder ClearContentHandle() {
        PrepareBuilder();
        result.hasContentHandle = false;
        result.contentHandle_ = null;
        return this;
      }
    }
    static InitializeResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SnapshotUpdateNotification : pb::GeneratedMessage<SnapshotUpdateNotification, SnapshotUpdateNotification.Builder> {
    private SnapshotUpdateNotification() { }
    private static readonly SnapshotUpdateNotification defaultInstance = new SnapshotUpdateNotification().MakeReadOnly();
    private static readonly string[] _snapshotUpdateNotificationFieldNames = new string[] { "snapshot", "target_id" };
    private static readonly uint[] _snapshotUpdateNotificationFieldTags = new uint[] { 18, 10 };
    public static SnapshotUpdateNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SnapshotUpdateNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SnapshotUpdateNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SnapshotUpdateNotification, SnapshotUpdateNotification.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Achievements.internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private global::bnet.protocol.EntityId targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public global::bnet.protocol.EntityId TargetId {
      get { return targetId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int SnapshotFieldNumber = 2;
    private bool hasSnapshot;
    private global::bnet.protocol.achievements.Snapshot snapshot_;
    public bool HasSnapshot {
      get { return hasSnapshot; }
    }
    public global::bnet.protocol.achievements.Snapshot Snapshot {
      get { return snapshot_ ?? global::bnet.protocol.achievements.Snapshot.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasSnapshot) return false;
        if (!TargetId.IsInitialized) return false;
        if (!Snapshot.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _snapshotUpdateNotificationFieldNames;
      if (hasTargetId) {
        output.WriteMessage(1, field_names[1], TargetId);
      }
      if (hasSnapshot) {
        output.WriteMessage(2, field_names[0], Snapshot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TargetId);
        }
        if (hasSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Snapshot);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SnapshotUpdateNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotUpdateNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotUpdateNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotUpdateNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotUpdateNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SnapshotUpdateNotification result;
      
      private SnapshotUpdateNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotUpdateNotification original = result;
          result = new SnapshotUpdateNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SnapshotUpdateNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.SnapshotUpdateNotification.Descriptor; }
      }
      
      public override SnapshotUpdateNotification DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.SnapshotUpdateNotification.DefaultInstance; }
      }
      
      public override SnapshotUpdateNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotUpdateNotification) {
          return MergeFrom((SnapshotUpdateNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SnapshotUpdateNotification other) {
        if (other == global::bnet.protocol.achievements.SnapshotUpdateNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          MergeTargetId(other.TargetId);
        }
        if (other.HasSnapshot) {
          MergeSnapshot(other.Snapshot);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotUpdateNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotUpdateNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasTargetId) {
                subBuilder.MergeFrom(TargetId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.achievements.Snapshot.Builder subBuilder = global::bnet.protocol.achievements.Snapshot.CreateBuilder();
              if (result.hasSnapshot) {
                subBuilder.MergeFrom(Snapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Snapshot = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
       get { return result.hasTargetId; }
      }
      public global::bnet.protocol.EntityId TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetId &&
            result.targetId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.targetId_ = global::bnet.protocol.EntityId.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
        } else {
          result.targetId_ = value;
        }
        result.hasTargetId = true;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = null;
        return this;
      }
      
      public bool HasSnapshot {
       get { return result.hasSnapshot; }
      }
      public global::bnet.protocol.achievements.Snapshot Snapshot {
        get { return result.Snapshot; }
        set { SetSnapshot(value); }
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = value;
        return this;
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnapshot &&
            result.snapshot_ != global::bnet.protocol.achievements.Snapshot.DefaultInstance) {
            result.snapshot_ = global::bnet.protocol.achievements.Snapshot.CreateBuilder(result.snapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.snapshot_ = value;
        }
        result.hasSnapshot = true;
        return this;
      }
      public Builder ClearSnapshot() {
        PrepareBuilder();
        result.hasSnapshot = false;
        result.snapshot_ = null;
        return this;
      }
    }
    static SnapshotUpdateNotification() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Achievements.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class AchievementsService : pb::IService {
    public abstract void PostUpdate(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.PostUpdateRequest request,
        global::System.Action<global::bnet.protocol.achievements.PostUpdateResponse> done);
    public abstract void RegisterWithService(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.RegisterWithServiceRequest request,
        global::System.Action<global::bnet.protocol.achievements.RegisterWithServiceResponse> done);
    public abstract void RequestSnapshot(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.RequestSnapshotRequest request,
        global::System.Action<global::bnet.protocol.achievements.RequestSnapshotResponse> done);
    public abstract void UnregisterFromService(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.UnregisterFromServiceRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    public abstract void Initialize(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.InitializeRequest request,
        global::System.Action<global::bnet.protocol.achievements.InitializeResponse> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Achievements.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.PostUpdate(controller, (global::bnet.protocol.achievements.PostUpdateRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.PostUpdateResponse>(
              done));
          return;
        case 1:
          this.RegisterWithService(controller, (global::bnet.protocol.achievements.RegisterWithServiceRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.RegisterWithServiceResponse>(
              done));
          return;
        case 2:
          this.RequestSnapshot(controller, (global::bnet.protocol.achievements.RequestSnapshotRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.RequestSnapshotResponse>(
              done));
          return;
        case 3:
          this.UnregisterFromService(controller, (global::bnet.protocol.achievements.UnregisterFromServiceRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        case 4:
          this.Initialize(controller, (global::bnet.protocol.achievements.InitializeRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.InitializeResponse>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.achievements.PostUpdateRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.achievements.RegisterWithServiceRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.achievements.RequestSnapshotRequest.DefaultInstance;
        case 3:
          return global::bnet.protocol.achievements.UnregisterFromServiceRequest.DefaultInstance;
        case 4:
          return global::bnet.protocol.achievements.InitializeRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.achievements.PostUpdateResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.achievements.RegisterWithServiceResponse.DefaultInstance;
        case 2:
          return global::bnet.protocol.achievements.RequestSnapshotResponse.DefaultInstance;
        case 3:
          return global::bnet.protocol.NoData.DefaultInstance;
        case 4:
          return global::bnet.protocol.achievements.InitializeResponse.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.achievements.AchievementsService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void PostUpdate(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.PostUpdateRequest request,
          global::System.Action<global::bnet.protocol.achievements.PostUpdateResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.achievements.PostUpdateResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.PostUpdateResponse, global::bnet.protocol.achievements.PostUpdateResponse.Builder>(done, global::bnet.protocol.achievements.PostUpdateResponse.DefaultInstance));
      }
      
      public override void RegisterWithService(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.RegisterWithServiceRequest request,
          global::System.Action<global::bnet.protocol.achievements.RegisterWithServiceResponse> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.achievements.RegisterWithServiceResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.RegisterWithServiceResponse, global::bnet.protocol.achievements.RegisterWithServiceResponse.Builder>(done, global::bnet.protocol.achievements.RegisterWithServiceResponse.DefaultInstance));
      }
      
      public override void RequestSnapshot(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.RequestSnapshotRequest request,
          global::System.Action<global::bnet.protocol.achievements.RequestSnapshotResponse> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.achievements.RequestSnapshotResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.RequestSnapshotResponse, global::bnet.protocol.achievements.RequestSnapshotResponse.Builder>(done, global::bnet.protocol.achievements.RequestSnapshotResponse.DefaultInstance));
      }
      
      public override void UnregisterFromService(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.UnregisterFromServiceRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
      
      public override void Initialize(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.InitializeRequest request,
          global::System.Action<global::bnet.protocol.achievements.InitializeResponse> done) {
        channel.CallMethod(Descriptor.Methods[4],
            controller, request, global::bnet.protocol.achievements.InitializeResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.InitializeResponse, global::bnet.protocol.achievements.InitializeResponse.Builder>(done, global::bnet.protocol.achievements.InitializeResponse.DefaultInstance));
      }
    }
  }
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class AchievementsNotify : pb::IService {
    public abstract void NotifySnapshotUpdate(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.SnapshotUpdateNotification request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Achievements.Descriptor.Services[1]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.NotifySnapshotUpdate(controller, (global::bnet.protocol.achievements.SnapshotUpdateNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.achievements.SnapshotUpdateNotification.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.achievements.AchievementsNotify {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void NotifySnapshotUpdate(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.SnapshotUpdateNotification request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
