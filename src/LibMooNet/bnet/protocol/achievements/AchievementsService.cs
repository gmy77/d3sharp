// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.achievements {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class AchievementsService {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_AchievementUpdateRecord__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.AchievementUpdateRecord, global::bnet.protocol.achievements.AchievementUpdateRecord.Builder> internal__static_bnet_protocol_achievements_AchievementUpdateRecord__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.CriteriaUpdateRecord, global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder> internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_PostUpdateRecord__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateRecord, global::bnet.protocol.achievements.PostUpdateRecord.Builder> internal__static_bnet_protocol_achievements_PostUpdateRecord__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_PostUpdateRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateRequest, global::bnet.protocol.achievements.PostUpdateRequest.Builder> internal__static_bnet_protocol_achievements_PostUpdateRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_PostUpdateResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateResponse, global::bnet.protocol.achievements.PostUpdateResponse.Builder> internal__static_bnet_protocol_achievements_PostUpdateResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RegisterWithServiceRequest, global::bnet.protocol.achievements.RegisterWithServiceRequest.Builder> internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RegisterWithServiceResponse, global::bnet.protocol.achievements.RegisterWithServiceResponse.Builder> internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.UnregisterFromServiceRequest, global::bnet.protocol.achievements.UnregisterFromServiceRequest.Builder> internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_Snapshot__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.Snapshot, global::bnet.protocol.achievements.Snapshot.Builder> internal__static_bnet_protocol_achievements_Snapshot__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_RequestSnapshotRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RequestSnapshotRequest, global::bnet.protocol.achievements.RequestSnapshotRequest.Builder> internal__static_bnet_protocol_achievements_RequestSnapshotRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_RequestSnapshotResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RequestSnapshotResponse, global::bnet.protocol.achievements.RequestSnapshotResponse.Builder> internal__static_bnet_protocol_achievements_RequestSnapshotResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_InitializeRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.InitializeRequest, global::bnet.protocol.achievements.InitializeRequest.Builder> internal__static_bnet_protocol_achievements_InitializeRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_InitializeResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.InitializeResponse, global::bnet.protocol.achievements.InitializeResponse.Builder> internal__static_bnet_protocol_achievements_InitializeResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_StaticDataHash__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.StaticDataHash, global::bnet.protocol.achievements.StaticDataHash.Builder> internal__static_bnet_protocol_achievements_StaticDataHash__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_ValidateStaticDataRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.ValidateStaticDataRequest, global::bnet.protocol.achievements.ValidateStaticDataRequest.Builder> internal__static_bnet_protocol_achievements_ValidateStaticDataRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.SnapshotUpdateNotification, global::bnet.protocol.achievements.SnapshotUpdateNotification.Builder> internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_FlushFrequencyUpdateNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.FlushFrequencyUpdateNotification, global::bnet.protocol.achievements.FlushFrequencyUpdateNotification.Builder> internal__static_bnet_protocol_achievements_FlushFrequencyUpdateNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_AchievementStats__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.AchievementStats, global::bnet.protocol.achievements.AchievementStats.Builder> internal__static_bnet_protocol_achievements_AchievementStats__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_GetAchievementStatsRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GetAchievementStatsRequest, global::bnet.protocol.achievements.GetAchievementStatsRequest.Builder> internal__static_bnet_protocol_achievements_GetAchievementStatsRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_GetAchievementStatsResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GetAchievementStatsResponse, global::bnet.protocol.achievements.GetAchievementStatsResponse.Builder> internal__static_bnet_protocol_achievements_GetAchievementStatsResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_GetCriteriaStatsRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GetCriteriaStatsRequest, global::bnet.protocol.achievements.GetCriteriaStatsRequest.Builder> internal__static_bnet_protocol_achievements_GetCriteriaStatsRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_GetCriteriaStatsResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GetCriteriaStatsResponse, global::bnet.protocol.achievements.GetCriteriaStatsResponse.Builder> internal__static_bnet_protocol_achievements_GetCriteriaStatsResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_RevokeAchievementRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RevokeAchievementRequest, global::bnet.protocol.achievements.RevokeAchievementRequest.Builder> internal__static_bnet_protocol_achievements_RevokeAchievementRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_RevokeAchievementResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RevokeAchievementResponse, global::bnet.protocol.achievements.RevokeAchievementResponse.Builder> internal__static_bnet_protocol_achievements_RevokeAchievementResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_UpdateCriteriaRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.UpdateCriteriaRequest, global::bnet.protocol.achievements.UpdateCriteriaRequest.Builder> internal__static_bnet_protocol_achievements_UpdateCriteriaRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_GrantAchievementRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GrantAchievementRequest, global::bnet.protocol.achievements.GrantAchievementRequest.Builder> internal__static_bnet_protocol_achievements_GrantAchievementRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_GrantAchievementResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GrantAchievementResponse, global::bnet.protocol.achievements.GrantAchievementResponse.Builder> internal__static_bnet_protocol_achievements_GrantAchievementResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_CacheKillRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.CacheKillRequest, global::bnet.protocol.achievements.CacheKillRequest.Builder> internal__static_bnet_protocol_achievements_CacheKillRequest__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static AchievementsService() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "Ch9ibmV0L2FjaGlldmVtZW50c19zZXJ2aWNlLnByb3RvEhpibmV0LnByb3Rv" + 
            "Y29sLmFjaGlldmVtZW50cxoOYm5ldC9ycGMucHJvdG8aEWJuZXQvZW50aXR5" + 
            "LnByb3RvGhlibmV0L2NvbnRlbnRfaGFuZGxlLnByb3RvIkUKF0FjaGlldmVt" + 
            "ZW50VXBkYXRlUmVjb3JkEhYKDmFjaGlldmVtZW50X2lkGAEgAigEEhIKCmNv" + 
            "bXBsZXRpb24YAiACKAUibAoUQ3JpdGVyaWFVcGRhdGVSZWNvcmQSIgoaY3Jp" + 
            "dGVyaWFfSWRfMzJfYW5kX2ZsYWdzXzgYASACKA0SGAoNc3RhcnRfdGltZV8z" + 
            "MhgCIAEoDToBMBIWCgtxdWFudGl0eV8zMhgDIAEoDToBMCKCAQoQUG9zdFVw" + 
            "ZGF0ZVJlY29yZBIqCgl0YXJnZXRfaWQYASACKAsyFy5ibmV0LnByb3RvY29s" + 
            "LkVudGl0eUlkEkIKCGNyaXRlcmlhGAIgAygLMjAuYm5ldC5wcm90b2NvbC5h" + 
            "Y2hpZXZlbWVudHMuQ3JpdGVyaWFVcGRhdGVSZWNvcmQihwEKEVBvc3RVcGRh" + 
            "dGVSZXF1ZXN0EkgKEnBvc3RfdXBkYXRlX3JlY29yZBgBIAMoCzIsLmJuZXQu" + 
            "cHJvdG9jb2wuYWNoaWV2ZW1lbnRzLlBvc3RVcGRhdGVSZWNvcmQSFQoKcHJv" + 
            "Z3JhbV9pZBgCIAEoBzoBMBIRCgZhdGlfaWQYAyABKA06ATAiKAoSUG9zdFVw" + 
            "ZGF0ZVJlc3BvbnNlEhIKCmVycm9yX2NvZGUYASADKA0ioQEKGlJlZ2lzdGVy" + 
            "V2l0aFNlcnZpY2VSZXF1ZXN0EioKCXRhcmdldF9pZBgBIAIoCzIXLmJuZXQu" + 
            "cHJvdG9jb2wuRW50aXR5SWQSEQoJb2JqZWN0X2lkGAIgAigEEhoKEnJlZ2lz" + 
            "dHJhdGlvbl9mbGFncxgDIAEoDRIVCgpwcm9ncmFtX2lkGAQgASgHOgEwEhEK" + 
            "BmF0aV9pZBgFIAEoDToBMCJxChtSZWdpc3RlcldpdGhTZXJ2aWNlUmVzcG9u" + 
            "c2USNgoIc25hcHNob3QYASABKAsyJC5ibmV0LnByb3RvY29sLmFjaGlldmVt" + 
            "ZW50cy5TbmFwc2hvdBIaChJyZWdpc3RyYXRpb25fZmxhZ3MYAiABKA0icAoc" + 
            "VW5yZWdpc3RlckZyb21TZXJ2aWNlUmVxdWVzdBIqCgl0YXJnZXRfaWQYASAC" + 
            "KAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEhEKCW9iamVjdF9pZBgCIAIo" + 
            "BBIRCgZhdGlfaWQYAyABKA06ATAivQEKCFNuYXBzaG90ElEKFGFjaGlldmVt" + 
            "ZW50X3NuYXBzaG90GAEgAygLMjMuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVu" + 
            "dHMuQWNoaWV2ZW1lbnRVcGRhdGVSZWNvcmQSSwoRY3JpdGVyaWFfc25hcHNo" + 
            "b3QYAiADKAsyMC5ibmV0LnByb3RvY29sLmFjaGlldmVtZW50cy5Dcml0ZXJp" + 
            "YVVwZGF0ZVJlY29yZBIRCgZoZWFkZXIYAyABKAQ6ATAiawoWUmVxdWVzdFNu" + 
            "YXBzaG90UmVxdWVzdBIqCgllbnRpdHlfaWQYASACKAsyFy5ibmV0LnByb3Rv" + 
            "Y29sLkVudGl0eUlkEg4KBmZpbHRlchgCIAIoDRIVCgpwcm9ncmFtX2lkGAMg" + 
            "ASgHOgEwIlEKF1JlcXVlc3RTbmFwc2hvdFJlc3BvbnNlEjYKCHNuYXBzaG90" + 
            "GAEgASgLMiQuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVudHMuU25hcHNob3Qi" + 
            "PQoRSW5pdGlhbGl6ZVJlcXVlc3QSFQoKcHJvZ3JhbV9pZBgBIAEoBzoBMBIR" + 
            "CglvYmplY3RfaWQYAiACKAQi8wEKEkluaXRpYWxpemVSZXNwb25zZRI0Cg5j" + 
            "b250ZW50X2hhbmRsZRgBIAIoCzIcLmJuZXQucHJvdG9jb2wuQ29udGVudEhh" + 
            "bmRsZRIhChZtYXhfcmVjb3Jkc19wZXJfdXBkYXRlGAIgASgNOgEwEiIKF21h" + 
            "eF9jcml0ZXJpYV9wZXJfcmVjb3JkGAMgASgNOgEwEiYKG21heF9hY2hpZXZl" + 
            "bWVudHNfcGVyX3JlY29yZBgEIAEoDToBMBIcChFtYXhfcmVnaXN0cmF0aW9u" + 
            "cxgFIAEoDToBMBIaCg9mbHVzaF9mcmVxdWVuY3kYBiABKAQ6ATAiMgoOU3Rh" + 
            "dGljRGF0YUhhc2gSEgoKcHJvZ3JhbV9pZBgBIAIoBxIMCgRoYXNoGAIgAigJ" + 
            "ImEKGVZhbGlkYXRlU3RhdGljRGF0YVJlcXVlc3QSRAoQc3RhdGljX2RhdGFf" + 
            "aGFzaBgBIAMoCzIqLmJuZXQucHJvdG9jb2wuYWNoaWV2ZW1lbnRzLlN0YXRp" + 
            "Y0RhdGFIYXNoIoABChpTbmFwc2hvdFVwZGF0ZU5vdGlmaWNhdGlvbhIqCgl0" + 
            "YXJnZXRfaWQYASACKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEjYKCHNu" + 
            "YXBzaG90GAIgAigLMiQuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVudHMuU25h" + 
            "cHNob3QiOwogRmx1c2hGcmVxdWVuY3lVcGRhdGVOb3RpZmljYXRpb24SFwoP" + 
            "Zmx1c2hfZnJlcXVlbmN5GAEgAigEIi0KEEFjaGlldmVtZW50U3RhdHMSCgoC" + 
            "aWQYASACKAQSDQoFY291bnQYAiACKAQiMAoaR2V0QWNoaWV2ZW1lbnRTdGF0" + 
            "c1JlcXVlc3QSEgoKcHJvZ3JhbV9pZBgBIAIoByJaChtHZXRBY2hpZXZlbWVu" + 
            "dFN0YXRzUmVzcG9uc2USOwoFc3RhdHMYASADKAsyLC5ibmV0LnByb3RvY29s" + 
            "LmFjaGlldmVtZW50cy5BY2hpZXZlbWVudFN0YXRzIi0KF0dldENyaXRlcmlh" + 
            "U3RhdHNSZXF1ZXN0EhIKCnByb2dyYW1faWQYASACKAciVwoYR2V0Q3JpdGVy" + 
            "aWFTdGF0c1Jlc3BvbnNlEjsKBXN0YXRzGAEgAygLMiwuYm5ldC5wcm90b2Nv" + 
            "bC5hY2hpZXZlbWVudHMuQWNoaWV2ZW1lbnRTdGF0cyJSChhSZXZva2VBY2hp" + 
            "ZXZlbWVudFJlcXVlc3QSKgoJZW50aXR5X2lkGAEgAigLMhcuYm5ldC5wcm90" + 
            "b2NvbC5FbnRpdHlJZBIKCgJpZBgCIAIoBCI1ChlSZXZva2VBY2hpZXZlbWVu" + 
            "dFJlc3BvbnNlEhgKDXJldm9rZWRfY291bnQYASABKA06ATAicwoVVXBkYXRl" + 
            "Q3JpdGVyaWFSZXF1ZXN0EioKCWVudGl0eV9pZBgBIAIoCzIXLmJuZXQucHJv" + 
            "dG9jb2wuRW50aXR5SWQSCgoCaWQYAiACKAQSEAoIcXVhbnRpdHkYAyACKAQS" + 
            "EAoFZmxhZ3MYBCABKA06ATAiUQoXR3JhbnRBY2hpZXZlbWVudFJlcXVlc3QS" + 
            "KgoJZW50aXR5X2lkGAEgAigLMhcuYm5ldC5wcm90b2NvbC5FbnRpdHlJZBIK" + 
            "CgJpZBgCIAIoBCI0ChhHcmFudEFjaGlldmVtZW50UmVzcG9uc2USGAoNZ3Jh" + 
            "bnRlZF9jb3VudBgBIAEoDToBMCI+ChBDYWNoZUtpbGxSZXF1ZXN0EioKCWVu" + 
            "dGl0eV9pZBgBIAEoCzIXLmJuZXQucHJvdG9jb2wuRW50aXR5SWQy5wUKE0Fj" + 
            "aGlldmVtZW50c1NlcnZpY2UScQoKUG9zdFVwZGF0ZRItLmJuZXQucHJvdG9j" + 
            "b2wuYWNoaWV2ZW1lbnRzLlBvc3RVcGRhdGVSZXF1ZXN0Gi4uYm5ldC5wcm90" + 
            "b2NvbC5hY2hpZXZlbWVudHMuUG9zdFVwZGF0ZVJlc3BvbnNlIgSAtRgBEowB" + 
            "ChNSZWdpc3RlcldpdGhTZXJ2aWNlEjYuYm5ldC5wcm90b2NvbC5hY2hpZXZl" + 
            "bWVudHMuUmVnaXN0ZXJXaXRoU2VydmljZVJlcXVlc3QaNy5ibmV0LnByb3Rv" + 
            "Y29sLmFjaGlldmVtZW50cy5SZWdpc3RlcldpdGhTZXJ2aWNlUmVzcG9uc2Ui" + 
            "BIC1GAISgAEKD1JlcXVlc3RTbmFwc2hvdBIyLmJuZXQucHJvdG9jb2wuYWNo" + 
            "aWV2ZW1lbnRzLlJlcXVlc3RTbmFwc2hvdFJlcXVlc3QaMy5ibmV0LnByb3Rv" + 
            "Y29sLmFjaGlldmVtZW50cy5SZXF1ZXN0U25hcHNob3RSZXNwb25zZSIEgLUY" + 
            "AxJuChVVbnJlZ2lzdGVyRnJvbVNlcnZpY2USOC5ibmV0LnByb3RvY29sLmFj" + 
            "aGlldmVtZW50cy5VbnJlZ2lzdGVyRnJvbVNlcnZpY2VSZXF1ZXN0GhUuYm5l" + 
            "dC5wcm90b2NvbC5Ob0RhdGEiBIC1GAQScQoKSW5pdGlhbGl6ZRItLmJuZXQu" + 
            "cHJvdG9jb2wuYWNoaWV2ZW1lbnRzLkluaXRpYWxpemVSZXF1ZXN0Gi4uYm5l" + 
            "dC5wcm90b2NvbC5hY2hpZXZlbWVudHMuSW5pdGlhbGl6ZVJlc3BvbnNlIgSA" + 
            "tRgFEmgKElZhbGlkYXRlU3RhdGljRGF0YRI1LmJuZXQucHJvdG9jb2wuYWNo" + 
            "aWV2ZW1lbnRzLlZhbGlkYXRlU3RhdGljRGF0YVJlcXVlc3QaFS5ibmV0LnBy" + 
            "b3RvY29sLk5vRGF0YSIEgLUYBjKEAgoSQWNoaWV2ZW1lbnRzTm90aWZ5EnAK" + 
            "FE5vdGlmeVNuYXBzaG90VXBkYXRlEjYuYm5ldC5wcm90b2NvbC5hY2hpZXZl" + 
            "bWVudHMuU25hcHNob3RVcGRhdGVOb3RpZmljYXRpb24aGi5ibmV0LnByb3Rv" + 
            "Y29sLk5PX1JFU1BPTlNFIgSAtRgBEnwKGk5vdGlmeUZsdXNoRnJlcXVlbmN5" + 
            "VXBkYXRlEjwuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVudHMuRmx1c2hGcmVx" + 
            "dWVuY3lVcGRhdGVOb3RpZmljYXRpb24aGi5ibmV0LnByb3RvY29sLk5PX1JF" + 
            "U1BPTlNFIgSAtRgCMvEFChFBY2hpZXZlbWVudHNVdGlscxKMAQoTR2V0QWNo" + 
            "aWV2ZW1lbnRTdGF0cxI2LmJuZXQucHJvdG9jb2wuYWNoaWV2ZW1lbnRzLkdl" + 
            "dEFjaGlldmVtZW50U3RhdHNSZXF1ZXN0GjcuYm5ldC5wcm90b2NvbC5hY2hp" + 
            "ZXZlbWVudHMuR2V0QWNoaWV2ZW1lbnRTdGF0c1Jlc3BvbnNlIgSAtRgBEoMB" + 
            "ChBHZXRDcml0ZXJpYVN0YXRzEjMuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVu" + 
            "dHMuR2V0Q3JpdGVyaWFTdGF0c1JlcXVlc3QaNC5ibmV0LnByb3RvY29sLmFj" + 
            "aGlldmVtZW50cy5HZXRDcml0ZXJpYVN0YXRzUmVzcG9uc2UiBIC1GAIShgEK" + 
            "EVJldm9rZUFjaGlldmVtZW50EjQuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVu" + 
            "dHMuUmV2b2tlQWNoaWV2ZW1lbnRSZXF1ZXN0GjUuYm5ldC5wcm90b2NvbC5h" + 
            "Y2hpZXZlbWVudHMuUmV2b2tlQWNoaWV2ZW1lbnRSZXNwb25zZSIEgLUYAxJg" + 
            "Cg5VcGRhdGVDcml0ZXJpYRIxLmJuZXQucHJvdG9jb2wuYWNoaWV2ZW1lbnRz" + 
            "LlVwZGF0ZUNyaXRlcmlhUmVxdWVzdBoVLmJuZXQucHJvdG9jb2wuTm9EYXRh" + 
            "IgSAtRgEEoMBChBHcmFudEFjaGlldmVtZW50EjMuYm5ldC5wcm90b2NvbC5h" + 
            "Y2hpZXZlbWVudHMuR3JhbnRBY2hpZXZlbWVudFJlcXVlc3QaNC5ibmV0LnBy" + 
            "b3RvY29sLmFjaGlldmVtZW50cy5HcmFudEFjaGlldmVtZW50UmVzcG9uc2Ui" + 
            "BIC1GAUSVgoJQ2FjaGVLaWxsEiwuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVu" + 
            "dHMuQ2FjaGVLaWxsUmVxdWVzdBoVLmJuZXQucHJvdG9jb2wuTm9EYXRhIgSA" + 
            "tRgGQgOAAQA=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_achievements_AchievementUpdateRecord__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_achievements_AchievementUpdateRecord__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.AchievementUpdateRecord, global::bnet.protocol.achievements.AchievementUpdateRecord.Builder>(internal__static_bnet_protocol_achievements_AchievementUpdateRecord__Descriptor,
                  new string[] { "AchievementId", "Completion", });
          internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.CriteriaUpdateRecord, global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder>(internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__Descriptor,
                  new string[] { "CriteriaId32AndFlags8", "StartTime32", "Quantity32", });
          internal__static_bnet_protocol_achievements_PostUpdateRecord__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bnet_protocol_achievements_PostUpdateRecord__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateRecord, global::bnet.protocol.achievements.PostUpdateRecord.Builder>(internal__static_bnet_protocol_achievements_PostUpdateRecord__Descriptor,
                  new string[] { "TargetId", "Criteria", });
          internal__static_bnet_protocol_achievements_PostUpdateRequest__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bnet_protocol_achievements_PostUpdateRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateRequest, global::bnet.protocol.achievements.PostUpdateRequest.Builder>(internal__static_bnet_protocol_achievements_PostUpdateRequest__Descriptor,
                  new string[] { "PostUpdateRecord", "ProgramId", "AtiId", });
          internal__static_bnet_protocol_achievements_PostUpdateResponse__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bnet_protocol_achievements_PostUpdateResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.PostUpdateResponse, global::bnet.protocol.achievements.PostUpdateResponse.Builder>(internal__static_bnet_protocol_achievements_PostUpdateResponse__Descriptor,
                  new string[] { "ErrorCode", });
          internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__Descriptor = Descriptor.MessageTypes[5];
          internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RegisterWithServiceRequest, global::bnet.protocol.achievements.RegisterWithServiceRequest.Builder>(internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__Descriptor,
                  new string[] { "TargetId", "ObjectId", "RegistrationFlags", "ProgramId", "AtiId", });
          internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__Descriptor = Descriptor.MessageTypes[6];
          internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RegisterWithServiceResponse, global::bnet.protocol.achievements.RegisterWithServiceResponse.Builder>(internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__Descriptor,
                  new string[] { "Snapshot", "RegistrationFlags", });
          internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__Descriptor = Descriptor.MessageTypes[7];
          internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.UnregisterFromServiceRequest, global::bnet.protocol.achievements.UnregisterFromServiceRequest.Builder>(internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__Descriptor,
                  new string[] { "TargetId", "ObjectId", "AtiId", });
          internal__static_bnet_protocol_achievements_Snapshot__Descriptor = Descriptor.MessageTypes[8];
          internal__static_bnet_protocol_achievements_Snapshot__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.Snapshot, global::bnet.protocol.achievements.Snapshot.Builder>(internal__static_bnet_protocol_achievements_Snapshot__Descriptor,
                  new string[] { "AchievementSnapshot", "CriteriaSnapshot", "Header", });
          internal__static_bnet_protocol_achievements_RequestSnapshotRequest__Descriptor = Descriptor.MessageTypes[9];
          internal__static_bnet_protocol_achievements_RequestSnapshotRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RequestSnapshotRequest, global::bnet.protocol.achievements.RequestSnapshotRequest.Builder>(internal__static_bnet_protocol_achievements_RequestSnapshotRequest__Descriptor,
                  new string[] { "EntityId", "Filter", "ProgramId", });
          internal__static_bnet_protocol_achievements_RequestSnapshotResponse__Descriptor = Descriptor.MessageTypes[10];
          internal__static_bnet_protocol_achievements_RequestSnapshotResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RequestSnapshotResponse, global::bnet.protocol.achievements.RequestSnapshotResponse.Builder>(internal__static_bnet_protocol_achievements_RequestSnapshotResponse__Descriptor,
                  new string[] { "Snapshot", });
          internal__static_bnet_protocol_achievements_InitializeRequest__Descriptor = Descriptor.MessageTypes[11];
          internal__static_bnet_protocol_achievements_InitializeRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.InitializeRequest, global::bnet.protocol.achievements.InitializeRequest.Builder>(internal__static_bnet_protocol_achievements_InitializeRequest__Descriptor,
                  new string[] { "ProgramId", "ObjectId", });
          internal__static_bnet_protocol_achievements_InitializeResponse__Descriptor = Descriptor.MessageTypes[12];
          internal__static_bnet_protocol_achievements_InitializeResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.InitializeResponse, global::bnet.protocol.achievements.InitializeResponse.Builder>(internal__static_bnet_protocol_achievements_InitializeResponse__Descriptor,
                  new string[] { "ContentHandle", "MaxRecordsPerUpdate", "MaxCriteriaPerRecord", "MaxAchievementsPerRecord", "MaxRegistrations", "FlushFrequency", });
          internal__static_bnet_protocol_achievements_StaticDataHash__Descriptor = Descriptor.MessageTypes[13];
          internal__static_bnet_protocol_achievements_StaticDataHash__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.StaticDataHash, global::bnet.protocol.achievements.StaticDataHash.Builder>(internal__static_bnet_protocol_achievements_StaticDataHash__Descriptor,
                  new string[] { "ProgramId", "Hash", });
          internal__static_bnet_protocol_achievements_ValidateStaticDataRequest__Descriptor = Descriptor.MessageTypes[14];
          internal__static_bnet_protocol_achievements_ValidateStaticDataRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.ValidateStaticDataRequest, global::bnet.protocol.achievements.ValidateStaticDataRequest.Builder>(internal__static_bnet_protocol_achievements_ValidateStaticDataRequest__Descriptor,
                  new string[] { "StaticDataHash", });
          internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__Descriptor = Descriptor.MessageTypes[15];
          internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.SnapshotUpdateNotification, global::bnet.protocol.achievements.SnapshotUpdateNotification.Builder>(internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__Descriptor,
                  new string[] { "TargetId", "Snapshot", });
          internal__static_bnet_protocol_achievements_FlushFrequencyUpdateNotification__Descriptor = Descriptor.MessageTypes[16];
          internal__static_bnet_protocol_achievements_FlushFrequencyUpdateNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.FlushFrequencyUpdateNotification, global::bnet.protocol.achievements.FlushFrequencyUpdateNotification.Builder>(internal__static_bnet_protocol_achievements_FlushFrequencyUpdateNotification__Descriptor,
                  new string[] { "FlushFrequency", });
          internal__static_bnet_protocol_achievements_AchievementStats__Descriptor = Descriptor.MessageTypes[17];
          internal__static_bnet_protocol_achievements_AchievementStats__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.AchievementStats, global::bnet.protocol.achievements.AchievementStats.Builder>(internal__static_bnet_protocol_achievements_AchievementStats__Descriptor,
                  new string[] { "Id", "Count", });
          internal__static_bnet_protocol_achievements_GetAchievementStatsRequest__Descriptor = Descriptor.MessageTypes[18];
          internal__static_bnet_protocol_achievements_GetAchievementStatsRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GetAchievementStatsRequest, global::bnet.protocol.achievements.GetAchievementStatsRequest.Builder>(internal__static_bnet_protocol_achievements_GetAchievementStatsRequest__Descriptor,
                  new string[] { "ProgramId", });
          internal__static_bnet_protocol_achievements_GetAchievementStatsResponse__Descriptor = Descriptor.MessageTypes[19];
          internal__static_bnet_protocol_achievements_GetAchievementStatsResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GetAchievementStatsResponse, global::bnet.protocol.achievements.GetAchievementStatsResponse.Builder>(internal__static_bnet_protocol_achievements_GetAchievementStatsResponse__Descriptor,
                  new string[] { "Stats", });
          internal__static_bnet_protocol_achievements_GetCriteriaStatsRequest__Descriptor = Descriptor.MessageTypes[20];
          internal__static_bnet_protocol_achievements_GetCriteriaStatsRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GetCriteriaStatsRequest, global::bnet.protocol.achievements.GetCriteriaStatsRequest.Builder>(internal__static_bnet_protocol_achievements_GetCriteriaStatsRequest__Descriptor,
                  new string[] { "ProgramId", });
          internal__static_bnet_protocol_achievements_GetCriteriaStatsResponse__Descriptor = Descriptor.MessageTypes[21];
          internal__static_bnet_protocol_achievements_GetCriteriaStatsResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GetCriteriaStatsResponse, global::bnet.protocol.achievements.GetCriteriaStatsResponse.Builder>(internal__static_bnet_protocol_achievements_GetCriteriaStatsResponse__Descriptor,
                  new string[] { "Stats", });
          internal__static_bnet_protocol_achievements_RevokeAchievementRequest__Descriptor = Descriptor.MessageTypes[22];
          internal__static_bnet_protocol_achievements_RevokeAchievementRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RevokeAchievementRequest, global::bnet.protocol.achievements.RevokeAchievementRequest.Builder>(internal__static_bnet_protocol_achievements_RevokeAchievementRequest__Descriptor,
                  new string[] { "EntityId", "Id", });
          internal__static_bnet_protocol_achievements_RevokeAchievementResponse__Descriptor = Descriptor.MessageTypes[23];
          internal__static_bnet_protocol_achievements_RevokeAchievementResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.RevokeAchievementResponse, global::bnet.protocol.achievements.RevokeAchievementResponse.Builder>(internal__static_bnet_protocol_achievements_RevokeAchievementResponse__Descriptor,
                  new string[] { "RevokedCount", });
          internal__static_bnet_protocol_achievements_UpdateCriteriaRequest__Descriptor = Descriptor.MessageTypes[24];
          internal__static_bnet_protocol_achievements_UpdateCriteriaRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.UpdateCriteriaRequest, global::bnet.protocol.achievements.UpdateCriteriaRequest.Builder>(internal__static_bnet_protocol_achievements_UpdateCriteriaRequest__Descriptor,
                  new string[] { "EntityId", "Id", "Quantity", "Flags", });
          internal__static_bnet_protocol_achievements_GrantAchievementRequest__Descriptor = Descriptor.MessageTypes[25];
          internal__static_bnet_protocol_achievements_GrantAchievementRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GrantAchievementRequest, global::bnet.protocol.achievements.GrantAchievementRequest.Builder>(internal__static_bnet_protocol_achievements_GrantAchievementRequest__Descriptor,
                  new string[] { "EntityId", "Id", });
          internal__static_bnet_protocol_achievements_GrantAchievementResponse__Descriptor = Descriptor.MessageTypes[26];
          internal__static_bnet_protocol_achievements_GrantAchievementResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.GrantAchievementResponse, global::bnet.protocol.achievements.GrantAchievementResponse.Builder>(internal__static_bnet_protocol_achievements_GrantAchievementResponse__Descriptor,
                  new string[] { "GrantedCount", });
          internal__static_bnet_protocol_achievements_CacheKillRequest__Descriptor = Descriptor.MessageTypes[27];
          internal__static_bnet_protocol_achievements_CacheKillRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.CacheKillRequest, global::bnet.protocol.achievements.CacheKillRequest.Builder>(internal__static_bnet_protocol_achievements_CacheKillRequest__Descriptor,
                  new string[] { "EntityId", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
          global::bnet.protocol.Entity.RegisterAllExtensions(registry);
          global::bnet.protocol.Proto.ContentHandle.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bnet.protocol.Rpc.Descriptor, 
            global::bnet.protocol.Entity.Descriptor, 
            global::bnet.protocol.Proto.ContentHandle.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementUpdateRecord : pb::GeneratedMessage<AchievementUpdateRecord, AchievementUpdateRecord.Builder> {
    private AchievementUpdateRecord() { }
    private static readonly AchievementUpdateRecord defaultInstance = new AchievementUpdateRecord().MakeReadOnly();
    private static readonly string[] _achievementUpdateRecordFieldNames = new string[] { "achievement_id", "completion" };
    private static readonly uint[] _achievementUpdateRecordFieldTags = new uint[] { 8, 16 };
    public static AchievementUpdateRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementUpdateRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementUpdateRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_AchievementUpdateRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementUpdateRecord, AchievementUpdateRecord.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_AchievementUpdateRecord__FieldAccessorTable; }
    }
    
    public const int AchievementIdFieldNumber = 1;
    private bool hasAchievementId;
    private ulong achievementId_;
    public bool HasAchievementId {
      get { return hasAchievementId; }
    }
    public ulong AchievementId {
      get { return achievementId_; }
    }
    
    public const int CompletionFieldNumber = 2;
    private bool hasCompletion;
    private int completion_;
    public bool HasCompletion {
      get { return hasCompletion; }
    }
    public int Completion {
      get { return completion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAchievementId) return false;
        if (!hasCompletion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementUpdateRecordFieldNames;
      if (hasAchievementId) {
        output.WriteUInt64(1, field_names[0], AchievementId);
      }
      if (hasCompletion) {
        output.WriteInt32(2, field_names[1], Completion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAchievementId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, AchievementId);
        }
        if (hasCompletion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Completion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementUpdateRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementUpdateRecord MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementUpdateRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementUpdateRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementUpdateRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementUpdateRecord result;
      
      private AchievementUpdateRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementUpdateRecord original = result;
          result = new AchievementUpdateRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementUpdateRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.AchievementUpdateRecord.Descriptor; }
      }
      
      public override AchievementUpdateRecord DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.AchievementUpdateRecord.DefaultInstance; }
      }
      
      public override AchievementUpdateRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementUpdateRecord) {
          return MergeFrom((AchievementUpdateRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementUpdateRecord other) {
        if (other == global::bnet.protocol.achievements.AchievementUpdateRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAchievementId) {
          AchievementId = other.AchievementId;
        }
        if (other.HasCompletion) {
          Completion = other.Completion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementUpdateRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementUpdateRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAchievementId = input.ReadUInt64(ref result.achievementId_);
              break;
            }
            case 16: {
              result.hasCompletion = input.ReadInt32(ref result.completion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAchievementId {
        get { return result.hasAchievementId; }
      }
      public ulong AchievementId {
        get { return result.AchievementId; }
        set { SetAchievementId(value); }
      }
      public Builder SetAchievementId(ulong value) {
        PrepareBuilder();
        result.hasAchievementId = true;
        result.achievementId_ = value;
        return this;
      }
      public Builder ClearAchievementId() {
        PrepareBuilder();
        result.hasAchievementId = false;
        result.achievementId_ = 0UL;
        return this;
      }
      
      public bool HasCompletion {
        get { return result.hasCompletion; }
      }
      public int Completion {
        get { return result.Completion; }
        set { SetCompletion(value); }
      }
      public Builder SetCompletion(int value) {
        PrepareBuilder();
        result.hasCompletion = true;
        result.completion_ = value;
        return this;
      }
      public Builder ClearCompletion() {
        PrepareBuilder();
        result.hasCompletion = false;
        result.completion_ = 0;
        return this;
      }
    }
    static AchievementUpdateRecord() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CriteriaUpdateRecord : pb::GeneratedMessage<CriteriaUpdateRecord, CriteriaUpdateRecord.Builder> {
    private CriteriaUpdateRecord() { }
    private static readonly CriteriaUpdateRecord defaultInstance = new CriteriaUpdateRecord().MakeReadOnly();
    private static readonly string[] _criteriaUpdateRecordFieldNames = new string[] { "criteria_Id_32_and_flags_8", "quantity_32", "start_time_32" };
    private static readonly uint[] _criteriaUpdateRecordFieldTags = new uint[] { 8, 24, 16 };
    public static CriteriaUpdateRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CriteriaUpdateRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CriteriaUpdateRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CriteriaUpdateRecord, CriteriaUpdateRecord.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_CriteriaUpdateRecord__FieldAccessorTable; }
    }
    
    public const int CriteriaId32AndFlags8FieldNumber = 1;
    private bool hasCriteriaId32AndFlags8;
    private uint criteriaId32AndFlags8_;
    public bool HasCriteriaId32AndFlags8 {
      get { return hasCriteriaId32AndFlags8; }
    }
    public uint CriteriaId32AndFlags8 {
      get { return criteriaId32AndFlags8_; }
    }
    
    public const int StartTime32FieldNumber = 2;
    private bool hasStartTime32;
    private uint startTime32_;
    public bool HasStartTime32 {
      get { return hasStartTime32; }
    }
    public uint StartTime32 {
      get { return startTime32_; }
    }
    
    public const int Quantity32FieldNumber = 3;
    private bool hasQuantity32;
    private uint quantity32_;
    public bool HasQuantity32 {
      get { return hasQuantity32; }
    }
    public uint Quantity32 {
      get { return quantity32_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCriteriaId32AndFlags8) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _criteriaUpdateRecordFieldNames;
      if (hasCriteriaId32AndFlags8) {
        output.WriteUInt32(1, field_names[0], CriteriaId32AndFlags8);
      }
      if (hasStartTime32) {
        output.WriteUInt32(2, field_names[2], StartTime32);
      }
      if (hasQuantity32) {
        output.WriteUInt32(3, field_names[1], Quantity32);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCriteriaId32AndFlags8) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, CriteriaId32AndFlags8);
        }
        if (hasStartTime32) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, StartTime32);
        }
        if (hasQuantity32) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Quantity32);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CriteriaUpdateRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CriteriaUpdateRecord MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CriteriaUpdateRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CriteriaUpdateRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CriteriaUpdateRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CriteriaUpdateRecord result;
      
      private CriteriaUpdateRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          CriteriaUpdateRecord original = result;
          result = new CriteriaUpdateRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CriteriaUpdateRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.CriteriaUpdateRecord.Descriptor; }
      }
      
      public override CriteriaUpdateRecord DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.CriteriaUpdateRecord.DefaultInstance; }
      }
      
      public override CriteriaUpdateRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CriteriaUpdateRecord) {
          return MergeFrom((CriteriaUpdateRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CriteriaUpdateRecord other) {
        if (other == global::bnet.protocol.achievements.CriteriaUpdateRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCriteriaId32AndFlags8) {
          CriteriaId32AndFlags8 = other.CriteriaId32AndFlags8;
        }
        if (other.HasStartTime32) {
          StartTime32 = other.StartTime32;
        }
        if (other.HasQuantity32) {
          Quantity32 = other.Quantity32;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_criteriaUpdateRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _criteriaUpdateRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCriteriaId32AndFlags8 = input.ReadUInt32(ref result.criteriaId32AndFlags8_);
              break;
            }
            case 16: {
              result.hasStartTime32 = input.ReadUInt32(ref result.startTime32_);
              break;
            }
            case 24: {
              result.hasQuantity32 = input.ReadUInt32(ref result.quantity32_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCriteriaId32AndFlags8 {
        get { return result.hasCriteriaId32AndFlags8; }
      }
      public uint CriteriaId32AndFlags8 {
        get { return result.CriteriaId32AndFlags8; }
        set { SetCriteriaId32AndFlags8(value); }
      }
      public Builder SetCriteriaId32AndFlags8(uint value) {
        PrepareBuilder();
        result.hasCriteriaId32AndFlags8 = true;
        result.criteriaId32AndFlags8_ = value;
        return this;
      }
      public Builder ClearCriteriaId32AndFlags8() {
        PrepareBuilder();
        result.hasCriteriaId32AndFlags8 = false;
        result.criteriaId32AndFlags8_ = 0;
        return this;
      }
      
      public bool HasStartTime32 {
        get { return result.hasStartTime32; }
      }
      public uint StartTime32 {
        get { return result.StartTime32; }
        set { SetStartTime32(value); }
      }
      public Builder SetStartTime32(uint value) {
        PrepareBuilder();
        result.hasStartTime32 = true;
        result.startTime32_ = value;
        return this;
      }
      public Builder ClearStartTime32() {
        PrepareBuilder();
        result.hasStartTime32 = false;
        result.startTime32_ = 0;
        return this;
      }
      
      public bool HasQuantity32 {
        get { return result.hasQuantity32; }
      }
      public uint Quantity32 {
        get { return result.Quantity32; }
        set { SetQuantity32(value); }
      }
      public Builder SetQuantity32(uint value) {
        PrepareBuilder();
        result.hasQuantity32 = true;
        result.quantity32_ = value;
        return this;
      }
      public Builder ClearQuantity32() {
        PrepareBuilder();
        result.hasQuantity32 = false;
        result.quantity32_ = 0;
        return this;
      }
    }
    static CriteriaUpdateRecord() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PostUpdateRecord : pb::GeneratedMessage<PostUpdateRecord, PostUpdateRecord.Builder> {
    private PostUpdateRecord() { }
    private static readonly PostUpdateRecord defaultInstance = new PostUpdateRecord().MakeReadOnly();
    private static readonly string[] _postUpdateRecordFieldNames = new string[] { "criteria", "target_id" };
    private static readonly uint[] _postUpdateRecordFieldTags = new uint[] { 18, 10 };
    public static PostUpdateRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PostUpdateRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PostUpdateRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_PostUpdateRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PostUpdateRecord, PostUpdateRecord.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_PostUpdateRecord__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private global::bnet.protocol.EntityId targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public global::bnet.protocol.EntityId TargetId {
      get { return targetId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int CriteriaFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord> criteria_ = new pbc::PopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord>();
    public scg::IList<global::bnet.protocol.achievements.CriteriaUpdateRecord> CriteriaList {
      get { return criteria_; }
    }
    public int CriteriaCount {
      get { return criteria_.Count; }
    }
    public global::bnet.protocol.achievements.CriteriaUpdateRecord GetCriteria(int index) {
      return criteria_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!TargetId.IsInitialized) return false;
        foreach (global::bnet.protocol.achievements.CriteriaUpdateRecord element in CriteriaList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _postUpdateRecordFieldNames;
      if (hasTargetId) {
        output.WriteMessage(1, field_names[1], TargetId);
      }
      if (criteria_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], criteria_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TargetId);
        }
        foreach (global::bnet.protocol.achievements.CriteriaUpdateRecord element in CriteriaList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PostUpdateRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PostUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PostUpdateRecord MakeReadOnly() {
      criteria_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PostUpdateRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PostUpdateRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PostUpdateRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PostUpdateRecord result;
      
      private PostUpdateRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          PostUpdateRecord original = result;
          result = new PostUpdateRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PostUpdateRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.PostUpdateRecord.Descriptor; }
      }
      
      public override PostUpdateRecord DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.PostUpdateRecord.DefaultInstance; }
      }
      
      public override PostUpdateRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PostUpdateRecord) {
          return MergeFrom((PostUpdateRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PostUpdateRecord other) {
        if (other == global::bnet.protocol.achievements.PostUpdateRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          MergeTargetId(other.TargetId);
        }
        if (other.criteria_.Count != 0) {
          result.criteria_.Add(other.criteria_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_postUpdateRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _postUpdateRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasTargetId) {
                subBuilder.MergeFrom(TargetId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.criteria_, global::bnet.protocol.achievements.CriteriaUpdateRecord.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
       get { return result.hasTargetId; }
      }
      public global::bnet.protocol.EntityId TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetId &&
            result.targetId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.targetId_ = global::bnet.protocol.EntityId.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
        } else {
          result.targetId_ = value;
        }
        result.hasTargetId = true;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord> CriteriaList {
        get { return PrepareBuilder().criteria_; }
      }
      public int CriteriaCount {
        get { return result.CriteriaCount; }
      }
      public global::bnet.protocol.achievements.CriteriaUpdateRecord GetCriteria(int index) {
        return result.GetCriteria(index);
      }
      public Builder SetCriteria(int index, global::bnet.protocol.achievements.CriteriaUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteria_[index] = value;
        return this;
      }
      public Builder SetCriteria(int index, global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteria_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCriteria(global::bnet.protocol.achievements.CriteriaUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteria_.Add(value);
        return this;
      }
      public Builder AddCriteria(global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteria_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCriteria(scg::IEnumerable<global::bnet.protocol.achievements.CriteriaUpdateRecord> values) {
        PrepareBuilder();
        result.criteria_.Add(values);
        return this;
      }
      public Builder ClearCriteria() {
        PrepareBuilder();
        result.criteria_.Clear();
        return this;
      }
    }
    static PostUpdateRecord() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PostUpdateRequest : pb::GeneratedMessage<PostUpdateRequest, PostUpdateRequest.Builder> {
    private PostUpdateRequest() { }
    private static readonly PostUpdateRequest defaultInstance = new PostUpdateRequest().MakeReadOnly();
    private static readonly string[] _postUpdateRequestFieldNames = new string[] { "ati_id", "post_update_record", "program_id" };
    private static readonly uint[] _postUpdateRequestFieldTags = new uint[] { 24, 10, 21 };
    public static PostUpdateRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PostUpdateRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PostUpdateRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_PostUpdateRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PostUpdateRequest, PostUpdateRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_PostUpdateRequest__FieldAccessorTable; }
    }
    
    public const int PostUpdateRecordFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.achievements.PostUpdateRecord> postUpdateRecord_ = new pbc::PopsicleList<global::bnet.protocol.achievements.PostUpdateRecord>();
    public scg::IList<global::bnet.protocol.achievements.PostUpdateRecord> PostUpdateRecordList {
      get { return postUpdateRecord_; }
    }
    public int PostUpdateRecordCount {
      get { return postUpdateRecord_.Count; }
    }
    public global::bnet.protocol.achievements.PostUpdateRecord GetPostUpdateRecord(int index) {
      return postUpdateRecord_[index];
    }
    
    public const int ProgramIdFieldNumber = 2;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public const int AtiIdFieldNumber = 3;
    private bool hasAtiId;
    private uint atiId_;
    public bool HasAtiId {
      get { return hasAtiId; }
    }
    public uint AtiId {
      get { return atiId_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.achievements.PostUpdateRecord element in PostUpdateRecordList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _postUpdateRequestFieldNames;
      if (postUpdateRecord_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], postUpdateRecord_);
      }
      if (hasProgramId) {
        output.WriteFixed32(2, field_names[2], ProgramId);
      }
      if (hasAtiId) {
        output.WriteUInt32(3, field_names[0], AtiId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.achievements.PostUpdateRecord element in PostUpdateRecordList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, ProgramId);
        }
        if (hasAtiId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, AtiId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PostUpdateRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PostUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PostUpdateRequest MakeReadOnly() {
      postUpdateRecord_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PostUpdateRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PostUpdateRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PostUpdateRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PostUpdateRequest result;
      
      private PostUpdateRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PostUpdateRequest original = result;
          result = new PostUpdateRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PostUpdateRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.PostUpdateRequest.Descriptor; }
      }
      
      public override PostUpdateRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.PostUpdateRequest.DefaultInstance; }
      }
      
      public override PostUpdateRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PostUpdateRequest) {
          return MergeFrom((PostUpdateRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PostUpdateRequest other) {
        if (other == global::bnet.protocol.achievements.PostUpdateRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.postUpdateRecord_.Count != 0) {
          result.postUpdateRecord_.Add(other.postUpdateRecord_);
        }
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        if (other.HasAtiId) {
          AtiId = other.AtiId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_postUpdateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _postUpdateRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.postUpdateRecord_, global::bnet.protocol.achievements.PostUpdateRecord.DefaultInstance, extensionRegistry);
              break;
            }
            case 21: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
            case 24: {
              result.hasAtiId = input.ReadUInt32(ref result.atiId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.PostUpdateRecord> PostUpdateRecordList {
        get { return PrepareBuilder().postUpdateRecord_; }
      }
      public int PostUpdateRecordCount {
        get { return result.PostUpdateRecordCount; }
      }
      public global::bnet.protocol.achievements.PostUpdateRecord GetPostUpdateRecord(int index) {
        return result.GetPostUpdateRecord(index);
      }
      public Builder SetPostUpdateRecord(int index, global::bnet.protocol.achievements.PostUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.postUpdateRecord_[index] = value;
        return this;
      }
      public Builder SetPostUpdateRecord(int index, global::bnet.protocol.achievements.PostUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.postUpdateRecord_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPostUpdateRecord(global::bnet.protocol.achievements.PostUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.postUpdateRecord_.Add(value);
        return this;
      }
      public Builder AddPostUpdateRecord(global::bnet.protocol.achievements.PostUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.postUpdateRecord_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePostUpdateRecord(scg::IEnumerable<global::bnet.protocol.achievements.PostUpdateRecord> values) {
        PrepareBuilder();
        result.postUpdateRecord_.Add(values);
        return this;
      }
      public Builder ClearPostUpdateRecord() {
        PrepareBuilder();
        result.postUpdateRecord_.Clear();
        return this;
      }
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
      
      public bool HasAtiId {
        get { return result.hasAtiId; }
      }
      public uint AtiId {
        get { return result.AtiId; }
        set { SetAtiId(value); }
      }
      public Builder SetAtiId(uint value) {
        PrepareBuilder();
        result.hasAtiId = true;
        result.atiId_ = value;
        return this;
      }
      public Builder ClearAtiId() {
        PrepareBuilder();
        result.hasAtiId = false;
        result.atiId_ = 0;
        return this;
      }
    }
    static PostUpdateRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PostUpdateResponse : pb::GeneratedMessage<PostUpdateResponse, PostUpdateResponse.Builder> {
    private PostUpdateResponse() { }
    private static readonly PostUpdateResponse defaultInstance = new PostUpdateResponse().MakeReadOnly();
    private static readonly string[] _postUpdateResponseFieldNames = new string[] { "error_code" };
    private static readonly uint[] _postUpdateResponseFieldTags = new uint[] { 8 };
    public static PostUpdateResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PostUpdateResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PostUpdateResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_PostUpdateResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PostUpdateResponse, PostUpdateResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_PostUpdateResponse__FieldAccessorTable; }
    }
    
    public const int ErrorCodeFieldNumber = 1;
    private pbc::PopsicleList<uint> errorCode_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> ErrorCodeList {
      get { return pbc::Lists.AsReadOnly(errorCode_); }
    }
    public int ErrorCodeCount {
      get { return errorCode_.Count; }
    }
    public uint GetErrorCode(int index) {
      return errorCode_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _postUpdateResponseFieldNames;
      if (errorCode_.Count > 0) {
        output.WriteUInt32Array(1, field_names[0], errorCode_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (uint element in ErrorCodeList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * errorCode_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PostUpdateResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PostUpdateResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PostUpdateResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostUpdateResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PostUpdateResponse MakeReadOnly() {
      errorCode_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PostUpdateResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PostUpdateResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PostUpdateResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PostUpdateResponse result;
      
      private PostUpdateResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PostUpdateResponse original = result;
          result = new PostUpdateResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PostUpdateResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.PostUpdateResponse.Descriptor; }
      }
      
      public override PostUpdateResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.PostUpdateResponse.DefaultInstance; }
      }
      
      public override PostUpdateResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PostUpdateResponse) {
          return MergeFrom((PostUpdateResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PostUpdateResponse other) {
        if (other == global::bnet.protocol.achievements.PostUpdateResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.errorCode_.Count != 0) {
          result.errorCode_.Add(other.errorCode_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_postUpdateResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _postUpdateResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt32Array(tag, field_name, result.errorCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<uint> ErrorCodeList {
        get { return PrepareBuilder().errorCode_; }
      }
      public int ErrorCodeCount {
        get { return result.ErrorCodeCount; }
      }
      public uint GetErrorCode(int index) {
        return result.GetErrorCode(index);
      }
      public Builder SetErrorCode(int index, uint value) {
        PrepareBuilder();
        result.errorCode_[index] = value;
        return this;
      }
      public Builder AddErrorCode(uint value) {
        PrepareBuilder();
        result.errorCode_.Add(value);
        return this;
      }
      public Builder AddRangeErrorCode(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.errorCode_.Add(values);
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.errorCode_.Clear();
        return this;
      }
    }
    static PostUpdateResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RegisterWithServiceRequest : pb::GeneratedMessage<RegisterWithServiceRequest, RegisterWithServiceRequest.Builder> {
    private RegisterWithServiceRequest() { }
    private static readonly RegisterWithServiceRequest defaultInstance = new RegisterWithServiceRequest().MakeReadOnly();
    private static readonly string[] _registerWithServiceRequestFieldNames = new string[] { "ati_id", "object_id", "program_id", "registration_flags", "target_id" };
    private static readonly uint[] _registerWithServiceRequestFieldTags = new uint[] { 40, 16, 37, 24, 10 };
    public static RegisterWithServiceRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RegisterWithServiceRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegisterWithServiceRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RegisterWithServiceRequest, RegisterWithServiceRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RegisterWithServiceRequest__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private global::bnet.protocol.EntityId targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public global::bnet.protocol.EntityId TargetId {
      get { return targetId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ObjectIdFieldNumber = 2;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int RegistrationFlagsFieldNumber = 3;
    private bool hasRegistrationFlags;
    private uint registrationFlags_;
    public bool HasRegistrationFlags {
      get { return hasRegistrationFlags; }
    }
    public uint RegistrationFlags {
      get { return registrationFlags_; }
    }
    
    public const int ProgramIdFieldNumber = 4;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public const int AtiIdFieldNumber = 5;
    private bool hasAtiId;
    private uint atiId_;
    public bool HasAtiId {
      get { return hasAtiId; }
    }
    public uint AtiId {
      get { return atiId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasObjectId) return false;
        if (!TargetId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registerWithServiceRequestFieldNames;
      if (hasTargetId) {
        output.WriteMessage(1, field_names[4], TargetId);
      }
      if (hasObjectId) {
        output.WriteUInt64(2, field_names[1], ObjectId);
      }
      if (hasRegistrationFlags) {
        output.WriteUInt32(3, field_names[3], RegistrationFlags);
      }
      if (hasProgramId) {
        output.WriteFixed32(4, field_names[2], ProgramId);
      }
      if (hasAtiId) {
        output.WriteUInt32(5, field_names[0], AtiId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TargetId);
        }
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ObjectId);
        }
        if (hasRegistrationFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, RegistrationFlags);
        }
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(4, ProgramId);
        }
        if (hasAtiId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, AtiId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RegisterWithServiceRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterWithServiceRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegisterWithServiceRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RegisterWithServiceRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RegisterWithServiceRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegisterWithServiceRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegisterWithServiceRequest result;
      
      private RegisterWithServiceRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RegisterWithServiceRequest original = result;
          result = new RegisterWithServiceRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegisterWithServiceRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.RegisterWithServiceRequest.Descriptor; }
      }
      
      public override RegisterWithServiceRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.RegisterWithServiceRequest.DefaultInstance; }
      }
      
      public override RegisterWithServiceRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RegisterWithServiceRequest) {
          return MergeFrom((RegisterWithServiceRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegisterWithServiceRequest other) {
        if (other == global::bnet.protocol.achievements.RegisterWithServiceRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          MergeTargetId(other.TargetId);
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.HasRegistrationFlags) {
          RegistrationFlags = other.RegistrationFlags;
        }
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        if (other.HasAtiId) {
          AtiId = other.AtiId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registerWithServiceRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registerWithServiceRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasTargetId) {
                subBuilder.MergeFrom(TargetId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
            case 24: {
              result.hasRegistrationFlags = input.ReadUInt32(ref result.registrationFlags_);
              break;
            }
            case 37: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
            case 40: {
              result.hasAtiId = input.ReadUInt32(ref result.atiId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
       get { return result.hasTargetId; }
      }
      public global::bnet.protocol.EntityId TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetId &&
            result.targetId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.targetId_ = global::bnet.protocol.EntityId.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
        } else {
          result.targetId_ = value;
        }
        result.hasTargetId = true;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = null;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
      
      public bool HasRegistrationFlags {
        get { return result.hasRegistrationFlags; }
      }
      public uint RegistrationFlags {
        get { return result.RegistrationFlags; }
        set { SetRegistrationFlags(value); }
      }
      public Builder SetRegistrationFlags(uint value) {
        PrepareBuilder();
        result.hasRegistrationFlags = true;
        result.registrationFlags_ = value;
        return this;
      }
      public Builder ClearRegistrationFlags() {
        PrepareBuilder();
        result.hasRegistrationFlags = false;
        result.registrationFlags_ = 0;
        return this;
      }
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
      
      public bool HasAtiId {
        get { return result.hasAtiId; }
      }
      public uint AtiId {
        get { return result.AtiId; }
        set { SetAtiId(value); }
      }
      public Builder SetAtiId(uint value) {
        PrepareBuilder();
        result.hasAtiId = true;
        result.atiId_ = value;
        return this;
      }
      public Builder ClearAtiId() {
        PrepareBuilder();
        result.hasAtiId = false;
        result.atiId_ = 0;
        return this;
      }
    }
    static RegisterWithServiceRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RegisterWithServiceResponse : pb::GeneratedMessage<RegisterWithServiceResponse, RegisterWithServiceResponse.Builder> {
    private RegisterWithServiceResponse() { }
    private static readonly RegisterWithServiceResponse defaultInstance = new RegisterWithServiceResponse().MakeReadOnly();
    private static readonly string[] _registerWithServiceResponseFieldNames = new string[] { "registration_flags", "snapshot" };
    private static readonly uint[] _registerWithServiceResponseFieldTags = new uint[] { 16, 10 };
    public static RegisterWithServiceResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RegisterWithServiceResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegisterWithServiceResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RegisterWithServiceResponse, RegisterWithServiceResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RegisterWithServiceResponse__FieldAccessorTable; }
    }
    
    public const int SnapshotFieldNumber = 1;
    private bool hasSnapshot;
    private global::bnet.protocol.achievements.Snapshot snapshot_;
    public bool HasSnapshot {
      get { return hasSnapshot; }
    }
    public global::bnet.protocol.achievements.Snapshot Snapshot {
      get { return snapshot_ ?? global::bnet.protocol.achievements.Snapshot.DefaultInstance; }
    }
    
    public const int RegistrationFlagsFieldNumber = 2;
    private bool hasRegistrationFlags;
    private uint registrationFlags_;
    public bool HasRegistrationFlags {
      get { return hasRegistrationFlags; }
    }
    public uint RegistrationFlags {
      get { return registrationFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSnapshot) {
          if (!Snapshot.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registerWithServiceResponseFieldNames;
      if (hasSnapshot) {
        output.WriteMessage(1, field_names[1], Snapshot);
      }
      if (hasRegistrationFlags) {
        output.WriteUInt32(2, field_names[0], RegistrationFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Snapshot);
        }
        if (hasRegistrationFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, RegistrationFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RegisterWithServiceResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterWithServiceResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegisterWithServiceResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RegisterWithServiceResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RegisterWithServiceResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegisterWithServiceResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegisterWithServiceResponse result;
      
      private RegisterWithServiceResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RegisterWithServiceResponse original = result;
          result = new RegisterWithServiceResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegisterWithServiceResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.RegisterWithServiceResponse.Descriptor; }
      }
      
      public override RegisterWithServiceResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.RegisterWithServiceResponse.DefaultInstance; }
      }
      
      public override RegisterWithServiceResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RegisterWithServiceResponse) {
          return MergeFrom((RegisterWithServiceResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegisterWithServiceResponse other) {
        if (other == global::bnet.protocol.achievements.RegisterWithServiceResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnapshot) {
          MergeSnapshot(other.Snapshot);
        }
        if (other.HasRegistrationFlags) {
          RegistrationFlags = other.RegistrationFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registerWithServiceResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registerWithServiceResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.achievements.Snapshot.Builder subBuilder = global::bnet.protocol.achievements.Snapshot.CreateBuilder();
              if (result.hasSnapshot) {
                subBuilder.MergeFrom(Snapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Snapshot = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasRegistrationFlags = input.ReadUInt32(ref result.registrationFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnapshot {
       get { return result.hasSnapshot; }
      }
      public global::bnet.protocol.achievements.Snapshot Snapshot {
        get { return result.Snapshot; }
        set { SetSnapshot(value); }
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = value;
        return this;
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnapshot &&
            result.snapshot_ != global::bnet.protocol.achievements.Snapshot.DefaultInstance) {
            result.snapshot_ = global::bnet.protocol.achievements.Snapshot.CreateBuilder(result.snapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.snapshot_ = value;
        }
        result.hasSnapshot = true;
        return this;
      }
      public Builder ClearSnapshot() {
        PrepareBuilder();
        result.hasSnapshot = false;
        result.snapshot_ = null;
        return this;
      }
      
      public bool HasRegistrationFlags {
        get { return result.hasRegistrationFlags; }
      }
      public uint RegistrationFlags {
        get { return result.RegistrationFlags; }
        set { SetRegistrationFlags(value); }
      }
      public Builder SetRegistrationFlags(uint value) {
        PrepareBuilder();
        result.hasRegistrationFlags = true;
        result.registrationFlags_ = value;
        return this;
      }
      public Builder ClearRegistrationFlags() {
        PrepareBuilder();
        result.hasRegistrationFlags = false;
        result.registrationFlags_ = 0;
        return this;
      }
    }
    static RegisterWithServiceResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class UnregisterFromServiceRequest : pb::GeneratedMessage<UnregisterFromServiceRequest, UnregisterFromServiceRequest.Builder> {
    private UnregisterFromServiceRequest() { }
    private static readonly UnregisterFromServiceRequest defaultInstance = new UnregisterFromServiceRequest().MakeReadOnly();
    private static readonly string[] _unregisterFromServiceRequestFieldNames = new string[] { "ati_id", "object_id", "target_id" };
    private static readonly uint[] _unregisterFromServiceRequestFieldTags = new uint[] { 24, 16, 10 };
    public static UnregisterFromServiceRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UnregisterFromServiceRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UnregisterFromServiceRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UnregisterFromServiceRequest, UnregisterFromServiceRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_UnregisterFromServiceRequest__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private global::bnet.protocol.EntityId targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public global::bnet.protocol.EntityId TargetId {
      get { return targetId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ObjectIdFieldNumber = 2;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int AtiIdFieldNumber = 3;
    private bool hasAtiId;
    private uint atiId_;
    public bool HasAtiId {
      get { return hasAtiId; }
    }
    public uint AtiId {
      get { return atiId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasObjectId) return false;
        if (!TargetId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _unregisterFromServiceRequestFieldNames;
      if (hasTargetId) {
        output.WriteMessage(1, field_names[2], TargetId);
      }
      if (hasObjectId) {
        output.WriteUInt64(2, field_names[1], ObjectId);
      }
      if (hasAtiId) {
        output.WriteUInt32(3, field_names[0], AtiId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TargetId);
        }
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ObjectId);
        }
        if (hasAtiId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, AtiId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UnregisterFromServiceRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnregisterFromServiceRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UnregisterFromServiceRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UnregisterFromServiceRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<UnregisterFromServiceRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UnregisterFromServiceRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UnregisterFromServiceRequest result;
      
      private UnregisterFromServiceRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          UnregisterFromServiceRequest original = result;
          result = new UnregisterFromServiceRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UnregisterFromServiceRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.UnregisterFromServiceRequest.Descriptor; }
      }
      
      public override UnregisterFromServiceRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.UnregisterFromServiceRequest.DefaultInstance; }
      }
      
      public override UnregisterFromServiceRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UnregisterFromServiceRequest) {
          return MergeFrom((UnregisterFromServiceRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UnregisterFromServiceRequest other) {
        if (other == global::bnet.protocol.achievements.UnregisterFromServiceRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          MergeTargetId(other.TargetId);
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.HasAtiId) {
          AtiId = other.AtiId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_unregisterFromServiceRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _unregisterFromServiceRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasTargetId) {
                subBuilder.MergeFrom(TargetId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
            case 24: {
              result.hasAtiId = input.ReadUInt32(ref result.atiId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
       get { return result.hasTargetId; }
      }
      public global::bnet.protocol.EntityId TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetId &&
            result.targetId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.targetId_ = global::bnet.protocol.EntityId.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
        } else {
          result.targetId_ = value;
        }
        result.hasTargetId = true;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = null;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
      
      public bool HasAtiId {
        get { return result.hasAtiId; }
      }
      public uint AtiId {
        get { return result.AtiId; }
        set { SetAtiId(value); }
      }
      public Builder SetAtiId(uint value) {
        PrepareBuilder();
        result.hasAtiId = true;
        result.atiId_ = value;
        return this;
      }
      public Builder ClearAtiId() {
        PrepareBuilder();
        result.hasAtiId = false;
        result.atiId_ = 0;
        return this;
      }
    }
    static UnregisterFromServiceRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Snapshot : pb::GeneratedMessage<Snapshot, Snapshot.Builder> {
    private Snapshot() { }
    private static readonly Snapshot defaultInstance = new Snapshot().MakeReadOnly();
    private static readonly string[] _snapshotFieldNames = new string[] { "achievement_snapshot", "criteria_snapshot", "header" };
    private static readonly uint[] _snapshotFieldTags = new uint[] { 10, 18, 24 };
    public static Snapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Snapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Snapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_Snapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Snapshot, Snapshot.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_Snapshot__FieldAccessorTable; }
    }
    
    public const int AchievementSnapshotFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.achievements.AchievementUpdateRecord> achievementSnapshot_ = new pbc::PopsicleList<global::bnet.protocol.achievements.AchievementUpdateRecord>();
    public scg::IList<global::bnet.protocol.achievements.AchievementUpdateRecord> AchievementSnapshotList {
      get { return achievementSnapshot_; }
    }
    public int AchievementSnapshotCount {
      get { return achievementSnapshot_.Count; }
    }
    public global::bnet.protocol.achievements.AchievementUpdateRecord GetAchievementSnapshot(int index) {
      return achievementSnapshot_[index];
    }
    
    public const int CriteriaSnapshotFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord> criteriaSnapshot_ = new pbc::PopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord>();
    public scg::IList<global::bnet.protocol.achievements.CriteriaUpdateRecord> CriteriaSnapshotList {
      get { return criteriaSnapshot_; }
    }
    public int CriteriaSnapshotCount {
      get { return criteriaSnapshot_.Count; }
    }
    public global::bnet.protocol.achievements.CriteriaUpdateRecord GetCriteriaSnapshot(int index) {
      return criteriaSnapshot_[index];
    }
    
    public const int HeaderFieldNumber = 3;
    private bool hasHeader;
    private ulong header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public ulong Header {
      get { return header_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.achievements.AchievementUpdateRecord element in AchievementSnapshotList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.achievements.CriteriaUpdateRecord element in CriteriaSnapshotList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _snapshotFieldNames;
      if (achievementSnapshot_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], achievementSnapshot_);
      }
      if (criteriaSnapshot_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], criteriaSnapshot_);
      }
      if (hasHeader) {
        output.WriteUInt64(3, field_names[2], Header);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.achievements.AchievementUpdateRecord element in AchievementSnapshotList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::bnet.protocol.achievements.CriteriaUpdateRecord element in CriteriaSnapshotList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Header);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Snapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Snapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Snapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Snapshot MakeReadOnly() {
      achievementSnapshot_.MakeReadOnly();
      criteriaSnapshot_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Snapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Snapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Snapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Snapshot result;
      
      private Snapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          Snapshot original = result;
          result = new Snapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Snapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.Snapshot.Descriptor; }
      }
      
      public override Snapshot DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.Snapshot.DefaultInstance; }
      }
      
      public override Snapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Snapshot) {
          return MergeFrom((Snapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Snapshot other) {
        if (other == global::bnet.protocol.achievements.Snapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.achievementSnapshot_.Count != 0) {
          result.achievementSnapshot_.Add(other.achievementSnapshot_);
        }
        if (other.criteriaSnapshot_.Count != 0) {
          result.criteriaSnapshot_.Add(other.criteriaSnapshot_);
        }
        if (other.HasHeader) {
          Header = other.Header;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.achievementSnapshot_, global::bnet.protocol.achievements.AchievementUpdateRecord.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.criteriaSnapshot_, global::bnet.protocol.achievements.CriteriaUpdateRecord.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasHeader = input.ReadUInt64(ref result.header_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.AchievementUpdateRecord> AchievementSnapshotList {
        get { return PrepareBuilder().achievementSnapshot_; }
      }
      public int AchievementSnapshotCount {
        get { return result.AchievementSnapshotCount; }
      }
      public global::bnet.protocol.achievements.AchievementUpdateRecord GetAchievementSnapshot(int index) {
        return result.GetAchievementSnapshot(index);
      }
      public Builder SetAchievementSnapshot(int index, global::bnet.protocol.achievements.AchievementUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementSnapshot_[index] = value;
        return this;
      }
      public Builder SetAchievementSnapshot(int index, global::bnet.protocol.achievements.AchievementUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementSnapshot_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAchievementSnapshot(global::bnet.protocol.achievements.AchievementUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementSnapshot_.Add(value);
        return this;
      }
      public Builder AddAchievementSnapshot(global::bnet.protocol.achievements.AchievementUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementSnapshot_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAchievementSnapshot(scg::IEnumerable<global::bnet.protocol.achievements.AchievementUpdateRecord> values) {
        PrepareBuilder();
        result.achievementSnapshot_.Add(values);
        return this;
      }
      public Builder ClearAchievementSnapshot() {
        PrepareBuilder();
        result.achievementSnapshot_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.CriteriaUpdateRecord> CriteriaSnapshotList {
        get { return PrepareBuilder().criteriaSnapshot_; }
      }
      public int CriteriaSnapshotCount {
        get { return result.CriteriaSnapshotCount; }
      }
      public global::bnet.protocol.achievements.CriteriaUpdateRecord GetCriteriaSnapshot(int index) {
        return result.GetCriteriaSnapshot(index);
      }
      public Builder SetCriteriaSnapshot(int index, global::bnet.protocol.achievements.CriteriaUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteriaSnapshot_[index] = value;
        return this;
      }
      public Builder SetCriteriaSnapshot(int index, global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteriaSnapshot_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCriteriaSnapshot(global::bnet.protocol.achievements.CriteriaUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteriaSnapshot_.Add(value);
        return this;
      }
      public Builder AddCriteriaSnapshot(global::bnet.protocol.achievements.CriteriaUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteriaSnapshot_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCriteriaSnapshot(scg::IEnumerable<global::bnet.protocol.achievements.CriteriaUpdateRecord> values) {
        PrepareBuilder();
        result.criteriaSnapshot_.Add(values);
        return this;
      }
      public Builder ClearCriteriaSnapshot() {
        PrepareBuilder();
        result.criteriaSnapshot_.Clear();
        return this;
      }
      
      public bool HasHeader {
        get { return result.hasHeader; }
      }
      public ulong Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(ulong value) {
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = 0UL;
        return this;
      }
    }
    static Snapshot() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RequestSnapshotRequest : pb::GeneratedMessage<RequestSnapshotRequest, RequestSnapshotRequest.Builder> {
    private RequestSnapshotRequest() { }
    private static readonly RequestSnapshotRequest defaultInstance = new RequestSnapshotRequest().MakeReadOnly();
    private static readonly string[] _requestSnapshotRequestFieldNames = new string[] { "entity_id", "filter", "program_id" };
    private static readonly uint[] _requestSnapshotRequestFieldTags = new uint[] { 10, 16, 29 };
    public static RequestSnapshotRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RequestSnapshotRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RequestSnapshotRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RequestSnapshotRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RequestSnapshotRequest, RequestSnapshotRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RequestSnapshotRequest__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private global::bnet.protocol.EntityId entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public global::bnet.protocol.EntityId EntityId {
      get { return entityId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int FilterFieldNumber = 2;
    private bool hasFilter;
    private uint filter_;
    public bool HasFilter {
      get { return hasFilter; }
    }
    public uint Filter {
      get { return filter_; }
    }
    
    public const int ProgramIdFieldNumber = 3;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasFilter) return false;
        if (!EntityId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _requestSnapshotRequestFieldNames;
      if (hasEntityId) {
        output.WriteMessage(1, field_names[0], EntityId);
      }
      if (hasFilter) {
        output.WriteUInt32(2, field_names[1], Filter);
      }
      if (hasProgramId) {
        output.WriteFixed32(3, field_names[2], ProgramId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEntityId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EntityId);
        }
        if (hasFilter) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Filter);
        }
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(3, ProgramId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RequestSnapshotRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RequestSnapshotRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestSnapshotRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RequestSnapshotRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RequestSnapshotRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RequestSnapshotRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RequestSnapshotRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RequestSnapshotRequest result;
      
      private RequestSnapshotRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RequestSnapshotRequest original = result;
          result = new RequestSnapshotRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RequestSnapshotRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.RequestSnapshotRequest.Descriptor; }
      }
      
      public override RequestSnapshotRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.RequestSnapshotRequest.DefaultInstance; }
      }
      
      public override RequestSnapshotRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RequestSnapshotRequest) {
          return MergeFrom((RequestSnapshotRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RequestSnapshotRequest other) {
        if (other == global::bnet.protocol.achievements.RequestSnapshotRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          MergeEntityId(other.EntityId);
        }
        if (other.HasFilter) {
          Filter = other.Filter;
        }
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestSnapshotRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestSnapshotRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasEntityId) {
                subBuilder.MergeFrom(EntityId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EntityId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasFilter = input.ReadUInt32(ref result.filter_);
              break;
            }
            case 29: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
       get { return result.hasEntityId; }
      }
      public global::bnet.protocol.EntityId EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEntityId &&
            result.entityId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.entityId_ = global::bnet.protocol.EntityId.CreateBuilder(result.entityId_).MergeFrom(value).BuildPartial();
        } else {
          result.entityId_ = value;
        }
        result.hasEntityId = true;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = null;
        return this;
      }
      
      public bool HasFilter {
        get { return result.hasFilter; }
      }
      public uint Filter {
        get { return result.Filter; }
        set { SetFilter(value); }
      }
      public Builder SetFilter(uint value) {
        PrepareBuilder();
        result.hasFilter = true;
        result.filter_ = value;
        return this;
      }
      public Builder ClearFilter() {
        PrepareBuilder();
        result.hasFilter = false;
        result.filter_ = 0;
        return this;
      }
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
    }
    static RequestSnapshotRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RequestSnapshotResponse : pb::GeneratedMessage<RequestSnapshotResponse, RequestSnapshotResponse.Builder> {
    private RequestSnapshotResponse() { }
    private static readonly RequestSnapshotResponse defaultInstance = new RequestSnapshotResponse().MakeReadOnly();
    private static readonly string[] _requestSnapshotResponseFieldNames = new string[] { "snapshot" };
    private static readonly uint[] _requestSnapshotResponseFieldTags = new uint[] { 10 };
    public static RequestSnapshotResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RequestSnapshotResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RequestSnapshotResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RequestSnapshotResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RequestSnapshotResponse, RequestSnapshotResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RequestSnapshotResponse__FieldAccessorTable; }
    }
    
    public const int SnapshotFieldNumber = 1;
    private bool hasSnapshot;
    private global::bnet.protocol.achievements.Snapshot snapshot_;
    public bool HasSnapshot {
      get { return hasSnapshot; }
    }
    public global::bnet.protocol.achievements.Snapshot Snapshot {
      get { return snapshot_ ?? global::bnet.protocol.achievements.Snapshot.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSnapshot) {
          if (!Snapshot.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _requestSnapshotResponseFieldNames;
      if (hasSnapshot) {
        output.WriteMessage(1, field_names[0], Snapshot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Snapshot);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RequestSnapshotResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RequestSnapshotResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestSnapshotResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RequestSnapshotResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RequestSnapshotResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RequestSnapshotResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RequestSnapshotResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RequestSnapshotResponse result;
      
      private RequestSnapshotResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RequestSnapshotResponse original = result;
          result = new RequestSnapshotResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RequestSnapshotResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.RequestSnapshotResponse.Descriptor; }
      }
      
      public override RequestSnapshotResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.RequestSnapshotResponse.DefaultInstance; }
      }
      
      public override RequestSnapshotResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RequestSnapshotResponse) {
          return MergeFrom((RequestSnapshotResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RequestSnapshotResponse other) {
        if (other == global::bnet.protocol.achievements.RequestSnapshotResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnapshot) {
          MergeSnapshot(other.Snapshot);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestSnapshotResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestSnapshotResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.achievements.Snapshot.Builder subBuilder = global::bnet.protocol.achievements.Snapshot.CreateBuilder();
              if (result.hasSnapshot) {
                subBuilder.MergeFrom(Snapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Snapshot = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnapshot {
       get { return result.hasSnapshot; }
      }
      public global::bnet.protocol.achievements.Snapshot Snapshot {
        get { return result.Snapshot; }
        set { SetSnapshot(value); }
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = value;
        return this;
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnapshot &&
            result.snapshot_ != global::bnet.protocol.achievements.Snapshot.DefaultInstance) {
            result.snapshot_ = global::bnet.protocol.achievements.Snapshot.CreateBuilder(result.snapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.snapshot_ = value;
        }
        result.hasSnapshot = true;
        return this;
      }
      public Builder ClearSnapshot() {
        PrepareBuilder();
        result.hasSnapshot = false;
        result.snapshot_ = null;
        return this;
      }
    }
    static RequestSnapshotResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InitializeRequest : pb::GeneratedMessage<InitializeRequest, InitializeRequest.Builder> {
    private InitializeRequest() { }
    private static readonly InitializeRequest defaultInstance = new InitializeRequest().MakeReadOnly();
    private static readonly string[] _initializeRequestFieldNames = new string[] { "object_id", "program_id" };
    private static readonly uint[] _initializeRequestFieldTags = new uint[] { 16, 13 };
    public static InitializeRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InitializeRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InitializeRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_InitializeRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InitializeRequest, InitializeRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_InitializeRequest__FieldAccessorTable; }
    }
    
    public const int ProgramIdFieldNumber = 1;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public const int ObjectIdFieldNumber = 2;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasObjectId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _initializeRequestFieldNames;
      if (hasProgramId) {
        output.WriteFixed32(1, field_names[1], ProgramId);
      }
      if (hasObjectId) {
        output.WriteUInt64(2, field_names[0], ObjectId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, ProgramId);
        }
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ObjectId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InitializeRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InitializeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InitializeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InitializeRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitializeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InitializeRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InitializeRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InitializeRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InitializeRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InitializeRequest result;
      
      private InitializeRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          InitializeRequest original = result;
          result = new InitializeRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InitializeRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.InitializeRequest.Descriptor; }
      }
      
      public override InitializeRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.InitializeRequest.DefaultInstance; }
      }
      
      public override InitializeRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InitializeRequest) {
          return MergeFrom((InitializeRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InitializeRequest other) {
        if (other == global::bnet.protocol.achievements.InitializeRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_initializeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _initializeRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
            case 16: {
              result.hasObjectId = input.ReadUInt64(ref result.objectId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0UL;
        return this;
      }
    }
    static InitializeRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InitializeResponse : pb::GeneratedMessage<InitializeResponse, InitializeResponse.Builder> {
    private InitializeResponse() { }
    private static readonly InitializeResponse defaultInstance = new InitializeResponse().MakeReadOnly();
    private static readonly string[] _initializeResponseFieldNames = new string[] { "content_handle", "flush_frequency", "max_achievements_per_record", "max_criteria_per_record", "max_records_per_update", "max_registrations" };
    private static readonly uint[] _initializeResponseFieldTags = new uint[] { 10, 48, 32, 24, 16, 40 };
    public static InitializeResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InitializeResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InitializeResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_InitializeResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InitializeResponse, InitializeResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_InitializeResponse__FieldAccessorTable; }
    }
    
    public const int ContentHandleFieldNumber = 1;
    private bool hasContentHandle;
    private global::bnet.protocol.ContentHandle contentHandle_;
    public bool HasContentHandle {
      get { return hasContentHandle; }
    }
    public global::bnet.protocol.ContentHandle ContentHandle {
      get { return contentHandle_ ?? global::bnet.protocol.ContentHandle.DefaultInstance; }
    }
    
    public const int MaxRecordsPerUpdateFieldNumber = 2;
    private bool hasMaxRecordsPerUpdate;
    private uint maxRecordsPerUpdate_;
    public bool HasMaxRecordsPerUpdate {
      get { return hasMaxRecordsPerUpdate; }
    }
    public uint MaxRecordsPerUpdate {
      get { return maxRecordsPerUpdate_; }
    }
    
    public const int MaxCriteriaPerRecordFieldNumber = 3;
    private bool hasMaxCriteriaPerRecord;
    private uint maxCriteriaPerRecord_;
    public bool HasMaxCriteriaPerRecord {
      get { return hasMaxCriteriaPerRecord; }
    }
    public uint MaxCriteriaPerRecord {
      get { return maxCriteriaPerRecord_; }
    }
    
    public const int MaxAchievementsPerRecordFieldNumber = 4;
    private bool hasMaxAchievementsPerRecord;
    private uint maxAchievementsPerRecord_;
    public bool HasMaxAchievementsPerRecord {
      get { return hasMaxAchievementsPerRecord; }
    }
    public uint MaxAchievementsPerRecord {
      get { return maxAchievementsPerRecord_; }
    }
    
    public const int MaxRegistrationsFieldNumber = 5;
    private bool hasMaxRegistrations;
    private uint maxRegistrations_;
    public bool HasMaxRegistrations {
      get { return hasMaxRegistrations; }
    }
    public uint MaxRegistrations {
      get { return maxRegistrations_; }
    }
    
    public const int FlushFrequencyFieldNumber = 6;
    private bool hasFlushFrequency;
    private ulong flushFrequency_;
    public bool HasFlushFrequency {
      get { return hasFlushFrequency; }
    }
    public ulong FlushFrequency {
      get { return flushFrequency_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasContentHandle) return false;
        if (!ContentHandle.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _initializeResponseFieldNames;
      if (hasContentHandle) {
        output.WriteMessage(1, field_names[0], ContentHandle);
      }
      if (hasMaxRecordsPerUpdate) {
        output.WriteUInt32(2, field_names[4], MaxRecordsPerUpdate);
      }
      if (hasMaxCriteriaPerRecord) {
        output.WriteUInt32(3, field_names[3], MaxCriteriaPerRecord);
      }
      if (hasMaxAchievementsPerRecord) {
        output.WriteUInt32(4, field_names[2], MaxAchievementsPerRecord);
      }
      if (hasMaxRegistrations) {
        output.WriteUInt32(5, field_names[5], MaxRegistrations);
      }
      if (hasFlushFrequency) {
        output.WriteUInt64(6, field_names[1], FlushFrequency);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContentHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ContentHandle);
        }
        if (hasMaxRecordsPerUpdate) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MaxRecordsPerUpdate);
        }
        if (hasMaxCriteriaPerRecord) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, MaxCriteriaPerRecord);
        }
        if (hasMaxAchievementsPerRecord) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, MaxAchievementsPerRecord);
        }
        if (hasMaxRegistrations) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, MaxRegistrations);
        }
        if (hasFlushFrequency) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, FlushFrequency);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InitializeResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InitializeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InitializeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InitializeResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitializeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InitializeResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InitializeResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InitializeResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InitializeResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InitializeResponse result;
      
      private InitializeResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          InitializeResponse original = result;
          result = new InitializeResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InitializeResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.InitializeResponse.Descriptor; }
      }
      
      public override InitializeResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.InitializeResponse.DefaultInstance; }
      }
      
      public override InitializeResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InitializeResponse) {
          return MergeFrom((InitializeResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InitializeResponse other) {
        if (other == global::bnet.protocol.achievements.InitializeResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContentHandle) {
          MergeContentHandle(other.ContentHandle);
        }
        if (other.HasMaxRecordsPerUpdate) {
          MaxRecordsPerUpdate = other.MaxRecordsPerUpdate;
        }
        if (other.HasMaxCriteriaPerRecord) {
          MaxCriteriaPerRecord = other.MaxCriteriaPerRecord;
        }
        if (other.HasMaxAchievementsPerRecord) {
          MaxAchievementsPerRecord = other.MaxAchievementsPerRecord;
        }
        if (other.HasMaxRegistrations) {
          MaxRegistrations = other.MaxRegistrations;
        }
        if (other.HasFlushFrequency) {
          FlushFrequency = other.FlushFrequency;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_initializeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _initializeResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.ContentHandle.Builder subBuilder = global::bnet.protocol.ContentHandle.CreateBuilder();
              if (result.hasContentHandle) {
                subBuilder.MergeFrom(ContentHandle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ContentHandle = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasMaxRecordsPerUpdate = input.ReadUInt32(ref result.maxRecordsPerUpdate_);
              break;
            }
            case 24: {
              result.hasMaxCriteriaPerRecord = input.ReadUInt32(ref result.maxCriteriaPerRecord_);
              break;
            }
            case 32: {
              result.hasMaxAchievementsPerRecord = input.ReadUInt32(ref result.maxAchievementsPerRecord_);
              break;
            }
            case 40: {
              result.hasMaxRegistrations = input.ReadUInt32(ref result.maxRegistrations_);
              break;
            }
            case 48: {
              result.hasFlushFrequency = input.ReadUInt64(ref result.flushFrequency_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContentHandle {
       get { return result.hasContentHandle; }
      }
      public global::bnet.protocol.ContentHandle ContentHandle {
        get { return result.ContentHandle; }
        set { SetContentHandle(value); }
      }
      public Builder SetContentHandle(global::bnet.protocol.ContentHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContentHandle = true;
        result.contentHandle_ = value;
        return this;
      }
      public Builder SetContentHandle(global::bnet.protocol.ContentHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContentHandle = true;
        result.contentHandle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContentHandle(global::bnet.protocol.ContentHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContentHandle &&
            result.contentHandle_ != global::bnet.protocol.ContentHandle.DefaultInstance) {
            result.contentHandle_ = global::bnet.protocol.ContentHandle.CreateBuilder(result.contentHandle_).MergeFrom(value).BuildPartial();
        } else {
          result.contentHandle_ = value;
        }
        result.hasContentHandle = true;
        return this;
      }
      public Builder ClearContentHandle() {
        PrepareBuilder();
        result.hasContentHandle = false;
        result.contentHandle_ = null;
        return this;
      }
      
      public bool HasMaxRecordsPerUpdate {
        get { return result.hasMaxRecordsPerUpdate; }
      }
      public uint MaxRecordsPerUpdate {
        get { return result.MaxRecordsPerUpdate; }
        set { SetMaxRecordsPerUpdate(value); }
      }
      public Builder SetMaxRecordsPerUpdate(uint value) {
        PrepareBuilder();
        result.hasMaxRecordsPerUpdate = true;
        result.maxRecordsPerUpdate_ = value;
        return this;
      }
      public Builder ClearMaxRecordsPerUpdate() {
        PrepareBuilder();
        result.hasMaxRecordsPerUpdate = false;
        result.maxRecordsPerUpdate_ = 0;
        return this;
      }
      
      public bool HasMaxCriteriaPerRecord {
        get { return result.hasMaxCriteriaPerRecord; }
      }
      public uint MaxCriteriaPerRecord {
        get { return result.MaxCriteriaPerRecord; }
        set { SetMaxCriteriaPerRecord(value); }
      }
      public Builder SetMaxCriteriaPerRecord(uint value) {
        PrepareBuilder();
        result.hasMaxCriteriaPerRecord = true;
        result.maxCriteriaPerRecord_ = value;
        return this;
      }
      public Builder ClearMaxCriteriaPerRecord() {
        PrepareBuilder();
        result.hasMaxCriteriaPerRecord = false;
        result.maxCriteriaPerRecord_ = 0;
        return this;
      }
      
      public bool HasMaxAchievementsPerRecord {
        get { return result.hasMaxAchievementsPerRecord; }
      }
      public uint MaxAchievementsPerRecord {
        get { return result.MaxAchievementsPerRecord; }
        set { SetMaxAchievementsPerRecord(value); }
      }
      public Builder SetMaxAchievementsPerRecord(uint value) {
        PrepareBuilder();
        result.hasMaxAchievementsPerRecord = true;
        result.maxAchievementsPerRecord_ = value;
        return this;
      }
      public Builder ClearMaxAchievementsPerRecord() {
        PrepareBuilder();
        result.hasMaxAchievementsPerRecord = false;
        result.maxAchievementsPerRecord_ = 0;
        return this;
      }
      
      public bool HasMaxRegistrations {
        get { return result.hasMaxRegistrations; }
      }
      public uint MaxRegistrations {
        get { return result.MaxRegistrations; }
        set { SetMaxRegistrations(value); }
      }
      public Builder SetMaxRegistrations(uint value) {
        PrepareBuilder();
        result.hasMaxRegistrations = true;
        result.maxRegistrations_ = value;
        return this;
      }
      public Builder ClearMaxRegistrations() {
        PrepareBuilder();
        result.hasMaxRegistrations = false;
        result.maxRegistrations_ = 0;
        return this;
      }
      
      public bool HasFlushFrequency {
        get { return result.hasFlushFrequency; }
      }
      public ulong FlushFrequency {
        get { return result.FlushFrequency; }
        set { SetFlushFrequency(value); }
      }
      public Builder SetFlushFrequency(ulong value) {
        PrepareBuilder();
        result.hasFlushFrequency = true;
        result.flushFrequency_ = value;
        return this;
      }
      public Builder ClearFlushFrequency() {
        PrepareBuilder();
        result.hasFlushFrequency = false;
        result.flushFrequency_ = 0UL;
        return this;
      }
    }
    static InitializeResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StaticDataHash : pb::GeneratedMessage<StaticDataHash, StaticDataHash.Builder> {
    private StaticDataHash() { }
    private static readonly StaticDataHash defaultInstance = new StaticDataHash().MakeReadOnly();
    private static readonly string[] _staticDataHashFieldNames = new string[] { "hash", "program_id" };
    private static readonly uint[] _staticDataHashFieldTags = new uint[] { 18, 13 };
    public static StaticDataHash DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StaticDataHash DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StaticDataHash ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_StaticDataHash__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StaticDataHash, StaticDataHash.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_StaticDataHash__FieldAccessorTable; }
    }
    
    public const int ProgramIdFieldNumber = 1;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public const int HashFieldNumber = 2;
    private bool hasHash;
    private string hash_ = "";
    public bool HasHash {
      get { return hasHash; }
    }
    public string Hash {
      get { return hash_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProgramId) return false;
        if (!hasHash) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _staticDataHashFieldNames;
      if (hasProgramId) {
        output.WriteFixed32(1, field_names[1], ProgramId);
      }
      if (hasHash) {
        output.WriteString(2, field_names[0], Hash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, ProgramId);
        }
        if (hasHash) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Hash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StaticDataHash ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StaticDataHash ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StaticDataHash ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StaticDataHash ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StaticDataHash ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StaticDataHash ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StaticDataHash ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StaticDataHash ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StaticDataHash ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StaticDataHash ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StaticDataHash MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StaticDataHash prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StaticDataHash, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StaticDataHash cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StaticDataHash result;
      
      private StaticDataHash PrepareBuilder() {
        if (resultIsReadOnly) {
          StaticDataHash original = result;
          result = new StaticDataHash();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StaticDataHash MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.StaticDataHash.Descriptor; }
      }
      
      public override StaticDataHash DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.StaticDataHash.DefaultInstance; }
      }
      
      public override StaticDataHash BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StaticDataHash) {
          return MergeFrom((StaticDataHash) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StaticDataHash other) {
        if (other == global::bnet.protocol.achievements.StaticDataHash.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        if (other.HasHash) {
          Hash = other.Hash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_staticDataHashFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _staticDataHashFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
            case 18: {
              result.hasHash = input.ReadString(ref result.hash_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
      
      public bool HasHash {
        get { return result.hasHash; }
      }
      public string Hash {
        get { return result.Hash; }
        set { SetHash(value); }
      }
      public Builder SetHash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHash = true;
        result.hash_ = value;
        return this;
      }
      public Builder ClearHash() {
        PrepareBuilder();
        result.hasHash = false;
        result.hash_ = "";
        return this;
      }
    }
    static StaticDataHash() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ValidateStaticDataRequest : pb::GeneratedMessage<ValidateStaticDataRequest, ValidateStaticDataRequest.Builder> {
    private ValidateStaticDataRequest() { }
    private static readonly ValidateStaticDataRequest defaultInstance = new ValidateStaticDataRequest().MakeReadOnly();
    private static readonly string[] _validateStaticDataRequestFieldNames = new string[] { "static_data_hash" };
    private static readonly uint[] _validateStaticDataRequestFieldTags = new uint[] { 10 };
    public static ValidateStaticDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ValidateStaticDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ValidateStaticDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_ValidateStaticDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ValidateStaticDataRequest, ValidateStaticDataRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_ValidateStaticDataRequest__FieldAccessorTable; }
    }
    
    public const int StaticDataHashFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.achievements.StaticDataHash> staticDataHash_ = new pbc::PopsicleList<global::bnet.protocol.achievements.StaticDataHash>();
    public scg::IList<global::bnet.protocol.achievements.StaticDataHash> StaticDataHashList {
      get { return staticDataHash_; }
    }
    public int StaticDataHashCount {
      get { return staticDataHash_.Count; }
    }
    public global::bnet.protocol.achievements.StaticDataHash GetStaticDataHash(int index) {
      return staticDataHash_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.achievements.StaticDataHash element in StaticDataHashList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _validateStaticDataRequestFieldNames;
      if (staticDataHash_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], staticDataHash_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.achievements.StaticDataHash element in StaticDataHashList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ValidateStaticDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ValidateStaticDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ValidateStaticDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ValidateStaticDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ValidateStaticDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ValidateStaticDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ValidateStaticDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ValidateStaticDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ValidateStaticDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ValidateStaticDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ValidateStaticDataRequest MakeReadOnly() {
      staticDataHash_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ValidateStaticDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ValidateStaticDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ValidateStaticDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ValidateStaticDataRequest result;
      
      private ValidateStaticDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ValidateStaticDataRequest original = result;
          result = new ValidateStaticDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ValidateStaticDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.ValidateStaticDataRequest.Descriptor; }
      }
      
      public override ValidateStaticDataRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.ValidateStaticDataRequest.DefaultInstance; }
      }
      
      public override ValidateStaticDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ValidateStaticDataRequest) {
          return MergeFrom((ValidateStaticDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ValidateStaticDataRequest other) {
        if (other == global::bnet.protocol.achievements.ValidateStaticDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.staticDataHash_.Count != 0) {
          result.staticDataHash_.Add(other.staticDataHash_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_validateStaticDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _validateStaticDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.staticDataHash_, global::bnet.protocol.achievements.StaticDataHash.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.StaticDataHash> StaticDataHashList {
        get { return PrepareBuilder().staticDataHash_; }
      }
      public int StaticDataHashCount {
        get { return result.StaticDataHashCount; }
      }
      public global::bnet.protocol.achievements.StaticDataHash GetStaticDataHash(int index) {
        return result.GetStaticDataHash(index);
      }
      public Builder SetStaticDataHash(int index, global::bnet.protocol.achievements.StaticDataHash value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.staticDataHash_[index] = value;
        return this;
      }
      public Builder SetStaticDataHash(int index, global::bnet.protocol.achievements.StaticDataHash.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.staticDataHash_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStaticDataHash(global::bnet.protocol.achievements.StaticDataHash value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.staticDataHash_.Add(value);
        return this;
      }
      public Builder AddStaticDataHash(global::bnet.protocol.achievements.StaticDataHash.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.staticDataHash_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStaticDataHash(scg::IEnumerable<global::bnet.protocol.achievements.StaticDataHash> values) {
        PrepareBuilder();
        result.staticDataHash_.Add(values);
        return this;
      }
      public Builder ClearStaticDataHash() {
        PrepareBuilder();
        result.staticDataHash_.Clear();
        return this;
      }
    }
    static ValidateStaticDataRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SnapshotUpdateNotification : pb::GeneratedMessage<SnapshotUpdateNotification, SnapshotUpdateNotification.Builder> {
    private SnapshotUpdateNotification() { }
    private static readonly SnapshotUpdateNotification defaultInstance = new SnapshotUpdateNotification().MakeReadOnly();
    private static readonly string[] _snapshotUpdateNotificationFieldNames = new string[] { "snapshot", "target_id" };
    private static readonly uint[] _snapshotUpdateNotificationFieldTags = new uint[] { 18, 10 };
    public static SnapshotUpdateNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SnapshotUpdateNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SnapshotUpdateNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SnapshotUpdateNotification, SnapshotUpdateNotification.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_SnapshotUpdateNotification__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private global::bnet.protocol.EntityId targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public global::bnet.protocol.EntityId TargetId {
      get { return targetId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int SnapshotFieldNumber = 2;
    private bool hasSnapshot;
    private global::bnet.protocol.achievements.Snapshot snapshot_;
    public bool HasSnapshot {
      get { return hasSnapshot; }
    }
    public global::bnet.protocol.achievements.Snapshot Snapshot {
      get { return snapshot_ ?? global::bnet.protocol.achievements.Snapshot.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTargetId) return false;
        if (!hasSnapshot) return false;
        if (!TargetId.IsInitialized) return false;
        if (!Snapshot.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _snapshotUpdateNotificationFieldNames;
      if (hasTargetId) {
        output.WriteMessage(1, field_names[1], TargetId);
      }
      if (hasSnapshot) {
        output.WriteMessage(2, field_names[0], Snapshot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TargetId);
        }
        if (hasSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Snapshot);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SnapshotUpdateNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotUpdateNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotUpdateNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotUpdateNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotUpdateNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotUpdateNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SnapshotUpdateNotification result;
      
      private SnapshotUpdateNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotUpdateNotification original = result;
          result = new SnapshotUpdateNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SnapshotUpdateNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.SnapshotUpdateNotification.Descriptor; }
      }
      
      public override SnapshotUpdateNotification DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.SnapshotUpdateNotification.DefaultInstance; }
      }
      
      public override SnapshotUpdateNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotUpdateNotification) {
          return MergeFrom((SnapshotUpdateNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SnapshotUpdateNotification other) {
        if (other == global::bnet.protocol.achievements.SnapshotUpdateNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          MergeTargetId(other.TargetId);
        }
        if (other.HasSnapshot) {
          MergeSnapshot(other.Snapshot);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotUpdateNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotUpdateNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasTargetId) {
                subBuilder.MergeFrom(TargetId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.achievements.Snapshot.Builder subBuilder = global::bnet.protocol.achievements.Snapshot.CreateBuilder();
              if (result.hasSnapshot) {
                subBuilder.MergeFrom(Snapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Snapshot = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
       get { return result.hasTargetId; }
      }
      public global::bnet.protocol.EntityId TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder SetTargetId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetId &&
            result.targetId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.targetId_ = global::bnet.protocol.EntityId.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
        } else {
          result.targetId_ = value;
        }
        result.hasTargetId = true;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = null;
        return this;
      }
      
      public bool HasSnapshot {
       get { return result.hasSnapshot; }
      }
      public global::bnet.protocol.achievements.Snapshot Snapshot {
        get { return result.Snapshot; }
        set { SetSnapshot(value); }
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = value;
        return this;
      }
      public Builder SetSnapshot(global::bnet.protocol.achievements.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnapshot(global::bnet.protocol.achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnapshot &&
            result.snapshot_ != global::bnet.protocol.achievements.Snapshot.DefaultInstance) {
            result.snapshot_ = global::bnet.protocol.achievements.Snapshot.CreateBuilder(result.snapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.snapshot_ = value;
        }
        result.hasSnapshot = true;
        return this;
      }
      public Builder ClearSnapshot() {
        PrepareBuilder();
        result.hasSnapshot = false;
        result.snapshot_ = null;
        return this;
      }
    }
    static SnapshotUpdateNotification() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FlushFrequencyUpdateNotification : pb::GeneratedMessage<FlushFrequencyUpdateNotification, FlushFrequencyUpdateNotification.Builder> {
    private FlushFrequencyUpdateNotification() { }
    private static readonly FlushFrequencyUpdateNotification defaultInstance = new FlushFrequencyUpdateNotification().MakeReadOnly();
    private static readonly string[] _flushFrequencyUpdateNotificationFieldNames = new string[] { "flush_frequency" };
    private static readonly uint[] _flushFrequencyUpdateNotificationFieldTags = new uint[] { 8 };
    public static FlushFrequencyUpdateNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FlushFrequencyUpdateNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FlushFrequencyUpdateNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_FlushFrequencyUpdateNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FlushFrequencyUpdateNotification, FlushFrequencyUpdateNotification.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_FlushFrequencyUpdateNotification__FieldAccessorTable; }
    }
    
    public const int FlushFrequencyFieldNumber = 1;
    private bool hasFlushFrequency;
    private ulong flushFrequency_;
    public bool HasFlushFrequency {
      get { return hasFlushFrequency; }
    }
    public ulong FlushFrequency {
      get { return flushFrequency_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFlushFrequency) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _flushFrequencyUpdateNotificationFieldNames;
      if (hasFlushFrequency) {
        output.WriteUInt64(1, field_names[0], FlushFrequency);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFlushFrequency) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, FlushFrequency);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FlushFrequencyUpdateNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FlushFrequencyUpdateNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FlushFrequencyUpdateNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FlushFrequencyUpdateNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FlushFrequencyUpdateNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FlushFrequencyUpdateNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FlushFrequencyUpdateNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FlushFrequencyUpdateNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FlushFrequencyUpdateNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FlushFrequencyUpdateNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FlushFrequencyUpdateNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FlushFrequencyUpdateNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FlushFrequencyUpdateNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FlushFrequencyUpdateNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FlushFrequencyUpdateNotification result;
      
      private FlushFrequencyUpdateNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          FlushFrequencyUpdateNotification original = result;
          result = new FlushFrequencyUpdateNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FlushFrequencyUpdateNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.FlushFrequencyUpdateNotification.Descriptor; }
      }
      
      public override FlushFrequencyUpdateNotification DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.FlushFrequencyUpdateNotification.DefaultInstance; }
      }
      
      public override FlushFrequencyUpdateNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FlushFrequencyUpdateNotification) {
          return MergeFrom((FlushFrequencyUpdateNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FlushFrequencyUpdateNotification other) {
        if (other == global::bnet.protocol.achievements.FlushFrequencyUpdateNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFlushFrequency) {
          FlushFrequency = other.FlushFrequency;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_flushFrequencyUpdateNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _flushFrequencyUpdateNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFlushFrequency = input.ReadUInt64(ref result.flushFrequency_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFlushFrequency {
        get { return result.hasFlushFrequency; }
      }
      public ulong FlushFrequency {
        get { return result.FlushFrequency; }
        set { SetFlushFrequency(value); }
      }
      public Builder SetFlushFrequency(ulong value) {
        PrepareBuilder();
        result.hasFlushFrequency = true;
        result.flushFrequency_ = value;
        return this;
      }
      public Builder ClearFlushFrequency() {
        PrepareBuilder();
        result.hasFlushFrequency = false;
        result.flushFrequency_ = 0UL;
        return this;
      }
    }
    static FlushFrequencyUpdateNotification() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementStats : pb::GeneratedMessage<AchievementStats, AchievementStats.Builder> {
    private AchievementStats() { }
    private static readonly AchievementStats defaultInstance = new AchievementStats().MakeReadOnly();
    private static readonly string[] _achievementStatsFieldNames = new string[] { "count", "id" };
    private static readonly uint[] _achievementStatsFieldTags = new uint[] { 16, 8 };
    public static AchievementStats DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementStats DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementStats ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_AchievementStats__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementStats, AchievementStats.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_AchievementStats__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private ulong count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public ulong Count {
      get { return count_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasCount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementStatsFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[1], Id);
      }
      if (hasCount) {
        output.WriteUInt64(2, field_names[0], Count);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Count);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementStats ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementStats ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementStats ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementStats ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementStats ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementStats ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementStats ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementStats ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementStats ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementStats ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementStats MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementStats prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementStats, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementStats cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementStats result;
      
      private AchievementStats PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementStats original = result;
          result = new AchievementStats();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementStats MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.AchievementStats.Descriptor; }
      }
      
      public override AchievementStats DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.AchievementStats.DefaultInstance; }
      }
      
      public override AchievementStats BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementStats) {
          return MergeFrom((AchievementStats) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementStats other) {
        if (other == global::bnet.protocol.achievements.AchievementStats.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementStatsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementStatsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 16: {
              result.hasCount = input.ReadUInt64(ref result.count_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public ulong Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(ulong value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0UL;
        return this;
      }
    }
    static AchievementStats() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetAchievementStatsRequest : pb::GeneratedMessage<GetAchievementStatsRequest, GetAchievementStatsRequest.Builder> {
    private GetAchievementStatsRequest() { }
    private static readonly GetAchievementStatsRequest defaultInstance = new GetAchievementStatsRequest().MakeReadOnly();
    private static readonly string[] _getAchievementStatsRequestFieldNames = new string[] { "program_id" };
    private static readonly uint[] _getAchievementStatsRequestFieldTags = new uint[] { 13 };
    public static GetAchievementStatsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAchievementStatsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAchievementStatsRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GetAchievementStatsRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAchievementStatsRequest, GetAchievementStatsRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GetAchievementStatsRequest__FieldAccessorTable; }
    }
    
    public const int ProgramIdFieldNumber = 1;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProgramId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getAchievementStatsRequestFieldNames;
      if (hasProgramId) {
        output.WriteFixed32(1, field_names[0], ProgramId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, ProgramId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetAchievementStatsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAchievementStatsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAchievementStatsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAchievementStatsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAchievementStatsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAchievementStatsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAchievementStatsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAchievementStatsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAchievementStatsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAchievementStatsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAchievementStatsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAchievementStatsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAchievementStatsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAchievementStatsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAchievementStatsRequest result;
      
      private GetAchievementStatsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAchievementStatsRequest original = result;
          result = new GetAchievementStatsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAchievementStatsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.GetAchievementStatsRequest.Descriptor; }
      }
      
      public override GetAchievementStatsRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.GetAchievementStatsRequest.DefaultInstance; }
      }
      
      public override GetAchievementStatsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAchievementStatsRequest) {
          return MergeFrom((GetAchievementStatsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAchievementStatsRequest other) {
        if (other == global::bnet.protocol.achievements.GetAchievementStatsRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAchievementStatsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAchievementStatsRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
    }
    static GetAchievementStatsRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetAchievementStatsResponse : pb::GeneratedMessage<GetAchievementStatsResponse, GetAchievementStatsResponse.Builder> {
    private GetAchievementStatsResponse() { }
    private static readonly GetAchievementStatsResponse defaultInstance = new GetAchievementStatsResponse().MakeReadOnly();
    private static readonly string[] _getAchievementStatsResponseFieldNames = new string[] { "stats" };
    private static readonly uint[] _getAchievementStatsResponseFieldTags = new uint[] { 10 };
    public static GetAchievementStatsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAchievementStatsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAchievementStatsResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GetAchievementStatsResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAchievementStatsResponse, GetAchievementStatsResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GetAchievementStatsResponse__FieldAccessorTable; }
    }
    
    public const int StatsFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.achievements.AchievementStats> stats_ = new pbc::PopsicleList<global::bnet.protocol.achievements.AchievementStats>();
    public scg::IList<global::bnet.protocol.achievements.AchievementStats> StatsList {
      get { return stats_; }
    }
    public int StatsCount {
      get { return stats_.Count; }
    }
    public global::bnet.protocol.achievements.AchievementStats GetStats(int index) {
      return stats_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.achievements.AchievementStats element in StatsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getAchievementStatsResponseFieldNames;
      if (stats_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], stats_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.achievements.AchievementStats element in StatsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetAchievementStatsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAchievementStatsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAchievementStatsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAchievementStatsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAchievementStatsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAchievementStatsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAchievementStatsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAchievementStatsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAchievementStatsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAchievementStatsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAchievementStatsResponse MakeReadOnly() {
      stats_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAchievementStatsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAchievementStatsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAchievementStatsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAchievementStatsResponse result;
      
      private GetAchievementStatsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAchievementStatsResponse original = result;
          result = new GetAchievementStatsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAchievementStatsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.GetAchievementStatsResponse.Descriptor; }
      }
      
      public override GetAchievementStatsResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.GetAchievementStatsResponse.DefaultInstance; }
      }
      
      public override GetAchievementStatsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAchievementStatsResponse) {
          return MergeFrom((GetAchievementStatsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAchievementStatsResponse other) {
        if (other == global::bnet.protocol.achievements.GetAchievementStatsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.stats_.Count != 0) {
          result.stats_.Add(other.stats_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAchievementStatsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAchievementStatsResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.stats_, global::bnet.protocol.achievements.AchievementStats.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.AchievementStats> StatsList {
        get { return PrepareBuilder().stats_; }
      }
      public int StatsCount {
        get { return result.StatsCount; }
      }
      public global::bnet.protocol.achievements.AchievementStats GetStats(int index) {
        return result.GetStats(index);
      }
      public Builder SetStats(int index, global::bnet.protocol.achievements.AchievementStats value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stats_[index] = value;
        return this;
      }
      public Builder SetStats(int index, global::bnet.protocol.achievements.AchievementStats.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stats_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStats(global::bnet.protocol.achievements.AchievementStats value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stats_.Add(value);
        return this;
      }
      public Builder AddStats(global::bnet.protocol.achievements.AchievementStats.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stats_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStats(scg::IEnumerable<global::bnet.protocol.achievements.AchievementStats> values) {
        PrepareBuilder();
        result.stats_.Add(values);
        return this;
      }
      public Builder ClearStats() {
        PrepareBuilder();
        result.stats_.Clear();
        return this;
      }
    }
    static GetAchievementStatsResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetCriteriaStatsRequest : pb::GeneratedMessage<GetCriteriaStatsRequest, GetCriteriaStatsRequest.Builder> {
    private GetCriteriaStatsRequest() { }
    private static readonly GetCriteriaStatsRequest defaultInstance = new GetCriteriaStatsRequest().MakeReadOnly();
    private static readonly string[] _getCriteriaStatsRequestFieldNames = new string[] { "program_id" };
    private static readonly uint[] _getCriteriaStatsRequestFieldTags = new uint[] { 13 };
    public static GetCriteriaStatsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetCriteriaStatsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetCriteriaStatsRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GetCriteriaStatsRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetCriteriaStatsRequest, GetCriteriaStatsRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GetCriteriaStatsRequest__FieldAccessorTable; }
    }
    
    public const int ProgramIdFieldNumber = 1;
    private bool hasProgramId;
    private uint programId_;
    public bool HasProgramId {
      get { return hasProgramId; }
    }
    public uint ProgramId {
      get { return programId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProgramId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getCriteriaStatsRequestFieldNames;
      if (hasProgramId) {
        output.WriteFixed32(1, field_names[0], ProgramId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasProgramId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, ProgramId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetCriteriaStatsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetCriteriaStatsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetCriteriaStatsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetCriteriaStatsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetCriteriaStatsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetCriteriaStatsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetCriteriaStatsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetCriteriaStatsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetCriteriaStatsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetCriteriaStatsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetCriteriaStatsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetCriteriaStatsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetCriteriaStatsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetCriteriaStatsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetCriteriaStatsRequest result;
      
      private GetCriteriaStatsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetCriteriaStatsRequest original = result;
          result = new GetCriteriaStatsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetCriteriaStatsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.GetCriteriaStatsRequest.Descriptor; }
      }
      
      public override GetCriteriaStatsRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.GetCriteriaStatsRequest.DefaultInstance; }
      }
      
      public override GetCriteriaStatsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetCriteriaStatsRequest) {
          return MergeFrom((GetCriteriaStatsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetCriteriaStatsRequest other) {
        if (other == global::bnet.protocol.achievements.GetCriteriaStatsRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProgramId) {
          ProgramId = other.ProgramId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getCriteriaStatsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getCriteriaStatsRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasProgramId = input.ReadFixed32(ref result.programId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProgramId {
        get { return result.hasProgramId; }
      }
      public uint ProgramId {
        get { return result.ProgramId; }
        set { SetProgramId(value); }
      }
      public Builder SetProgramId(uint value) {
        PrepareBuilder();
        result.hasProgramId = true;
        result.programId_ = value;
        return this;
      }
      public Builder ClearProgramId() {
        PrepareBuilder();
        result.hasProgramId = false;
        result.programId_ = 0;
        return this;
      }
    }
    static GetCriteriaStatsRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetCriteriaStatsResponse : pb::GeneratedMessage<GetCriteriaStatsResponse, GetCriteriaStatsResponse.Builder> {
    private GetCriteriaStatsResponse() { }
    private static readonly GetCriteriaStatsResponse defaultInstance = new GetCriteriaStatsResponse().MakeReadOnly();
    private static readonly string[] _getCriteriaStatsResponseFieldNames = new string[] { "stats" };
    private static readonly uint[] _getCriteriaStatsResponseFieldTags = new uint[] { 10 };
    public static GetCriteriaStatsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetCriteriaStatsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetCriteriaStatsResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GetCriteriaStatsResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetCriteriaStatsResponse, GetCriteriaStatsResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GetCriteriaStatsResponse__FieldAccessorTable; }
    }
    
    public const int StatsFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.achievements.AchievementStats> stats_ = new pbc::PopsicleList<global::bnet.protocol.achievements.AchievementStats>();
    public scg::IList<global::bnet.protocol.achievements.AchievementStats> StatsList {
      get { return stats_; }
    }
    public int StatsCount {
      get { return stats_.Count; }
    }
    public global::bnet.protocol.achievements.AchievementStats GetStats(int index) {
      return stats_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.achievements.AchievementStats element in StatsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getCriteriaStatsResponseFieldNames;
      if (stats_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], stats_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.achievements.AchievementStats element in StatsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetCriteriaStatsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetCriteriaStatsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetCriteriaStatsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetCriteriaStatsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetCriteriaStatsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetCriteriaStatsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetCriteriaStatsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetCriteriaStatsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetCriteriaStatsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetCriteriaStatsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetCriteriaStatsResponse MakeReadOnly() {
      stats_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetCriteriaStatsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetCriteriaStatsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetCriteriaStatsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetCriteriaStatsResponse result;
      
      private GetCriteriaStatsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetCriteriaStatsResponse original = result;
          result = new GetCriteriaStatsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetCriteriaStatsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.GetCriteriaStatsResponse.Descriptor; }
      }
      
      public override GetCriteriaStatsResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.GetCriteriaStatsResponse.DefaultInstance; }
      }
      
      public override GetCriteriaStatsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetCriteriaStatsResponse) {
          return MergeFrom((GetCriteriaStatsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetCriteriaStatsResponse other) {
        if (other == global::bnet.protocol.achievements.GetCriteriaStatsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.stats_.Count != 0) {
          result.stats_.Add(other.stats_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getCriteriaStatsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getCriteriaStatsResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.stats_, global::bnet.protocol.achievements.AchievementStats.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.AchievementStats> StatsList {
        get { return PrepareBuilder().stats_; }
      }
      public int StatsCount {
        get { return result.StatsCount; }
      }
      public global::bnet.protocol.achievements.AchievementStats GetStats(int index) {
        return result.GetStats(index);
      }
      public Builder SetStats(int index, global::bnet.protocol.achievements.AchievementStats value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stats_[index] = value;
        return this;
      }
      public Builder SetStats(int index, global::bnet.protocol.achievements.AchievementStats.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stats_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStats(global::bnet.protocol.achievements.AchievementStats value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.stats_.Add(value);
        return this;
      }
      public Builder AddStats(global::bnet.protocol.achievements.AchievementStats.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.stats_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStats(scg::IEnumerable<global::bnet.protocol.achievements.AchievementStats> values) {
        PrepareBuilder();
        result.stats_.Add(values);
        return this;
      }
      public Builder ClearStats() {
        PrepareBuilder();
        result.stats_.Clear();
        return this;
      }
    }
    static GetCriteriaStatsResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RevokeAchievementRequest : pb::GeneratedMessage<RevokeAchievementRequest, RevokeAchievementRequest.Builder> {
    private RevokeAchievementRequest() { }
    private static readonly RevokeAchievementRequest defaultInstance = new RevokeAchievementRequest().MakeReadOnly();
    private static readonly string[] _revokeAchievementRequestFieldNames = new string[] { "entity_id", "id" };
    private static readonly uint[] _revokeAchievementRequestFieldTags = new uint[] { 10, 16 };
    public static RevokeAchievementRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RevokeAchievementRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RevokeAchievementRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RevokeAchievementRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RevokeAchievementRequest, RevokeAchievementRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RevokeAchievementRequest__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private global::bnet.protocol.EntityId entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public global::bnet.protocol.EntityId EntityId {
      get { return entityId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasId) return false;
        if (!EntityId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _revokeAchievementRequestFieldNames;
      if (hasEntityId) {
        output.WriteMessage(1, field_names[0], EntityId);
      }
      if (hasId) {
        output.WriteUInt64(2, field_names[1], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEntityId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EntityId);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RevokeAchievementRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RevokeAchievementRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RevokeAchievementRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RevokeAchievementRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RevokeAchievementRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RevokeAchievementRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RevokeAchievementRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RevokeAchievementRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RevokeAchievementRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RevokeAchievementRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RevokeAchievementRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RevokeAchievementRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RevokeAchievementRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RevokeAchievementRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RevokeAchievementRequest result;
      
      private RevokeAchievementRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RevokeAchievementRequest original = result;
          result = new RevokeAchievementRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RevokeAchievementRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.RevokeAchievementRequest.Descriptor; }
      }
      
      public override RevokeAchievementRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.RevokeAchievementRequest.DefaultInstance; }
      }
      
      public override RevokeAchievementRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RevokeAchievementRequest) {
          return MergeFrom((RevokeAchievementRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RevokeAchievementRequest other) {
        if (other == global::bnet.protocol.achievements.RevokeAchievementRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          MergeEntityId(other.EntityId);
        }
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_revokeAchievementRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _revokeAchievementRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasEntityId) {
                subBuilder.MergeFrom(EntityId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EntityId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
       get { return result.hasEntityId; }
      }
      public global::bnet.protocol.EntityId EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEntityId &&
            result.entityId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.entityId_ = global::bnet.protocol.EntityId.CreateBuilder(result.entityId_).MergeFrom(value).BuildPartial();
        } else {
          result.entityId_ = value;
        }
        result.hasEntityId = true;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = null;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
    }
    static RevokeAchievementRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RevokeAchievementResponse : pb::GeneratedMessage<RevokeAchievementResponse, RevokeAchievementResponse.Builder> {
    private RevokeAchievementResponse() { }
    private static readonly RevokeAchievementResponse defaultInstance = new RevokeAchievementResponse().MakeReadOnly();
    private static readonly string[] _revokeAchievementResponseFieldNames = new string[] { "revoked_count" };
    private static readonly uint[] _revokeAchievementResponseFieldTags = new uint[] { 8 };
    public static RevokeAchievementResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RevokeAchievementResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RevokeAchievementResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RevokeAchievementResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RevokeAchievementResponse, RevokeAchievementResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_RevokeAchievementResponse__FieldAccessorTable; }
    }
    
    public const int RevokedCountFieldNumber = 1;
    private bool hasRevokedCount;
    private uint revokedCount_;
    public bool HasRevokedCount {
      get { return hasRevokedCount; }
    }
    public uint RevokedCount {
      get { return revokedCount_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _revokeAchievementResponseFieldNames;
      if (hasRevokedCount) {
        output.WriteUInt32(1, field_names[0], RevokedCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRevokedCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, RevokedCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RevokeAchievementResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RevokeAchievementResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RevokeAchievementResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RevokeAchievementResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RevokeAchievementResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RevokeAchievementResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RevokeAchievementResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RevokeAchievementResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RevokeAchievementResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RevokeAchievementResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RevokeAchievementResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RevokeAchievementResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RevokeAchievementResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RevokeAchievementResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RevokeAchievementResponse result;
      
      private RevokeAchievementResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RevokeAchievementResponse original = result;
          result = new RevokeAchievementResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RevokeAchievementResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.RevokeAchievementResponse.Descriptor; }
      }
      
      public override RevokeAchievementResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.RevokeAchievementResponse.DefaultInstance; }
      }
      
      public override RevokeAchievementResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RevokeAchievementResponse) {
          return MergeFrom((RevokeAchievementResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RevokeAchievementResponse other) {
        if (other == global::bnet.protocol.achievements.RevokeAchievementResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRevokedCount) {
          RevokedCount = other.RevokedCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_revokeAchievementResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _revokeAchievementResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRevokedCount = input.ReadUInt32(ref result.revokedCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRevokedCount {
        get { return result.hasRevokedCount; }
      }
      public uint RevokedCount {
        get { return result.RevokedCount; }
        set { SetRevokedCount(value); }
      }
      public Builder SetRevokedCount(uint value) {
        PrepareBuilder();
        result.hasRevokedCount = true;
        result.revokedCount_ = value;
        return this;
      }
      public Builder ClearRevokedCount() {
        PrepareBuilder();
        result.hasRevokedCount = false;
        result.revokedCount_ = 0;
        return this;
      }
    }
    static RevokeAchievementResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class UpdateCriteriaRequest : pb::GeneratedMessage<UpdateCriteriaRequest, UpdateCriteriaRequest.Builder> {
    private UpdateCriteriaRequest() { }
    private static readonly UpdateCriteriaRequest defaultInstance = new UpdateCriteriaRequest().MakeReadOnly();
    private static readonly string[] _updateCriteriaRequestFieldNames = new string[] { "entity_id", "flags", "id", "quantity" };
    private static readonly uint[] _updateCriteriaRequestFieldTags = new uint[] { 10, 32, 16, 24 };
    public static UpdateCriteriaRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UpdateCriteriaRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UpdateCriteriaRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_UpdateCriteriaRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UpdateCriteriaRequest, UpdateCriteriaRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_UpdateCriteriaRequest__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private global::bnet.protocol.EntityId entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public global::bnet.protocol.EntityId EntityId {
      get { return entityId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public const int QuantityFieldNumber = 3;
    private bool hasQuantity;
    private ulong quantity_;
    public bool HasQuantity {
      get { return hasQuantity; }
    }
    public ulong Quantity {
      get { return quantity_; }
    }
    
    public const int FlagsFieldNumber = 4;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasId) return false;
        if (!hasQuantity) return false;
        if (!EntityId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _updateCriteriaRequestFieldNames;
      if (hasEntityId) {
        output.WriteMessage(1, field_names[0], EntityId);
      }
      if (hasId) {
        output.WriteUInt64(2, field_names[2], Id);
      }
      if (hasQuantity) {
        output.WriteUInt64(3, field_names[3], Quantity);
      }
      if (hasFlags) {
        output.WriteUInt32(4, field_names[1], Flags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEntityId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EntityId);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Id);
        }
        if (hasQuantity) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Quantity);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Flags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UpdateCriteriaRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UpdateCriteriaRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UpdateCriteriaRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UpdateCriteriaRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UpdateCriteriaRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UpdateCriteriaRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UpdateCriteriaRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UpdateCriteriaRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UpdateCriteriaRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UpdateCriteriaRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UpdateCriteriaRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UpdateCriteriaRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<UpdateCriteriaRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UpdateCriteriaRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UpdateCriteriaRequest result;
      
      private UpdateCriteriaRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          UpdateCriteriaRequest original = result;
          result = new UpdateCriteriaRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UpdateCriteriaRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.UpdateCriteriaRequest.Descriptor; }
      }
      
      public override UpdateCriteriaRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.UpdateCriteriaRequest.DefaultInstance; }
      }
      
      public override UpdateCriteriaRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UpdateCriteriaRequest) {
          return MergeFrom((UpdateCriteriaRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UpdateCriteriaRequest other) {
        if (other == global::bnet.protocol.achievements.UpdateCriteriaRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          MergeEntityId(other.EntityId);
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasQuantity) {
          Quantity = other.Quantity;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_updateCriteriaRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _updateCriteriaRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasEntityId) {
                subBuilder.MergeFrom(EntityId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EntityId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 24: {
              result.hasQuantity = input.ReadUInt64(ref result.quantity_);
              break;
            }
            case 32: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
       get { return result.hasEntityId; }
      }
      public global::bnet.protocol.EntityId EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEntityId &&
            result.entityId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.entityId_ = global::bnet.protocol.EntityId.CreateBuilder(result.entityId_).MergeFrom(value).BuildPartial();
        } else {
          result.entityId_ = value;
        }
        result.hasEntityId = true;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = null;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasQuantity {
        get { return result.hasQuantity; }
      }
      public ulong Quantity {
        get { return result.Quantity; }
        set { SetQuantity(value); }
      }
      public Builder SetQuantity(ulong value) {
        PrepareBuilder();
        result.hasQuantity = true;
        result.quantity_ = value;
        return this;
      }
      public Builder ClearQuantity() {
        PrepareBuilder();
        result.hasQuantity = false;
        result.quantity_ = 0UL;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
    }
    static UpdateCriteriaRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GrantAchievementRequest : pb::GeneratedMessage<GrantAchievementRequest, GrantAchievementRequest.Builder> {
    private GrantAchievementRequest() { }
    private static readonly GrantAchievementRequest defaultInstance = new GrantAchievementRequest().MakeReadOnly();
    private static readonly string[] _grantAchievementRequestFieldNames = new string[] { "entity_id", "id" };
    private static readonly uint[] _grantAchievementRequestFieldTags = new uint[] { 10, 16 };
    public static GrantAchievementRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GrantAchievementRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GrantAchievementRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GrantAchievementRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GrantAchievementRequest, GrantAchievementRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GrantAchievementRequest__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private global::bnet.protocol.EntityId entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public global::bnet.protocol.EntityId EntityId {
      get { return entityId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasId) return false;
        if (!EntityId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _grantAchievementRequestFieldNames;
      if (hasEntityId) {
        output.WriteMessage(1, field_names[0], EntityId);
      }
      if (hasId) {
        output.WriteUInt64(2, field_names[1], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEntityId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EntityId);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GrantAchievementRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GrantAchievementRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GrantAchievementRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GrantAchievementRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GrantAchievementRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GrantAchievementRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GrantAchievementRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GrantAchievementRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GrantAchievementRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GrantAchievementRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GrantAchievementRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GrantAchievementRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GrantAchievementRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GrantAchievementRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GrantAchievementRequest result;
      
      private GrantAchievementRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GrantAchievementRequest original = result;
          result = new GrantAchievementRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GrantAchievementRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.GrantAchievementRequest.Descriptor; }
      }
      
      public override GrantAchievementRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.GrantAchievementRequest.DefaultInstance; }
      }
      
      public override GrantAchievementRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GrantAchievementRequest) {
          return MergeFrom((GrantAchievementRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GrantAchievementRequest other) {
        if (other == global::bnet.protocol.achievements.GrantAchievementRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          MergeEntityId(other.EntityId);
        }
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_grantAchievementRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _grantAchievementRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasEntityId) {
                subBuilder.MergeFrom(EntityId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EntityId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
       get { return result.hasEntityId; }
      }
      public global::bnet.protocol.EntityId EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEntityId &&
            result.entityId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.entityId_ = global::bnet.protocol.EntityId.CreateBuilder(result.entityId_).MergeFrom(value).BuildPartial();
        } else {
          result.entityId_ = value;
        }
        result.hasEntityId = true;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = null;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
    }
    static GrantAchievementRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GrantAchievementResponse : pb::GeneratedMessage<GrantAchievementResponse, GrantAchievementResponse.Builder> {
    private GrantAchievementResponse() { }
    private static readonly GrantAchievementResponse defaultInstance = new GrantAchievementResponse().MakeReadOnly();
    private static readonly string[] _grantAchievementResponseFieldNames = new string[] { "granted_count" };
    private static readonly uint[] _grantAchievementResponseFieldTags = new uint[] { 8 };
    public static GrantAchievementResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GrantAchievementResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GrantAchievementResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GrantAchievementResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GrantAchievementResponse, GrantAchievementResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_GrantAchievementResponse__FieldAccessorTable; }
    }
    
    public const int GrantedCountFieldNumber = 1;
    private bool hasGrantedCount;
    private uint grantedCount_;
    public bool HasGrantedCount {
      get { return hasGrantedCount; }
    }
    public uint GrantedCount {
      get { return grantedCount_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _grantAchievementResponseFieldNames;
      if (hasGrantedCount) {
        output.WriteUInt32(1, field_names[0], GrantedCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGrantedCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, GrantedCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GrantAchievementResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GrantAchievementResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GrantAchievementResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GrantAchievementResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GrantAchievementResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GrantAchievementResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GrantAchievementResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GrantAchievementResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GrantAchievementResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GrantAchievementResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GrantAchievementResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GrantAchievementResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GrantAchievementResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GrantAchievementResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GrantAchievementResponse result;
      
      private GrantAchievementResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GrantAchievementResponse original = result;
          result = new GrantAchievementResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GrantAchievementResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.GrantAchievementResponse.Descriptor; }
      }
      
      public override GrantAchievementResponse DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.GrantAchievementResponse.DefaultInstance; }
      }
      
      public override GrantAchievementResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GrantAchievementResponse) {
          return MergeFrom((GrantAchievementResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GrantAchievementResponse other) {
        if (other == global::bnet.protocol.achievements.GrantAchievementResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGrantedCount) {
          GrantedCount = other.GrantedCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_grantAchievementResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _grantAchievementResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGrantedCount = input.ReadUInt32(ref result.grantedCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGrantedCount {
        get { return result.hasGrantedCount; }
      }
      public uint GrantedCount {
        get { return result.GrantedCount; }
        set { SetGrantedCount(value); }
      }
      public Builder SetGrantedCount(uint value) {
        PrepareBuilder();
        result.hasGrantedCount = true;
        result.grantedCount_ = value;
        return this;
      }
      public Builder ClearGrantedCount() {
        PrepareBuilder();
        result.hasGrantedCount = false;
        result.grantedCount_ = 0;
        return this;
      }
    }
    static GrantAchievementResponse() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CacheKillRequest : pb::GeneratedMessage<CacheKillRequest, CacheKillRequest.Builder> {
    private CacheKillRequest() { }
    private static readonly CacheKillRequest defaultInstance = new CacheKillRequest().MakeReadOnly();
    private static readonly string[] _cacheKillRequestFieldNames = new string[] { "entity_id" };
    private static readonly uint[] _cacheKillRequestFieldTags = new uint[] { 10 };
    public static CacheKillRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CacheKillRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CacheKillRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_CacheKillRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CacheKillRequest, CacheKillRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.Proto.AchievementsService.internal__static_bnet_protocol_achievements_CacheKillRequest__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private global::bnet.protocol.EntityId entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    public global::bnet.protocol.EntityId EntityId {
      get { return entityId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasEntityId) {
          if (!EntityId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cacheKillRequestFieldNames;
      if (hasEntityId) {
        output.WriteMessage(1, field_names[0], EntityId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEntityId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EntityId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CacheKillRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CacheKillRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CacheKillRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CacheKillRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CacheKillRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CacheKillRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CacheKillRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CacheKillRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CacheKillRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CacheKillRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CacheKillRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CacheKillRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CacheKillRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CacheKillRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CacheKillRequest result;
      
      private CacheKillRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CacheKillRequest original = result;
          result = new CacheKillRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CacheKillRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.CacheKillRequest.Descriptor; }
      }
      
      public override CacheKillRequest DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.CacheKillRequest.DefaultInstance; }
      }
      
      public override CacheKillRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CacheKillRequest) {
          return MergeFrom((CacheKillRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CacheKillRequest other) {
        if (other == global::bnet.protocol.achievements.CacheKillRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          MergeEntityId(other.EntityId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cacheKillRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cacheKillRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasEntityId) {
                subBuilder.MergeFrom(EntityId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EntityId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
       get { return result.hasEntityId; }
      }
      public global::bnet.protocol.EntityId EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder SetEntityId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEntityId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEntityId &&
            result.entityId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.entityId_ = global::bnet.protocol.EntityId.CreateBuilder(result.entityId_).MergeFrom(value).BuildPartial();
        } else {
          result.entityId_ = value;
        }
        result.hasEntityId = true;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = null;
        return this;
      }
    }
    static CacheKillRequest() {
      object.ReferenceEquals(global::bnet.protocol.achievements.Proto.AchievementsService.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class AchievementsService : pb::IService {
    public abstract void PostUpdate(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.PostUpdateRequest request,
        global::System.Action<global::bnet.protocol.achievements.PostUpdateResponse> done);
    public abstract void RegisterWithService(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.RegisterWithServiceRequest request,
        global::System.Action<global::bnet.protocol.achievements.RegisterWithServiceResponse> done);
    public abstract void RequestSnapshot(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.RequestSnapshotRequest request,
        global::System.Action<global::bnet.protocol.achievements.RequestSnapshotResponse> done);
    public abstract void UnregisterFromService(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.UnregisterFromServiceRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    public abstract void Initialize(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.InitializeRequest request,
        global::System.Action<global::bnet.protocol.achievements.InitializeResponse> done);
    public abstract void ValidateStaticData(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.ValidateStaticDataRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.AchievementsService.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.PostUpdate(controller, (global::bnet.protocol.achievements.PostUpdateRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.PostUpdateResponse>(
              done));
          return;
        case 1:
          this.RegisterWithService(controller, (global::bnet.protocol.achievements.RegisterWithServiceRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.RegisterWithServiceResponse>(
              done));
          return;
        case 2:
          this.RequestSnapshot(controller, (global::bnet.protocol.achievements.RequestSnapshotRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.RequestSnapshotResponse>(
              done));
          return;
        case 3:
          this.UnregisterFromService(controller, (global::bnet.protocol.achievements.UnregisterFromServiceRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        case 4:
          this.Initialize(controller, (global::bnet.protocol.achievements.InitializeRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.InitializeResponse>(
              done));
          return;
        case 5:
          this.ValidateStaticData(controller, (global::bnet.protocol.achievements.ValidateStaticDataRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.achievements.PostUpdateRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.achievements.RegisterWithServiceRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.achievements.RequestSnapshotRequest.DefaultInstance;
        case 3:
          return global::bnet.protocol.achievements.UnregisterFromServiceRequest.DefaultInstance;
        case 4:
          return global::bnet.protocol.achievements.InitializeRequest.DefaultInstance;
        case 5:
          return global::bnet.protocol.achievements.ValidateStaticDataRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.achievements.PostUpdateResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.achievements.RegisterWithServiceResponse.DefaultInstance;
        case 2:
          return global::bnet.protocol.achievements.RequestSnapshotResponse.DefaultInstance;
        case 3:
          return global::bnet.protocol.NoData.DefaultInstance;
        case 4:
          return global::bnet.protocol.achievements.InitializeResponse.DefaultInstance;
        case 5:
          return global::bnet.protocol.NoData.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.achievements.AchievementsService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void PostUpdate(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.PostUpdateRequest request,
          global::System.Action<global::bnet.protocol.achievements.PostUpdateResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.achievements.PostUpdateResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.PostUpdateResponse, global::bnet.protocol.achievements.PostUpdateResponse.Builder>(done, global::bnet.protocol.achievements.PostUpdateResponse.DefaultInstance));
      }
      
      public override void RegisterWithService(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.RegisterWithServiceRequest request,
          global::System.Action<global::bnet.protocol.achievements.RegisterWithServiceResponse> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.achievements.RegisterWithServiceResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.RegisterWithServiceResponse, global::bnet.protocol.achievements.RegisterWithServiceResponse.Builder>(done, global::bnet.protocol.achievements.RegisterWithServiceResponse.DefaultInstance));
      }
      
      public override void RequestSnapshot(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.RequestSnapshotRequest request,
          global::System.Action<global::bnet.protocol.achievements.RequestSnapshotResponse> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.achievements.RequestSnapshotResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.RequestSnapshotResponse, global::bnet.protocol.achievements.RequestSnapshotResponse.Builder>(done, global::bnet.protocol.achievements.RequestSnapshotResponse.DefaultInstance));
      }
      
      public override void UnregisterFromService(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.UnregisterFromServiceRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
      
      public override void Initialize(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.InitializeRequest request,
          global::System.Action<global::bnet.protocol.achievements.InitializeResponse> done) {
        channel.CallMethod(Descriptor.Methods[4],
            controller, request, global::bnet.protocol.achievements.InitializeResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.InitializeResponse, global::bnet.protocol.achievements.InitializeResponse.Builder>(done, global::bnet.protocol.achievements.InitializeResponse.DefaultInstance));
      }
      
      public override void ValidateStaticData(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.ValidateStaticDataRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[5],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
    }
  }
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class AchievementsNotify : pb::IService {
    public abstract void NotifySnapshotUpdate(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.SnapshotUpdateNotification request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    public abstract void NotifyFlushFrequencyUpdate(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.FlushFrequencyUpdateNotification request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.AchievementsService.Descriptor.Services[1]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.NotifySnapshotUpdate(controller, (global::bnet.protocol.achievements.SnapshotUpdateNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        case 1:
          this.NotifyFlushFrequencyUpdate(controller, (global::bnet.protocol.achievements.FlushFrequencyUpdateNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.achievements.SnapshotUpdateNotification.DefaultInstance;
        case 1:
          return global::bnet.protocol.achievements.FlushFrequencyUpdateNotification.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        case 1:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.achievements.AchievementsNotify {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void NotifySnapshotUpdate(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.SnapshotUpdateNotification request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void NotifyFlushFrequencyUpdate(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.FlushFrequencyUpdateNotification request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class AchievementsUtils : pb::IService {
    public abstract void GetAchievementStats(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.GetAchievementStatsRequest request,
        global::System.Action<global::bnet.protocol.achievements.GetAchievementStatsResponse> done);
    public abstract void GetCriteriaStats(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.GetCriteriaStatsRequest request,
        global::System.Action<global::bnet.protocol.achievements.GetCriteriaStatsResponse> done);
    public abstract void RevokeAchievement(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.RevokeAchievementRequest request,
        global::System.Action<global::bnet.protocol.achievements.RevokeAchievementResponse> done);
    public abstract void UpdateCriteria(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.UpdateCriteriaRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    public abstract void GrantAchievement(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.GrantAchievementRequest request,
        global::System.Action<global::bnet.protocol.achievements.GrantAchievementResponse> done);
    public abstract void CacheKill(
        pb::IRpcController controller,
        global::bnet.protocol.achievements.CacheKillRequest request,
        global::System.Action<global::bnet.protocol.NoData> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.AchievementsService.Descriptor.Services[2]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.GetAchievementStats(controller, (global::bnet.protocol.achievements.GetAchievementStatsRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.GetAchievementStatsResponse>(
              done));
          return;
        case 1:
          this.GetCriteriaStats(controller, (global::bnet.protocol.achievements.GetCriteriaStatsRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.GetCriteriaStatsResponse>(
              done));
          return;
        case 2:
          this.RevokeAchievement(controller, (global::bnet.protocol.achievements.RevokeAchievementRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.RevokeAchievementResponse>(
              done));
          return;
        case 3:
          this.UpdateCriteria(controller, (global::bnet.protocol.achievements.UpdateCriteriaRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        case 4:
          this.GrantAchievement(controller, (global::bnet.protocol.achievements.GrantAchievementRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.achievements.GrantAchievementResponse>(
              done));
          return;
        case 5:
          this.CacheKill(controller, (global::bnet.protocol.achievements.CacheKillRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NoData>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.achievements.GetAchievementStatsRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.achievements.GetCriteriaStatsRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.achievements.RevokeAchievementRequest.DefaultInstance;
        case 3:
          return global::bnet.protocol.achievements.UpdateCriteriaRequest.DefaultInstance;
        case 4:
          return global::bnet.protocol.achievements.GrantAchievementRequest.DefaultInstance;
        case 5:
          return global::bnet.protocol.achievements.CacheKillRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.achievements.GetAchievementStatsResponse.DefaultInstance;
        case 1:
          return global::bnet.protocol.achievements.GetCriteriaStatsResponse.DefaultInstance;
        case 2:
          return global::bnet.protocol.achievements.RevokeAchievementResponse.DefaultInstance;
        case 3:
          return global::bnet.protocol.NoData.DefaultInstance;
        case 4:
          return global::bnet.protocol.achievements.GrantAchievementResponse.DefaultInstance;
        case 5:
          return global::bnet.protocol.NoData.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.achievements.AchievementsUtils {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void GetAchievementStats(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.GetAchievementStatsRequest request,
          global::System.Action<global::bnet.protocol.achievements.GetAchievementStatsResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.achievements.GetAchievementStatsResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.GetAchievementStatsResponse, global::bnet.protocol.achievements.GetAchievementStatsResponse.Builder>(done, global::bnet.protocol.achievements.GetAchievementStatsResponse.DefaultInstance));
      }
      
      public override void GetCriteriaStats(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.GetCriteriaStatsRequest request,
          global::System.Action<global::bnet.protocol.achievements.GetCriteriaStatsResponse> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.achievements.GetCriteriaStatsResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.GetCriteriaStatsResponse, global::bnet.protocol.achievements.GetCriteriaStatsResponse.Builder>(done, global::bnet.protocol.achievements.GetCriteriaStatsResponse.DefaultInstance));
      }
      
      public override void RevokeAchievement(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.RevokeAchievementRequest request,
          global::System.Action<global::bnet.protocol.achievements.RevokeAchievementResponse> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.achievements.RevokeAchievementResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.RevokeAchievementResponse, global::bnet.protocol.achievements.RevokeAchievementResponse.Builder>(done, global::bnet.protocol.achievements.RevokeAchievementResponse.DefaultInstance));
      }
      
      public override void UpdateCriteria(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.UpdateCriteriaRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
      
      public override void GrantAchievement(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.GrantAchievementRequest request,
          global::System.Action<global::bnet.protocol.achievements.GrantAchievementResponse> done) {
        channel.CallMethod(Descriptor.Methods[4],
            controller, request, global::bnet.protocol.achievements.GrantAchievementResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.achievements.GrantAchievementResponse, global::bnet.protocol.achievements.GrantAchievementResponse.Builder>(done, global::bnet.protocol.achievements.GrantAchievementResponse.DefaultInstance));
      }
      
      public override void CacheKill(
          pb::IRpcController controller,
          global::bnet.protocol.achievements.CacheKillRequest request,
          global::System.Action<global::bnet.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[5],
            controller, request, global::bnet.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NoData, global::bnet.protocol.NoData.Builder>(done, global::bnet.protocol.NoData.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
