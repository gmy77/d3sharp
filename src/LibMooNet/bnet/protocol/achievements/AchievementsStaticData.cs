// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.achievements {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class AchievementsStaticData {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_Attribute__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.Attribute, global::bnet.protocol.achievements.Attribute.Builder> internal__static_bnet_protocol_achievements_Attribute__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_CriteriaModifier__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.CriteriaModifier, global::bnet.protocol.achievements.CriteriaModifier.Builder> internal__static_bnet_protocol_achievements_CriteriaModifier__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_CriteriaEvent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.CriteriaEvent, global::bnet.protocol.achievements.CriteriaEvent.Builder> internal__static_bnet_protocol_achievements_CriteriaEvent__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_StaticCategoryDefinition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.StaticCategoryDefinition, global::bnet.protocol.achievements.StaticCategoryDefinition.Builder> internal__static_bnet_protocol_achievements_StaticCategoryDefinition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_StaticAchievementDefinition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.StaticAchievementDefinition, global::bnet.protocol.achievements.StaticAchievementDefinition.Builder> internal__static_bnet_protocol_achievements_StaticAchievementDefinition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_StaticCriteriaDefinition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.StaticCriteriaDefinition, global::bnet.protocol.achievements.StaticCriteriaDefinition.Builder> internal__static_bnet_protocol_achievements_StaticCriteriaDefinition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bnet_protocol_achievements_AchievementFile__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.AchievementFile, global::bnet.protocol.achievements.AchievementFile.Builder> internal__static_bnet_protocol_achievements_AchievementFile__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static AchievementsStaticData() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CiNibmV0L2FjaGlldmVtZW50c19zdGF0aWNfZGF0YS5wcm90bxIaYm5ldC5w" + 
          "cm90b2NvbC5hY2hpZXZlbWVudHMiJwoJQXR0cmlidXRlEgsKA2tleRgBIAIo" + 
          "CRINCgV2YWx1ZRgCIAIoCSJjChBDcml0ZXJpYU1vZGlmaWVyEhsKE25lY2Vz" + 
          "c2FyeV9jb25kaXRpb24YASACKAQSDgoGdGFyZ2V0GAIgAigHEg8KB29wZXJh" + 
          "bmQYAyACKA0SEQoJY29tcGFyYW5kGAQgAigEIokBCg1Dcml0ZXJpYUV2ZW50" + 
          "EgoKAmlkGAEgAigEEhQKCWNvbXBhcmFuZBgCIAEoBDoBMBI+Cghtb2RpZmll" + 
          "chgDIAMoCzIsLmJuZXQucHJvdG9jb2wuYWNoaWV2ZW1lbnRzLkNyaXRlcmlh" + 
          "TW9kaWZpZXISFgoOdGltZXJfZHVyYXRpb24YBCABKA0isgEKGFN0YXRpY0Nh" + 
          "dGVnb3J5RGVmaW5pdGlvbhIKCgJpZBgBIAIoDRIRCglwYXJlbnRfaWQYAiAB" + 
          "KAQSKAogT0JTT0xFVEVfZmVhdHVyZWRfYWNoaWV2ZW1lbnRfaWQYAyABKAQS" + 
          "EgoKb3JkZXJfaGludBgEIAIoDRI5CgphdHRyaWJ1dGVzGAUgAygLMiUuYm5l" + 
          "dC5wcm90b2NvbC5hY2hpZXZlbWVudHMuQXR0cmlidXRlIp0CChtTdGF0aWNB" + 
          "Y2hpZXZlbWVudERlZmluaXRpb24SCgoCaWQYASACKAQSIgoac3VwZXJzZWRp" + 
          "bmdfYWNoaWV2ZW1lbnRfaWQYAiABKAQSEwoLY2F0ZWdvcnlfaWQYAyACKA0S" + 
          "GAoQbWluaW11bV9jcml0ZXJpYRgEIAEoDRIUCgxwb2ludHNfdmFsdWUYBSAC" + 
          "KA0SDQoFZmxhZ3MYBiACKA0SEgoKb3JkZXJfaGludBgHIAIoDRIrCiNjcml0" + 
          "ZXJpYV9zaGFyZWRfd2l0aF9hY2hpZXZlbWVudF9pZBgIIAEoBBI5CgphdHRy" + 
          "aWJ1dGVzGAkgAygLMiUuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVudHMuQXR0" + 
          "cmlidXRlIqQDChhTdGF0aWNDcml0ZXJpYURlZmluaXRpb24SEwoLY3JpdGVy" + 
          "aWFfaWQYASACKAQSHQoVcGFyZW50X2FjaGlldmVtZW50X2lkGAIgAigEEj4K" + 
          "C3N0YXJ0X2V2ZW50GAMgASgLMikuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVu" + 
          "dHMuQ3JpdGVyaWFFdmVudBJACg1hZHZhbmNlX2V2ZW50GAQgASgLMikuYm5l" + 
          "dC5wcm90b2NvbC5hY2hpZXZlbWVudHMuQ3JpdGVyaWFFdmVudBI9CgpmYWls" + 
          "X2V2ZW50GAUgASgLMikuYm5ldC5wcm90b2NvbC5hY2hpZXZlbWVudHMuQ3Jp" + 
          "dGVyaWFFdmVudBIaChJuZWNlc3NhcnlfcXVhbnRpdHkYBiACKAQSEgoKb3Jk" + 
          "ZXJfaGludBgHIAEoDRIZChFldmFsdXRhdGlvbl9jbGFzcxgIIAIoBxINCgVm" + 
          "bGFncxgJIAIoDRI5CgphdHRyaWJ1dGVzGAogAygLMiUuYm5ldC5wcm90b2Nv" + 
          "bC5hY2hpZXZlbWVudHMuQXR0cmlidXRlIqoCCg9BY2hpZXZlbWVudEZpbGUS" + 
          "RgoIY2F0ZWdvcnkYASADKAsyNC5ibmV0LnByb3RvY29sLmFjaGlldmVtZW50" + 
          "cy5TdGF0aWNDYXRlZ29yeURlZmluaXRpb24STAoLYWNoaWV2ZW1lbnQYAiAD" + 
          "KAsyNy5ibmV0LnByb3RvY29sLmFjaGlldmVtZW50cy5TdGF0aWNBY2hpZXZl" + 
          "bWVudERlZmluaXRpb24SRgoIY3JpdGVyaWEYAyADKAsyNC5ibmV0LnByb3Rv" + 
          "Y29sLmFjaGlldmVtZW50cy5TdGF0aWNDcml0ZXJpYURlZmluaXRpb24SOQoK" + 
          "YXR0cmlidXRlcxgEIAMoCzIlLmJuZXQucHJvdG9jb2wuYWNoaWV2ZW1lbnRz" + 
          "LkF0dHJpYnV0ZSozChFNb2RpZmVyVGFyZ2V0VHlwZRIPCgdTVUJKRUNUEOrE" + 
          "1ZsFEg0KBk9CSkVDVBDqxL0C");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bnet_protocol_achievements_Attribute__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bnet_protocol_achievements_Attribute__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.Attribute, global::bnet.protocol.achievements.Attribute.Builder>(internal__static_bnet_protocol_achievements_Attribute__Descriptor,
                new string[] { "Key", "Value", });
        internal__static_bnet_protocol_achievements_CriteriaModifier__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bnet_protocol_achievements_CriteriaModifier__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.CriteriaModifier, global::bnet.protocol.achievements.CriteriaModifier.Builder>(internal__static_bnet_protocol_achievements_CriteriaModifier__Descriptor,
                new string[] { "NecessaryCondition", "Target", "Operand", "Comparand", });
        internal__static_bnet_protocol_achievements_CriteriaEvent__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bnet_protocol_achievements_CriteriaEvent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.CriteriaEvent, global::bnet.protocol.achievements.CriteriaEvent.Builder>(internal__static_bnet_protocol_achievements_CriteriaEvent__Descriptor,
                new string[] { "Id", "Comparand", "Modifier", "TimerDuration", });
        internal__static_bnet_protocol_achievements_StaticCategoryDefinition__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bnet_protocol_achievements_StaticCategoryDefinition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.StaticCategoryDefinition, global::bnet.protocol.achievements.StaticCategoryDefinition.Builder>(internal__static_bnet_protocol_achievements_StaticCategoryDefinition__Descriptor,
                new string[] { "Id", "ParentId", "OBSOLETEFeaturedAchievementId", "OrderHint", "Attributes", });
        internal__static_bnet_protocol_achievements_StaticAchievementDefinition__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bnet_protocol_achievements_StaticAchievementDefinition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.StaticAchievementDefinition, global::bnet.protocol.achievements.StaticAchievementDefinition.Builder>(internal__static_bnet_protocol_achievements_StaticAchievementDefinition__Descriptor,
                new string[] { "Id", "SupersedingAchievementId", "CategoryId", "MinimumCriteria", "PointsValue", "Flags", "OrderHint", "CriteriaSharedWithAchievementId", "Attributes", });
        internal__static_bnet_protocol_achievements_StaticCriteriaDefinition__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bnet_protocol_achievements_StaticCriteriaDefinition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.StaticCriteriaDefinition, global::bnet.protocol.achievements.StaticCriteriaDefinition.Builder>(internal__static_bnet_protocol_achievements_StaticCriteriaDefinition__Descriptor,
                new string[] { "CriteriaId", "ParentAchievementId", "StartEvent", "AdvanceEvent", "FailEvent", "NecessaryQuantity", "OrderHint", "EvalutationClass", "Flags", "Attributes", });
        internal__static_bnet_protocol_achievements_AchievementFile__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bnet_protocol_achievements_AchievementFile__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.achievements.AchievementFile, global::bnet.protocol.achievements.AchievementFile.Builder>(internal__static_bnet_protocol_achievements_AchievementFile__Descriptor,
                new string[] { "Category", "Achievement", "Criteria", "Attributes", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public enum ModiferTargetType {
    SUBJECT = 1400201834,
    OBJECT = 5202538,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Attribute : pb::GeneratedMessage<Attribute, Attribute.Builder> {
    private Attribute() { }
    private static readonly Attribute defaultInstance = new Attribute().MakeReadOnly();
    private static readonly string[] _attributeFieldNames = new string[] { "key", "value" };
    private static readonly uint[] _attributeFieldTags = new uint[] { 10, 18 };
    public static Attribute DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Attribute DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Attribute ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_Attribute__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Attribute, Attribute.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_Attribute__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _attributeFieldNames;
      if (hasKey) {
        output.WriteString(1, field_names[0], Key);
      }
      if (hasValue) {
        output.WriteString(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Key);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Attribute ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Attribute ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Attribute ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Attribute ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Attribute ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Attribute ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Attribute ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Attribute ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Attribute ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Attribute ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Attribute MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Attribute prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Attribute, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Attribute cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Attribute result;
      
      private Attribute PrepareBuilder() {
        if (resultIsReadOnly) {
          Attribute original = result;
          result = new Attribute();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Attribute MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.Attribute.Descriptor; }
      }
      
      public override Attribute DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.Attribute.DefaultInstance; }
      }
      
      public override Attribute BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Attribute) {
          return MergeFrom((Attribute) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Attribute other) {
        if (other == global::bnet.protocol.achievements.Attribute.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_attributeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _attributeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static Attribute() {
      object.ReferenceEquals(global::bnet.protocol.achievements.AchievementsStaticData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CriteriaModifier : pb::GeneratedMessage<CriteriaModifier, CriteriaModifier.Builder> {
    private CriteriaModifier() { }
    private static readonly CriteriaModifier defaultInstance = new CriteriaModifier().MakeReadOnly();
    private static readonly string[] _criteriaModifierFieldNames = new string[] { "comparand", "necessary_condition", "operand", "target" };
    private static readonly uint[] _criteriaModifierFieldTags = new uint[] { 32, 8, 24, 21 };
    public static CriteriaModifier DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CriteriaModifier DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CriteriaModifier ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_CriteriaModifier__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CriteriaModifier, CriteriaModifier.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_CriteriaModifier__FieldAccessorTable; }
    }
    
    public const int NecessaryConditionFieldNumber = 1;
    private bool hasNecessaryCondition;
    private ulong necessaryCondition_;
    public bool HasNecessaryCondition {
      get { return hasNecessaryCondition; }
    }
    public ulong NecessaryCondition {
      get { return necessaryCondition_; }
    }
    
    public const int TargetFieldNumber = 2;
    private bool hasTarget;
    private uint target_;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public uint Target {
      get { return target_; }
    }
    
    public const int OperandFieldNumber = 3;
    private bool hasOperand;
    private uint operand_;
    public bool HasOperand {
      get { return hasOperand; }
    }
    public uint Operand {
      get { return operand_; }
    }
    
    public const int ComparandFieldNumber = 4;
    private bool hasComparand;
    private ulong comparand_;
    public bool HasComparand {
      get { return hasComparand; }
    }
    public ulong Comparand {
      get { return comparand_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNecessaryCondition) return false;
        if (!hasTarget) return false;
        if (!hasOperand) return false;
        if (!hasComparand) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _criteriaModifierFieldNames;
      if (hasNecessaryCondition) {
        output.WriteUInt64(1, field_names[1], NecessaryCondition);
      }
      if (hasTarget) {
        output.WriteFixed32(2, field_names[3], Target);
      }
      if (hasOperand) {
        output.WriteUInt32(3, field_names[2], Operand);
      }
      if (hasComparand) {
        output.WriteUInt64(4, field_names[0], Comparand);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNecessaryCondition) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, NecessaryCondition);
        }
        if (hasTarget) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, Target);
        }
        if (hasOperand) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Operand);
        }
        if (hasComparand) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, Comparand);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CriteriaModifier ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CriteriaModifier ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CriteriaModifier ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CriteriaModifier ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CriteriaModifier ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CriteriaModifier ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CriteriaModifier ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CriteriaModifier ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CriteriaModifier ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CriteriaModifier ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CriteriaModifier MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CriteriaModifier prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CriteriaModifier, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CriteriaModifier cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CriteriaModifier result;
      
      private CriteriaModifier PrepareBuilder() {
        if (resultIsReadOnly) {
          CriteriaModifier original = result;
          result = new CriteriaModifier();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CriteriaModifier MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.CriteriaModifier.Descriptor; }
      }
      
      public override CriteriaModifier DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.CriteriaModifier.DefaultInstance; }
      }
      
      public override CriteriaModifier BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CriteriaModifier) {
          return MergeFrom((CriteriaModifier) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CriteriaModifier other) {
        if (other == global::bnet.protocol.achievements.CriteriaModifier.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNecessaryCondition) {
          NecessaryCondition = other.NecessaryCondition;
        }
        if (other.HasTarget) {
          Target = other.Target;
        }
        if (other.HasOperand) {
          Operand = other.Operand;
        }
        if (other.HasComparand) {
          Comparand = other.Comparand;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_criteriaModifierFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _criteriaModifierFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasNecessaryCondition = input.ReadUInt64(ref result.necessaryCondition_);
              break;
            }
            case 21: {
              result.hasTarget = input.ReadFixed32(ref result.target_);
              break;
            }
            case 24: {
              result.hasOperand = input.ReadUInt32(ref result.operand_);
              break;
            }
            case 32: {
              result.hasComparand = input.ReadUInt64(ref result.comparand_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNecessaryCondition {
        get { return result.hasNecessaryCondition; }
      }
      public ulong NecessaryCondition {
        get { return result.NecessaryCondition; }
        set { SetNecessaryCondition(value); }
      }
      public Builder SetNecessaryCondition(ulong value) {
        PrepareBuilder();
        result.hasNecessaryCondition = true;
        result.necessaryCondition_ = value;
        return this;
      }
      public Builder ClearNecessaryCondition() {
        PrepareBuilder();
        result.hasNecessaryCondition = false;
        result.necessaryCondition_ = 0UL;
        return this;
      }
      
      public bool HasTarget {
        get { return result.hasTarget; }
      }
      public uint Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(uint value) {
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = 0;
        return this;
      }
      
      public bool HasOperand {
        get { return result.hasOperand; }
      }
      public uint Operand {
        get { return result.Operand; }
        set { SetOperand(value); }
      }
      public Builder SetOperand(uint value) {
        PrepareBuilder();
        result.hasOperand = true;
        result.operand_ = value;
        return this;
      }
      public Builder ClearOperand() {
        PrepareBuilder();
        result.hasOperand = false;
        result.operand_ = 0;
        return this;
      }
      
      public bool HasComparand {
        get { return result.hasComparand; }
      }
      public ulong Comparand {
        get { return result.Comparand; }
        set { SetComparand(value); }
      }
      public Builder SetComparand(ulong value) {
        PrepareBuilder();
        result.hasComparand = true;
        result.comparand_ = value;
        return this;
      }
      public Builder ClearComparand() {
        PrepareBuilder();
        result.hasComparand = false;
        result.comparand_ = 0UL;
        return this;
      }
    }
    static CriteriaModifier() {
      object.ReferenceEquals(global::bnet.protocol.achievements.AchievementsStaticData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CriteriaEvent : pb::GeneratedMessage<CriteriaEvent, CriteriaEvent.Builder> {
    private CriteriaEvent() { }
    private static readonly CriteriaEvent defaultInstance = new CriteriaEvent().MakeReadOnly();
    private static readonly string[] _criteriaEventFieldNames = new string[] { "comparand", "id", "modifier", "timer_duration" };
    private static readonly uint[] _criteriaEventFieldTags = new uint[] { 16, 8, 26, 32 };
    public static CriteriaEvent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CriteriaEvent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CriteriaEvent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_CriteriaEvent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CriteriaEvent, CriteriaEvent.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_CriteriaEvent__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public const int ComparandFieldNumber = 2;
    private bool hasComparand;
    private ulong comparand_;
    public bool HasComparand {
      get { return hasComparand; }
    }
    public ulong Comparand {
      get { return comparand_; }
    }
    
    public const int ModifierFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.achievements.CriteriaModifier> modifier_ = new pbc::PopsicleList<global::bnet.protocol.achievements.CriteriaModifier>();
    public scg::IList<global::bnet.protocol.achievements.CriteriaModifier> ModifierList {
      get { return modifier_; }
    }
    public int ModifierCount {
      get { return modifier_.Count; }
    }
    public global::bnet.protocol.achievements.CriteriaModifier GetModifier(int index) {
      return modifier_[index];
    }
    
    public const int TimerDurationFieldNumber = 4;
    private bool hasTimerDuration;
    private uint timerDuration_;
    public bool HasTimerDuration {
      get { return hasTimerDuration; }
    }
    public uint TimerDuration {
      get { return timerDuration_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (global::bnet.protocol.achievements.CriteriaModifier element in ModifierList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _criteriaEventFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[1], Id);
      }
      if (hasComparand) {
        output.WriteUInt64(2, field_names[0], Comparand);
      }
      if (modifier_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], modifier_);
      }
      if (hasTimerDuration) {
        output.WriteUInt32(4, field_names[3], TimerDuration);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
        }
        if (hasComparand) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Comparand);
        }
        foreach (global::bnet.protocol.achievements.CriteriaModifier element in ModifierList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasTimerDuration) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, TimerDuration);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CriteriaEvent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CriteriaEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CriteriaEvent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CriteriaEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CriteriaEvent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CriteriaEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CriteriaEvent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CriteriaEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CriteriaEvent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CriteriaEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CriteriaEvent MakeReadOnly() {
      modifier_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CriteriaEvent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CriteriaEvent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CriteriaEvent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CriteriaEvent result;
      
      private CriteriaEvent PrepareBuilder() {
        if (resultIsReadOnly) {
          CriteriaEvent original = result;
          result = new CriteriaEvent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CriteriaEvent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.CriteriaEvent.Descriptor; }
      }
      
      public override CriteriaEvent DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.CriteriaEvent.DefaultInstance; }
      }
      
      public override CriteriaEvent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CriteriaEvent) {
          return MergeFrom((CriteriaEvent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CriteriaEvent other) {
        if (other == global::bnet.protocol.achievements.CriteriaEvent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasComparand) {
          Comparand = other.Comparand;
        }
        if (other.modifier_.Count != 0) {
          result.modifier_.Add(other.modifier_);
        }
        if (other.HasTimerDuration) {
          TimerDuration = other.TimerDuration;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_criteriaEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _criteriaEventFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 16: {
              result.hasComparand = input.ReadUInt64(ref result.comparand_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.modifier_, global::bnet.protocol.achievements.CriteriaModifier.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasTimerDuration = input.ReadUInt32(ref result.timerDuration_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasComparand {
        get { return result.hasComparand; }
      }
      public ulong Comparand {
        get { return result.Comparand; }
        set { SetComparand(value); }
      }
      public Builder SetComparand(ulong value) {
        PrepareBuilder();
        result.hasComparand = true;
        result.comparand_ = value;
        return this;
      }
      public Builder ClearComparand() {
        PrepareBuilder();
        result.hasComparand = false;
        result.comparand_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.CriteriaModifier> ModifierList {
        get { return PrepareBuilder().modifier_; }
      }
      public int ModifierCount {
        get { return result.ModifierCount; }
      }
      public global::bnet.protocol.achievements.CriteriaModifier GetModifier(int index) {
        return result.GetModifier(index);
      }
      public Builder SetModifier(int index, global::bnet.protocol.achievements.CriteriaModifier value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.modifier_[index] = value;
        return this;
      }
      public Builder SetModifier(int index, global::bnet.protocol.achievements.CriteriaModifier.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.modifier_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddModifier(global::bnet.protocol.achievements.CriteriaModifier value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.modifier_.Add(value);
        return this;
      }
      public Builder AddModifier(global::bnet.protocol.achievements.CriteriaModifier.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.modifier_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeModifier(scg::IEnumerable<global::bnet.protocol.achievements.CriteriaModifier> values) {
        PrepareBuilder();
        result.modifier_.Add(values);
        return this;
      }
      public Builder ClearModifier() {
        PrepareBuilder();
        result.modifier_.Clear();
        return this;
      }
      
      public bool HasTimerDuration {
        get { return result.hasTimerDuration; }
      }
      public uint TimerDuration {
        get { return result.TimerDuration; }
        set { SetTimerDuration(value); }
      }
      public Builder SetTimerDuration(uint value) {
        PrepareBuilder();
        result.hasTimerDuration = true;
        result.timerDuration_ = value;
        return this;
      }
      public Builder ClearTimerDuration() {
        PrepareBuilder();
        result.hasTimerDuration = false;
        result.timerDuration_ = 0;
        return this;
      }
    }
    static CriteriaEvent() {
      object.ReferenceEquals(global::bnet.protocol.achievements.AchievementsStaticData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StaticCategoryDefinition : pb::GeneratedMessage<StaticCategoryDefinition, StaticCategoryDefinition.Builder> {
    private StaticCategoryDefinition() { }
    private static readonly StaticCategoryDefinition defaultInstance = new StaticCategoryDefinition().MakeReadOnly();
    private static readonly string[] _staticCategoryDefinitionFieldNames = new string[] { "OBSOLETE_featured_achievement_id", "attributes", "id", "order_hint", "parent_id" };
    private static readonly uint[] _staticCategoryDefinitionFieldTags = new uint[] { 24, 42, 8, 32, 16 };
    public static StaticCategoryDefinition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StaticCategoryDefinition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StaticCategoryDefinition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_StaticCategoryDefinition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StaticCategoryDefinition, StaticCategoryDefinition.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_StaticCategoryDefinition__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int ParentIdFieldNumber = 2;
    private bool hasParentId;
    private ulong parentId_;
    public bool HasParentId {
      get { return hasParentId; }
    }
    public ulong ParentId {
      get { return parentId_; }
    }
    
    public const int OBSOLETEFeaturedAchievementIdFieldNumber = 3;
    private bool hasOBSOLETEFeaturedAchievementId;
    private ulong oBSOLETEFeaturedAchievementId_;
    public bool HasOBSOLETEFeaturedAchievementId {
      get { return hasOBSOLETEFeaturedAchievementId; }
    }
    public ulong OBSOLETEFeaturedAchievementId {
      get { return oBSOLETEFeaturedAchievementId_; }
    }
    
    public const int OrderHintFieldNumber = 4;
    private bool hasOrderHint;
    private uint orderHint_;
    public bool HasOrderHint {
      get { return hasOrderHint; }
    }
    public uint OrderHint {
      get { return orderHint_; }
    }
    
    public const int AttributesFieldNumber = 5;
    private pbc::PopsicleList<global::bnet.protocol.achievements.Attribute> attributes_ = new pbc::PopsicleList<global::bnet.protocol.achievements.Attribute>();
    public scg::IList<global::bnet.protocol.achievements.Attribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::bnet.protocol.achievements.Attribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasOrderHint) return false;
        foreach (global::bnet.protocol.achievements.Attribute element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _staticCategoryDefinitionFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[2], Id);
      }
      if (hasParentId) {
        output.WriteUInt64(2, field_names[4], ParentId);
      }
      if (hasOBSOLETEFeaturedAchievementId) {
        output.WriteUInt64(3, field_names[0], OBSOLETEFeaturedAchievementId);
      }
      if (hasOrderHint) {
        output.WriteUInt32(4, field_names[3], OrderHint);
      }
      if (attributes_.Count > 0) {
        output.WriteMessageArray(5, field_names[1], attributes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
        }
        if (hasParentId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ParentId);
        }
        if (hasOBSOLETEFeaturedAchievementId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, OBSOLETEFeaturedAchievementId);
        }
        if (hasOrderHint) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, OrderHint);
        }
        foreach (global::bnet.protocol.achievements.Attribute element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StaticCategoryDefinition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StaticCategoryDefinition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StaticCategoryDefinition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StaticCategoryDefinition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StaticCategoryDefinition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StaticCategoryDefinition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StaticCategoryDefinition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StaticCategoryDefinition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StaticCategoryDefinition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StaticCategoryDefinition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StaticCategoryDefinition MakeReadOnly() {
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StaticCategoryDefinition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StaticCategoryDefinition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StaticCategoryDefinition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StaticCategoryDefinition result;
      
      private StaticCategoryDefinition PrepareBuilder() {
        if (resultIsReadOnly) {
          StaticCategoryDefinition original = result;
          result = new StaticCategoryDefinition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StaticCategoryDefinition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.StaticCategoryDefinition.Descriptor; }
      }
      
      public override StaticCategoryDefinition DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.StaticCategoryDefinition.DefaultInstance; }
      }
      
      public override StaticCategoryDefinition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StaticCategoryDefinition) {
          return MergeFrom((StaticCategoryDefinition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StaticCategoryDefinition other) {
        if (other == global::bnet.protocol.achievements.StaticCategoryDefinition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasParentId) {
          ParentId = other.ParentId;
        }
        if (other.HasOBSOLETEFeaturedAchievementId) {
          OBSOLETEFeaturedAchievementId = other.OBSOLETEFeaturedAchievementId;
        }
        if (other.HasOrderHint) {
          OrderHint = other.OrderHint;
        }
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_staticCategoryDefinitionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _staticCategoryDefinitionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasParentId = input.ReadUInt64(ref result.parentId_);
              break;
            }
            case 24: {
              result.hasOBSOLETEFeaturedAchievementId = input.ReadUInt64(ref result.oBSOLETEFeaturedAchievementId_);
              break;
            }
            case 32: {
              result.hasOrderHint = input.ReadUInt32(ref result.orderHint_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::bnet.protocol.achievements.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasParentId {
        get { return result.hasParentId; }
      }
      public ulong ParentId {
        get { return result.ParentId; }
        set { SetParentId(value); }
      }
      public Builder SetParentId(ulong value) {
        PrepareBuilder();
        result.hasParentId = true;
        result.parentId_ = value;
        return this;
      }
      public Builder ClearParentId() {
        PrepareBuilder();
        result.hasParentId = false;
        result.parentId_ = 0UL;
        return this;
      }
      
      public bool HasOBSOLETEFeaturedAchievementId {
        get { return result.hasOBSOLETEFeaturedAchievementId; }
      }
      public ulong OBSOLETEFeaturedAchievementId {
        get { return result.OBSOLETEFeaturedAchievementId; }
        set { SetOBSOLETEFeaturedAchievementId(value); }
      }
      public Builder SetOBSOLETEFeaturedAchievementId(ulong value) {
        PrepareBuilder();
        result.hasOBSOLETEFeaturedAchievementId = true;
        result.oBSOLETEFeaturedAchievementId_ = value;
        return this;
      }
      public Builder ClearOBSOLETEFeaturedAchievementId() {
        PrepareBuilder();
        result.hasOBSOLETEFeaturedAchievementId = false;
        result.oBSOLETEFeaturedAchievementId_ = 0UL;
        return this;
      }
      
      public bool HasOrderHint {
        get { return result.hasOrderHint; }
      }
      public uint OrderHint {
        get { return result.OrderHint; }
        set { SetOrderHint(value); }
      }
      public Builder SetOrderHint(uint value) {
        PrepareBuilder();
        result.hasOrderHint = true;
        result.orderHint_ = value;
        return this;
      }
      public Builder ClearOrderHint() {
        PrepareBuilder();
        result.hasOrderHint = false;
        result.orderHint_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.Attribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::bnet.protocol.achievements.Attribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::bnet.protocol.achievements.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::bnet.protocol.achievements.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::bnet.protocol.achievements.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::bnet.protocol.achievements.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::bnet.protocol.achievements.Attribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
    }
    static StaticCategoryDefinition() {
      object.ReferenceEquals(global::bnet.protocol.achievements.AchievementsStaticData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StaticAchievementDefinition : pb::GeneratedMessage<StaticAchievementDefinition, StaticAchievementDefinition.Builder> {
    private StaticAchievementDefinition() { }
    private static readonly StaticAchievementDefinition defaultInstance = new StaticAchievementDefinition().MakeReadOnly();
    private static readonly string[] _staticAchievementDefinitionFieldNames = new string[] { "attributes", "category_id", "criteria_shared_with_achievement_id", "flags", "id", "minimum_criteria", "order_hint", "points_value", "superseding_achievement_id" };
    private static readonly uint[] _staticAchievementDefinitionFieldTags = new uint[] { 74, 24, 64, 48, 8, 32, 56, 40, 16 };
    public static StaticAchievementDefinition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StaticAchievementDefinition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StaticAchievementDefinition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_StaticAchievementDefinition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StaticAchievementDefinition, StaticAchievementDefinition.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_StaticAchievementDefinition__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public const int SupersedingAchievementIdFieldNumber = 2;
    private bool hasSupersedingAchievementId;
    private ulong supersedingAchievementId_;
    public bool HasSupersedingAchievementId {
      get { return hasSupersedingAchievementId; }
    }
    public ulong SupersedingAchievementId {
      get { return supersedingAchievementId_; }
    }
    
    public const int CategoryIdFieldNumber = 3;
    private bool hasCategoryId;
    private uint categoryId_;
    public bool HasCategoryId {
      get { return hasCategoryId; }
    }
    public uint CategoryId {
      get { return categoryId_; }
    }
    
    public const int MinimumCriteriaFieldNumber = 4;
    private bool hasMinimumCriteria;
    private uint minimumCriteria_;
    public bool HasMinimumCriteria {
      get { return hasMinimumCriteria; }
    }
    public uint MinimumCriteria {
      get { return minimumCriteria_; }
    }
    
    public const int PointsValueFieldNumber = 5;
    private bool hasPointsValue;
    private uint pointsValue_;
    public bool HasPointsValue {
      get { return hasPointsValue; }
    }
    public uint PointsValue {
      get { return pointsValue_; }
    }
    
    public const int FlagsFieldNumber = 6;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public const int OrderHintFieldNumber = 7;
    private bool hasOrderHint;
    private uint orderHint_;
    public bool HasOrderHint {
      get { return hasOrderHint; }
    }
    public uint OrderHint {
      get { return orderHint_; }
    }
    
    public const int CriteriaSharedWithAchievementIdFieldNumber = 8;
    private bool hasCriteriaSharedWithAchievementId;
    private ulong criteriaSharedWithAchievementId_;
    public bool HasCriteriaSharedWithAchievementId {
      get { return hasCriteriaSharedWithAchievementId; }
    }
    public ulong CriteriaSharedWithAchievementId {
      get { return criteriaSharedWithAchievementId_; }
    }
    
    public const int AttributesFieldNumber = 9;
    private pbc::PopsicleList<global::bnet.protocol.achievements.Attribute> attributes_ = new pbc::PopsicleList<global::bnet.protocol.achievements.Attribute>();
    public scg::IList<global::bnet.protocol.achievements.Attribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::bnet.protocol.achievements.Attribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasCategoryId) return false;
        if (!hasPointsValue) return false;
        if (!hasFlags) return false;
        if (!hasOrderHint) return false;
        foreach (global::bnet.protocol.achievements.Attribute element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _staticAchievementDefinitionFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[4], Id);
      }
      if (hasSupersedingAchievementId) {
        output.WriteUInt64(2, field_names[8], SupersedingAchievementId);
      }
      if (hasCategoryId) {
        output.WriteUInt32(3, field_names[1], CategoryId);
      }
      if (hasMinimumCriteria) {
        output.WriteUInt32(4, field_names[5], MinimumCriteria);
      }
      if (hasPointsValue) {
        output.WriteUInt32(5, field_names[7], PointsValue);
      }
      if (hasFlags) {
        output.WriteUInt32(6, field_names[3], Flags);
      }
      if (hasOrderHint) {
        output.WriteUInt32(7, field_names[6], OrderHint);
      }
      if (hasCriteriaSharedWithAchievementId) {
        output.WriteUInt64(8, field_names[2], CriteriaSharedWithAchievementId);
      }
      if (attributes_.Count > 0) {
        output.WriteMessageArray(9, field_names[0], attributes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
        }
        if (hasSupersedingAchievementId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, SupersedingAchievementId);
        }
        if (hasCategoryId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, CategoryId);
        }
        if (hasMinimumCriteria) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, MinimumCriteria);
        }
        if (hasPointsValue) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, PointsValue);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, Flags);
        }
        if (hasOrderHint) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, OrderHint);
        }
        if (hasCriteriaSharedWithAchievementId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, CriteriaSharedWithAchievementId);
        }
        foreach (global::bnet.protocol.achievements.Attribute element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StaticAchievementDefinition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StaticAchievementDefinition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StaticAchievementDefinition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StaticAchievementDefinition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StaticAchievementDefinition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StaticAchievementDefinition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StaticAchievementDefinition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StaticAchievementDefinition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StaticAchievementDefinition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StaticAchievementDefinition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StaticAchievementDefinition MakeReadOnly() {
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StaticAchievementDefinition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StaticAchievementDefinition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StaticAchievementDefinition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StaticAchievementDefinition result;
      
      private StaticAchievementDefinition PrepareBuilder() {
        if (resultIsReadOnly) {
          StaticAchievementDefinition original = result;
          result = new StaticAchievementDefinition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StaticAchievementDefinition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.StaticAchievementDefinition.Descriptor; }
      }
      
      public override StaticAchievementDefinition DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.StaticAchievementDefinition.DefaultInstance; }
      }
      
      public override StaticAchievementDefinition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StaticAchievementDefinition) {
          return MergeFrom((StaticAchievementDefinition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StaticAchievementDefinition other) {
        if (other == global::bnet.protocol.achievements.StaticAchievementDefinition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSupersedingAchievementId) {
          SupersedingAchievementId = other.SupersedingAchievementId;
        }
        if (other.HasCategoryId) {
          CategoryId = other.CategoryId;
        }
        if (other.HasMinimumCriteria) {
          MinimumCriteria = other.MinimumCriteria;
        }
        if (other.HasPointsValue) {
          PointsValue = other.PointsValue;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasOrderHint) {
          OrderHint = other.OrderHint;
        }
        if (other.HasCriteriaSharedWithAchievementId) {
          CriteriaSharedWithAchievementId = other.CriteriaSharedWithAchievementId;
        }
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_staticAchievementDefinitionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _staticAchievementDefinitionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 16: {
              result.hasSupersedingAchievementId = input.ReadUInt64(ref result.supersedingAchievementId_);
              break;
            }
            case 24: {
              result.hasCategoryId = input.ReadUInt32(ref result.categoryId_);
              break;
            }
            case 32: {
              result.hasMinimumCriteria = input.ReadUInt32(ref result.minimumCriteria_);
              break;
            }
            case 40: {
              result.hasPointsValue = input.ReadUInt32(ref result.pointsValue_);
              break;
            }
            case 48: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
            case 56: {
              result.hasOrderHint = input.ReadUInt32(ref result.orderHint_);
              break;
            }
            case 64: {
              result.hasCriteriaSharedWithAchievementId = input.ReadUInt64(ref result.criteriaSharedWithAchievementId_);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::bnet.protocol.achievements.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasSupersedingAchievementId {
        get { return result.hasSupersedingAchievementId; }
      }
      public ulong SupersedingAchievementId {
        get { return result.SupersedingAchievementId; }
        set { SetSupersedingAchievementId(value); }
      }
      public Builder SetSupersedingAchievementId(ulong value) {
        PrepareBuilder();
        result.hasSupersedingAchievementId = true;
        result.supersedingAchievementId_ = value;
        return this;
      }
      public Builder ClearSupersedingAchievementId() {
        PrepareBuilder();
        result.hasSupersedingAchievementId = false;
        result.supersedingAchievementId_ = 0UL;
        return this;
      }
      
      public bool HasCategoryId {
        get { return result.hasCategoryId; }
      }
      public uint CategoryId {
        get { return result.CategoryId; }
        set { SetCategoryId(value); }
      }
      public Builder SetCategoryId(uint value) {
        PrepareBuilder();
        result.hasCategoryId = true;
        result.categoryId_ = value;
        return this;
      }
      public Builder ClearCategoryId() {
        PrepareBuilder();
        result.hasCategoryId = false;
        result.categoryId_ = 0;
        return this;
      }
      
      public bool HasMinimumCriteria {
        get { return result.hasMinimumCriteria; }
      }
      public uint MinimumCriteria {
        get { return result.MinimumCriteria; }
        set { SetMinimumCriteria(value); }
      }
      public Builder SetMinimumCriteria(uint value) {
        PrepareBuilder();
        result.hasMinimumCriteria = true;
        result.minimumCriteria_ = value;
        return this;
      }
      public Builder ClearMinimumCriteria() {
        PrepareBuilder();
        result.hasMinimumCriteria = false;
        result.minimumCriteria_ = 0;
        return this;
      }
      
      public bool HasPointsValue {
        get { return result.hasPointsValue; }
      }
      public uint PointsValue {
        get { return result.PointsValue; }
        set { SetPointsValue(value); }
      }
      public Builder SetPointsValue(uint value) {
        PrepareBuilder();
        result.hasPointsValue = true;
        result.pointsValue_ = value;
        return this;
      }
      public Builder ClearPointsValue() {
        PrepareBuilder();
        result.hasPointsValue = false;
        result.pointsValue_ = 0;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public bool HasOrderHint {
        get { return result.hasOrderHint; }
      }
      public uint OrderHint {
        get { return result.OrderHint; }
        set { SetOrderHint(value); }
      }
      public Builder SetOrderHint(uint value) {
        PrepareBuilder();
        result.hasOrderHint = true;
        result.orderHint_ = value;
        return this;
      }
      public Builder ClearOrderHint() {
        PrepareBuilder();
        result.hasOrderHint = false;
        result.orderHint_ = 0;
        return this;
      }
      
      public bool HasCriteriaSharedWithAchievementId {
        get { return result.hasCriteriaSharedWithAchievementId; }
      }
      public ulong CriteriaSharedWithAchievementId {
        get { return result.CriteriaSharedWithAchievementId; }
        set { SetCriteriaSharedWithAchievementId(value); }
      }
      public Builder SetCriteriaSharedWithAchievementId(ulong value) {
        PrepareBuilder();
        result.hasCriteriaSharedWithAchievementId = true;
        result.criteriaSharedWithAchievementId_ = value;
        return this;
      }
      public Builder ClearCriteriaSharedWithAchievementId() {
        PrepareBuilder();
        result.hasCriteriaSharedWithAchievementId = false;
        result.criteriaSharedWithAchievementId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.Attribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::bnet.protocol.achievements.Attribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::bnet.protocol.achievements.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::bnet.protocol.achievements.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::bnet.protocol.achievements.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::bnet.protocol.achievements.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::bnet.protocol.achievements.Attribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
    }
    static StaticAchievementDefinition() {
      object.ReferenceEquals(global::bnet.protocol.achievements.AchievementsStaticData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StaticCriteriaDefinition : pb::GeneratedMessage<StaticCriteriaDefinition, StaticCriteriaDefinition.Builder> {
    private StaticCriteriaDefinition() { }
    private static readonly StaticCriteriaDefinition defaultInstance = new StaticCriteriaDefinition().MakeReadOnly();
    private static readonly string[] _staticCriteriaDefinitionFieldNames = new string[] { "advance_event", "attributes", "criteria_id", "evalutation_class", "fail_event", "flags", "necessary_quantity", "order_hint", "parent_achievement_id", "start_event" };
    private static readonly uint[] _staticCriteriaDefinitionFieldTags = new uint[] { 34, 82, 8, 69, 42, 72, 48, 56, 16, 26 };
    public static StaticCriteriaDefinition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StaticCriteriaDefinition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StaticCriteriaDefinition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_StaticCriteriaDefinition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StaticCriteriaDefinition, StaticCriteriaDefinition.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_StaticCriteriaDefinition__FieldAccessorTable; }
    }
    
    public const int CriteriaIdFieldNumber = 1;
    private bool hasCriteriaId;
    private ulong criteriaId_;
    public bool HasCriteriaId {
      get { return hasCriteriaId; }
    }
    public ulong CriteriaId {
      get { return criteriaId_; }
    }
    
    public const int ParentAchievementIdFieldNumber = 2;
    private bool hasParentAchievementId;
    private ulong parentAchievementId_;
    public bool HasParentAchievementId {
      get { return hasParentAchievementId; }
    }
    public ulong ParentAchievementId {
      get { return parentAchievementId_; }
    }
    
    public const int StartEventFieldNumber = 3;
    private bool hasStartEvent;
    private global::bnet.protocol.achievements.CriteriaEvent startEvent_;
    public bool HasStartEvent {
      get { return hasStartEvent; }
    }
    public global::bnet.protocol.achievements.CriteriaEvent StartEvent {
      get { return startEvent_ ?? global::bnet.protocol.achievements.CriteriaEvent.DefaultInstance; }
    }
    
    public const int AdvanceEventFieldNumber = 4;
    private bool hasAdvanceEvent;
    private global::bnet.protocol.achievements.CriteriaEvent advanceEvent_;
    public bool HasAdvanceEvent {
      get { return hasAdvanceEvent; }
    }
    public global::bnet.protocol.achievements.CriteriaEvent AdvanceEvent {
      get { return advanceEvent_ ?? global::bnet.protocol.achievements.CriteriaEvent.DefaultInstance; }
    }
    
    public const int FailEventFieldNumber = 5;
    private bool hasFailEvent;
    private global::bnet.protocol.achievements.CriteriaEvent failEvent_;
    public bool HasFailEvent {
      get { return hasFailEvent; }
    }
    public global::bnet.protocol.achievements.CriteriaEvent FailEvent {
      get { return failEvent_ ?? global::bnet.protocol.achievements.CriteriaEvent.DefaultInstance; }
    }
    
    public const int NecessaryQuantityFieldNumber = 6;
    private bool hasNecessaryQuantity;
    private ulong necessaryQuantity_;
    public bool HasNecessaryQuantity {
      get { return hasNecessaryQuantity; }
    }
    public ulong NecessaryQuantity {
      get { return necessaryQuantity_; }
    }
    
    public const int OrderHintFieldNumber = 7;
    private bool hasOrderHint;
    private uint orderHint_;
    public bool HasOrderHint {
      get { return hasOrderHint; }
    }
    public uint OrderHint {
      get { return orderHint_; }
    }
    
    public const int EvalutationClassFieldNumber = 8;
    private bool hasEvalutationClass;
    private uint evalutationClass_;
    public bool HasEvalutationClass {
      get { return hasEvalutationClass; }
    }
    public uint EvalutationClass {
      get { return evalutationClass_; }
    }
    
    public const int FlagsFieldNumber = 9;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public const int AttributesFieldNumber = 10;
    private pbc::PopsicleList<global::bnet.protocol.achievements.Attribute> attributes_ = new pbc::PopsicleList<global::bnet.protocol.achievements.Attribute>();
    public scg::IList<global::bnet.protocol.achievements.Attribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::bnet.protocol.achievements.Attribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCriteriaId) return false;
        if (!hasParentAchievementId) return false;
        if (!hasNecessaryQuantity) return false;
        if (!hasEvalutationClass) return false;
        if (!hasFlags) return false;
        if (HasStartEvent) {
          if (!StartEvent.IsInitialized) return false;
        }
        if (HasAdvanceEvent) {
          if (!AdvanceEvent.IsInitialized) return false;
        }
        if (HasFailEvent) {
          if (!FailEvent.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.achievements.Attribute element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _staticCriteriaDefinitionFieldNames;
      if (hasCriteriaId) {
        output.WriteUInt64(1, field_names[2], CriteriaId);
      }
      if (hasParentAchievementId) {
        output.WriteUInt64(2, field_names[8], ParentAchievementId);
      }
      if (hasStartEvent) {
        output.WriteMessage(3, field_names[9], StartEvent);
      }
      if (hasAdvanceEvent) {
        output.WriteMessage(4, field_names[0], AdvanceEvent);
      }
      if (hasFailEvent) {
        output.WriteMessage(5, field_names[4], FailEvent);
      }
      if (hasNecessaryQuantity) {
        output.WriteUInt64(6, field_names[6], NecessaryQuantity);
      }
      if (hasOrderHint) {
        output.WriteUInt32(7, field_names[7], OrderHint);
      }
      if (hasEvalutationClass) {
        output.WriteFixed32(8, field_names[3], EvalutationClass);
      }
      if (hasFlags) {
        output.WriteUInt32(9, field_names[5], Flags);
      }
      if (attributes_.Count > 0) {
        output.WriteMessageArray(10, field_names[1], attributes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCriteriaId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, CriteriaId);
        }
        if (hasParentAchievementId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ParentAchievementId);
        }
        if (hasStartEvent) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, StartEvent);
        }
        if (hasAdvanceEvent) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, AdvanceEvent);
        }
        if (hasFailEvent) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, FailEvent);
        }
        if (hasNecessaryQuantity) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, NecessaryQuantity);
        }
        if (hasOrderHint) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, OrderHint);
        }
        if (hasEvalutationClass) {
          size += pb::CodedOutputStream.ComputeFixed32Size(8, EvalutationClass);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, Flags);
        }
        foreach (global::bnet.protocol.achievements.Attribute element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StaticCriteriaDefinition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StaticCriteriaDefinition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StaticCriteriaDefinition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StaticCriteriaDefinition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StaticCriteriaDefinition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StaticCriteriaDefinition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StaticCriteriaDefinition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StaticCriteriaDefinition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StaticCriteriaDefinition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StaticCriteriaDefinition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StaticCriteriaDefinition MakeReadOnly() {
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StaticCriteriaDefinition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StaticCriteriaDefinition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StaticCriteriaDefinition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StaticCriteriaDefinition result;
      
      private StaticCriteriaDefinition PrepareBuilder() {
        if (resultIsReadOnly) {
          StaticCriteriaDefinition original = result;
          result = new StaticCriteriaDefinition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StaticCriteriaDefinition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.StaticCriteriaDefinition.Descriptor; }
      }
      
      public override StaticCriteriaDefinition DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.StaticCriteriaDefinition.DefaultInstance; }
      }
      
      public override StaticCriteriaDefinition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StaticCriteriaDefinition) {
          return MergeFrom((StaticCriteriaDefinition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StaticCriteriaDefinition other) {
        if (other == global::bnet.protocol.achievements.StaticCriteriaDefinition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCriteriaId) {
          CriteriaId = other.CriteriaId;
        }
        if (other.HasParentAchievementId) {
          ParentAchievementId = other.ParentAchievementId;
        }
        if (other.HasStartEvent) {
          MergeStartEvent(other.StartEvent);
        }
        if (other.HasAdvanceEvent) {
          MergeAdvanceEvent(other.AdvanceEvent);
        }
        if (other.HasFailEvent) {
          MergeFailEvent(other.FailEvent);
        }
        if (other.HasNecessaryQuantity) {
          NecessaryQuantity = other.NecessaryQuantity;
        }
        if (other.HasOrderHint) {
          OrderHint = other.OrderHint;
        }
        if (other.HasEvalutationClass) {
          EvalutationClass = other.EvalutationClass;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_staticCriteriaDefinitionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _staticCriteriaDefinitionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCriteriaId = input.ReadUInt64(ref result.criteriaId_);
              break;
            }
            case 16: {
              result.hasParentAchievementId = input.ReadUInt64(ref result.parentAchievementId_);
              break;
            }
            case 26: {
              global::bnet.protocol.achievements.CriteriaEvent.Builder subBuilder = global::bnet.protocol.achievements.CriteriaEvent.CreateBuilder();
              if (result.hasStartEvent) {
                subBuilder.MergeFrom(StartEvent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StartEvent = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bnet.protocol.achievements.CriteriaEvent.Builder subBuilder = global::bnet.protocol.achievements.CriteriaEvent.CreateBuilder();
              if (result.hasAdvanceEvent) {
                subBuilder.MergeFrom(AdvanceEvent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AdvanceEvent = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::bnet.protocol.achievements.CriteriaEvent.Builder subBuilder = global::bnet.protocol.achievements.CriteriaEvent.CreateBuilder();
              if (result.hasFailEvent) {
                subBuilder.MergeFrom(FailEvent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FailEvent = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasNecessaryQuantity = input.ReadUInt64(ref result.necessaryQuantity_);
              break;
            }
            case 56: {
              result.hasOrderHint = input.ReadUInt32(ref result.orderHint_);
              break;
            }
            case 69: {
              result.hasEvalutationClass = input.ReadFixed32(ref result.evalutationClass_);
              break;
            }
            case 72: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::bnet.protocol.achievements.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCriteriaId {
        get { return result.hasCriteriaId; }
      }
      public ulong CriteriaId {
        get { return result.CriteriaId; }
        set { SetCriteriaId(value); }
      }
      public Builder SetCriteriaId(ulong value) {
        PrepareBuilder();
        result.hasCriteriaId = true;
        result.criteriaId_ = value;
        return this;
      }
      public Builder ClearCriteriaId() {
        PrepareBuilder();
        result.hasCriteriaId = false;
        result.criteriaId_ = 0UL;
        return this;
      }
      
      public bool HasParentAchievementId {
        get { return result.hasParentAchievementId; }
      }
      public ulong ParentAchievementId {
        get { return result.ParentAchievementId; }
        set { SetParentAchievementId(value); }
      }
      public Builder SetParentAchievementId(ulong value) {
        PrepareBuilder();
        result.hasParentAchievementId = true;
        result.parentAchievementId_ = value;
        return this;
      }
      public Builder ClearParentAchievementId() {
        PrepareBuilder();
        result.hasParentAchievementId = false;
        result.parentAchievementId_ = 0UL;
        return this;
      }
      
      public bool HasStartEvent {
       get { return result.hasStartEvent; }
      }
      public global::bnet.protocol.achievements.CriteriaEvent StartEvent {
        get { return result.StartEvent; }
        set { SetStartEvent(value); }
      }
      public Builder SetStartEvent(global::bnet.protocol.achievements.CriteriaEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStartEvent = true;
        result.startEvent_ = value;
        return this;
      }
      public Builder SetStartEvent(global::bnet.protocol.achievements.CriteriaEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStartEvent = true;
        result.startEvent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStartEvent(global::bnet.protocol.achievements.CriteriaEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStartEvent &&
            result.startEvent_ != global::bnet.protocol.achievements.CriteriaEvent.DefaultInstance) {
            result.startEvent_ = global::bnet.protocol.achievements.CriteriaEvent.CreateBuilder(result.startEvent_).MergeFrom(value).BuildPartial();
        } else {
          result.startEvent_ = value;
        }
        result.hasStartEvent = true;
        return this;
      }
      public Builder ClearStartEvent() {
        PrepareBuilder();
        result.hasStartEvent = false;
        result.startEvent_ = null;
        return this;
      }
      
      public bool HasAdvanceEvent {
       get { return result.hasAdvanceEvent; }
      }
      public global::bnet.protocol.achievements.CriteriaEvent AdvanceEvent {
        get { return result.AdvanceEvent; }
        set { SetAdvanceEvent(value); }
      }
      public Builder SetAdvanceEvent(global::bnet.protocol.achievements.CriteriaEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAdvanceEvent = true;
        result.advanceEvent_ = value;
        return this;
      }
      public Builder SetAdvanceEvent(global::bnet.protocol.achievements.CriteriaEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAdvanceEvent = true;
        result.advanceEvent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAdvanceEvent(global::bnet.protocol.achievements.CriteriaEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAdvanceEvent &&
            result.advanceEvent_ != global::bnet.protocol.achievements.CriteriaEvent.DefaultInstance) {
            result.advanceEvent_ = global::bnet.protocol.achievements.CriteriaEvent.CreateBuilder(result.advanceEvent_).MergeFrom(value).BuildPartial();
        } else {
          result.advanceEvent_ = value;
        }
        result.hasAdvanceEvent = true;
        return this;
      }
      public Builder ClearAdvanceEvent() {
        PrepareBuilder();
        result.hasAdvanceEvent = false;
        result.advanceEvent_ = null;
        return this;
      }
      
      public bool HasFailEvent {
       get { return result.hasFailEvent; }
      }
      public global::bnet.protocol.achievements.CriteriaEvent FailEvent {
        get { return result.FailEvent; }
        set { SetFailEvent(value); }
      }
      public Builder SetFailEvent(global::bnet.protocol.achievements.CriteriaEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFailEvent = true;
        result.failEvent_ = value;
        return this;
      }
      public Builder SetFailEvent(global::bnet.protocol.achievements.CriteriaEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFailEvent = true;
        result.failEvent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFailEvent(global::bnet.protocol.achievements.CriteriaEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFailEvent &&
            result.failEvent_ != global::bnet.protocol.achievements.CriteriaEvent.DefaultInstance) {
            result.failEvent_ = global::bnet.protocol.achievements.CriteriaEvent.CreateBuilder(result.failEvent_).MergeFrom(value).BuildPartial();
        } else {
          result.failEvent_ = value;
        }
        result.hasFailEvent = true;
        return this;
      }
      public Builder ClearFailEvent() {
        PrepareBuilder();
        result.hasFailEvent = false;
        result.failEvent_ = null;
        return this;
      }
      
      public bool HasNecessaryQuantity {
        get { return result.hasNecessaryQuantity; }
      }
      public ulong NecessaryQuantity {
        get { return result.NecessaryQuantity; }
        set { SetNecessaryQuantity(value); }
      }
      public Builder SetNecessaryQuantity(ulong value) {
        PrepareBuilder();
        result.hasNecessaryQuantity = true;
        result.necessaryQuantity_ = value;
        return this;
      }
      public Builder ClearNecessaryQuantity() {
        PrepareBuilder();
        result.hasNecessaryQuantity = false;
        result.necessaryQuantity_ = 0UL;
        return this;
      }
      
      public bool HasOrderHint {
        get { return result.hasOrderHint; }
      }
      public uint OrderHint {
        get { return result.OrderHint; }
        set { SetOrderHint(value); }
      }
      public Builder SetOrderHint(uint value) {
        PrepareBuilder();
        result.hasOrderHint = true;
        result.orderHint_ = value;
        return this;
      }
      public Builder ClearOrderHint() {
        PrepareBuilder();
        result.hasOrderHint = false;
        result.orderHint_ = 0;
        return this;
      }
      
      public bool HasEvalutationClass {
        get { return result.hasEvalutationClass; }
      }
      public uint EvalutationClass {
        get { return result.EvalutationClass; }
        set { SetEvalutationClass(value); }
      }
      public Builder SetEvalutationClass(uint value) {
        PrepareBuilder();
        result.hasEvalutationClass = true;
        result.evalutationClass_ = value;
        return this;
      }
      public Builder ClearEvalutationClass() {
        PrepareBuilder();
        result.hasEvalutationClass = false;
        result.evalutationClass_ = 0;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.Attribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::bnet.protocol.achievements.Attribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::bnet.protocol.achievements.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::bnet.protocol.achievements.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::bnet.protocol.achievements.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::bnet.protocol.achievements.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::bnet.protocol.achievements.Attribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
    }
    static StaticCriteriaDefinition() {
      object.ReferenceEquals(global::bnet.protocol.achievements.AchievementsStaticData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementFile : pb::GeneratedMessage<AchievementFile, AchievementFile.Builder> {
    private AchievementFile() { }
    private static readonly AchievementFile defaultInstance = new AchievementFile().MakeReadOnly();
    private static readonly string[] _achievementFileFieldNames = new string[] { "achievement", "attributes", "category", "criteria" };
    private static readonly uint[] _achievementFileFieldTags = new uint[] { 18, 34, 10, 26 };
    public static AchievementFile DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementFile DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementFile ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_AchievementFile__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementFile, AchievementFile.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.achievements.AchievementsStaticData.internal__static_bnet_protocol_achievements_AchievementFile__FieldAccessorTable; }
    }
    
    public const int CategoryFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.achievements.StaticCategoryDefinition> category_ = new pbc::PopsicleList<global::bnet.protocol.achievements.StaticCategoryDefinition>();
    public scg::IList<global::bnet.protocol.achievements.StaticCategoryDefinition> CategoryList {
      get { return category_; }
    }
    public int CategoryCount {
      get { return category_.Count; }
    }
    public global::bnet.protocol.achievements.StaticCategoryDefinition GetCategory(int index) {
      return category_[index];
    }
    
    public const int AchievementFieldNumber = 2;
    private pbc::PopsicleList<global::bnet.protocol.achievements.StaticAchievementDefinition> achievement_ = new pbc::PopsicleList<global::bnet.protocol.achievements.StaticAchievementDefinition>();
    public scg::IList<global::bnet.protocol.achievements.StaticAchievementDefinition> AchievementList {
      get { return achievement_; }
    }
    public int AchievementCount {
      get { return achievement_.Count; }
    }
    public global::bnet.protocol.achievements.StaticAchievementDefinition GetAchievement(int index) {
      return achievement_[index];
    }
    
    public const int CriteriaFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.achievements.StaticCriteriaDefinition> criteria_ = new pbc::PopsicleList<global::bnet.protocol.achievements.StaticCriteriaDefinition>();
    public scg::IList<global::bnet.protocol.achievements.StaticCriteriaDefinition> CriteriaList {
      get { return criteria_; }
    }
    public int CriteriaCount {
      get { return criteria_.Count; }
    }
    public global::bnet.protocol.achievements.StaticCriteriaDefinition GetCriteria(int index) {
      return criteria_[index];
    }
    
    public const int AttributesFieldNumber = 4;
    private pbc::PopsicleList<global::bnet.protocol.achievements.Attribute> attributes_ = new pbc::PopsicleList<global::bnet.protocol.achievements.Attribute>();
    public scg::IList<global::bnet.protocol.achievements.Attribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::bnet.protocol.achievements.Attribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.achievements.StaticCategoryDefinition element in CategoryList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.achievements.StaticAchievementDefinition element in AchievementList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.achievements.StaticCriteriaDefinition element in CriteriaList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.achievements.Attribute element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementFileFieldNames;
      if (category_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], category_);
      }
      if (achievement_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], achievement_);
      }
      if (criteria_.Count > 0) {
        output.WriteMessageArray(3, field_names[3], criteria_);
      }
      if (attributes_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], attributes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.achievements.StaticCategoryDefinition element in CategoryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::bnet.protocol.achievements.StaticAchievementDefinition element in AchievementList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::bnet.protocol.achievements.StaticCriteriaDefinition element in CriteriaList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::bnet.protocol.achievements.Attribute element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementFile ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementFile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementFile ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementFile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementFile ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementFile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementFile ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementFile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementFile ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementFile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementFile MakeReadOnly() {
      category_.MakeReadOnly();
      achievement_.MakeReadOnly();
      criteria_.MakeReadOnly();
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementFile prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementFile, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementFile cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementFile result;
      
      private AchievementFile PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementFile original = result;
          result = new AchievementFile();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementFile MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.achievements.AchievementFile.Descriptor; }
      }
      
      public override AchievementFile DefaultInstanceForType {
        get { return global::bnet.protocol.achievements.AchievementFile.DefaultInstance; }
      }
      
      public override AchievementFile BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementFile) {
          return MergeFrom((AchievementFile) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementFile other) {
        if (other == global::bnet.protocol.achievements.AchievementFile.DefaultInstance) return this;
        PrepareBuilder();
        if (other.category_.Count != 0) {
          result.category_.Add(other.category_);
        }
        if (other.achievement_.Count != 0) {
          result.achievement_.Add(other.achievement_);
        }
        if (other.criteria_.Count != 0) {
          result.criteria_.Add(other.criteria_);
        }
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementFileFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementFileFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.category_, global::bnet.protocol.achievements.StaticCategoryDefinition.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.achievement_, global::bnet.protocol.achievements.StaticAchievementDefinition.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.criteria_, global::bnet.protocol.achievements.StaticCriteriaDefinition.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::bnet.protocol.achievements.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.StaticCategoryDefinition> CategoryList {
        get { return PrepareBuilder().category_; }
      }
      public int CategoryCount {
        get { return result.CategoryCount; }
      }
      public global::bnet.protocol.achievements.StaticCategoryDefinition GetCategory(int index) {
        return result.GetCategory(index);
      }
      public Builder SetCategory(int index, global::bnet.protocol.achievements.StaticCategoryDefinition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.category_[index] = value;
        return this;
      }
      public Builder SetCategory(int index, global::bnet.protocol.achievements.StaticCategoryDefinition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.category_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCategory(global::bnet.protocol.achievements.StaticCategoryDefinition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.category_.Add(value);
        return this;
      }
      public Builder AddCategory(global::bnet.protocol.achievements.StaticCategoryDefinition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.category_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCategory(scg::IEnumerable<global::bnet.protocol.achievements.StaticCategoryDefinition> values) {
        PrepareBuilder();
        result.category_.Add(values);
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.category_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.StaticAchievementDefinition> AchievementList {
        get { return PrepareBuilder().achievement_; }
      }
      public int AchievementCount {
        get { return result.AchievementCount; }
      }
      public global::bnet.protocol.achievements.StaticAchievementDefinition GetAchievement(int index) {
        return result.GetAchievement(index);
      }
      public Builder SetAchievement(int index, global::bnet.protocol.achievements.StaticAchievementDefinition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievement_[index] = value;
        return this;
      }
      public Builder SetAchievement(int index, global::bnet.protocol.achievements.StaticAchievementDefinition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievement_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAchievement(global::bnet.protocol.achievements.StaticAchievementDefinition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievement_.Add(value);
        return this;
      }
      public Builder AddAchievement(global::bnet.protocol.achievements.StaticAchievementDefinition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievement_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAchievement(scg::IEnumerable<global::bnet.protocol.achievements.StaticAchievementDefinition> values) {
        PrepareBuilder();
        result.achievement_.Add(values);
        return this;
      }
      public Builder ClearAchievement() {
        PrepareBuilder();
        result.achievement_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.StaticCriteriaDefinition> CriteriaList {
        get { return PrepareBuilder().criteria_; }
      }
      public int CriteriaCount {
        get { return result.CriteriaCount; }
      }
      public global::bnet.protocol.achievements.StaticCriteriaDefinition GetCriteria(int index) {
        return result.GetCriteria(index);
      }
      public Builder SetCriteria(int index, global::bnet.protocol.achievements.StaticCriteriaDefinition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteria_[index] = value;
        return this;
      }
      public Builder SetCriteria(int index, global::bnet.protocol.achievements.StaticCriteriaDefinition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteria_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCriteria(global::bnet.protocol.achievements.StaticCriteriaDefinition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteria_.Add(value);
        return this;
      }
      public Builder AddCriteria(global::bnet.protocol.achievements.StaticCriteriaDefinition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteria_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCriteria(scg::IEnumerable<global::bnet.protocol.achievements.StaticCriteriaDefinition> values) {
        PrepareBuilder();
        result.criteria_.Add(values);
        return this;
      }
      public Builder ClearCriteria() {
        PrepareBuilder();
        result.criteria_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.achievements.Attribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::bnet.protocol.achievements.Attribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::bnet.protocol.achievements.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::bnet.protocol.achievements.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::bnet.protocol.achievements.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::bnet.protocol.achievements.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::bnet.protocol.achievements.Attribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
    }
    static AchievementFile() {
      object.ReferenceEquals(global::bnet.protocol.achievements.AchievementsStaticData.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
