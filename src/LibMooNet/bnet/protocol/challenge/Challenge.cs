// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bnet.protocol.challenge {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class Challenge {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_challenge_Challenge__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.Challenge, global::bnet.protocol.challenge.Challenge.Builder> internal__static_bnet_protocol_challenge_Challenge__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_challenge_ChallengePickedRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.ChallengePickedRequest, global::bnet.protocol.challenge.ChallengePickedRequest.Builder> internal__static_bnet_protocol_challenge_ChallengePickedRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_challenge_ChallengeAnsweredRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.ChallengeAnsweredRequest, global::bnet.protocol.challenge.ChallengeAnsweredRequest.Builder> internal__static_bnet_protocol_challenge_ChallengeAnsweredRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_challenge_SendChallengeToUserRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.SendChallengeToUserRequest, global::bnet.protocol.challenge.SendChallengeToUserRequest.Builder> internal__static_bnet_protocol_challenge_SendChallengeToUserRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_challenge_SendChallengeToUserResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.SendChallengeToUserResponse, global::bnet.protocol.challenge.SendChallengeToUserResponse.Builder> internal__static_bnet_protocol_challenge_SendChallengeToUserResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bnet_protocol_challenge_ChallengeUserRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.ChallengeUserRequest, global::bnet.protocol.challenge.ChallengeUserRequest.Builder> internal__static_bnet_protocol_challenge_ChallengeUserRequest__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Challenge() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CixzZXJ2aWNlL2NoYWxsZW5nZS9kZWZpbml0aW9uL2NoYWxsZW5nZS5wcm90" + 
            "bxIXYm5ldC5wcm90b2NvbC5jaGFsbGVuZ2UaHGxpYi9wcm90b2NvbC9hdHRy" + 
            "aWJ1dGUucHJvdG8aGWxpYi9wcm90b2NvbC9lbnRpdHkucHJvdG8aEWxpYi9y" + 
            "cGMvcnBjLnByb3RvIjcKCUNoYWxsZW5nZRIMCgR0eXBlGAEgAigNEgwKBGlu" + 
            "Zm8YAiABKAkSDgoGYW5zd2VyGAMgASgJIisKFkNoYWxsZW5nZVBpY2tlZFJl" + 
            "cXVlc3QSEQoJY2hhbGxlbmdlGAEgAigNIioKGENoYWxsZW5nZUFuc3dlcmVk" + 
            "UmVxdWVzdBIOCgZhbnN3ZXIYASACKAkisQEKGlNlbmRDaGFsbGVuZ2VUb1Vz" + 
            "ZXJSZXF1ZXN0EikKB3BlZXJfaWQYASABKAsyGC5ibmV0LnByb3RvY29sLlBy" + 
            "b2Nlc3NJZBIwCg9nYW1lX2FjY291bnRfaWQYAiABKAsyFy5ibmV0LnByb3Rv" + 
            "Y29sLkVudGl0eUlkEjYKCmNoYWxsZW5nZXMYAyADKAsyIi5ibmV0LnByb3Rv" + 
            "Y29sLmNoYWxsZW5nZS5DaGFsbGVuZ2UiVAobU2VuZENoYWxsZW5nZVRvVXNl" + 
            "clJlc3BvbnNlEjUKCWNoYWxsZW5nZRgBIAIoCzIiLmJuZXQucHJvdG9jb2wu" + 
            "Y2hhbGxlbmdlLkNoYWxsZW5nZSJOChRDaGFsbGVuZ2VVc2VyUmVxdWVzdBI2" + 
            "CgpjaGFsbGVuZ2VzGAEgAygLMiIuYm5ldC5wcm90b2NvbC5jaGFsbGVuZ2Uu" + 
            "Q2hhbGxlbmdlMusCChBDaGFsbGVuZ2VTZXJ2aWNlEmQKD0NoYWxsZW5nZVBp" + 
            "Y2tlZBIvLmJuZXQucHJvdG9jb2wuY2hhbGxlbmdlLkNoYWxsZW5nZVBpY2tl" + 
            "ZFJlcXVlc3QaGi5ibmV0LnByb3RvY29sLk5PX1JFU1BPTlNFIgSAtRgBEmgK" + 
            "EUNoYWxsZW5nZUFuc3dlcmVkEjEuYm5ldC5wcm90b2NvbC5jaGFsbGVuZ2Uu" + 
            "Q2hhbGxlbmdlQW5zd2VyZWRSZXF1ZXN0GhouYm5ldC5wcm90b2NvbC5OT19S" + 
            "RVNQT05TRSIEgLUYAhKGAQoTU2VuZENoYWxsZW5nZVRvVXNlchIzLmJuZXQu" + 
            "cHJvdG9jb2wuY2hhbGxlbmdlLlNlbmRDaGFsbGVuZ2VUb1VzZXJSZXF1ZXN0" + 
            "GjQuYm5ldC5wcm90b2NvbC5jaGFsbGVuZ2UuU2VuZENoYWxsZW5nZVRvVXNl" + 
            "clJlc3BvbnNlIgSAtRgDMnMKD0NoYWxsZW5nZU5vdGlmeRJgCg1DaGFsbGVu" + 
            "Z2VVc2VyEi0uYm5ldC5wcm90b2NvbC5jaGFsbGVuZ2UuQ2hhbGxlbmdlVXNl" + 
            "clJlcXVlc3QaGi5ibmV0LnByb3RvY29sLk5PX1JFU1BPTlNFIgSAtRgBQgOA" + 
            "AQA=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bnet_protocol_challenge_Challenge__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bnet_protocol_challenge_Challenge__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.Challenge, global::bnet.protocol.challenge.Challenge.Builder>(internal__static_bnet_protocol_challenge_Challenge__Descriptor,
                  new string[] { "Type", "Info", "Answer", });
          internal__static_bnet_protocol_challenge_ChallengePickedRequest__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bnet_protocol_challenge_ChallengePickedRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.ChallengePickedRequest, global::bnet.protocol.challenge.ChallengePickedRequest.Builder>(internal__static_bnet_protocol_challenge_ChallengePickedRequest__Descriptor,
                  new string[] { "Challenge", });
          internal__static_bnet_protocol_challenge_ChallengeAnsweredRequest__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bnet_protocol_challenge_ChallengeAnsweredRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.ChallengeAnsweredRequest, global::bnet.protocol.challenge.ChallengeAnsweredRequest.Builder>(internal__static_bnet_protocol_challenge_ChallengeAnsweredRequest__Descriptor,
                  new string[] { "Answer", });
          internal__static_bnet_protocol_challenge_SendChallengeToUserRequest__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bnet_protocol_challenge_SendChallengeToUserRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.SendChallengeToUserRequest, global::bnet.protocol.challenge.SendChallengeToUserRequest.Builder>(internal__static_bnet_protocol_challenge_SendChallengeToUserRequest__Descriptor,
                  new string[] { "PeerId", "GameAccountId", "Challenges", });
          internal__static_bnet_protocol_challenge_SendChallengeToUserResponse__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bnet_protocol_challenge_SendChallengeToUserResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.SendChallengeToUserResponse, global::bnet.protocol.challenge.SendChallengeToUserResponse.Builder>(internal__static_bnet_protocol_challenge_SendChallengeToUserResponse__Descriptor,
                  new string[] { "Challenge", });
          internal__static_bnet_protocol_challenge_ChallengeUserRequest__Descriptor = Descriptor.MessageTypes[5];
          internal__static_bnet_protocol_challenge_ChallengeUserRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.challenge.ChallengeUserRequest, global::bnet.protocol.challenge.ChallengeUserRequest.Builder>(internal__static_bnet_protocol_challenge_ChallengeUserRequest__Descriptor,
                  new string[] { "Challenges", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bnet.protocol.attribute.Proto.Attribute.RegisterAllExtensions(registry);
          global::bnet.protocol.Entity.RegisterAllExtensions(registry);
          global::bnet.protocol.Rpc.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bnet.protocol.attribute.Proto.Attribute.Descriptor, 
            global::bnet.protocol.Entity.Descriptor, 
            global::bnet.protocol.Rpc.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Challenge : pb::GeneratedMessage<Challenge, Challenge.Builder> {
    private Challenge() { }
    private static readonly Challenge defaultInstance = new Challenge().MakeReadOnly();
    private static readonly string[] _challengeFieldNames = new string[] { "answer", "info", "type" };
    private static readonly uint[] _challengeFieldTags = new uint[] { 26, 18, 8 };
    public static Challenge DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Challenge DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Challenge ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_Challenge__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Challenge, Challenge.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_Challenge__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private uint type_;
    public bool HasType {
      get { return hasType; }
    }
    public uint Type {
      get { return type_; }
    }
    
    public const int InfoFieldNumber = 2;
    private bool hasInfo;
    private string info_ = "";
    public bool HasInfo {
      get { return hasInfo; }
    }
    public string Info {
      get { return info_; }
    }
    
    public const int AnswerFieldNumber = 3;
    private bool hasAnswer;
    private string answer_ = "";
    public bool HasAnswer {
      get { return hasAnswer; }
    }
    public string Answer {
      get { return answer_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _challengeFieldNames;
      if (hasType) {
        output.WriteUInt32(1, field_names[2], Type);
      }
      if (hasInfo) {
        output.WriteString(2, field_names[1], Info);
      }
      if (hasAnswer) {
        output.WriteString(3, field_names[0], Answer);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Type);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Info);
        }
        if (hasAnswer) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Answer);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Challenge ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Challenge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Challenge ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Challenge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Challenge ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Challenge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Challenge ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Challenge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Challenge ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Challenge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Challenge MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Challenge prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Challenge, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Challenge cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Challenge result;
      
      private Challenge PrepareBuilder() {
        if (resultIsReadOnly) {
          Challenge original = result;
          result = new Challenge();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Challenge MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.challenge.Challenge.Descriptor; }
      }
      
      public override Challenge DefaultInstanceForType {
        get { return global::bnet.protocol.challenge.Challenge.DefaultInstance; }
      }
      
      public override Challenge BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Challenge) {
          return MergeFrom((Challenge) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Challenge other) {
        if (other == global::bnet.protocol.challenge.Challenge.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasInfo) {
          Info = other.Info;
        }
        if (other.HasAnswer) {
          Answer = other.Answer;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_challengeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _challengeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadUInt32(ref result.type_);
              break;
            }
            case 18: {
              result.hasInfo = input.ReadString(ref result.info_);
              break;
            }
            case 26: {
              result.hasAnswer = input.ReadString(ref result.answer_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public uint Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(uint value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasInfo {
        get { return result.hasInfo; }
      }
      public string Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = "";
        return this;
      }
      
      public bool HasAnswer {
        get { return result.hasAnswer; }
      }
      public string Answer {
        get { return result.Answer; }
        set { SetAnswer(value); }
      }
      public Builder SetAnswer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAnswer = true;
        result.answer_ = value;
        return this;
      }
      public Builder ClearAnswer() {
        PrepareBuilder();
        result.hasAnswer = false;
        result.answer_ = "";
        return this;
      }
    }
    static Challenge() {
      object.ReferenceEquals(global::bnet.protocol.challenge.Proto.Challenge.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengePickedRequest : pb::GeneratedMessage<ChallengePickedRequest, ChallengePickedRequest.Builder> {
    private ChallengePickedRequest() { }
    private static readonly ChallengePickedRequest defaultInstance = new ChallengePickedRequest().MakeReadOnly();
    private static readonly string[] _challengePickedRequestFieldNames = new string[] { "challenge" };
    private static readonly uint[] _challengePickedRequestFieldTags = new uint[] { 8 };
    public static ChallengePickedRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengePickedRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengePickedRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_ChallengePickedRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengePickedRequest, ChallengePickedRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_ChallengePickedRequest__FieldAccessorTable; }
    }
    
    public const int ChallengeFieldNumber = 1;
    private bool hasChallenge;
    private uint challenge_;
    public bool HasChallenge {
      get { return hasChallenge; }
    }
    public uint Challenge {
      get { return challenge_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChallenge) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _challengePickedRequestFieldNames;
      if (hasChallenge) {
        output.WriteUInt32(1, field_names[0], Challenge);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasChallenge) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Challenge);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChallengePickedRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengePickedRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengePickedRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengePickedRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengePickedRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengePickedRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengePickedRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengePickedRequest result;
      
      private ChallengePickedRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengePickedRequest original = result;
          result = new ChallengePickedRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengePickedRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.challenge.ChallengePickedRequest.Descriptor; }
      }
      
      public override ChallengePickedRequest DefaultInstanceForType {
        get { return global::bnet.protocol.challenge.ChallengePickedRequest.DefaultInstance; }
      }
      
      public override ChallengePickedRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChallengePickedRequest) {
          return MergeFrom((ChallengePickedRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChallengePickedRequest other) {
        if (other == global::bnet.protocol.challenge.ChallengePickedRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChallenge) {
          Challenge = other.Challenge;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_challengePickedRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _challengePickedRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChallenge = input.ReadUInt32(ref result.challenge_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChallenge {
        get { return result.hasChallenge; }
      }
      public uint Challenge {
        get { return result.Challenge; }
        set { SetChallenge(value); }
      }
      public Builder SetChallenge(uint value) {
        PrepareBuilder();
        result.hasChallenge = true;
        result.challenge_ = value;
        return this;
      }
      public Builder ClearChallenge() {
        PrepareBuilder();
        result.hasChallenge = false;
        result.challenge_ = 0;
        return this;
      }
    }
    static ChallengePickedRequest() {
      object.ReferenceEquals(global::bnet.protocol.challenge.Proto.Challenge.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeAnsweredRequest : pb::GeneratedMessage<ChallengeAnsweredRequest, ChallengeAnsweredRequest.Builder> {
    private ChallengeAnsweredRequest() { }
    private static readonly ChallengeAnsweredRequest defaultInstance = new ChallengeAnsweredRequest().MakeReadOnly();
    private static readonly string[] _challengeAnsweredRequestFieldNames = new string[] { "answer" };
    private static readonly uint[] _challengeAnsweredRequestFieldTags = new uint[] { 10 };
    public static ChallengeAnsweredRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeAnsweredRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeAnsweredRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_ChallengeAnsweredRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeAnsweredRequest, ChallengeAnsweredRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_ChallengeAnsweredRequest__FieldAccessorTable; }
    }
    
    public const int AnswerFieldNumber = 1;
    private bool hasAnswer;
    private string answer_ = "";
    public bool HasAnswer {
      get { return hasAnswer; }
    }
    public string Answer {
      get { return answer_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAnswer) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _challengeAnsweredRequestFieldNames;
      if (hasAnswer) {
        output.WriteString(1, field_names[0], Answer);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAnswer) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Answer);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChallengeAnsweredRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeAnsweredRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeAnsweredRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeAnsweredRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeAnsweredRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeAnsweredRequest result;
      
      private ChallengeAnsweredRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeAnsweredRequest original = result;
          result = new ChallengeAnsweredRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeAnsweredRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.challenge.ChallengeAnsweredRequest.Descriptor; }
      }
      
      public override ChallengeAnsweredRequest DefaultInstanceForType {
        get { return global::bnet.protocol.challenge.ChallengeAnsweredRequest.DefaultInstance; }
      }
      
      public override ChallengeAnsweredRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChallengeAnsweredRequest) {
          return MergeFrom((ChallengeAnsweredRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChallengeAnsweredRequest other) {
        if (other == global::bnet.protocol.challenge.ChallengeAnsweredRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAnswer) {
          Answer = other.Answer;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_challengeAnsweredRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _challengeAnsweredRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAnswer = input.ReadString(ref result.answer_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAnswer {
        get { return result.hasAnswer; }
      }
      public string Answer {
        get { return result.Answer; }
        set { SetAnswer(value); }
      }
      public Builder SetAnswer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAnswer = true;
        result.answer_ = value;
        return this;
      }
      public Builder ClearAnswer() {
        PrepareBuilder();
        result.hasAnswer = false;
        result.answer_ = "";
        return this;
      }
    }
    static ChallengeAnsweredRequest() {
      object.ReferenceEquals(global::bnet.protocol.challenge.Proto.Challenge.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SendChallengeToUserRequest : pb::GeneratedMessage<SendChallengeToUserRequest, SendChallengeToUserRequest.Builder> {
    private SendChallengeToUserRequest() { }
    private static readonly SendChallengeToUserRequest defaultInstance = new SendChallengeToUserRequest().MakeReadOnly();
    private static readonly string[] _sendChallengeToUserRequestFieldNames = new string[] { "challenges", "game_account_id", "peer_id" };
    private static readonly uint[] _sendChallengeToUserRequestFieldTags = new uint[] { 26, 18, 10 };
    public static SendChallengeToUserRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendChallengeToUserRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendChallengeToUserRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_SendChallengeToUserRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendChallengeToUserRequest, SendChallengeToUserRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_SendChallengeToUserRequest__FieldAccessorTable; }
    }
    
    public const int PeerIdFieldNumber = 1;
    private bool hasPeerId;
    private global::bnet.protocol.ProcessId peerId_;
    public bool HasPeerId {
      get { return hasPeerId; }
    }
    public global::bnet.protocol.ProcessId PeerId {
      get { return peerId_ ?? global::bnet.protocol.ProcessId.DefaultInstance; }
    }
    
    public const int GameAccountIdFieldNumber = 2;
    private bool hasGameAccountId;
    private global::bnet.protocol.EntityId gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bnet.protocol.EntityId GameAccountId {
      get { return gameAccountId_ ?? global::bnet.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ChallengesFieldNumber = 3;
    private pbc::PopsicleList<global::bnet.protocol.challenge.Challenge> challenges_ = new pbc::PopsicleList<global::bnet.protocol.challenge.Challenge>();
    public scg::IList<global::bnet.protocol.challenge.Challenge> ChallengesList {
      get { return challenges_; }
    }
    public int ChallengesCount {
      get { return challenges_.Count; }
    }
    public global::bnet.protocol.challenge.Challenge GetChallenges(int index) {
      return challenges_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasPeerId) {
          if (!PeerId.IsInitialized) return false;
        }
        if (HasGameAccountId) {
          if (!GameAccountId.IsInitialized) return false;
        }
        foreach (global::bnet.protocol.challenge.Challenge element in ChallengesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sendChallengeToUserRequestFieldNames;
      if (hasPeerId) {
        output.WriteMessage(1, field_names[2], PeerId);
      }
      if (hasGameAccountId) {
        output.WriteMessage(2, field_names[1], GameAccountId);
      }
      if (challenges_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], challenges_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPeerId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, PeerId);
        }
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GameAccountId);
        }
        foreach (global::bnet.protocol.challenge.Challenge element in ChallengesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SendChallengeToUserRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendChallengeToUserRequest MakeReadOnly() {
      challenges_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendChallengeToUserRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SendChallengeToUserRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendChallengeToUserRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendChallengeToUserRequest result;
      
      private SendChallengeToUserRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SendChallengeToUserRequest original = result;
          result = new SendChallengeToUserRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendChallengeToUserRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.challenge.SendChallengeToUserRequest.Descriptor; }
      }
      
      public override SendChallengeToUserRequest DefaultInstanceForType {
        get { return global::bnet.protocol.challenge.SendChallengeToUserRequest.DefaultInstance; }
      }
      
      public override SendChallengeToUserRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SendChallengeToUserRequest) {
          return MergeFrom((SendChallengeToUserRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SendChallengeToUserRequest other) {
        if (other == global::bnet.protocol.challenge.SendChallengeToUserRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPeerId) {
          MergePeerId(other.PeerId);
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.challenges_.Count != 0) {
          result.challenges_.Add(other.challenges_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sendChallengeToUserRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sendChallengeToUserRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.ProcessId.Builder subBuilder = global::bnet.protocol.ProcessId.CreateBuilder();
              if (result.hasPeerId) {
                subBuilder.MergeFrom(PeerId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PeerId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bnet.protocol.EntityId.Builder subBuilder = global::bnet.protocol.EntityId.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.challenges_, global::bnet.protocol.challenge.Challenge.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPeerId {
       get { return result.hasPeerId; }
      }
      public global::bnet.protocol.ProcessId PeerId {
        get { return result.PeerId; }
        set { SetPeerId(value); }
      }
      public Builder SetPeerId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPeerId = true;
        result.peerId_ = value;
        return this;
      }
      public Builder SetPeerId(global::bnet.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPeerId = true;
        result.peerId_ = builderForValue.Build();
        return this;
      }
      public Builder MergePeerId(global::bnet.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPeerId &&
            result.peerId_ != global::bnet.protocol.ProcessId.DefaultInstance) {
            result.peerId_ = global::bnet.protocol.ProcessId.CreateBuilder(result.peerId_).MergeFrom(value).BuildPartial();
        } else {
          result.peerId_ = value;
        }
        result.hasPeerId = true;
        return this;
      }
      public Builder ClearPeerId() {
        PrepareBuilder();
        result.hasPeerId = false;
        result.peerId_ = null;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::bnet.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bnet.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bnet.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::bnet.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bnet.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bnet.protocol.challenge.Challenge> ChallengesList {
        get { return PrepareBuilder().challenges_; }
      }
      public int ChallengesCount {
        get { return result.ChallengesCount; }
      }
      public global::bnet.protocol.challenge.Challenge GetChallenges(int index) {
        return result.GetChallenges(index);
      }
      public Builder SetChallenges(int index, global::bnet.protocol.challenge.Challenge value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challenges_[index] = value;
        return this;
      }
      public Builder SetChallenges(int index, global::bnet.protocol.challenge.Challenge.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challenges_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChallenges(global::bnet.protocol.challenge.Challenge value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challenges_.Add(value);
        return this;
      }
      public Builder AddChallenges(global::bnet.protocol.challenge.Challenge.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challenges_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChallenges(scg::IEnumerable<global::bnet.protocol.challenge.Challenge> values) {
        PrepareBuilder();
        result.challenges_.Add(values);
        return this;
      }
      public Builder ClearChallenges() {
        PrepareBuilder();
        result.challenges_.Clear();
        return this;
      }
    }
    static SendChallengeToUserRequest() {
      object.ReferenceEquals(global::bnet.protocol.challenge.Proto.Challenge.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SendChallengeToUserResponse : pb::GeneratedMessage<SendChallengeToUserResponse, SendChallengeToUserResponse.Builder> {
    private SendChallengeToUserResponse() { }
    private static readonly SendChallengeToUserResponse defaultInstance = new SendChallengeToUserResponse().MakeReadOnly();
    private static readonly string[] _sendChallengeToUserResponseFieldNames = new string[] { "challenge" };
    private static readonly uint[] _sendChallengeToUserResponseFieldTags = new uint[] { 10 };
    public static SendChallengeToUserResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendChallengeToUserResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendChallengeToUserResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_SendChallengeToUserResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendChallengeToUserResponse, SendChallengeToUserResponse.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_SendChallengeToUserResponse__FieldAccessorTable; }
    }
    
    public const int ChallengeFieldNumber = 1;
    private bool hasChallenge;
    private global::bnet.protocol.challenge.Challenge challenge_;
    public bool HasChallenge {
      get { return hasChallenge; }
    }
    public global::bnet.protocol.challenge.Challenge Challenge {
      get { return challenge_ ?? global::bnet.protocol.challenge.Challenge.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChallenge) return false;
        if (!Challenge.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sendChallengeToUserResponseFieldNames;
      if (hasChallenge) {
        output.WriteMessage(1, field_names[0], Challenge);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasChallenge) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Challenge);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SendChallengeToUserResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendChallengeToUserResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendChallengeToUserResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SendChallengeToUserResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendChallengeToUserResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendChallengeToUserResponse result;
      
      private SendChallengeToUserResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          SendChallengeToUserResponse original = result;
          result = new SendChallengeToUserResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendChallengeToUserResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.challenge.SendChallengeToUserResponse.Descriptor; }
      }
      
      public override SendChallengeToUserResponse DefaultInstanceForType {
        get { return global::bnet.protocol.challenge.SendChallengeToUserResponse.DefaultInstance; }
      }
      
      public override SendChallengeToUserResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SendChallengeToUserResponse) {
          return MergeFrom((SendChallengeToUserResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SendChallengeToUserResponse other) {
        if (other == global::bnet.protocol.challenge.SendChallengeToUserResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChallenge) {
          MergeChallenge(other.Challenge);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sendChallengeToUserResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sendChallengeToUserResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bnet.protocol.challenge.Challenge.Builder subBuilder = global::bnet.protocol.challenge.Challenge.CreateBuilder();
              if (result.hasChallenge) {
                subBuilder.MergeFrom(Challenge);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Challenge = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChallenge {
       get { return result.hasChallenge; }
      }
      public global::bnet.protocol.challenge.Challenge Challenge {
        get { return result.Challenge; }
        set { SetChallenge(value); }
      }
      public Builder SetChallenge(global::bnet.protocol.challenge.Challenge value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChallenge = true;
        result.challenge_ = value;
        return this;
      }
      public Builder SetChallenge(global::bnet.protocol.challenge.Challenge.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChallenge = true;
        result.challenge_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChallenge(global::bnet.protocol.challenge.Challenge value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChallenge &&
            result.challenge_ != global::bnet.protocol.challenge.Challenge.DefaultInstance) {
            result.challenge_ = global::bnet.protocol.challenge.Challenge.CreateBuilder(result.challenge_).MergeFrom(value).BuildPartial();
        } else {
          result.challenge_ = value;
        }
        result.hasChallenge = true;
        return this;
      }
      public Builder ClearChallenge() {
        PrepareBuilder();
        result.hasChallenge = false;
        result.challenge_ = null;
        return this;
      }
    }
    static SendChallengeToUserResponse() {
      object.ReferenceEquals(global::bnet.protocol.challenge.Proto.Challenge.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeUserRequest : pb::GeneratedMessage<ChallengeUserRequest, ChallengeUserRequest.Builder> {
    private ChallengeUserRequest() { }
    private static readonly ChallengeUserRequest defaultInstance = new ChallengeUserRequest().MakeReadOnly();
    private static readonly string[] _challengeUserRequestFieldNames = new string[] { "challenges" };
    private static readonly uint[] _challengeUserRequestFieldTags = new uint[] { 10 };
    public static ChallengeUserRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeUserRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeUserRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_ChallengeUserRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeUserRequest, ChallengeUserRequest.Builder> InternalFieldAccessors {
      get { return global::bnet.protocol.challenge.Proto.Challenge.internal__static_bnet_protocol_challenge_ChallengeUserRequest__FieldAccessorTable; }
    }
    
    public const int ChallengesFieldNumber = 1;
    private pbc::PopsicleList<global::bnet.protocol.challenge.Challenge> challenges_ = new pbc::PopsicleList<global::bnet.protocol.challenge.Challenge>();
    public scg::IList<global::bnet.protocol.challenge.Challenge> ChallengesList {
      get { return challenges_; }
    }
    public int ChallengesCount {
      get { return challenges_.Count; }
    }
    public global::bnet.protocol.challenge.Challenge GetChallenges(int index) {
      return challenges_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bnet.protocol.challenge.Challenge element in ChallengesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _challengeUserRequestFieldNames;
      if (challenges_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], challenges_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bnet.protocol.challenge.Challenge element in ChallengesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChallengeUserRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeUserRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeUserRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeUserRequest MakeReadOnly() {
      challenges_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeUserRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeUserRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeUserRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeUserRequest result;
      
      private ChallengeUserRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeUserRequest original = result;
          result = new ChallengeUserRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeUserRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bnet.protocol.challenge.ChallengeUserRequest.Descriptor; }
      }
      
      public override ChallengeUserRequest DefaultInstanceForType {
        get { return global::bnet.protocol.challenge.ChallengeUserRequest.DefaultInstance; }
      }
      
      public override ChallengeUserRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChallengeUserRequest) {
          return MergeFrom((ChallengeUserRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChallengeUserRequest other) {
        if (other == global::bnet.protocol.challenge.ChallengeUserRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.challenges_.Count != 0) {
          result.challenges_.Add(other.challenges_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_challengeUserRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _challengeUserRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.challenges_, global::bnet.protocol.challenge.Challenge.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bnet.protocol.challenge.Challenge> ChallengesList {
        get { return PrepareBuilder().challenges_; }
      }
      public int ChallengesCount {
        get { return result.ChallengesCount; }
      }
      public global::bnet.protocol.challenge.Challenge GetChallenges(int index) {
        return result.GetChallenges(index);
      }
      public Builder SetChallenges(int index, global::bnet.protocol.challenge.Challenge value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challenges_[index] = value;
        return this;
      }
      public Builder SetChallenges(int index, global::bnet.protocol.challenge.Challenge.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challenges_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChallenges(global::bnet.protocol.challenge.Challenge value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challenges_.Add(value);
        return this;
      }
      public Builder AddChallenges(global::bnet.protocol.challenge.Challenge.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challenges_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChallenges(scg::IEnumerable<global::bnet.protocol.challenge.Challenge> values) {
        PrepareBuilder();
        result.challenges_.Add(values);
        return this;
      }
      public Builder ClearChallenges() {
        PrepareBuilder();
        result.challenges_.Clear();
        return this;
      }
    }
    static ChallengeUserRequest() {
      object.ReferenceEquals(global::bnet.protocol.challenge.Proto.Challenge.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class ChallengeService : pb::IService {
    public abstract void ChallengePicked(
        pb::IRpcController controller,
        global::bnet.protocol.challenge.ChallengePickedRequest request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    public abstract void ChallengeAnswered(
        pb::IRpcController controller,
        global::bnet.protocol.challenge.ChallengeAnsweredRequest request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    public abstract void SendChallengeToUser(
        pb::IRpcController controller,
        global::bnet.protocol.challenge.SendChallengeToUserRequest request,
        global::System.Action<global::bnet.protocol.challenge.SendChallengeToUserResponse> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.Challenge.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.ChallengePicked(controller, (global::bnet.protocol.challenge.ChallengePickedRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        case 1:
          this.ChallengeAnswered(controller, (global::bnet.protocol.challenge.ChallengeAnsweredRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        case 2:
          this.SendChallengeToUser(controller, (global::bnet.protocol.challenge.SendChallengeToUserRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.challenge.SendChallengeToUserResponse>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.challenge.ChallengePickedRequest.DefaultInstance;
        case 1:
          return global::bnet.protocol.challenge.ChallengeAnsweredRequest.DefaultInstance;
        case 2:
          return global::bnet.protocol.challenge.SendChallengeToUserRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        case 1:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        case 2:
          return global::bnet.protocol.challenge.SendChallengeToUserResponse.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.challenge.ChallengeService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void ChallengePicked(
          pb::IRpcController controller,
          global::bnet.protocol.challenge.ChallengePickedRequest request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void ChallengeAnswered(
          pb::IRpcController controller,
          global::bnet.protocol.challenge.ChallengeAnsweredRequest request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void SendChallengeToUser(
          pb::IRpcController controller,
          global::bnet.protocol.challenge.SendChallengeToUserRequest request,
          global::System.Action<global::bnet.protocol.challenge.SendChallengeToUserResponse> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bnet.protocol.challenge.SendChallengeToUserResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.challenge.SendChallengeToUserResponse, global::bnet.protocol.challenge.SendChallengeToUserResponse.Builder>(done, global::bnet.protocol.challenge.SendChallengeToUserResponse.DefaultInstance));
      }
    }
  }
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class ChallengeNotify : pb::IService {
    public abstract void ChallengeUser(
        pb::IRpcController controller,
        global::bnet.protocol.challenge.ChallengeUserRequest request,
        global::System.Action<global::bnet.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.Challenge.Descriptor.Services[1]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.ChallengeUser(controller, (global::bnet.protocol.challenge.ChallengeUserRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bnet.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.challenge.ChallengeUserRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bnet.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bnet.protocol.challenge.ChallengeNotify {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void ChallengeUser(
          pb::IRpcController controller,
          global::bnet.protocol.challenge.ChallengeUserRequest request,
          global::System.Action<global::bnet.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bnet.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bnet.protocol.NO_RESPONSE, global::bnet.protocol.NO_RESPONSE.Builder>(done, global::bnet.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
