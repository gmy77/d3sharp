// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Client {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Settings {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Client_ToonSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Client.ToonSettings, global::D3.Client.ToonSettings.Builder> internal__static_D3_Client_ToonSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Client_GameAccountSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Client.GameAccountSettings, global::D3.Client.GameAccountSettings.Builder> internal__static_D3_Client_GameAccountSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Client_Preferences__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Client.Preferences, global::D3.Client.Preferences.Builder> internal__static_D3_Client_Preferences__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Settings() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5TZXR0aW5ncy5wcm90bxIJRDMuQ2xpZW50IiMKDFRvb25TZXR0aW5ncxIT" + 
          "Cgh1aV9mbGFncxgBIAEoDToBMCJuChNHYW1lQWNjb3VudFNldHRpbmdzEhgK" + 
          "DXVzZV9sYXN0X2hlcm8YASABKAU6ATASHQoSc2hvd19vZmZsaW5lX3RvYXN0" + 
          "GAIgASgFOgEwEh4KFnJtdF9sYXN0X3VzZWRfY3VycmVuY3kYAyABKAkiSQoL" + 
          "UHJlZmVyZW5jZXMSDQoFa2V5XzEYASABKAUSDQoFa2V5XzIYAiABKAUSDQoF" + 
          "a2V5XzMYAyABKAUSDQoFa2V5XzQYBCABKAU=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Client_ToonSettings__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Client_ToonSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Client.ToonSettings, global::D3.Client.ToonSettings.Builder>(internal__static_D3_Client_ToonSettings__Descriptor,
                new string[] { "UiFlags", });
        internal__static_D3_Client_GameAccountSettings__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Client_GameAccountSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Client.GameAccountSettings, global::D3.Client.GameAccountSettings.Builder>(internal__static_D3_Client_GameAccountSettings__Descriptor,
                new string[] { "UseLastHero", "ShowOfflineToast", "RmtLastUsedCurrency", });
        internal__static_D3_Client_Preferences__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Client_Preferences__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Client.Preferences, global::D3.Client.Preferences.Builder>(internal__static_D3_Client_Preferences__Descriptor,
                new string[] { "Key1", "Key2", "Key3", "Key4", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ToonSettings : pb::GeneratedMessage<ToonSettings, ToonSettings.Builder> {
    private ToonSettings() { }
    private static readonly ToonSettings defaultInstance = new ToonSettings().MakeReadOnly();
    private static readonly string[] _toonSettingsFieldNames = new string[] { "ui_flags" };
    private static readonly uint[] _toonSettingsFieldTags = new uint[] { 8 };
    public static ToonSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ToonSettings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ToonSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Client.Settings.internal__static_D3_Client_ToonSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ToonSettings, ToonSettings.Builder> InternalFieldAccessors {
      get { return global::D3.Client.Settings.internal__static_D3_Client_ToonSettings__FieldAccessorTable; }
    }
    
    public const int UiFlagsFieldNumber = 1;
    private bool hasUiFlags;
    private uint uiFlags_;
    public bool HasUiFlags {
      get { return hasUiFlags; }
    }
    public uint UiFlags {
      get { return uiFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _toonSettingsFieldNames;
      if (hasUiFlags) {
        output.WriteUInt32(1, field_names[0], UiFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUiFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, UiFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ToonSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ToonSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ToonSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ToonSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ToonSettings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ToonSettings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ToonSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ToonSettings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ToonSettings result;
      
      private ToonSettings PrepareBuilder() {
        if (resultIsReadOnly) {
          ToonSettings original = result;
          result = new ToonSettings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ToonSettings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Client.ToonSettings.Descriptor; }
      }
      
      public override ToonSettings DefaultInstanceForType {
        get { return global::D3.Client.ToonSettings.DefaultInstance; }
      }
      
      public override ToonSettings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ToonSettings) {
          return MergeFrom((ToonSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ToonSettings other) {
        if (other == global::D3.Client.ToonSettings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUiFlags) {
          UiFlags = other.UiFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_toonSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _toonSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUiFlags = input.ReadUInt32(ref result.uiFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUiFlags {
        get { return result.hasUiFlags; }
      }
      public uint UiFlags {
        get { return result.UiFlags; }
        set { SetUiFlags(value); }
      }
      public Builder SetUiFlags(uint value) {
        PrepareBuilder();
        result.hasUiFlags = true;
        result.uiFlags_ = value;
        return this;
      }
      public Builder ClearUiFlags() {
        PrepareBuilder();
        result.hasUiFlags = false;
        result.uiFlags_ = 0;
        return this;
      }
    }
    static ToonSettings() {
      object.ReferenceEquals(global::D3.Client.Settings.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameAccountSettings : pb::GeneratedMessage<GameAccountSettings, GameAccountSettings.Builder> {
    private GameAccountSettings() { }
    private static readonly GameAccountSettings defaultInstance = new GameAccountSettings().MakeReadOnly();
    private static readonly string[] _gameAccountSettingsFieldNames = new string[] { "rmt_last_used_currency", "show_offline_toast", "use_last_hero" };
    private static readonly uint[] _gameAccountSettingsFieldTags = new uint[] { 26, 16, 8 };
    public static GameAccountSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameAccountSettings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameAccountSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Client.Settings.internal__static_D3_Client_GameAccountSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameAccountSettings, GameAccountSettings.Builder> InternalFieldAccessors {
      get { return global::D3.Client.Settings.internal__static_D3_Client_GameAccountSettings__FieldAccessorTable; }
    }
    
    public const int UseLastHeroFieldNumber = 1;
    private bool hasUseLastHero;
    private int useLastHero_;
    public bool HasUseLastHero {
      get { return hasUseLastHero; }
    }
    public int UseLastHero {
      get { return useLastHero_; }
    }
    
    public const int ShowOfflineToastFieldNumber = 2;
    private bool hasShowOfflineToast;
    private int showOfflineToast_;
    public bool HasShowOfflineToast {
      get { return hasShowOfflineToast; }
    }
    public int ShowOfflineToast {
      get { return showOfflineToast_; }
    }
    
    public const int RmtLastUsedCurrencyFieldNumber = 3;
    private bool hasRmtLastUsedCurrency;
    private string rmtLastUsedCurrency_ = "";
    public bool HasRmtLastUsedCurrency {
      get { return hasRmtLastUsedCurrency; }
    }
    public string RmtLastUsedCurrency {
      get { return rmtLastUsedCurrency_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameAccountSettingsFieldNames;
      if (hasUseLastHero) {
        output.WriteInt32(1, field_names[2], UseLastHero);
      }
      if (hasShowOfflineToast) {
        output.WriteInt32(2, field_names[1], ShowOfflineToast);
      }
      if (hasRmtLastUsedCurrency) {
        output.WriteString(3, field_names[0], RmtLastUsedCurrency);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUseLastHero) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, UseLastHero);
        }
        if (hasShowOfflineToast) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ShowOfflineToast);
        }
        if (hasRmtLastUsedCurrency) {
          size += pb::CodedOutputStream.ComputeStringSize(3, RmtLastUsedCurrency);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameAccountSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameAccountSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameAccountSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameAccountSettings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameAccountSettings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameAccountSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameAccountSettings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameAccountSettings result;
      
      private GameAccountSettings PrepareBuilder() {
        if (resultIsReadOnly) {
          GameAccountSettings original = result;
          result = new GameAccountSettings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameAccountSettings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Client.GameAccountSettings.Descriptor; }
      }
      
      public override GameAccountSettings DefaultInstanceForType {
        get { return global::D3.Client.GameAccountSettings.DefaultInstance; }
      }
      
      public override GameAccountSettings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameAccountSettings) {
          return MergeFrom((GameAccountSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameAccountSettings other) {
        if (other == global::D3.Client.GameAccountSettings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUseLastHero) {
          UseLastHero = other.UseLastHero;
        }
        if (other.HasShowOfflineToast) {
          ShowOfflineToast = other.ShowOfflineToast;
        }
        if (other.HasRmtLastUsedCurrency) {
          RmtLastUsedCurrency = other.RmtLastUsedCurrency;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameAccountSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameAccountSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUseLastHero = input.ReadInt32(ref result.useLastHero_);
              break;
            }
            case 16: {
              result.hasShowOfflineToast = input.ReadInt32(ref result.showOfflineToast_);
              break;
            }
            case 26: {
              result.hasRmtLastUsedCurrency = input.ReadString(ref result.rmtLastUsedCurrency_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUseLastHero {
        get { return result.hasUseLastHero; }
      }
      public int UseLastHero {
        get { return result.UseLastHero; }
        set { SetUseLastHero(value); }
      }
      public Builder SetUseLastHero(int value) {
        PrepareBuilder();
        result.hasUseLastHero = true;
        result.useLastHero_ = value;
        return this;
      }
      public Builder ClearUseLastHero() {
        PrepareBuilder();
        result.hasUseLastHero = false;
        result.useLastHero_ = 0;
        return this;
      }
      
      public bool HasShowOfflineToast {
        get { return result.hasShowOfflineToast; }
      }
      public int ShowOfflineToast {
        get { return result.ShowOfflineToast; }
        set { SetShowOfflineToast(value); }
      }
      public Builder SetShowOfflineToast(int value) {
        PrepareBuilder();
        result.hasShowOfflineToast = true;
        result.showOfflineToast_ = value;
        return this;
      }
      public Builder ClearShowOfflineToast() {
        PrepareBuilder();
        result.hasShowOfflineToast = false;
        result.showOfflineToast_ = 0;
        return this;
      }
      
      public bool HasRmtLastUsedCurrency {
        get { return result.hasRmtLastUsedCurrency; }
      }
      public string RmtLastUsedCurrency {
        get { return result.RmtLastUsedCurrency; }
        set { SetRmtLastUsedCurrency(value); }
      }
      public Builder SetRmtLastUsedCurrency(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRmtLastUsedCurrency = true;
        result.rmtLastUsedCurrency_ = value;
        return this;
      }
      public Builder ClearRmtLastUsedCurrency() {
        PrepareBuilder();
        result.hasRmtLastUsedCurrency = false;
        result.rmtLastUsedCurrency_ = "";
        return this;
      }
    }
    static GameAccountSettings() {
      object.ReferenceEquals(global::D3.Client.Settings.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Preferences : pb::GeneratedMessage<Preferences, Preferences.Builder> {
    private Preferences() { }
    private static readonly Preferences defaultInstance = new Preferences().MakeReadOnly();
    private static readonly string[] _preferencesFieldNames = new string[] { "key_1", "key_2", "key_3", "key_4" };
    private static readonly uint[] _preferencesFieldTags = new uint[] { 8, 16, 24, 32 };
    public static Preferences DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Preferences DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Preferences ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Client.Settings.internal__static_D3_Client_Preferences__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Preferences, Preferences.Builder> InternalFieldAccessors {
      get { return global::D3.Client.Settings.internal__static_D3_Client_Preferences__FieldAccessorTable; }
    }
    
    public const int Key1FieldNumber = 1;
    private bool hasKey1;
    private int key1_;
    public bool HasKey1 {
      get { return hasKey1; }
    }
    public int Key1 {
      get { return key1_; }
    }
    
    public const int Key2FieldNumber = 2;
    private bool hasKey2;
    private int key2_;
    public bool HasKey2 {
      get { return hasKey2; }
    }
    public int Key2 {
      get { return key2_; }
    }
    
    public const int Key3FieldNumber = 3;
    private bool hasKey3;
    private int key3_;
    public bool HasKey3 {
      get { return hasKey3; }
    }
    public int Key3 {
      get { return key3_; }
    }
    
    public const int Key4FieldNumber = 4;
    private bool hasKey4;
    private int key4_;
    public bool HasKey4 {
      get { return hasKey4; }
    }
    public int Key4 {
      get { return key4_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _preferencesFieldNames;
      if (hasKey1) {
        output.WriteInt32(1, field_names[0], Key1);
      }
      if (hasKey2) {
        output.WriteInt32(2, field_names[1], Key2);
      }
      if (hasKey3) {
        output.WriteInt32(3, field_names[2], Key3);
      }
      if (hasKey4) {
        output.WriteInt32(4, field_names[3], Key4);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKey1) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Key1);
        }
        if (hasKey2) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Key2);
        }
        if (hasKey3) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Key3);
        }
        if (hasKey4) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Key4);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Preferences ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Preferences ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Preferences ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Preferences ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Preferences ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Preferences ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Preferences ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Preferences ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Preferences ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Preferences ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Preferences MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Preferences prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Preferences, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Preferences cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Preferences result;
      
      private Preferences PrepareBuilder() {
        if (resultIsReadOnly) {
          Preferences original = result;
          result = new Preferences();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Preferences MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Client.Preferences.Descriptor; }
      }
      
      public override Preferences DefaultInstanceForType {
        get { return global::D3.Client.Preferences.DefaultInstance; }
      }
      
      public override Preferences BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Preferences) {
          return MergeFrom((Preferences) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Preferences other) {
        if (other == global::D3.Client.Preferences.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey1) {
          Key1 = other.Key1;
        }
        if (other.HasKey2) {
          Key2 = other.Key2;
        }
        if (other.HasKey3) {
          Key3 = other.Key3;
        }
        if (other.HasKey4) {
          Key4 = other.Key4;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_preferencesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _preferencesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKey1 = input.ReadInt32(ref result.key1_);
              break;
            }
            case 16: {
              result.hasKey2 = input.ReadInt32(ref result.key2_);
              break;
            }
            case 24: {
              result.hasKey3 = input.ReadInt32(ref result.key3_);
              break;
            }
            case 32: {
              result.hasKey4 = input.ReadInt32(ref result.key4_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey1 {
        get { return result.hasKey1; }
      }
      public int Key1 {
        get { return result.Key1; }
        set { SetKey1(value); }
      }
      public Builder SetKey1(int value) {
        PrepareBuilder();
        result.hasKey1 = true;
        result.key1_ = value;
        return this;
      }
      public Builder ClearKey1() {
        PrepareBuilder();
        result.hasKey1 = false;
        result.key1_ = 0;
        return this;
      }
      
      public bool HasKey2 {
        get { return result.hasKey2; }
      }
      public int Key2 {
        get { return result.Key2; }
        set { SetKey2(value); }
      }
      public Builder SetKey2(int value) {
        PrepareBuilder();
        result.hasKey2 = true;
        result.key2_ = value;
        return this;
      }
      public Builder ClearKey2() {
        PrepareBuilder();
        result.hasKey2 = false;
        result.key2_ = 0;
        return this;
      }
      
      public bool HasKey3 {
        get { return result.hasKey3; }
      }
      public int Key3 {
        get { return result.Key3; }
        set { SetKey3(value); }
      }
      public Builder SetKey3(int value) {
        PrepareBuilder();
        result.hasKey3 = true;
        result.key3_ = value;
        return this;
      }
      public Builder ClearKey3() {
        PrepareBuilder();
        result.hasKey3 = false;
        result.key3_ = 0;
        return this;
      }
      
      public bool HasKey4 {
        get { return result.hasKey4; }
      }
      public int Key4 {
        get { return result.Key4; }
        set { SetKey4(value); }
      }
      public Builder SetKey4(int value) {
        PrepareBuilder();
        result.hasKey4 = true;
        result.key4_ = value;
        return this;
      }
      public Builder ClearKey4() {
        PrepareBuilder();
        result.hasKey4 = false;
        result.key4_ = 0;
        return this;
      }
    }
    static Preferences() {
      object.ReferenceEquals(global::D3.Client.Settings.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
