// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Client {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Settings {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Client_ToonSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Client.ToonSettings, global::D3.Client.ToonSettings.Builder> internal__static_D3_Client_ToonSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Client_ActionBinding__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Client.ActionBinding, global::D3.Client.ActionBinding.Builder> internal__static_D3_Client_ActionBinding__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Client_GameAccountSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Client.GameAccountSettings, global::D3.Client.GameAccountSettings.Builder> internal__static_D3_Client_GameAccountSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Client_Preferences__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Client.Preferences, global::D3.Client.Preferences.Builder> internal__static_D3_Client_Preferences__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Settings() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5TZXR0aW5ncy5wcm90bxIJRDMuQ2xpZW50IiMKDFRvb25TZXR0aW5ncxIT" + 
          "Cgh1aV9mbGFncxgBIAEoDToBMCJ3Cg1BY3Rpb25CaW5kaW5nEhEKBWtleV8x" + 
          "GAEgAigFOgItMRIfChRrZXlfbW9kaWZpZXJfZmxhZ3NfMRgCIAIoDToBMBIR" + 
          "CgVrZXlfMhgDIAIoBToCLTESHwoUa2V5X21vZGlmaWVyX2ZsYWdzXzIYBCAC" + 
          "KA06ATAiuAEKE0dhbWVBY2NvdW50U2V0dGluZ3MSGAoNdXNlX2xhc3RfaGVy" + 
          "bxgBIAEoBToBMBIdChJzaG93X29mZmxpbmVfdG9hc3QYAiABKAU6ATASHgoW" + 
          "cm10X2xhc3RfdXNlZF9jdXJyZW5jeRgDIAEoCRIoCh1jb29wX2xhc3RfY3Jl" + 
          "YXRlX2dhbWVfcHJpdmFjeRgEIAEoBToBMRIeChZybXRfcHJlZmVycmVkX2N1" + 
          "cnJlbmN5GAUgASgJIuQiCgtQcmVmZXJlbmNlcxIPCgd2ZXJzaW9uGAEgAigF" + 
          "EhAKBWZsYWdzGAIgASgNOgEwEiIKF2l0ZW1zX29uX2dyb3VuZF9zZXR0aW5n" + 
          "GAMgASgNOgEwEjoKGGFjdGlvbl9iaW5kaW5nX2ludmVudG9yeRgEIAEoCzIY" + 
          "LkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEjkKF2FjdGlvbl9iaW5kaW5nX2hp" + 
          "cmVsaW5nGAUgASgLMhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcSNwoVYWN0" + 
          "aW9uX2JpbmRpbmdfc2tpbGxzGAYgASgLMhguRDMuQ2xpZW50LkFjdGlvbkJp" + 
          "bmRpbmcSNwoVYWN0aW9uX2JpbmRpbmdfcXVlc3RzGEogASgLMhguRDMuQ2xp" + 
          "ZW50LkFjdGlvbkJpbmRpbmcSNQoTYWN0aW9uX2JpbmRpbmdfbG9yZRgIIAEo" + 
          "CzIYLkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEjcKFWFjdGlvbl9iaW5kaW5n" + 
          "X3NvY2lhbBgJIAEoCzIYLkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEjkKF2Fj" + 
          "dGlvbl9iaW5kaW5nX3dvcmxkbWFwGAogASgLMhguRDMuQ2xpZW50LkFjdGlv" + 
          "bkJpbmRpbmcSNQoTYWN0aW9uX2JpbmRpbmdfaGVscBgLIAEoCzIYLkQzLkNs" + 
          "aWVudC5BY3Rpb25CaW5kaW5nEj4KHGFjdGlvbl9iaW5kaW5nX3JlY2VudHBs" + 
          "YXllcnMYDCABKAsyGC5EMy5DbGllbnQuQWN0aW9uQmluZGluZxI6ChhhY3Rp" + 
          "b25fYmluZGluZ19jaGF0bG9iYnkYDSABKAsyGC5EMy5DbGllbnQuQWN0aW9u" + 
          "QmluZGluZxI9ChthY3Rpb25fYmluZGluZ19hY2hpZXZlbWVudHMYDiABKAsy" + 
          "GC5EMy5DbGllbnQuQWN0aW9uQmluZGluZxI4ChZhY3Rpb25fYmluZGluZ19w" + 
          "cm9maWxlGA8gASgLMhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcSPQobYWN0" + 
          "aW9uX2JpbmRpbmdfYXVjdGlvbmhvdXNlGBAgASgLMhguRDMuQ2xpZW50LkFj" + 
          "dGlvbkJpbmRpbmcSNgoUYWN0aW9uX2JpbmRpbmdfY2xlYXIYESABKAsyGC5E" + 
          "My5DbGllbnQuQWN0aW9uQmluZGluZxI4ChZhY3Rpb25fYmluZGluZ19jb25z" + 
          "b2xlGBIgASgLMhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcSNAoSYWN0aW9u" + 
          "X2JpbmRpbmdfbWFwGBMgASgLMhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcS" + 
          "OwoZYWN0aW9uX2JpbmRpbmdfc2tpbGxjeWNsZRgUIAEoCzIYLkQzLkNsaWVu" + 
          "dC5BY3Rpb25CaW5kaW5nEkQKImFjdGlvbl9iaW5kaW5nX3RvZ2dsZW1vbnN0" + 
          "ZXJocGJhcnMYFSABKAsyGC5EMy5DbGllbnQuQWN0aW9uQmluZGluZxJDCiFh" + 
          "Y3Rpb25fYmluZGluZ190b2dnbGVwbGF5ZXJocGJhcnMYFiABKAsyGC5EMy5D" + 
          "bGllbnQuQWN0aW9uQmluZGluZxJECiJhY3Rpb25fYmluZGluZ190b2dnbGVk" + 
          "YW1hZ2VudW1iZXJzGBcgASgLMhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcS" + 
          "RAoiYWN0aW9uX2JpbmRpbmdfdG9nZ2xlaXRlbXNvbmdyb3VuZBgYIAEoCzIY" + 
          "LkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEjoKGGFjdGlvbl9iaW5kaW5nX3Jl" + 
          "d2hpc3BlchgZIAEoCzIYLkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEj0KG2Fj" + 
          "dGlvbl9iaW5kaW5nX3doaXNwZXJyZXBseRgaIAEoCzIYLkQzLkNsaWVudC5B" + 
          "Y3Rpb25CaW5kaW5nEjkKF2FjdGlvbl9iaW5kaW5nX3ZvaWNlcHR0GBsgASgL" + 
          "MhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcSNwoVYWN0aW9uX2JpbmRpbmdf" + 
          "c2tpbGwxGBwgASgLMhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcSNwoVYWN0" + 
          "aW9uX2JpbmRpbmdfc2tpbGwyGB0gASgLMhguRDMuQ2xpZW50LkFjdGlvbkJp" + 
          "bmRpbmcSNwoVYWN0aW9uX2JpbmRpbmdfc2tpbGwzGB4gASgLMhguRDMuQ2xp" + 
          "ZW50LkFjdGlvbkJpbmRpbmcSNwoVYWN0aW9uX2JpbmRpbmdfc2tpbGw0GB8g" + 
          "ASgLMhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcSNwoVYWN0aW9uX2JpbmRp" + 
          "bmdfcG90aW9uGCAgASgLMhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcSOwoZ" + 
          "YWN0aW9uX2JpbmRpbmdfYmFubmVyZHJvcBghIAEoCzIYLkQzLkNsaWVudC5B" + 
          "Y3Rpb25CaW5kaW5nEjUKE2FjdGlvbl9iaW5kaW5nX3pvb20YIiABKAsyGC5E" + 
          "My5DbGllbnQuQWN0aW9uQmluZGluZxI8ChphY3Rpb25fYmluZGluZ19lbW90" + 
          "ZWZvbGxvdxgjIAEoCzIYLkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEjoKGGFj" + 
          "dGlvbl9iaW5kaW5nX2Vtb3RlZ2l2ZRgkIAEoCzIYLkQzLkNsaWVudC5BY3Rp" + 
          "b25CaW5kaW5nEjwKGmFjdGlvbl9iaW5kaW5nX2Vtb3RldGhhbmtzGCUgASgL" + 
          "MhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcSOwoZYWN0aW9uX2JpbmRpbmdf" + 
          "ZW1vdGVzb3JyeRgmIAEoCzIYLkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEjkK" + 
          "F2FjdGlvbl9iaW5kaW5nX2Vtb3RlYnllGCcgASgLMhguRDMuQ2xpZW50LkFj" + 
          "dGlvbkJpbmRpbmcSOQoXYWN0aW9uX2JpbmRpbmdfZW1vdGVkaWUYKCABKAsy" + 
          "GC5EMy5DbGllbnQuQWN0aW9uQmluZGluZxI5ChdhY3Rpb25fYmluZGluZ19l" + 
          "bW90ZXJ1bhgpIAEoCzIYLkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEjoKGGFj" + 
          "dGlvbl9iaW5kaW5nX2Vtb3Rld2FpdBgqIAEoCzIYLkQzLkNsaWVudC5BY3Rp" + 
          "b25CaW5kaW5nEjgKFmFjdGlvbl9iaW5kaW5nX2Vtb3RlZ28YKyABKAsyGC5E" + 
          "My5DbGllbnQuQWN0aW9uQmluZGluZxI6ChhhY3Rpb25fYmluZGluZ19lbW90" + 
          "ZWhlbHAYLCABKAsyGC5EMy5DbGllbnQuQWN0aW9uQmluZGluZxI5ChdhY3Rp" + 
          "b25fYmluZGluZ19lbW90ZXllcxgtIAEoCzIYLkQzLkNsaWVudC5BY3Rpb25C" + 
          "aW5kaW5nEjgKFmFjdGlvbl9iaW5kaW5nX2Vtb3Rlbm8YLiABKAsyGC5EMy5D" + 
          "bGllbnQuQWN0aW9uQmluZGluZxI6ChhhY3Rpb25fYmluZGluZ19lbW90ZXN0" + 
          "YXkYLyABKAsyGC5EMy5DbGllbnQuQWN0aW9uQmluZGluZxI8ChphY3Rpb25f" + 
          "YmluZGluZ19lbW90ZWF0dGFjaxgwIAEoCzIYLkQzLkNsaWVudC5BY3Rpb25C" + 
          "aW5kaW5nEj0KG2FjdGlvbl9iaW5kaW5nX2Vtb3RlcmV0cmVhdBgxIAEoCzIY" + 
          "LkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEjoKGGFjdGlvbl9iaW5kaW5nX2Vt" + 
          "b3RlaG9sZBgyIAEoCzIYLkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEkMKIWFj" + 
          "dGlvbl9iaW5kaW5nX2Vtb3RldGFrZW9iamVjdGl2ZRgzIAEoCzIYLkQzLkNs" + 
          "aWVudC5BY3Rpb25CaW5kaW5nEjsKGWFjdGlvbl9iaW5kaW5nX2Vtb3RlbGF1" + 
          "Z2gYNCABKAsyGC5EMy5DbGllbnQuQWN0aW9uQmluZGluZxI9ChthY3Rpb25f" + 
          "YmluZGluZ19ob2xkcG9zaXRpb24YNSABKAsyGC5EMy5DbGllbnQuQWN0aW9u" + 
          "QmluZGluZxJFCiNhY3Rpb25fYmluZGluZ19zeXN0ZW1tYXN0ZXJ2b2x1bWV1" + 
          "cBg2IAEoCzIYLkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEkcKJWFjdGlvbl9i" + 
          "aW5kaW5nX3N5c3RlbW1hc3RlcnZvbHVtZWRvd24YNyABKAsyGC5EMy5DbGll" + 
          "bnQuQWN0aW9uQmluZGluZxJCCiBhY3Rpb25fYmluZGluZ19zeXN0ZW10b2dn" + 
          "bGVtdXNpYxg4IAEoCzIYLkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEkIKIGFj" + 
          "dGlvbl9iaW5kaW5nX3N5c3RlbXRvZ2dsZXNvdW5kGDkgASgLMhguRDMuQ2xp" + 
          "ZW50LkFjdGlvbkJpbmRpbmcSQQofYWN0aW9uX2JpbmRpbmdfc3lzdGVtc2Ny" + 
          "ZWVuc2hvdBg6IAEoCzIYLkQzLkNsaWVudC5BY3Rpb25CaW5kaW5nEj4KHGFj" + 
          "dGlvbl9iaW5kaW5nX3N0b25lb2ZyZWNhbGwYOyABKAsyGC5EMy5DbGllbnQu" + 
          "QWN0aW9uQmluZGluZxI9ChthY3Rpb25fYmluZGluZ19iYW5uZXJzY3JlZW4Y" + 
          "PCABKAsyGC5EMy5DbGllbnQuQWN0aW9uQmluZGluZxI0ChJhY3Rpb25fYmlu" + 
          "ZGluZ19sbWIYPSABKAsyGC5EMy5DbGllbnQuQWN0aW9uQmluZGluZxI0ChJh" + 
          "Y3Rpb25fYmluZGluZ19ybWIYPiABKAsyGC5EMy5DbGllbnQuQWN0aW9uQmlu" + 
          "ZGluZxI1ChNhY3Rpb25fYmluZGluZ193YWxrGD8gASgLMhguRDMuQ2xpZW50" + 
          "LkFjdGlvbkJpbmRpbmcSQAoeYWN0aW9uX2JpbmRpbmdfc3lzdGVtdG9nZ2xl" + 
          "ZnBzGEAgASgLMhguRDMuQ2xpZW50LkFjdGlvbkJpbmRpbmcSGgoPbm90aWZ5" + 
          "X2R1cmF0aW9uGGQgASgNOgEwIu0ECgVGbGFncxIdChlTSE9XX0lURU1fVE9P" + 
          "TFRJUF9PTl9EUk9QEAESGAoUU0hPV19NT05TVEVSX0hQX0JBUlMQAhIXChNT" + 
          "SE9XX1BMQVlFUl9IUF9CQVJTEAMSGAoUU0hPV19JVEVNU19PTl9HUk9VTkQQ" + 
          "BhIXChNTSE9XX0RBTUFHRV9OVU1CRVJTEAgSEgoOU0hPV19DUklUSUNBTFMQ" + 
          "CRIbChdTSE9XX0RFRkVOU0lWRV9NRVNTQUdFUxAKEhIKDklOVkVOVE9SWV9a" + 
          "T09NEAsSFAoQQVVUT19FUVVJUF9JVEVNUxAMEhIKDlNIT1dfVFVUT1JJQUxT" + 
          "EA0SFAoQU0hPV19CUkVBRF9DUlVNQhAOEhgKFERJU0FCTEVfT1NfU0hPUlRD" + 
          "VVRTEBESFQoRU0hPV19IRUFMX05VTUJFUlMQEhIVChFTSE9XX1BMQVlFUl9O" + 
          "QU1FUxATEhcKE1NIT1dfSFBfQkFSX05VTUJFUlMQFBIOCgpTSE9XX0NMT0NL" + 
          "EBUSGgoWU0hPV19BRFZBTkNFRF9UT09MVElQUxAWEhEKDUVMRUNUSVZFX01P" + 
          "REUQFxIYChROT1RJRllfRlJJRU5EX09OTElORRAYEhkKFU5PVElGWV9GUklF" + 
          "TkRfT0ZGTElORRAZEhkKFU5PVElGWV9GUklFTkRfUkVRVUVTVBAaEh0KGU5P" + 
          "VElGWV9GUklFTkRfQUNISUVWRU1FTlQQGxIZChVOT1RJRllfRElTUExBWV9X" + 
          "SU5ET1cQHBIaChZNQVRVUkVfTEFOR1VBR0VfRklMVEVSEB0SFAoQQUxMT1df" + 
          "UVVJQ0tfSk9JThAe");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Client_ToonSettings__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Client_ToonSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Client.ToonSettings, global::D3.Client.ToonSettings.Builder>(internal__static_D3_Client_ToonSettings__Descriptor,
                new string[] { "UiFlags", });
        internal__static_D3_Client_ActionBinding__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Client_ActionBinding__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Client.ActionBinding, global::D3.Client.ActionBinding.Builder>(internal__static_D3_Client_ActionBinding__Descriptor,
                new string[] { "Key1", "KeyModifierFlags1", "Key2", "KeyModifierFlags2", });
        internal__static_D3_Client_GameAccountSettings__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Client_GameAccountSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Client.GameAccountSettings, global::D3.Client.GameAccountSettings.Builder>(internal__static_D3_Client_GameAccountSettings__Descriptor,
                new string[] { "UseLastHero", "ShowOfflineToast", "RmtLastUsedCurrency", "CoopLastCreateGamePrivacy", "RmtPreferredCurrency", });
        internal__static_D3_Client_Preferences__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Client_Preferences__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Client.Preferences, global::D3.Client.Preferences.Builder>(internal__static_D3_Client_Preferences__Descriptor,
                new string[] { "Version", "Flags", "ItemsOnGroundSetting", "ActionBindingInventory", "ActionBindingHireling", "ActionBindingSkills", "ActionBindingQuests", "ActionBindingLore", "ActionBindingSocial", "ActionBindingWorldmap", "ActionBindingHelp", "ActionBindingRecentplayers", "ActionBindingChatlobby", "ActionBindingAchievements", "ActionBindingProfile", "ActionBindingAuctionhouse", "ActionBindingClear", "ActionBindingConsole", "ActionBindingMap", "ActionBindingSkillcycle", "ActionBindingTogglemonsterhpbars", "ActionBindingToggleplayerhpbars", "ActionBindingToggledamagenumbers", "ActionBindingToggleitemsonground", "ActionBindingRewhisper", "ActionBindingWhisperreply", "ActionBindingVoiceptt", "ActionBindingSkill1", "ActionBindingSkill2", "ActionBindingSkill3", "ActionBindingSkill4", "ActionBindingPotion", "ActionBindingBannerdrop", "ActionBindingZoom", "ActionBindingEmotefollow", "ActionBindingEmotegive", "ActionBindingEmotethanks", "ActionBindingEmotesorry", "ActionBindingEmotebye", "ActionBindingEmotedie", "ActionBindingEmoterun", "ActionBindingEmotewait", "ActionBindingEmotego", "ActionBindingEmotehelp", "ActionBindingEmoteyes", "ActionBindingEmoteno", "ActionBindingEmotestay", "ActionBindingEmoteattack", "ActionBindingEmoteretreat", "ActionBindingEmotehold", "ActionBindingEmotetakeobjective", "ActionBindingEmotelaugh", "ActionBindingHoldposition", "ActionBindingSystemmastervolumeup", "ActionBindingSystemmastervolumedown", "ActionBindingSystemtogglemusic", "ActionBindingSystemtogglesound", "ActionBindingSystemscreenshot", "ActionBindingStoneofrecall", "ActionBindingBannerscreen", "ActionBindingLmb", "ActionBindingRmb", "ActionBindingWalk", "ActionBindingSystemtogglefps", "NotifyDuration", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ToonSettings : pb::GeneratedMessage<ToonSettings, ToonSettings.Builder> {
    private ToonSettings() { }
    private static readonly ToonSettings defaultInstance = new ToonSettings().MakeReadOnly();
    private static readonly string[] _toonSettingsFieldNames = new string[] { "ui_flags" };
    private static readonly uint[] _toonSettingsFieldTags = new uint[] { 8 };
    public static ToonSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ToonSettings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ToonSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Client.Settings.internal__static_D3_Client_ToonSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ToonSettings, ToonSettings.Builder> InternalFieldAccessors {
      get { return global::D3.Client.Settings.internal__static_D3_Client_ToonSettings__FieldAccessorTable; }
    }
    
    public const int UiFlagsFieldNumber = 1;
    private bool hasUiFlags;
    private uint uiFlags_;
    public bool HasUiFlags {
      get { return hasUiFlags; }
    }
    public uint UiFlags {
      get { return uiFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _toonSettingsFieldNames;
      if (hasUiFlags) {
        output.WriteUInt32(1, field_names[0], UiFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUiFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, UiFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ToonSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ToonSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ToonSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ToonSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ToonSettings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ToonSettings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ToonSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ToonSettings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ToonSettings result;
      
      private ToonSettings PrepareBuilder() {
        if (resultIsReadOnly) {
          ToonSettings original = result;
          result = new ToonSettings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ToonSettings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Client.ToonSettings.Descriptor; }
      }
      
      public override ToonSettings DefaultInstanceForType {
        get { return global::D3.Client.ToonSettings.DefaultInstance; }
      }
      
      public override ToonSettings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ToonSettings) {
          return MergeFrom((ToonSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ToonSettings other) {
        if (other == global::D3.Client.ToonSettings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUiFlags) {
          UiFlags = other.UiFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_toonSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _toonSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUiFlags = input.ReadUInt32(ref result.uiFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUiFlags {
        get { return result.hasUiFlags; }
      }
      public uint UiFlags {
        get { return result.UiFlags; }
        set { SetUiFlags(value); }
      }
      public Builder SetUiFlags(uint value) {
        PrepareBuilder();
        result.hasUiFlags = true;
        result.uiFlags_ = value;
        return this;
      }
      public Builder ClearUiFlags() {
        PrepareBuilder();
        result.hasUiFlags = false;
        result.uiFlags_ = 0;
        return this;
      }
    }
    static ToonSettings() {
      object.ReferenceEquals(global::D3.Client.Settings.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ActionBinding : pb::GeneratedMessage<ActionBinding, ActionBinding.Builder> {
    private ActionBinding() { }
    private static readonly ActionBinding defaultInstance = new ActionBinding().MakeReadOnly();
    private static readonly string[] _actionBindingFieldNames = new string[] { "key_1", "key_2", "key_modifier_flags_1", "key_modifier_flags_2" };
    private static readonly uint[] _actionBindingFieldTags = new uint[] { 8, 24, 16, 32 };
    public static ActionBinding DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ActionBinding DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ActionBinding ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Client.Settings.internal__static_D3_Client_ActionBinding__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ActionBinding, ActionBinding.Builder> InternalFieldAccessors {
      get { return global::D3.Client.Settings.internal__static_D3_Client_ActionBinding__FieldAccessorTable; }
    }
    
    public const int Key1FieldNumber = 1;
    private bool hasKey1;
    private int key1_ = -1;
    public bool HasKey1 {
      get { return hasKey1; }
    }
    public int Key1 {
      get { return key1_; }
    }
    
    public const int KeyModifierFlags1FieldNumber = 2;
    private bool hasKeyModifierFlags1;
    private uint keyModifierFlags1_;
    public bool HasKeyModifierFlags1 {
      get { return hasKeyModifierFlags1; }
    }
    public uint KeyModifierFlags1 {
      get { return keyModifierFlags1_; }
    }
    
    public const int Key2FieldNumber = 3;
    private bool hasKey2;
    private int key2_ = -1;
    public bool HasKey2 {
      get { return hasKey2; }
    }
    public int Key2 {
      get { return key2_; }
    }
    
    public const int KeyModifierFlags2FieldNumber = 4;
    private bool hasKeyModifierFlags2;
    private uint keyModifierFlags2_;
    public bool HasKeyModifierFlags2 {
      get { return hasKeyModifierFlags2; }
    }
    public uint KeyModifierFlags2 {
      get { return keyModifierFlags2_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey1) return false;
        if (!hasKeyModifierFlags1) return false;
        if (!hasKey2) return false;
        if (!hasKeyModifierFlags2) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _actionBindingFieldNames;
      if (hasKey1) {
        output.WriteInt32(1, field_names[0], Key1);
      }
      if (hasKeyModifierFlags1) {
        output.WriteUInt32(2, field_names[2], KeyModifierFlags1);
      }
      if (hasKey2) {
        output.WriteInt32(3, field_names[1], Key2);
      }
      if (hasKeyModifierFlags2) {
        output.WriteUInt32(4, field_names[3], KeyModifierFlags2);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKey1) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Key1);
        }
        if (hasKeyModifierFlags1) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, KeyModifierFlags1);
        }
        if (hasKey2) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Key2);
        }
        if (hasKeyModifierFlags2) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, KeyModifierFlags2);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ActionBinding ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionBinding ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionBinding ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionBinding ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionBinding ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionBinding ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ActionBinding ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ActionBinding ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ActionBinding ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionBinding ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActionBinding MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ActionBinding prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ActionBinding, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActionBinding cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ActionBinding result;
      
      private ActionBinding PrepareBuilder() {
        if (resultIsReadOnly) {
          ActionBinding original = result;
          result = new ActionBinding();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ActionBinding MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Client.ActionBinding.Descriptor; }
      }
      
      public override ActionBinding DefaultInstanceForType {
        get { return global::D3.Client.ActionBinding.DefaultInstance; }
      }
      
      public override ActionBinding BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ActionBinding) {
          return MergeFrom((ActionBinding) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ActionBinding other) {
        if (other == global::D3.Client.ActionBinding.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey1) {
          Key1 = other.Key1;
        }
        if (other.HasKeyModifierFlags1) {
          KeyModifierFlags1 = other.KeyModifierFlags1;
        }
        if (other.HasKey2) {
          Key2 = other.Key2;
        }
        if (other.HasKeyModifierFlags2) {
          KeyModifierFlags2 = other.KeyModifierFlags2;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_actionBindingFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _actionBindingFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKey1 = input.ReadInt32(ref result.key1_);
              break;
            }
            case 16: {
              result.hasKeyModifierFlags1 = input.ReadUInt32(ref result.keyModifierFlags1_);
              break;
            }
            case 24: {
              result.hasKey2 = input.ReadInt32(ref result.key2_);
              break;
            }
            case 32: {
              result.hasKeyModifierFlags2 = input.ReadUInt32(ref result.keyModifierFlags2_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey1 {
        get { return result.hasKey1; }
      }
      public int Key1 {
        get { return result.Key1; }
        set { SetKey1(value); }
      }
      public Builder SetKey1(int value) {
        PrepareBuilder();
        result.hasKey1 = true;
        result.key1_ = value;
        return this;
      }
      public Builder ClearKey1() {
        PrepareBuilder();
        result.hasKey1 = false;
        result.key1_ = -1;
        return this;
      }
      
      public bool HasKeyModifierFlags1 {
        get { return result.hasKeyModifierFlags1; }
      }
      public uint KeyModifierFlags1 {
        get { return result.KeyModifierFlags1; }
        set { SetKeyModifierFlags1(value); }
      }
      public Builder SetKeyModifierFlags1(uint value) {
        PrepareBuilder();
        result.hasKeyModifierFlags1 = true;
        result.keyModifierFlags1_ = value;
        return this;
      }
      public Builder ClearKeyModifierFlags1() {
        PrepareBuilder();
        result.hasKeyModifierFlags1 = false;
        result.keyModifierFlags1_ = 0;
        return this;
      }
      
      public bool HasKey2 {
        get { return result.hasKey2; }
      }
      public int Key2 {
        get { return result.Key2; }
        set { SetKey2(value); }
      }
      public Builder SetKey2(int value) {
        PrepareBuilder();
        result.hasKey2 = true;
        result.key2_ = value;
        return this;
      }
      public Builder ClearKey2() {
        PrepareBuilder();
        result.hasKey2 = false;
        result.key2_ = -1;
        return this;
      }
      
      public bool HasKeyModifierFlags2 {
        get { return result.hasKeyModifierFlags2; }
      }
      public uint KeyModifierFlags2 {
        get { return result.KeyModifierFlags2; }
        set { SetKeyModifierFlags2(value); }
      }
      public Builder SetKeyModifierFlags2(uint value) {
        PrepareBuilder();
        result.hasKeyModifierFlags2 = true;
        result.keyModifierFlags2_ = value;
        return this;
      }
      public Builder ClearKeyModifierFlags2() {
        PrepareBuilder();
        result.hasKeyModifierFlags2 = false;
        result.keyModifierFlags2_ = 0;
        return this;
      }
    }
    static ActionBinding() {
      object.ReferenceEquals(global::D3.Client.Settings.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameAccountSettings : pb::GeneratedMessage<GameAccountSettings, GameAccountSettings.Builder> {
    private GameAccountSettings() { }
    private static readonly GameAccountSettings defaultInstance = new GameAccountSettings().MakeReadOnly();
    private static readonly string[] _gameAccountSettingsFieldNames = new string[] { "coop_last_create_game_privacy", "rmt_last_used_currency", "rmt_preferred_currency", "show_offline_toast", "use_last_hero" };
    private static readonly uint[] _gameAccountSettingsFieldTags = new uint[] { 32, 26, 42, 16, 8 };
    public static GameAccountSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameAccountSettings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameAccountSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Client.Settings.internal__static_D3_Client_GameAccountSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameAccountSettings, GameAccountSettings.Builder> InternalFieldAccessors {
      get { return global::D3.Client.Settings.internal__static_D3_Client_GameAccountSettings__FieldAccessorTable; }
    }
    
    public const int UseLastHeroFieldNumber = 1;
    private bool hasUseLastHero;
    private int useLastHero_;
    public bool HasUseLastHero {
      get { return hasUseLastHero; }
    }
    public int UseLastHero {
      get { return useLastHero_; }
    }
    
    public const int ShowOfflineToastFieldNumber = 2;
    private bool hasShowOfflineToast;
    private int showOfflineToast_;
    public bool HasShowOfflineToast {
      get { return hasShowOfflineToast; }
    }
    public int ShowOfflineToast {
      get { return showOfflineToast_; }
    }
    
    public const int RmtLastUsedCurrencyFieldNumber = 3;
    private bool hasRmtLastUsedCurrency;
    private string rmtLastUsedCurrency_ = "";
    public bool HasRmtLastUsedCurrency {
      get { return hasRmtLastUsedCurrency; }
    }
    public string RmtLastUsedCurrency {
      get { return rmtLastUsedCurrency_; }
    }
    
    public const int CoopLastCreateGamePrivacyFieldNumber = 4;
    private bool hasCoopLastCreateGamePrivacy;
    private int coopLastCreateGamePrivacy_ = 1;
    public bool HasCoopLastCreateGamePrivacy {
      get { return hasCoopLastCreateGamePrivacy; }
    }
    public int CoopLastCreateGamePrivacy {
      get { return coopLastCreateGamePrivacy_; }
    }
    
    public const int RmtPreferredCurrencyFieldNumber = 5;
    private bool hasRmtPreferredCurrency;
    private string rmtPreferredCurrency_ = "";
    public bool HasRmtPreferredCurrency {
      get { return hasRmtPreferredCurrency; }
    }
    public string RmtPreferredCurrency {
      get { return rmtPreferredCurrency_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameAccountSettingsFieldNames;
      if (hasUseLastHero) {
        output.WriteInt32(1, field_names[4], UseLastHero);
      }
      if (hasShowOfflineToast) {
        output.WriteInt32(2, field_names[3], ShowOfflineToast);
      }
      if (hasRmtLastUsedCurrency) {
        output.WriteString(3, field_names[1], RmtLastUsedCurrency);
      }
      if (hasCoopLastCreateGamePrivacy) {
        output.WriteInt32(4, field_names[0], CoopLastCreateGamePrivacy);
      }
      if (hasRmtPreferredCurrency) {
        output.WriteString(5, field_names[2], RmtPreferredCurrency);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUseLastHero) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, UseLastHero);
        }
        if (hasShowOfflineToast) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ShowOfflineToast);
        }
        if (hasRmtLastUsedCurrency) {
          size += pb::CodedOutputStream.ComputeStringSize(3, RmtLastUsedCurrency);
        }
        if (hasCoopLastCreateGamePrivacy) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, CoopLastCreateGamePrivacy);
        }
        if (hasRmtPreferredCurrency) {
          size += pb::CodedOutputStream.ComputeStringSize(5, RmtPreferredCurrency);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameAccountSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameAccountSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameAccountSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameAccountSettings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameAccountSettings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameAccountSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameAccountSettings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameAccountSettings result;
      
      private GameAccountSettings PrepareBuilder() {
        if (resultIsReadOnly) {
          GameAccountSettings original = result;
          result = new GameAccountSettings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameAccountSettings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Client.GameAccountSettings.Descriptor; }
      }
      
      public override GameAccountSettings DefaultInstanceForType {
        get { return global::D3.Client.GameAccountSettings.DefaultInstance; }
      }
      
      public override GameAccountSettings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameAccountSettings) {
          return MergeFrom((GameAccountSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameAccountSettings other) {
        if (other == global::D3.Client.GameAccountSettings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUseLastHero) {
          UseLastHero = other.UseLastHero;
        }
        if (other.HasShowOfflineToast) {
          ShowOfflineToast = other.ShowOfflineToast;
        }
        if (other.HasRmtLastUsedCurrency) {
          RmtLastUsedCurrency = other.RmtLastUsedCurrency;
        }
        if (other.HasCoopLastCreateGamePrivacy) {
          CoopLastCreateGamePrivacy = other.CoopLastCreateGamePrivacy;
        }
        if (other.HasRmtPreferredCurrency) {
          RmtPreferredCurrency = other.RmtPreferredCurrency;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameAccountSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameAccountSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUseLastHero = input.ReadInt32(ref result.useLastHero_);
              break;
            }
            case 16: {
              result.hasShowOfflineToast = input.ReadInt32(ref result.showOfflineToast_);
              break;
            }
            case 26: {
              result.hasRmtLastUsedCurrency = input.ReadString(ref result.rmtLastUsedCurrency_);
              break;
            }
            case 32: {
              result.hasCoopLastCreateGamePrivacy = input.ReadInt32(ref result.coopLastCreateGamePrivacy_);
              break;
            }
            case 42: {
              result.hasRmtPreferredCurrency = input.ReadString(ref result.rmtPreferredCurrency_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUseLastHero {
        get { return result.hasUseLastHero; }
      }
      public int UseLastHero {
        get { return result.UseLastHero; }
        set { SetUseLastHero(value); }
      }
      public Builder SetUseLastHero(int value) {
        PrepareBuilder();
        result.hasUseLastHero = true;
        result.useLastHero_ = value;
        return this;
      }
      public Builder ClearUseLastHero() {
        PrepareBuilder();
        result.hasUseLastHero = false;
        result.useLastHero_ = 0;
        return this;
      }
      
      public bool HasShowOfflineToast {
        get { return result.hasShowOfflineToast; }
      }
      public int ShowOfflineToast {
        get { return result.ShowOfflineToast; }
        set { SetShowOfflineToast(value); }
      }
      public Builder SetShowOfflineToast(int value) {
        PrepareBuilder();
        result.hasShowOfflineToast = true;
        result.showOfflineToast_ = value;
        return this;
      }
      public Builder ClearShowOfflineToast() {
        PrepareBuilder();
        result.hasShowOfflineToast = false;
        result.showOfflineToast_ = 0;
        return this;
      }
      
      public bool HasRmtLastUsedCurrency {
        get { return result.hasRmtLastUsedCurrency; }
      }
      public string RmtLastUsedCurrency {
        get { return result.RmtLastUsedCurrency; }
        set { SetRmtLastUsedCurrency(value); }
      }
      public Builder SetRmtLastUsedCurrency(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRmtLastUsedCurrency = true;
        result.rmtLastUsedCurrency_ = value;
        return this;
      }
      public Builder ClearRmtLastUsedCurrency() {
        PrepareBuilder();
        result.hasRmtLastUsedCurrency = false;
        result.rmtLastUsedCurrency_ = "";
        return this;
      }
      
      public bool HasCoopLastCreateGamePrivacy {
        get { return result.hasCoopLastCreateGamePrivacy; }
      }
      public int CoopLastCreateGamePrivacy {
        get { return result.CoopLastCreateGamePrivacy; }
        set { SetCoopLastCreateGamePrivacy(value); }
      }
      public Builder SetCoopLastCreateGamePrivacy(int value) {
        PrepareBuilder();
        result.hasCoopLastCreateGamePrivacy = true;
        result.coopLastCreateGamePrivacy_ = value;
        return this;
      }
      public Builder ClearCoopLastCreateGamePrivacy() {
        PrepareBuilder();
        result.hasCoopLastCreateGamePrivacy = false;
        result.coopLastCreateGamePrivacy_ = 1;
        return this;
      }
      
      public bool HasRmtPreferredCurrency {
        get { return result.hasRmtPreferredCurrency; }
      }
      public string RmtPreferredCurrency {
        get { return result.RmtPreferredCurrency; }
        set { SetRmtPreferredCurrency(value); }
      }
      public Builder SetRmtPreferredCurrency(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRmtPreferredCurrency = true;
        result.rmtPreferredCurrency_ = value;
        return this;
      }
      public Builder ClearRmtPreferredCurrency() {
        PrepareBuilder();
        result.hasRmtPreferredCurrency = false;
        result.rmtPreferredCurrency_ = "";
        return this;
      }
    }
    static GameAccountSettings() {
      object.ReferenceEquals(global::D3.Client.Settings.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Preferences : pb::GeneratedMessage<Preferences, Preferences.Builder> {
    private Preferences() { }
    private static readonly Preferences defaultInstance = new Preferences().MakeReadOnly();
    private static readonly string[] _preferencesFieldNames = new string[] { "action_binding_achievements", "action_binding_auctionhouse", "action_binding_bannerdrop", "action_binding_bannerscreen", "action_binding_chatlobby", "action_binding_clear", "action_binding_console", "action_binding_emoteattack", "action_binding_emotebye", "action_binding_emotedie", "action_binding_emotefollow", "action_binding_emotegive", "action_binding_emotego", "action_binding_emotehelp", "action_binding_emotehold", "action_binding_emotelaugh", "action_binding_emoteno", "action_binding_emoteretreat", "action_binding_emoterun", "action_binding_emotesorry", "action_binding_emotestay", "action_binding_emotetakeobjective", "action_binding_emotethanks", "action_binding_emotewait", "action_binding_emoteyes", "action_binding_help", "action_binding_hireling", "action_binding_holdposition", "action_binding_inventory", "action_binding_lmb", "action_binding_lore", "action_binding_map", "action_binding_potion", "action_binding_profile", "action_binding_quests", "action_binding_recentplayers", "action_binding_rewhisper", "action_binding_rmb", "action_binding_skill1", "action_binding_skill2", "action_binding_skill3", "action_binding_skill4", "action_binding_skillcycle", "action_binding_skills", "action_binding_social", "action_binding_stoneofrecall", "action_binding_systemmastervolumedown", "action_binding_systemmastervolumeup", "action_binding_systemscreenshot", "action_binding_systemtogglefps", "action_binding_systemtogglemusic", "action_binding_systemtogglesound", "action_binding_toggledamagenumbers", "action_binding_toggleitemsonground", "action_binding_togglemonsterhpbars", "action_binding_toggleplayerhpbars", "action_binding_voiceptt", "action_binding_walk", "action_binding_whisperreply", "action_binding_worldmap", "action_binding_zoom", "flags", "items_on_ground_setting", "notify_duration", "version" };
    private static readonly uint[] _preferencesFieldTags = new uint[] { 114, 130, 266, 482, 106, 138, 146, 386, 314, 322, 282, 290, 346, 354, 402, 418, 370, 394, 330, 306, 378, 410, 298, 338, 362, 90, 42, 426, 34, 490, 66, 154, 258, 122, 594, 98, 202, 498, 226, 234, 242, 250, 162, 50, 74, 474, 442, 434, 466, 514, 450, 458, 186, 194, 170, 178, 218, 506, 210, 82, 274, 16, 24, 800, 8 };
    public static Preferences DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Preferences DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Preferences ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Client.Settings.internal__static_D3_Client_Preferences__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Preferences, Preferences.Builder> InternalFieldAccessors {
      get { return global::D3.Client.Settings.internal__static_D3_Client_Preferences__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Flags {
        SHOW_ITEM_TOOLTIP_ON_DROP = 1,
        SHOW_MONSTER_HP_BARS = 2,
        SHOW_PLAYER_HP_BARS = 3,
        SHOW_ITEMS_ON_GROUND = 6,
        SHOW_DAMAGE_NUMBERS = 8,
        SHOW_CRITICALS = 9,
        SHOW_DEFENSIVE_MESSAGES = 10,
        INVENTORY_ZOOM = 11,
        AUTO_EQUIP_ITEMS = 12,
        SHOW_TUTORIALS = 13,
        SHOW_BREAD_CRUMB = 14,
        DISABLE_OS_SHORTCUTS = 17,
        SHOW_HEAL_NUMBERS = 18,
        SHOW_PLAYER_NAMES = 19,
        SHOW_HP_BAR_NUMBERS = 20,
        SHOW_CLOCK = 21,
        SHOW_ADVANCED_TOOLTIPS = 22,
        ELECTIVE_MODE = 23,
        NOTIFY_FRIEND_ONLINE = 24,
        NOTIFY_FRIEND_OFFLINE = 25,
        NOTIFY_FRIEND_REQUEST = 26,
        NOTIFY_FRIEND_ACHIEVEMENT = 27,
        NOTIFY_DISPLAY_WINDOW = 28,
        MATURE_LANGUAGE_FILTER = 29,
        ALLOW_QUICK_JOIN = 30,
      }
      
    }
    #endregion
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private int version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int FlagsFieldNumber = 2;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public const int ItemsOnGroundSettingFieldNumber = 3;
    private bool hasItemsOnGroundSetting;
    private uint itemsOnGroundSetting_;
    public bool HasItemsOnGroundSetting {
      get { return hasItemsOnGroundSetting; }
    }
    public uint ItemsOnGroundSetting {
      get { return itemsOnGroundSetting_; }
    }
    
    public const int ActionBindingInventoryFieldNumber = 4;
    private bool hasActionBindingInventory;
    private global::D3.Client.ActionBinding actionBindingInventory_;
    public bool HasActionBindingInventory {
      get { return hasActionBindingInventory; }
    }
    public global::D3.Client.ActionBinding ActionBindingInventory {
      get { return actionBindingInventory_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingHirelingFieldNumber = 5;
    private bool hasActionBindingHireling;
    private global::D3.Client.ActionBinding actionBindingHireling_;
    public bool HasActionBindingHireling {
      get { return hasActionBindingHireling; }
    }
    public global::D3.Client.ActionBinding ActionBindingHireling {
      get { return actionBindingHireling_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSkillsFieldNumber = 6;
    private bool hasActionBindingSkills;
    private global::D3.Client.ActionBinding actionBindingSkills_;
    public bool HasActionBindingSkills {
      get { return hasActionBindingSkills; }
    }
    public global::D3.Client.ActionBinding ActionBindingSkills {
      get { return actionBindingSkills_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingQuestsFieldNumber = 74;
    private bool hasActionBindingQuests;
    private global::D3.Client.ActionBinding actionBindingQuests_;
    public bool HasActionBindingQuests {
      get { return hasActionBindingQuests; }
    }
    public global::D3.Client.ActionBinding ActionBindingQuests {
      get { return actionBindingQuests_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingLoreFieldNumber = 8;
    private bool hasActionBindingLore;
    private global::D3.Client.ActionBinding actionBindingLore_;
    public bool HasActionBindingLore {
      get { return hasActionBindingLore; }
    }
    public global::D3.Client.ActionBinding ActionBindingLore {
      get { return actionBindingLore_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSocialFieldNumber = 9;
    private bool hasActionBindingSocial;
    private global::D3.Client.ActionBinding actionBindingSocial_;
    public bool HasActionBindingSocial {
      get { return hasActionBindingSocial; }
    }
    public global::D3.Client.ActionBinding ActionBindingSocial {
      get { return actionBindingSocial_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingWorldmapFieldNumber = 10;
    private bool hasActionBindingWorldmap;
    private global::D3.Client.ActionBinding actionBindingWorldmap_;
    public bool HasActionBindingWorldmap {
      get { return hasActionBindingWorldmap; }
    }
    public global::D3.Client.ActionBinding ActionBindingWorldmap {
      get { return actionBindingWorldmap_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingHelpFieldNumber = 11;
    private bool hasActionBindingHelp;
    private global::D3.Client.ActionBinding actionBindingHelp_;
    public bool HasActionBindingHelp {
      get { return hasActionBindingHelp; }
    }
    public global::D3.Client.ActionBinding ActionBindingHelp {
      get { return actionBindingHelp_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingRecentplayersFieldNumber = 12;
    private bool hasActionBindingRecentplayers;
    private global::D3.Client.ActionBinding actionBindingRecentplayers_;
    public bool HasActionBindingRecentplayers {
      get { return hasActionBindingRecentplayers; }
    }
    public global::D3.Client.ActionBinding ActionBindingRecentplayers {
      get { return actionBindingRecentplayers_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingChatlobbyFieldNumber = 13;
    private bool hasActionBindingChatlobby;
    private global::D3.Client.ActionBinding actionBindingChatlobby_;
    public bool HasActionBindingChatlobby {
      get { return hasActionBindingChatlobby; }
    }
    public global::D3.Client.ActionBinding ActionBindingChatlobby {
      get { return actionBindingChatlobby_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingAchievementsFieldNumber = 14;
    private bool hasActionBindingAchievements;
    private global::D3.Client.ActionBinding actionBindingAchievements_;
    public bool HasActionBindingAchievements {
      get { return hasActionBindingAchievements; }
    }
    public global::D3.Client.ActionBinding ActionBindingAchievements {
      get { return actionBindingAchievements_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingProfileFieldNumber = 15;
    private bool hasActionBindingProfile;
    private global::D3.Client.ActionBinding actionBindingProfile_;
    public bool HasActionBindingProfile {
      get { return hasActionBindingProfile; }
    }
    public global::D3.Client.ActionBinding ActionBindingProfile {
      get { return actionBindingProfile_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingAuctionhouseFieldNumber = 16;
    private bool hasActionBindingAuctionhouse;
    private global::D3.Client.ActionBinding actionBindingAuctionhouse_;
    public bool HasActionBindingAuctionhouse {
      get { return hasActionBindingAuctionhouse; }
    }
    public global::D3.Client.ActionBinding ActionBindingAuctionhouse {
      get { return actionBindingAuctionhouse_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingClearFieldNumber = 17;
    private bool hasActionBindingClear;
    private global::D3.Client.ActionBinding actionBindingClear_;
    public bool HasActionBindingClear {
      get { return hasActionBindingClear; }
    }
    public global::D3.Client.ActionBinding ActionBindingClear {
      get { return actionBindingClear_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingConsoleFieldNumber = 18;
    private bool hasActionBindingConsole;
    private global::D3.Client.ActionBinding actionBindingConsole_;
    public bool HasActionBindingConsole {
      get { return hasActionBindingConsole; }
    }
    public global::D3.Client.ActionBinding ActionBindingConsole {
      get { return actionBindingConsole_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingMapFieldNumber = 19;
    private bool hasActionBindingMap;
    private global::D3.Client.ActionBinding actionBindingMap_;
    public bool HasActionBindingMap {
      get { return hasActionBindingMap; }
    }
    public global::D3.Client.ActionBinding ActionBindingMap {
      get { return actionBindingMap_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSkillcycleFieldNumber = 20;
    private bool hasActionBindingSkillcycle;
    private global::D3.Client.ActionBinding actionBindingSkillcycle_;
    public bool HasActionBindingSkillcycle {
      get { return hasActionBindingSkillcycle; }
    }
    public global::D3.Client.ActionBinding ActionBindingSkillcycle {
      get { return actionBindingSkillcycle_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingTogglemonsterhpbarsFieldNumber = 21;
    private bool hasActionBindingTogglemonsterhpbars;
    private global::D3.Client.ActionBinding actionBindingTogglemonsterhpbars_;
    public bool HasActionBindingTogglemonsterhpbars {
      get { return hasActionBindingTogglemonsterhpbars; }
    }
    public global::D3.Client.ActionBinding ActionBindingTogglemonsterhpbars {
      get { return actionBindingTogglemonsterhpbars_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingToggleplayerhpbarsFieldNumber = 22;
    private bool hasActionBindingToggleplayerhpbars;
    private global::D3.Client.ActionBinding actionBindingToggleplayerhpbars_;
    public bool HasActionBindingToggleplayerhpbars {
      get { return hasActionBindingToggleplayerhpbars; }
    }
    public global::D3.Client.ActionBinding ActionBindingToggleplayerhpbars {
      get { return actionBindingToggleplayerhpbars_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingToggledamagenumbersFieldNumber = 23;
    private bool hasActionBindingToggledamagenumbers;
    private global::D3.Client.ActionBinding actionBindingToggledamagenumbers_;
    public bool HasActionBindingToggledamagenumbers {
      get { return hasActionBindingToggledamagenumbers; }
    }
    public global::D3.Client.ActionBinding ActionBindingToggledamagenumbers {
      get { return actionBindingToggledamagenumbers_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingToggleitemsongroundFieldNumber = 24;
    private bool hasActionBindingToggleitemsonground;
    private global::D3.Client.ActionBinding actionBindingToggleitemsonground_;
    public bool HasActionBindingToggleitemsonground {
      get { return hasActionBindingToggleitemsonground; }
    }
    public global::D3.Client.ActionBinding ActionBindingToggleitemsonground {
      get { return actionBindingToggleitemsonground_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingRewhisperFieldNumber = 25;
    private bool hasActionBindingRewhisper;
    private global::D3.Client.ActionBinding actionBindingRewhisper_;
    public bool HasActionBindingRewhisper {
      get { return hasActionBindingRewhisper; }
    }
    public global::D3.Client.ActionBinding ActionBindingRewhisper {
      get { return actionBindingRewhisper_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingWhisperreplyFieldNumber = 26;
    private bool hasActionBindingWhisperreply;
    private global::D3.Client.ActionBinding actionBindingWhisperreply_;
    public bool HasActionBindingWhisperreply {
      get { return hasActionBindingWhisperreply; }
    }
    public global::D3.Client.ActionBinding ActionBindingWhisperreply {
      get { return actionBindingWhisperreply_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingVoicepttFieldNumber = 27;
    private bool hasActionBindingVoiceptt;
    private global::D3.Client.ActionBinding actionBindingVoiceptt_;
    public bool HasActionBindingVoiceptt {
      get { return hasActionBindingVoiceptt; }
    }
    public global::D3.Client.ActionBinding ActionBindingVoiceptt {
      get { return actionBindingVoiceptt_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSkill1FieldNumber = 28;
    private bool hasActionBindingSkill1;
    private global::D3.Client.ActionBinding actionBindingSkill1_;
    public bool HasActionBindingSkill1 {
      get { return hasActionBindingSkill1; }
    }
    public global::D3.Client.ActionBinding ActionBindingSkill1 {
      get { return actionBindingSkill1_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSkill2FieldNumber = 29;
    private bool hasActionBindingSkill2;
    private global::D3.Client.ActionBinding actionBindingSkill2_;
    public bool HasActionBindingSkill2 {
      get { return hasActionBindingSkill2; }
    }
    public global::D3.Client.ActionBinding ActionBindingSkill2 {
      get { return actionBindingSkill2_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSkill3FieldNumber = 30;
    private bool hasActionBindingSkill3;
    private global::D3.Client.ActionBinding actionBindingSkill3_;
    public bool HasActionBindingSkill3 {
      get { return hasActionBindingSkill3; }
    }
    public global::D3.Client.ActionBinding ActionBindingSkill3 {
      get { return actionBindingSkill3_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSkill4FieldNumber = 31;
    private bool hasActionBindingSkill4;
    private global::D3.Client.ActionBinding actionBindingSkill4_;
    public bool HasActionBindingSkill4 {
      get { return hasActionBindingSkill4; }
    }
    public global::D3.Client.ActionBinding ActionBindingSkill4 {
      get { return actionBindingSkill4_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingPotionFieldNumber = 32;
    private bool hasActionBindingPotion;
    private global::D3.Client.ActionBinding actionBindingPotion_;
    public bool HasActionBindingPotion {
      get { return hasActionBindingPotion; }
    }
    public global::D3.Client.ActionBinding ActionBindingPotion {
      get { return actionBindingPotion_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingBannerdropFieldNumber = 33;
    private bool hasActionBindingBannerdrop;
    private global::D3.Client.ActionBinding actionBindingBannerdrop_;
    public bool HasActionBindingBannerdrop {
      get { return hasActionBindingBannerdrop; }
    }
    public global::D3.Client.ActionBinding ActionBindingBannerdrop {
      get { return actionBindingBannerdrop_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingZoomFieldNumber = 34;
    private bool hasActionBindingZoom;
    private global::D3.Client.ActionBinding actionBindingZoom_;
    public bool HasActionBindingZoom {
      get { return hasActionBindingZoom; }
    }
    public global::D3.Client.ActionBinding ActionBindingZoom {
      get { return actionBindingZoom_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotefollowFieldNumber = 35;
    private bool hasActionBindingEmotefollow;
    private global::D3.Client.ActionBinding actionBindingEmotefollow_;
    public bool HasActionBindingEmotefollow {
      get { return hasActionBindingEmotefollow; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotefollow {
      get { return actionBindingEmotefollow_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotegiveFieldNumber = 36;
    private bool hasActionBindingEmotegive;
    private global::D3.Client.ActionBinding actionBindingEmotegive_;
    public bool HasActionBindingEmotegive {
      get { return hasActionBindingEmotegive; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotegive {
      get { return actionBindingEmotegive_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotethanksFieldNumber = 37;
    private bool hasActionBindingEmotethanks;
    private global::D3.Client.ActionBinding actionBindingEmotethanks_;
    public bool HasActionBindingEmotethanks {
      get { return hasActionBindingEmotethanks; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotethanks {
      get { return actionBindingEmotethanks_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotesorryFieldNumber = 38;
    private bool hasActionBindingEmotesorry;
    private global::D3.Client.ActionBinding actionBindingEmotesorry_;
    public bool HasActionBindingEmotesorry {
      get { return hasActionBindingEmotesorry; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotesorry {
      get { return actionBindingEmotesorry_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotebyeFieldNumber = 39;
    private bool hasActionBindingEmotebye;
    private global::D3.Client.ActionBinding actionBindingEmotebye_;
    public bool HasActionBindingEmotebye {
      get { return hasActionBindingEmotebye; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotebye {
      get { return actionBindingEmotebye_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotedieFieldNumber = 40;
    private bool hasActionBindingEmotedie;
    private global::D3.Client.ActionBinding actionBindingEmotedie_;
    public bool HasActionBindingEmotedie {
      get { return hasActionBindingEmotedie; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotedie {
      get { return actionBindingEmotedie_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmoterunFieldNumber = 41;
    private bool hasActionBindingEmoterun;
    private global::D3.Client.ActionBinding actionBindingEmoterun_;
    public bool HasActionBindingEmoterun {
      get { return hasActionBindingEmoterun; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmoterun {
      get { return actionBindingEmoterun_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotewaitFieldNumber = 42;
    private bool hasActionBindingEmotewait;
    private global::D3.Client.ActionBinding actionBindingEmotewait_;
    public bool HasActionBindingEmotewait {
      get { return hasActionBindingEmotewait; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotewait {
      get { return actionBindingEmotewait_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotegoFieldNumber = 43;
    private bool hasActionBindingEmotego;
    private global::D3.Client.ActionBinding actionBindingEmotego_;
    public bool HasActionBindingEmotego {
      get { return hasActionBindingEmotego; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotego {
      get { return actionBindingEmotego_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotehelpFieldNumber = 44;
    private bool hasActionBindingEmotehelp;
    private global::D3.Client.ActionBinding actionBindingEmotehelp_;
    public bool HasActionBindingEmotehelp {
      get { return hasActionBindingEmotehelp; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotehelp {
      get { return actionBindingEmotehelp_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmoteyesFieldNumber = 45;
    private bool hasActionBindingEmoteyes;
    private global::D3.Client.ActionBinding actionBindingEmoteyes_;
    public bool HasActionBindingEmoteyes {
      get { return hasActionBindingEmoteyes; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmoteyes {
      get { return actionBindingEmoteyes_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotenoFieldNumber = 46;
    private bool hasActionBindingEmoteno;
    private global::D3.Client.ActionBinding actionBindingEmoteno_;
    public bool HasActionBindingEmoteno {
      get { return hasActionBindingEmoteno; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmoteno {
      get { return actionBindingEmoteno_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotestayFieldNumber = 47;
    private bool hasActionBindingEmotestay;
    private global::D3.Client.ActionBinding actionBindingEmotestay_;
    public bool HasActionBindingEmotestay {
      get { return hasActionBindingEmotestay; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotestay {
      get { return actionBindingEmotestay_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmoteattackFieldNumber = 48;
    private bool hasActionBindingEmoteattack;
    private global::D3.Client.ActionBinding actionBindingEmoteattack_;
    public bool HasActionBindingEmoteattack {
      get { return hasActionBindingEmoteattack; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmoteattack {
      get { return actionBindingEmoteattack_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmoteretreatFieldNumber = 49;
    private bool hasActionBindingEmoteretreat;
    private global::D3.Client.ActionBinding actionBindingEmoteretreat_;
    public bool HasActionBindingEmoteretreat {
      get { return hasActionBindingEmoteretreat; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmoteretreat {
      get { return actionBindingEmoteretreat_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmoteholdFieldNumber = 50;
    private bool hasActionBindingEmotehold;
    private global::D3.Client.ActionBinding actionBindingEmotehold_;
    public bool HasActionBindingEmotehold {
      get { return hasActionBindingEmotehold; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotehold {
      get { return actionBindingEmotehold_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotetakeobjectiveFieldNumber = 51;
    private bool hasActionBindingEmotetakeobjective;
    private global::D3.Client.ActionBinding actionBindingEmotetakeobjective_;
    public bool HasActionBindingEmotetakeobjective {
      get { return hasActionBindingEmotetakeobjective; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotetakeobjective {
      get { return actionBindingEmotetakeobjective_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingEmotelaughFieldNumber = 52;
    private bool hasActionBindingEmotelaugh;
    private global::D3.Client.ActionBinding actionBindingEmotelaugh_;
    public bool HasActionBindingEmotelaugh {
      get { return hasActionBindingEmotelaugh; }
    }
    public global::D3.Client.ActionBinding ActionBindingEmotelaugh {
      get { return actionBindingEmotelaugh_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingHoldpositionFieldNumber = 53;
    private bool hasActionBindingHoldposition;
    private global::D3.Client.ActionBinding actionBindingHoldposition_;
    public bool HasActionBindingHoldposition {
      get { return hasActionBindingHoldposition; }
    }
    public global::D3.Client.ActionBinding ActionBindingHoldposition {
      get { return actionBindingHoldposition_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSystemmastervolumeupFieldNumber = 54;
    private bool hasActionBindingSystemmastervolumeup;
    private global::D3.Client.ActionBinding actionBindingSystemmastervolumeup_;
    public bool HasActionBindingSystemmastervolumeup {
      get { return hasActionBindingSystemmastervolumeup; }
    }
    public global::D3.Client.ActionBinding ActionBindingSystemmastervolumeup {
      get { return actionBindingSystemmastervolumeup_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSystemmastervolumedownFieldNumber = 55;
    private bool hasActionBindingSystemmastervolumedown;
    private global::D3.Client.ActionBinding actionBindingSystemmastervolumedown_;
    public bool HasActionBindingSystemmastervolumedown {
      get { return hasActionBindingSystemmastervolumedown; }
    }
    public global::D3.Client.ActionBinding ActionBindingSystemmastervolumedown {
      get { return actionBindingSystemmastervolumedown_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSystemtogglemusicFieldNumber = 56;
    private bool hasActionBindingSystemtogglemusic;
    private global::D3.Client.ActionBinding actionBindingSystemtogglemusic_;
    public bool HasActionBindingSystemtogglemusic {
      get { return hasActionBindingSystemtogglemusic; }
    }
    public global::D3.Client.ActionBinding ActionBindingSystemtogglemusic {
      get { return actionBindingSystemtogglemusic_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSystemtogglesoundFieldNumber = 57;
    private bool hasActionBindingSystemtogglesound;
    private global::D3.Client.ActionBinding actionBindingSystemtogglesound_;
    public bool HasActionBindingSystemtogglesound {
      get { return hasActionBindingSystemtogglesound; }
    }
    public global::D3.Client.ActionBinding ActionBindingSystemtogglesound {
      get { return actionBindingSystemtogglesound_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSystemscreenshotFieldNumber = 58;
    private bool hasActionBindingSystemscreenshot;
    private global::D3.Client.ActionBinding actionBindingSystemscreenshot_;
    public bool HasActionBindingSystemscreenshot {
      get { return hasActionBindingSystemscreenshot; }
    }
    public global::D3.Client.ActionBinding ActionBindingSystemscreenshot {
      get { return actionBindingSystemscreenshot_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingStoneofrecallFieldNumber = 59;
    private bool hasActionBindingStoneofrecall;
    private global::D3.Client.ActionBinding actionBindingStoneofrecall_;
    public bool HasActionBindingStoneofrecall {
      get { return hasActionBindingStoneofrecall; }
    }
    public global::D3.Client.ActionBinding ActionBindingStoneofrecall {
      get { return actionBindingStoneofrecall_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingBannerscreenFieldNumber = 60;
    private bool hasActionBindingBannerscreen;
    private global::D3.Client.ActionBinding actionBindingBannerscreen_;
    public bool HasActionBindingBannerscreen {
      get { return hasActionBindingBannerscreen; }
    }
    public global::D3.Client.ActionBinding ActionBindingBannerscreen {
      get { return actionBindingBannerscreen_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingLmbFieldNumber = 61;
    private bool hasActionBindingLmb;
    private global::D3.Client.ActionBinding actionBindingLmb_;
    public bool HasActionBindingLmb {
      get { return hasActionBindingLmb; }
    }
    public global::D3.Client.ActionBinding ActionBindingLmb {
      get { return actionBindingLmb_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingRmbFieldNumber = 62;
    private bool hasActionBindingRmb;
    private global::D3.Client.ActionBinding actionBindingRmb_;
    public bool HasActionBindingRmb {
      get { return hasActionBindingRmb; }
    }
    public global::D3.Client.ActionBinding ActionBindingRmb {
      get { return actionBindingRmb_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingWalkFieldNumber = 63;
    private bool hasActionBindingWalk;
    private global::D3.Client.ActionBinding actionBindingWalk_;
    public bool HasActionBindingWalk {
      get { return hasActionBindingWalk; }
    }
    public global::D3.Client.ActionBinding ActionBindingWalk {
      get { return actionBindingWalk_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int ActionBindingSystemtogglefpsFieldNumber = 64;
    private bool hasActionBindingSystemtogglefps;
    private global::D3.Client.ActionBinding actionBindingSystemtogglefps_;
    public bool HasActionBindingSystemtogglefps {
      get { return hasActionBindingSystemtogglefps; }
    }
    public global::D3.Client.ActionBinding ActionBindingSystemtogglefps {
      get { return actionBindingSystemtogglefps_ ?? global::D3.Client.ActionBinding.DefaultInstance; }
    }
    
    public const int NotifyDurationFieldNumber = 100;
    private bool hasNotifyDuration;
    private uint notifyDuration_;
    public bool HasNotifyDuration {
      get { return hasNotifyDuration; }
    }
    public uint NotifyDuration {
      get { return notifyDuration_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (HasActionBindingInventory) {
          if (!ActionBindingInventory.IsInitialized) return false;
        }
        if (HasActionBindingHireling) {
          if (!ActionBindingHireling.IsInitialized) return false;
        }
        if (HasActionBindingSkills) {
          if (!ActionBindingSkills.IsInitialized) return false;
        }
        if (HasActionBindingQuests) {
          if (!ActionBindingQuests.IsInitialized) return false;
        }
        if (HasActionBindingLore) {
          if (!ActionBindingLore.IsInitialized) return false;
        }
        if (HasActionBindingSocial) {
          if (!ActionBindingSocial.IsInitialized) return false;
        }
        if (HasActionBindingWorldmap) {
          if (!ActionBindingWorldmap.IsInitialized) return false;
        }
        if (HasActionBindingHelp) {
          if (!ActionBindingHelp.IsInitialized) return false;
        }
        if (HasActionBindingRecentplayers) {
          if (!ActionBindingRecentplayers.IsInitialized) return false;
        }
        if (HasActionBindingChatlobby) {
          if (!ActionBindingChatlobby.IsInitialized) return false;
        }
        if (HasActionBindingAchievements) {
          if (!ActionBindingAchievements.IsInitialized) return false;
        }
        if (HasActionBindingProfile) {
          if (!ActionBindingProfile.IsInitialized) return false;
        }
        if (HasActionBindingAuctionhouse) {
          if (!ActionBindingAuctionhouse.IsInitialized) return false;
        }
        if (HasActionBindingClear) {
          if (!ActionBindingClear.IsInitialized) return false;
        }
        if (HasActionBindingConsole) {
          if (!ActionBindingConsole.IsInitialized) return false;
        }
        if (HasActionBindingMap) {
          if (!ActionBindingMap.IsInitialized) return false;
        }
        if (HasActionBindingSkillcycle) {
          if (!ActionBindingSkillcycle.IsInitialized) return false;
        }
        if (HasActionBindingTogglemonsterhpbars) {
          if (!ActionBindingTogglemonsterhpbars.IsInitialized) return false;
        }
        if (HasActionBindingToggleplayerhpbars) {
          if (!ActionBindingToggleplayerhpbars.IsInitialized) return false;
        }
        if (HasActionBindingToggledamagenumbers) {
          if (!ActionBindingToggledamagenumbers.IsInitialized) return false;
        }
        if (HasActionBindingToggleitemsonground) {
          if (!ActionBindingToggleitemsonground.IsInitialized) return false;
        }
        if (HasActionBindingRewhisper) {
          if (!ActionBindingRewhisper.IsInitialized) return false;
        }
        if (HasActionBindingWhisperreply) {
          if (!ActionBindingWhisperreply.IsInitialized) return false;
        }
        if (HasActionBindingVoiceptt) {
          if (!ActionBindingVoiceptt.IsInitialized) return false;
        }
        if (HasActionBindingSkill1) {
          if (!ActionBindingSkill1.IsInitialized) return false;
        }
        if (HasActionBindingSkill2) {
          if (!ActionBindingSkill2.IsInitialized) return false;
        }
        if (HasActionBindingSkill3) {
          if (!ActionBindingSkill3.IsInitialized) return false;
        }
        if (HasActionBindingSkill4) {
          if (!ActionBindingSkill4.IsInitialized) return false;
        }
        if (HasActionBindingPotion) {
          if (!ActionBindingPotion.IsInitialized) return false;
        }
        if (HasActionBindingBannerdrop) {
          if (!ActionBindingBannerdrop.IsInitialized) return false;
        }
        if (HasActionBindingZoom) {
          if (!ActionBindingZoom.IsInitialized) return false;
        }
        if (HasActionBindingEmotefollow) {
          if (!ActionBindingEmotefollow.IsInitialized) return false;
        }
        if (HasActionBindingEmotegive) {
          if (!ActionBindingEmotegive.IsInitialized) return false;
        }
        if (HasActionBindingEmotethanks) {
          if (!ActionBindingEmotethanks.IsInitialized) return false;
        }
        if (HasActionBindingEmotesorry) {
          if (!ActionBindingEmotesorry.IsInitialized) return false;
        }
        if (HasActionBindingEmotebye) {
          if (!ActionBindingEmotebye.IsInitialized) return false;
        }
        if (HasActionBindingEmotedie) {
          if (!ActionBindingEmotedie.IsInitialized) return false;
        }
        if (HasActionBindingEmoterun) {
          if (!ActionBindingEmoterun.IsInitialized) return false;
        }
        if (HasActionBindingEmotewait) {
          if (!ActionBindingEmotewait.IsInitialized) return false;
        }
        if (HasActionBindingEmotego) {
          if (!ActionBindingEmotego.IsInitialized) return false;
        }
        if (HasActionBindingEmotehelp) {
          if (!ActionBindingEmotehelp.IsInitialized) return false;
        }
        if (HasActionBindingEmoteyes) {
          if (!ActionBindingEmoteyes.IsInitialized) return false;
        }
        if (HasActionBindingEmoteno) {
          if (!ActionBindingEmoteno.IsInitialized) return false;
        }
        if (HasActionBindingEmotestay) {
          if (!ActionBindingEmotestay.IsInitialized) return false;
        }
        if (HasActionBindingEmoteattack) {
          if (!ActionBindingEmoteattack.IsInitialized) return false;
        }
        if (HasActionBindingEmoteretreat) {
          if (!ActionBindingEmoteretreat.IsInitialized) return false;
        }
        if (HasActionBindingEmotehold) {
          if (!ActionBindingEmotehold.IsInitialized) return false;
        }
        if (HasActionBindingEmotetakeobjective) {
          if (!ActionBindingEmotetakeobjective.IsInitialized) return false;
        }
        if (HasActionBindingEmotelaugh) {
          if (!ActionBindingEmotelaugh.IsInitialized) return false;
        }
        if (HasActionBindingHoldposition) {
          if (!ActionBindingHoldposition.IsInitialized) return false;
        }
        if (HasActionBindingSystemmastervolumeup) {
          if (!ActionBindingSystemmastervolumeup.IsInitialized) return false;
        }
        if (HasActionBindingSystemmastervolumedown) {
          if (!ActionBindingSystemmastervolumedown.IsInitialized) return false;
        }
        if (HasActionBindingSystemtogglemusic) {
          if (!ActionBindingSystemtogglemusic.IsInitialized) return false;
        }
        if (HasActionBindingSystemtogglesound) {
          if (!ActionBindingSystemtogglesound.IsInitialized) return false;
        }
        if (HasActionBindingSystemscreenshot) {
          if (!ActionBindingSystemscreenshot.IsInitialized) return false;
        }
        if (HasActionBindingStoneofrecall) {
          if (!ActionBindingStoneofrecall.IsInitialized) return false;
        }
        if (HasActionBindingBannerscreen) {
          if (!ActionBindingBannerscreen.IsInitialized) return false;
        }
        if (HasActionBindingLmb) {
          if (!ActionBindingLmb.IsInitialized) return false;
        }
        if (HasActionBindingRmb) {
          if (!ActionBindingRmb.IsInitialized) return false;
        }
        if (HasActionBindingWalk) {
          if (!ActionBindingWalk.IsInitialized) return false;
        }
        if (HasActionBindingSystemtogglefps) {
          if (!ActionBindingSystemtogglefps.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _preferencesFieldNames;
      if (hasVersion) {
        output.WriteInt32(1, field_names[64], Version);
      }
      if (hasFlags) {
        output.WriteUInt32(2, field_names[61], Flags);
      }
      if (hasItemsOnGroundSetting) {
        output.WriteUInt32(3, field_names[62], ItemsOnGroundSetting);
      }
      if (hasActionBindingInventory) {
        output.WriteMessage(4, field_names[28], ActionBindingInventory);
      }
      if (hasActionBindingHireling) {
        output.WriteMessage(5, field_names[26], ActionBindingHireling);
      }
      if (hasActionBindingSkills) {
        output.WriteMessage(6, field_names[43], ActionBindingSkills);
      }
      if (hasActionBindingLore) {
        output.WriteMessage(8, field_names[30], ActionBindingLore);
      }
      if (hasActionBindingSocial) {
        output.WriteMessage(9, field_names[44], ActionBindingSocial);
      }
      if (hasActionBindingWorldmap) {
        output.WriteMessage(10, field_names[59], ActionBindingWorldmap);
      }
      if (hasActionBindingHelp) {
        output.WriteMessage(11, field_names[25], ActionBindingHelp);
      }
      if (hasActionBindingRecentplayers) {
        output.WriteMessage(12, field_names[35], ActionBindingRecentplayers);
      }
      if (hasActionBindingChatlobby) {
        output.WriteMessage(13, field_names[4], ActionBindingChatlobby);
      }
      if (hasActionBindingAchievements) {
        output.WriteMessage(14, field_names[0], ActionBindingAchievements);
      }
      if (hasActionBindingProfile) {
        output.WriteMessage(15, field_names[33], ActionBindingProfile);
      }
      if (hasActionBindingAuctionhouse) {
        output.WriteMessage(16, field_names[1], ActionBindingAuctionhouse);
      }
      if (hasActionBindingClear) {
        output.WriteMessage(17, field_names[5], ActionBindingClear);
      }
      if (hasActionBindingConsole) {
        output.WriteMessage(18, field_names[6], ActionBindingConsole);
      }
      if (hasActionBindingMap) {
        output.WriteMessage(19, field_names[31], ActionBindingMap);
      }
      if (hasActionBindingSkillcycle) {
        output.WriteMessage(20, field_names[42], ActionBindingSkillcycle);
      }
      if (hasActionBindingTogglemonsterhpbars) {
        output.WriteMessage(21, field_names[54], ActionBindingTogglemonsterhpbars);
      }
      if (hasActionBindingToggleplayerhpbars) {
        output.WriteMessage(22, field_names[55], ActionBindingToggleplayerhpbars);
      }
      if (hasActionBindingToggledamagenumbers) {
        output.WriteMessage(23, field_names[52], ActionBindingToggledamagenumbers);
      }
      if (hasActionBindingToggleitemsonground) {
        output.WriteMessage(24, field_names[53], ActionBindingToggleitemsonground);
      }
      if (hasActionBindingRewhisper) {
        output.WriteMessage(25, field_names[36], ActionBindingRewhisper);
      }
      if (hasActionBindingWhisperreply) {
        output.WriteMessage(26, field_names[58], ActionBindingWhisperreply);
      }
      if (hasActionBindingVoiceptt) {
        output.WriteMessage(27, field_names[56], ActionBindingVoiceptt);
      }
      if (hasActionBindingSkill1) {
        output.WriteMessage(28, field_names[38], ActionBindingSkill1);
      }
      if (hasActionBindingSkill2) {
        output.WriteMessage(29, field_names[39], ActionBindingSkill2);
      }
      if (hasActionBindingSkill3) {
        output.WriteMessage(30, field_names[40], ActionBindingSkill3);
      }
      if (hasActionBindingSkill4) {
        output.WriteMessage(31, field_names[41], ActionBindingSkill4);
      }
      if (hasActionBindingPotion) {
        output.WriteMessage(32, field_names[32], ActionBindingPotion);
      }
      if (hasActionBindingBannerdrop) {
        output.WriteMessage(33, field_names[2], ActionBindingBannerdrop);
      }
      if (hasActionBindingZoom) {
        output.WriteMessage(34, field_names[60], ActionBindingZoom);
      }
      if (hasActionBindingEmotefollow) {
        output.WriteMessage(35, field_names[10], ActionBindingEmotefollow);
      }
      if (hasActionBindingEmotegive) {
        output.WriteMessage(36, field_names[11], ActionBindingEmotegive);
      }
      if (hasActionBindingEmotethanks) {
        output.WriteMessage(37, field_names[22], ActionBindingEmotethanks);
      }
      if (hasActionBindingEmotesorry) {
        output.WriteMessage(38, field_names[19], ActionBindingEmotesorry);
      }
      if (hasActionBindingEmotebye) {
        output.WriteMessage(39, field_names[8], ActionBindingEmotebye);
      }
      if (hasActionBindingEmotedie) {
        output.WriteMessage(40, field_names[9], ActionBindingEmotedie);
      }
      if (hasActionBindingEmoterun) {
        output.WriteMessage(41, field_names[18], ActionBindingEmoterun);
      }
      if (hasActionBindingEmotewait) {
        output.WriteMessage(42, field_names[23], ActionBindingEmotewait);
      }
      if (hasActionBindingEmotego) {
        output.WriteMessage(43, field_names[12], ActionBindingEmotego);
      }
      if (hasActionBindingEmotehelp) {
        output.WriteMessage(44, field_names[13], ActionBindingEmotehelp);
      }
      if (hasActionBindingEmoteyes) {
        output.WriteMessage(45, field_names[24], ActionBindingEmoteyes);
      }
      if (hasActionBindingEmoteno) {
        output.WriteMessage(46, field_names[16], ActionBindingEmoteno);
      }
      if (hasActionBindingEmotestay) {
        output.WriteMessage(47, field_names[20], ActionBindingEmotestay);
      }
      if (hasActionBindingEmoteattack) {
        output.WriteMessage(48, field_names[7], ActionBindingEmoteattack);
      }
      if (hasActionBindingEmoteretreat) {
        output.WriteMessage(49, field_names[17], ActionBindingEmoteretreat);
      }
      if (hasActionBindingEmotehold) {
        output.WriteMessage(50, field_names[14], ActionBindingEmotehold);
      }
      if (hasActionBindingEmotetakeobjective) {
        output.WriteMessage(51, field_names[21], ActionBindingEmotetakeobjective);
      }
      if (hasActionBindingEmotelaugh) {
        output.WriteMessage(52, field_names[15], ActionBindingEmotelaugh);
      }
      if (hasActionBindingHoldposition) {
        output.WriteMessage(53, field_names[27], ActionBindingHoldposition);
      }
      if (hasActionBindingSystemmastervolumeup) {
        output.WriteMessage(54, field_names[47], ActionBindingSystemmastervolumeup);
      }
      if (hasActionBindingSystemmastervolumedown) {
        output.WriteMessage(55, field_names[46], ActionBindingSystemmastervolumedown);
      }
      if (hasActionBindingSystemtogglemusic) {
        output.WriteMessage(56, field_names[50], ActionBindingSystemtogglemusic);
      }
      if (hasActionBindingSystemtogglesound) {
        output.WriteMessage(57, field_names[51], ActionBindingSystemtogglesound);
      }
      if (hasActionBindingSystemscreenshot) {
        output.WriteMessage(58, field_names[48], ActionBindingSystemscreenshot);
      }
      if (hasActionBindingStoneofrecall) {
        output.WriteMessage(59, field_names[45], ActionBindingStoneofrecall);
      }
      if (hasActionBindingBannerscreen) {
        output.WriteMessage(60, field_names[3], ActionBindingBannerscreen);
      }
      if (hasActionBindingLmb) {
        output.WriteMessage(61, field_names[29], ActionBindingLmb);
      }
      if (hasActionBindingRmb) {
        output.WriteMessage(62, field_names[37], ActionBindingRmb);
      }
      if (hasActionBindingWalk) {
        output.WriteMessage(63, field_names[57], ActionBindingWalk);
      }
      if (hasActionBindingSystemtogglefps) {
        output.WriteMessage(64, field_names[49], ActionBindingSystemtogglefps);
      }
      if (hasActionBindingQuests) {
        output.WriteMessage(74, field_names[34], ActionBindingQuests);
      }
      if (hasNotifyDuration) {
        output.WriteUInt32(100, field_names[63], NotifyDuration);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Flags);
        }
        if (hasItemsOnGroundSetting) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ItemsOnGroundSetting);
        }
        if (hasActionBindingInventory) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ActionBindingInventory);
        }
        if (hasActionBindingHireling) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ActionBindingHireling);
        }
        if (hasActionBindingSkills) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, ActionBindingSkills);
        }
        if (hasActionBindingQuests) {
          size += pb::CodedOutputStream.ComputeMessageSize(74, ActionBindingQuests);
        }
        if (hasActionBindingLore) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, ActionBindingLore);
        }
        if (hasActionBindingSocial) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, ActionBindingSocial);
        }
        if (hasActionBindingWorldmap) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, ActionBindingWorldmap);
        }
        if (hasActionBindingHelp) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, ActionBindingHelp);
        }
        if (hasActionBindingRecentplayers) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, ActionBindingRecentplayers);
        }
        if (hasActionBindingChatlobby) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, ActionBindingChatlobby);
        }
        if (hasActionBindingAchievements) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, ActionBindingAchievements);
        }
        if (hasActionBindingProfile) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, ActionBindingProfile);
        }
        if (hasActionBindingAuctionhouse) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, ActionBindingAuctionhouse);
        }
        if (hasActionBindingClear) {
          size += pb::CodedOutputStream.ComputeMessageSize(17, ActionBindingClear);
        }
        if (hasActionBindingConsole) {
          size += pb::CodedOutputStream.ComputeMessageSize(18, ActionBindingConsole);
        }
        if (hasActionBindingMap) {
          size += pb::CodedOutputStream.ComputeMessageSize(19, ActionBindingMap);
        }
        if (hasActionBindingSkillcycle) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, ActionBindingSkillcycle);
        }
        if (hasActionBindingTogglemonsterhpbars) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, ActionBindingTogglemonsterhpbars);
        }
        if (hasActionBindingToggleplayerhpbars) {
          size += pb::CodedOutputStream.ComputeMessageSize(22, ActionBindingToggleplayerhpbars);
        }
        if (hasActionBindingToggledamagenumbers) {
          size += pb::CodedOutputStream.ComputeMessageSize(23, ActionBindingToggledamagenumbers);
        }
        if (hasActionBindingToggleitemsonground) {
          size += pb::CodedOutputStream.ComputeMessageSize(24, ActionBindingToggleitemsonground);
        }
        if (hasActionBindingRewhisper) {
          size += pb::CodedOutputStream.ComputeMessageSize(25, ActionBindingRewhisper);
        }
        if (hasActionBindingWhisperreply) {
          size += pb::CodedOutputStream.ComputeMessageSize(26, ActionBindingWhisperreply);
        }
        if (hasActionBindingVoiceptt) {
          size += pb::CodedOutputStream.ComputeMessageSize(27, ActionBindingVoiceptt);
        }
        if (hasActionBindingSkill1) {
          size += pb::CodedOutputStream.ComputeMessageSize(28, ActionBindingSkill1);
        }
        if (hasActionBindingSkill2) {
          size += pb::CodedOutputStream.ComputeMessageSize(29, ActionBindingSkill2);
        }
        if (hasActionBindingSkill3) {
          size += pb::CodedOutputStream.ComputeMessageSize(30, ActionBindingSkill3);
        }
        if (hasActionBindingSkill4) {
          size += pb::CodedOutputStream.ComputeMessageSize(31, ActionBindingSkill4);
        }
        if (hasActionBindingPotion) {
          size += pb::CodedOutputStream.ComputeMessageSize(32, ActionBindingPotion);
        }
        if (hasActionBindingBannerdrop) {
          size += pb::CodedOutputStream.ComputeMessageSize(33, ActionBindingBannerdrop);
        }
        if (hasActionBindingZoom) {
          size += pb::CodedOutputStream.ComputeMessageSize(34, ActionBindingZoom);
        }
        if (hasActionBindingEmotefollow) {
          size += pb::CodedOutputStream.ComputeMessageSize(35, ActionBindingEmotefollow);
        }
        if (hasActionBindingEmotegive) {
          size += pb::CodedOutputStream.ComputeMessageSize(36, ActionBindingEmotegive);
        }
        if (hasActionBindingEmotethanks) {
          size += pb::CodedOutputStream.ComputeMessageSize(37, ActionBindingEmotethanks);
        }
        if (hasActionBindingEmotesorry) {
          size += pb::CodedOutputStream.ComputeMessageSize(38, ActionBindingEmotesorry);
        }
        if (hasActionBindingEmotebye) {
          size += pb::CodedOutputStream.ComputeMessageSize(39, ActionBindingEmotebye);
        }
        if (hasActionBindingEmotedie) {
          size += pb::CodedOutputStream.ComputeMessageSize(40, ActionBindingEmotedie);
        }
        if (hasActionBindingEmoterun) {
          size += pb::CodedOutputStream.ComputeMessageSize(41, ActionBindingEmoterun);
        }
        if (hasActionBindingEmotewait) {
          size += pb::CodedOutputStream.ComputeMessageSize(42, ActionBindingEmotewait);
        }
        if (hasActionBindingEmotego) {
          size += pb::CodedOutputStream.ComputeMessageSize(43, ActionBindingEmotego);
        }
        if (hasActionBindingEmotehelp) {
          size += pb::CodedOutputStream.ComputeMessageSize(44, ActionBindingEmotehelp);
        }
        if (hasActionBindingEmoteyes) {
          size += pb::CodedOutputStream.ComputeMessageSize(45, ActionBindingEmoteyes);
        }
        if (hasActionBindingEmoteno) {
          size += pb::CodedOutputStream.ComputeMessageSize(46, ActionBindingEmoteno);
        }
        if (hasActionBindingEmotestay) {
          size += pb::CodedOutputStream.ComputeMessageSize(47, ActionBindingEmotestay);
        }
        if (hasActionBindingEmoteattack) {
          size += pb::CodedOutputStream.ComputeMessageSize(48, ActionBindingEmoteattack);
        }
        if (hasActionBindingEmoteretreat) {
          size += pb::CodedOutputStream.ComputeMessageSize(49, ActionBindingEmoteretreat);
        }
        if (hasActionBindingEmotehold) {
          size += pb::CodedOutputStream.ComputeMessageSize(50, ActionBindingEmotehold);
        }
        if (hasActionBindingEmotetakeobjective) {
          size += pb::CodedOutputStream.ComputeMessageSize(51, ActionBindingEmotetakeobjective);
        }
        if (hasActionBindingEmotelaugh) {
          size += pb::CodedOutputStream.ComputeMessageSize(52, ActionBindingEmotelaugh);
        }
        if (hasActionBindingHoldposition) {
          size += pb::CodedOutputStream.ComputeMessageSize(53, ActionBindingHoldposition);
        }
        if (hasActionBindingSystemmastervolumeup) {
          size += pb::CodedOutputStream.ComputeMessageSize(54, ActionBindingSystemmastervolumeup);
        }
        if (hasActionBindingSystemmastervolumedown) {
          size += pb::CodedOutputStream.ComputeMessageSize(55, ActionBindingSystemmastervolumedown);
        }
        if (hasActionBindingSystemtogglemusic) {
          size += pb::CodedOutputStream.ComputeMessageSize(56, ActionBindingSystemtogglemusic);
        }
        if (hasActionBindingSystemtogglesound) {
          size += pb::CodedOutputStream.ComputeMessageSize(57, ActionBindingSystemtogglesound);
        }
        if (hasActionBindingSystemscreenshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(58, ActionBindingSystemscreenshot);
        }
        if (hasActionBindingStoneofrecall) {
          size += pb::CodedOutputStream.ComputeMessageSize(59, ActionBindingStoneofrecall);
        }
        if (hasActionBindingBannerscreen) {
          size += pb::CodedOutputStream.ComputeMessageSize(60, ActionBindingBannerscreen);
        }
        if (hasActionBindingLmb) {
          size += pb::CodedOutputStream.ComputeMessageSize(61, ActionBindingLmb);
        }
        if (hasActionBindingRmb) {
          size += pb::CodedOutputStream.ComputeMessageSize(62, ActionBindingRmb);
        }
        if (hasActionBindingWalk) {
          size += pb::CodedOutputStream.ComputeMessageSize(63, ActionBindingWalk);
        }
        if (hasActionBindingSystemtogglefps) {
          size += pb::CodedOutputStream.ComputeMessageSize(64, ActionBindingSystemtogglefps);
        }
        if (hasNotifyDuration) {
          size += pb::CodedOutputStream.ComputeUInt32Size(100, NotifyDuration);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Preferences ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Preferences ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Preferences ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Preferences ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Preferences ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Preferences ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Preferences ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Preferences ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Preferences ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Preferences ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Preferences MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Preferences prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Preferences, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Preferences cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Preferences result;
      
      private Preferences PrepareBuilder() {
        if (resultIsReadOnly) {
          Preferences original = result;
          result = new Preferences();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Preferences MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Client.Preferences.Descriptor; }
      }
      
      public override Preferences DefaultInstanceForType {
        get { return global::D3.Client.Preferences.DefaultInstance; }
      }
      
      public override Preferences BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Preferences) {
          return MergeFrom((Preferences) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Preferences other) {
        if (other == global::D3.Client.Preferences.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasItemsOnGroundSetting) {
          ItemsOnGroundSetting = other.ItemsOnGroundSetting;
        }
        if (other.HasActionBindingInventory) {
          MergeActionBindingInventory(other.ActionBindingInventory);
        }
        if (other.HasActionBindingHireling) {
          MergeActionBindingHireling(other.ActionBindingHireling);
        }
        if (other.HasActionBindingSkills) {
          MergeActionBindingSkills(other.ActionBindingSkills);
        }
        if (other.HasActionBindingQuests) {
          MergeActionBindingQuests(other.ActionBindingQuests);
        }
        if (other.HasActionBindingLore) {
          MergeActionBindingLore(other.ActionBindingLore);
        }
        if (other.HasActionBindingSocial) {
          MergeActionBindingSocial(other.ActionBindingSocial);
        }
        if (other.HasActionBindingWorldmap) {
          MergeActionBindingWorldmap(other.ActionBindingWorldmap);
        }
        if (other.HasActionBindingHelp) {
          MergeActionBindingHelp(other.ActionBindingHelp);
        }
        if (other.HasActionBindingRecentplayers) {
          MergeActionBindingRecentplayers(other.ActionBindingRecentplayers);
        }
        if (other.HasActionBindingChatlobby) {
          MergeActionBindingChatlobby(other.ActionBindingChatlobby);
        }
        if (other.HasActionBindingAchievements) {
          MergeActionBindingAchievements(other.ActionBindingAchievements);
        }
        if (other.HasActionBindingProfile) {
          MergeActionBindingProfile(other.ActionBindingProfile);
        }
        if (other.HasActionBindingAuctionhouse) {
          MergeActionBindingAuctionhouse(other.ActionBindingAuctionhouse);
        }
        if (other.HasActionBindingClear) {
          MergeActionBindingClear(other.ActionBindingClear);
        }
        if (other.HasActionBindingConsole) {
          MergeActionBindingConsole(other.ActionBindingConsole);
        }
        if (other.HasActionBindingMap) {
          MergeActionBindingMap(other.ActionBindingMap);
        }
        if (other.HasActionBindingSkillcycle) {
          MergeActionBindingSkillcycle(other.ActionBindingSkillcycle);
        }
        if (other.HasActionBindingTogglemonsterhpbars) {
          MergeActionBindingTogglemonsterhpbars(other.ActionBindingTogglemonsterhpbars);
        }
        if (other.HasActionBindingToggleplayerhpbars) {
          MergeActionBindingToggleplayerhpbars(other.ActionBindingToggleplayerhpbars);
        }
        if (other.HasActionBindingToggledamagenumbers) {
          MergeActionBindingToggledamagenumbers(other.ActionBindingToggledamagenumbers);
        }
        if (other.HasActionBindingToggleitemsonground) {
          MergeActionBindingToggleitemsonground(other.ActionBindingToggleitemsonground);
        }
        if (other.HasActionBindingRewhisper) {
          MergeActionBindingRewhisper(other.ActionBindingRewhisper);
        }
        if (other.HasActionBindingWhisperreply) {
          MergeActionBindingWhisperreply(other.ActionBindingWhisperreply);
        }
        if (other.HasActionBindingVoiceptt) {
          MergeActionBindingVoiceptt(other.ActionBindingVoiceptt);
        }
        if (other.HasActionBindingSkill1) {
          MergeActionBindingSkill1(other.ActionBindingSkill1);
        }
        if (other.HasActionBindingSkill2) {
          MergeActionBindingSkill2(other.ActionBindingSkill2);
        }
        if (other.HasActionBindingSkill3) {
          MergeActionBindingSkill3(other.ActionBindingSkill3);
        }
        if (other.HasActionBindingSkill4) {
          MergeActionBindingSkill4(other.ActionBindingSkill4);
        }
        if (other.HasActionBindingPotion) {
          MergeActionBindingPotion(other.ActionBindingPotion);
        }
        if (other.HasActionBindingBannerdrop) {
          MergeActionBindingBannerdrop(other.ActionBindingBannerdrop);
        }
        if (other.HasActionBindingZoom) {
          MergeActionBindingZoom(other.ActionBindingZoom);
        }
        if (other.HasActionBindingEmotefollow) {
          MergeActionBindingEmotefollow(other.ActionBindingEmotefollow);
        }
        if (other.HasActionBindingEmotegive) {
          MergeActionBindingEmotegive(other.ActionBindingEmotegive);
        }
        if (other.HasActionBindingEmotethanks) {
          MergeActionBindingEmotethanks(other.ActionBindingEmotethanks);
        }
        if (other.HasActionBindingEmotesorry) {
          MergeActionBindingEmotesorry(other.ActionBindingEmotesorry);
        }
        if (other.HasActionBindingEmotebye) {
          MergeActionBindingEmotebye(other.ActionBindingEmotebye);
        }
        if (other.HasActionBindingEmotedie) {
          MergeActionBindingEmotedie(other.ActionBindingEmotedie);
        }
        if (other.HasActionBindingEmoterun) {
          MergeActionBindingEmoterun(other.ActionBindingEmoterun);
        }
        if (other.HasActionBindingEmotewait) {
          MergeActionBindingEmotewait(other.ActionBindingEmotewait);
        }
        if (other.HasActionBindingEmotego) {
          MergeActionBindingEmotego(other.ActionBindingEmotego);
        }
        if (other.HasActionBindingEmotehelp) {
          MergeActionBindingEmotehelp(other.ActionBindingEmotehelp);
        }
        if (other.HasActionBindingEmoteyes) {
          MergeActionBindingEmoteyes(other.ActionBindingEmoteyes);
        }
        if (other.HasActionBindingEmoteno) {
          MergeActionBindingEmoteno(other.ActionBindingEmoteno);
        }
        if (other.HasActionBindingEmotestay) {
          MergeActionBindingEmotestay(other.ActionBindingEmotestay);
        }
        if (other.HasActionBindingEmoteattack) {
          MergeActionBindingEmoteattack(other.ActionBindingEmoteattack);
        }
        if (other.HasActionBindingEmoteretreat) {
          MergeActionBindingEmoteretreat(other.ActionBindingEmoteretreat);
        }
        if (other.HasActionBindingEmotehold) {
          MergeActionBindingEmotehold(other.ActionBindingEmotehold);
        }
        if (other.HasActionBindingEmotetakeobjective) {
          MergeActionBindingEmotetakeobjective(other.ActionBindingEmotetakeobjective);
        }
        if (other.HasActionBindingEmotelaugh) {
          MergeActionBindingEmotelaugh(other.ActionBindingEmotelaugh);
        }
        if (other.HasActionBindingHoldposition) {
          MergeActionBindingHoldposition(other.ActionBindingHoldposition);
        }
        if (other.HasActionBindingSystemmastervolumeup) {
          MergeActionBindingSystemmastervolumeup(other.ActionBindingSystemmastervolumeup);
        }
        if (other.HasActionBindingSystemmastervolumedown) {
          MergeActionBindingSystemmastervolumedown(other.ActionBindingSystemmastervolumedown);
        }
        if (other.HasActionBindingSystemtogglemusic) {
          MergeActionBindingSystemtogglemusic(other.ActionBindingSystemtogglemusic);
        }
        if (other.HasActionBindingSystemtogglesound) {
          MergeActionBindingSystemtogglesound(other.ActionBindingSystemtogglesound);
        }
        if (other.HasActionBindingSystemscreenshot) {
          MergeActionBindingSystemscreenshot(other.ActionBindingSystemscreenshot);
        }
        if (other.HasActionBindingStoneofrecall) {
          MergeActionBindingStoneofrecall(other.ActionBindingStoneofrecall);
        }
        if (other.HasActionBindingBannerscreen) {
          MergeActionBindingBannerscreen(other.ActionBindingBannerscreen);
        }
        if (other.HasActionBindingLmb) {
          MergeActionBindingLmb(other.ActionBindingLmb);
        }
        if (other.HasActionBindingRmb) {
          MergeActionBindingRmb(other.ActionBindingRmb);
        }
        if (other.HasActionBindingWalk) {
          MergeActionBindingWalk(other.ActionBindingWalk);
        }
        if (other.HasActionBindingSystemtogglefps) {
          MergeActionBindingSystemtogglefps(other.ActionBindingSystemtogglefps);
        }
        if (other.HasNotifyDuration) {
          NotifyDuration = other.NotifyDuration;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_preferencesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _preferencesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 16: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
            case 24: {
              result.hasItemsOnGroundSetting = input.ReadUInt32(ref result.itemsOnGroundSetting_);
              break;
            }
            case 34: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingInventory) {
                subBuilder.MergeFrom(ActionBindingInventory);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingInventory = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingHireling) {
                subBuilder.MergeFrom(ActionBindingHireling);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingHireling = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSkills) {
                subBuilder.MergeFrom(ActionBindingSkills);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSkills = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingLore) {
                subBuilder.MergeFrom(ActionBindingLore);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingLore = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSocial) {
                subBuilder.MergeFrom(ActionBindingSocial);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSocial = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingWorldmap) {
                subBuilder.MergeFrom(ActionBindingWorldmap);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingWorldmap = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingHelp) {
                subBuilder.MergeFrom(ActionBindingHelp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingHelp = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingRecentplayers) {
                subBuilder.MergeFrom(ActionBindingRecentplayers);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingRecentplayers = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingChatlobby) {
                subBuilder.MergeFrom(ActionBindingChatlobby);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingChatlobby = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingAchievements) {
                subBuilder.MergeFrom(ActionBindingAchievements);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingAchievements = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingProfile) {
                subBuilder.MergeFrom(ActionBindingProfile);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingProfile = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingAuctionhouse) {
                subBuilder.MergeFrom(ActionBindingAuctionhouse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingAuctionhouse = subBuilder.BuildPartial();
              break;
            }
            case 138: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingClear) {
                subBuilder.MergeFrom(ActionBindingClear);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingClear = subBuilder.BuildPartial();
              break;
            }
            case 146: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingConsole) {
                subBuilder.MergeFrom(ActionBindingConsole);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingConsole = subBuilder.BuildPartial();
              break;
            }
            case 154: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingMap) {
                subBuilder.MergeFrom(ActionBindingMap);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingMap = subBuilder.BuildPartial();
              break;
            }
            case 162: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSkillcycle) {
                subBuilder.MergeFrom(ActionBindingSkillcycle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSkillcycle = subBuilder.BuildPartial();
              break;
            }
            case 170: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingTogglemonsterhpbars) {
                subBuilder.MergeFrom(ActionBindingTogglemonsterhpbars);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingTogglemonsterhpbars = subBuilder.BuildPartial();
              break;
            }
            case 178: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingToggleplayerhpbars) {
                subBuilder.MergeFrom(ActionBindingToggleplayerhpbars);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingToggleplayerhpbars = subBuilder.BuildPartial();
              break;
            }
            case 186: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingToggledamagenumbers) {
                subBuilder.MergeFrom(ActionBindingToggledamagenumbers);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingToggledamagenumbers = subBuilder.BuildPartial();
              break;
            }
            case 194: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingToggleitemsonground) {
                subBuilder.MergeFrom(ActionBindingToggleitemsonground);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingToggleitemsonground = subBuilder.BuildPartial();
              break;
            }
            case 202: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingRewhisper) {
                subBuilder.MergeFrom(ActionBindingRewhisper);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingRewhisper = subBuilder.BuildPartial();
              break;
            }
            case 210: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingWhisperreply) {
                subBuilder.MergeFrom(ActionBindingWhisperreply);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingWhisperreply = subBuilder.BuildPartial();
              break;
            }
            case 218: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingVoiceptt) {
                subBuilder.MergeFrom(ActionBindingVoiceptt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingVoiceptt = subBuilder.BuildPartial();
              break;
            }
            case 226: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSkill1) {
                subBuilder.MergeFrom(ActionBindingSkill1);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSkill1 = subBuilder.BuildPartial();
              break;
            }
            case 234: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSkill2) {
                subBuilder.MergeFrom(ActionBindingSkill2);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSkill2 = subBuilder.BuildPartial();
              break;
            }
            case 242: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSkill3) {
                subBuilder.MergeFrom(ActionBindingSkill3);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSkill3 = subBuilder.BuildPartial();
              break;
            }
            case 250: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSkill4) {
                subBuilder.MergeFrom(ActionBindingSkill4);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSkill4 = subBuilder.BuildPartial();
              break;
            }
            case 258: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingPotion) {
                subBuilder.MergeFrom(ActionBindingPotion);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingPotion = subBuilder.BuildPartial();
              break;
            }
            case 266: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingBannerdrop) {
                subBuilder.MergeFrom(ActionBindingBannerdrop);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingBannerdrop = subBuilder.BuildPartial();
              break;
            }
            case 274: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingZoom) {
                subBuilder.MergeFrom(ActionBindingZoom);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingZoom = subBuilder.BuildPartial();
              break;
            }
            case 282: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotefollow) {
                subBuilder.MergeFrom(ActionBindingEmotefollow);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotefollow = subBuilder.BuildPartial();
              break;
            }
            case 290: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotegive) {
                subBuilder.MergeFrom(ActionBindingEmotegive);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotegive = subBuilder.BuildPartial();
              break;
            }
            case 298: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotethanks) {
                subBuilder.MergeFrom(ActionBindingEmotethanks);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotethanks = subBuilder.BuildPartial();
              break;
            }
            case 306: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotesorry) {
                subBuilder.MergeFrom(ActionBindingEmotesorry);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotesorry = subBuilder.BuildPartial();
              break;
            }
            case 314: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotebye) {
                subBuilder.MergeFrom(ActionBindingEmotebye);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotebye = subBuilder.BuildPartial();
              break;
            }
            case 322: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotedie) {
                subBuilder.MergeFrom(ActionBindingEmotedie);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotedie = subBuilder.BuildPartial();
              break;
            }
            case 330: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmoterun) {
                subBuilder.MergeFrom(ActionBindingEmoterun);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmoterun = subBuilder.BuildPartial();
              break;
            }
            case 338: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotewait) {
                subBuilder.MergeFrom(ActionBindingEmotewait);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotewait = subBuilder.BuildPartial();
              break;
            }
            case 346: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotego) {
                subBuilder.MergeFrom(ActionBindingEmotego);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotego = subBuilder.BuildPartial();
              break;
            }
            case 354: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotehelp) {
                subBuilder.MergeFrom(ActionBindingEmotehelp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotehelp = subBuilder.BuildPartial();
              break;
            }
            case 362: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmoteyes) {
                subBuilder.MergeFrom(ActionBindingEmoteyes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmoteyes = subBuilder.BuildPartial();
              break;
            }
            case 370: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmoteno) {
                subBuilder.MergeFrom(ActionBindingEmoteno);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmoteno = subBuilder.BuildPartial();
              break;
            }
            case 378: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotestay) {
                subBuilder.MergeFrom(ActionBindingEmotestay);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotestay = subBuilder.BuildPartial();
              break;
            }
            case 386: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmoteattack) {
                subBuilder.MergeFrom(ActionBindingEmoteattack);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmoteattack = subBuilder.BuildPartial();
              break;
            }
            case 394: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmoteretreat) {
                subBuilder.MergeFrom(ActionBindingEmoteretreat);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmoteretreat = subBuilder.BuildPartial();
              break;
            }
            case 402: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotehold) {
                subBuilder.MergeFrom(ActionBindingEmotehold);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotehold = subBuilder.BuildPartial();
              break;
            }
            case 410: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotetakeobjective) {
                subBuilder.MergeFrom(ActionBindingEmotetakeobjective);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotetakeobjective = subBuilder.BuildPartial();
              break;
            }
            case 418: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingEmotelaugh) {
                subBuilder.MergeFrom(ActionBindingEmotelaugh);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingEmotelaugh = subBuilder.BuildPartial();
              break;
            }
            case 426: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingHoldposition) {
                subBuilder.MergeFrom(ActionBindingHoldposition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingHoldposition = subBuilder.BuildPartial();
              break;
            }
            case 434: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSystemmastervolumeup) {
                subBuilder.MergeFrom(ActionBindingSystemmastervolumeup);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSystemmastervolumeup = subBuilder.BuildPartial();
              break;
            }
            case 442: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSystemmastervolumedown) {
                subBuilder.MergeFrom(ActionBindingSystemmastervolumedown);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSystemmastervolumedown = subBuilder.BuildPartial();
              break;
            }
            case 450: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSystemtogglemusic) {
                subBuilder.MergeFrom(ActionBindingSystemtogglemusic);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSystemtogglemusic = subBuilder.BuildPartial();
              break;
            }
            case 458: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSystemtogglesound) {
                subBuilder.MergeFrom(ActionBindingSystemtogglesound);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSystemtogglesound = subBuilder.BuildPartial();
              break;
            }
            case 466: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSystemscreenshot) {
                subBuilder.MergeFrom(ActionBindingSystemscreenshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSystemscreenshot = subBuilder.BuildPartial();
              break;
            }
            case 474: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingStoneofrecall) {
                subBuilder.MergeFrom(ActionBindingStoneofrecall);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingStoneofrecall = subBuilder.BuildPartial();
              break;
            }
            case 482: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingBannerscreen) {
                subBuilder.MergeFrom(ActionBindingBannerscreen);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingBannerscreen = subBuilder.BuildPartial();
              break;
            }
            case 490: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingLmb) {
                subBuilder.MergeFrom(ActionBindingLmb);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingLmb = subBuilder.BuildPartial();
              break;
            }
            case 498: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingRmb) {
                subBuilder.MergeFrom(ActionBindingRmb);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingRmb = subBuilder.BuildPartial();
              break;
            }
            case 506: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingWalk) {
                subBuilder.MergeFrom(ActionBindingWalk);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingWalk = subBuilder.BuildPartial();
              break;
            }
            case 514: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingSystemtogglefps) {
                subBuilder.MergeFrom(ActionBindingSystemtogglefps);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingSystemtogglefps = subBuilder.BuildPartial();
              break;
            }
            case 594: {
              global::D3.Client.ActionBinding.Builder subBuilder = global::D3.Client.ActionBinding.CreateBuilder();
              if (result.hasActionBindingQuests) {
                subBuilder.MergeFrom(ActionBindingQuests);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActionBindingQuests = subBuilder.BuildPartial();
              break;
            }
            case 800: {
              result.hasNotifyDuration = input.ReadUInt32(ref result.notifyDuration_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public bool HasItemsOnGroundSetting {
        get { return result.hasItemsOnGroundSetting; }
      }
      public uint ItemsOnGroundSetting {
        get { return result.ItemsOnGroundSetting; }
        set { SetItemsOnGroundSetting(value); }
      }
      public Builder SetItemsOnGroundSetting(uint value) {
        PrepareBuilder();
        result.hasItemsOnGroundSetting = true;
        result.itemsOnGroundSetting_ = value;
        return this;
      }
      public Builder ClearItemsOnGroundSetting() {
        PrepareBuilder();
        result.hasItemsOnGroundSetting = false;
        result.itemsOnGroundSetting_ = 0;
        return this;
      }
      
      public bool HasActionBindingInventory {
       get { return result.hasActionBindingInventory; }
      }
      public global::D3.Client.ActionBinding ActionBindingInventory {
        get { return result.ActionBindingInventory; }
        set { SetActionBindingInventory(value); }
      }
      public Builder SetActionBindingInventory(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingInventory = true;
        result.actionBindingInventory_ = value;
        return this;
      }
      public Builder SetActionBindingInventory(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingInventory = true;
        result.actionBindingInventory_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingInventory(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingInventory &&
            result.actionBindingInventory_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingInventory_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingInventory_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingInventory_ = value;
        }
        result.hasActionBindingInventory = true;
        return this;
      }
      public Builder ClearActionBindingInventory() {
        PrepareBuilder();
        result.hasActionBindingInventory = false;
        result.actionBindingInventory_ = null;
        return this;
      }
      
      public bool HasActionBindingHireling {
       get { return result.hasActionBindingHireling; }
      }
      public global::D3.Client.ActionBinding ActionBindingHireling {
        get { return result.ActionBindingHireling; }
        set { SetActionBindingHireling(value); }
      }
      public Builder SetActionBindingHireling(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingHireling = true;
        result.actionBindingHireling_ = value;
        return this;
      }
      public Builder SetActionBindingHireling(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingHireling = true;
        result.actionBindingHireling_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingHireling(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingHireling &&
            result.actionBindingHireling_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingHireling_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingHireling_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingHireling_ = value;
        }
        result.hasActionBindingHireling = true;
        return this;
      }
      public Builder ClearActionBindingHireling() {
        PrepareBuilder();
        result.hasActionBindingHireling = false;
        result.actionBindingHireling_ = null;
        return this;
      }
      
      public bool HasActionBindingSkills {
       get { return result.hasActionBindingSkills; }
      }
      public global::D3.Client.ActionBinding ActionBindingSkills {
        get { return result.ActionBindingSkills; }
        set { SetActionBindingSkills(value); }
      }
      public Builder SetActionBindingSkills(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSkills = true;
        result.actionBindingSkills_ = value;
        return this;
      }
      public Builder SetActionBindingSkills(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSkills = true;
        result.actionBindingSkills_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSkills(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSkills &&
            result.actionBindingSkills_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSkills_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSkills_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSkills_ = value;
        }
        result.hasActionBindingSkills = true;
        return this;
      }
      public Builder ClearActionBindingSkills() {
        PrepareBuilder();
        result.hasActionBindingSkills = false;
        result.actionBindingSkills_ = null;
        return this;
      }
      
      public bool HasActionBindingQuests {
       get { return result.hasActionBindingQuests; }
      }
      public global::D3.Client.ActionBinding ActionBindingQuests {
        get { return result.ActionBindingQuests; }
        set { SetActionBindingQuests(value); }
      }
      public Builder SetActionBindingQuests(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingQuests = true;
        result.actionBindingQuests_ = value;
        return this;
      }
      public Builder SetActionBindingQuests(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingQuests = true;
        result.actionBindingQuests_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingQuests(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingQuests &&
            result.actionBindingQuests_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingQuests_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingQuests_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingQuests_ = value;
        }
        result.hasActionBindingQuests = true;
        return this;
      }
      public Builder ClearActionBindingQuests() {
        PrepareBuilder();
        result.hasActionBindingQuests = false;
        result.actionBindingQuests_ = null;
        return this;
      }
      
      public bool HasActionBindingLore {
       get { return result.hasActionBindingLore; }
      }
      public global::D3.Client.ActionBinding ActionBindingLore {
        get { return result.ActionBindingLore; }
        set { SetActionBindingLore(value); }
      }
      public Builder SetActionBindingLore(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingLore = true;
        result.actionBindingLore_ = value;
        return this;
      }
      public Builder SetActionBindingLore(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingLore = true;
        result.actionBindingLore_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingLore(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingLore &&
            result.actionBindingLore_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingLore_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingLore_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingLore_ = value;
        }
        result.hasActionBindingLore = true;
        return this;
      }
      public Builder ClearActionBindingLore() {
        PrepareBuilder();
        result.hasActionBindingLore = false;
        result.actionBindingLore_ = null;
        return this;
      }
      
      public bool HasActionBindingSocial {
       get { return result.hasActionBindingSocial; }
      }
      public global::D3.Client.ActionBinding ActionBindingSocial {
        get { return result.ActionBindingSocial; }
        set { SetActionBindingSocial(value); }
      }
      public Builder SetActionBindingSocial(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSocial = true;
        result.actionBindingSocial_ = value;
        return this;
      }
      public Builder SetActionBindingSocial(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSocial = true;
        result.actionBindingSocial_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSocial(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSocial &&
            result.actionBindingSocial_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSocial_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSocial_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSocial_ = value;
        }
        result.hasActionBindingSocial = true;
        return this;
      }
      public Builder ClearActionBindingSocial() {
        PrepareBuilder();
        result.hasActionBindingSocial = false;
        result.actionBindingSocial_ = null;
        return this;
      }
      
      public bool HasActionBindingWorldmap {
       get { return result.hasActionBindingWorldmap; }
      }
      public global::D3.Client.ActionBinding ActionBindingWorldmap {
        get { return result.ActionBindingWorldmap; }
        set { SetActionBindingWorldmap(value); }
      }
      public Builder SetActionBindingWorldmap(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingWorldmap = true;
        result.actionBindingWorldmap_ = value;
        return this;
      }
      public Builder SetActionBindingWorldmap(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingWorldmap = true;
        result.actionBindingWorldmap_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingWorldmap(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingWorldmap &&
            result.actionBindingWorldmap_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingWorldmap_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingWorldmap_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingWorldmap_ = value;
        }
        result.hasActionBindingWorldmap = true;
        return this;
      }
      public Builder ClearActionBindingWorldmap() {
        PrepareBuilder();
        result.hasActionBindingWorldmap = false;
        result.actionBindingWorldmap_ = null;
        return this;
      }
      
      public bool HasActionBindingHelp {
       get { return result.hasActionBindingHelp; }
      }
      public global::D3.Client.ActionBinding ActionBindingHelp {
        get { return result.ActionBindingHelp; }
        set { SetActionBindingHelp(value); }
      }
      public Builder SetActionBindingHelp(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingHelp = true;
        result.actionBindingHelp_ = value;
        return this;
      }
      public Builder SetActionBindingHelp(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingHelp = true;
        result.actionBindingHelp_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingHelp(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingHelp &&
            result.actionBindingHelp_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingHelp_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingHelp_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingHelp_ = value;
        }
        result.hasActionBindingHelp = true;
        return this;
      }
      public Builder ClearActionBindingHelp() {
        PrepareBuilder();
        result.hasActionBindingHelp = false;
        result.actionBindingHelp_ = null;
        return this;
      }
      
      public bool HasActionBindingRecentplayers {
       get { return result.hasActionBindingRecentplayers; }
      }
      public global::D3.Client.ActionBinding ActionBindingRecentplayers {
        get { return result.ActionBindingRecentplayers; }
        set { SetActionBindingRecentplayers(value); }
      }
      public Builder SetActionBindingRecentplayers(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingRecentplayers = true;
        result.actionBindingRecentplayers_ = value;
        return this;
      }
      public Builder SetActionBindingRecentplayers(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingRecentplayers = true;
        result.actionBindingRecentplayers_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingRecentplayers(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingRecentplayers &&
            result.actionBindingRecentplayers_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingRecentplayers_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingRecentplayers_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingRecentplayers_ = value;
        }
        result.hasActionBindingRecentplayers = true;
        return this;
      }
      public Builder ClearActionBindingRecentplayers() {
        PrepareBuilder();
        result.hasActionBindingRecentplayers = false;
        result.actionBindingRecentplayers_ = null;
        return this;
      }
      
      public bool HasActionBindingChatlobby {
       get { return result.hasActionBindingChatlobby; }
      }
      public global::D3.Client.ActionBinding ActionBindingChatlobby {
        get { return result.ActionBindingChatlobby; }
        set { SetActionBindingChatlobby(value); }
      }
      public Builder SetActionBindingChatlobby(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingChatlobby = true;
        result.actionBindingChatlobby_ = value;
        return this;
      }
      public Builder SetActionBindingChatlobby(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingChatlobby = true;
        result.actionBindingChatlobby_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingChatlobby(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingChatlobby &&
            result.actionBindingChatlobby_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingChatlobby_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingChatlobby_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingChatlobby_ = value;
        }
        result.hasActionBindingChatlobby = true;
        return this;
      }
      public Builder ClearActionBindingChatlobby() {
        PrepareBuilder();
        result.hasActionBindingChatlobby = false;
        result.actionBindingChatlobby_ = null;
        return this;
      }
      
      public bool HasActionBindingAchievements {
       get { return result.hasActionBindingAchievements; }
      }
      public global::D3.Client.ActionBinding ActionBindingAchievements {
        get { return result.ActionBindingAchievements; }
        set { SetActionBindingAchievements(value); }
      }
      public Builder SetActionBindingAchievements(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingAchievements = true;
        result.actionBindingAchievements_ = value;
        return this;
      }
      public Builder SetActionBindingAchievements(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingAchievements = true;
        result.actionBindingAchievements_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingAchievements(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingAchievements &&
            result.actionBindingAchievements_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingAchievements_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingAchievements_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingAchievements_ = value;
        }
        result.hasActionBindingAchievements = true;
        return this;
      }
      public Builder ClearActionBindingAchievements() {
        PrepareBuilder();
        result.hasActionBindingAchievements = false;
        result.actionBindingAchievements_ = null;
        return this;
      }
      
      public bool HasActionBindingProfile {
       get { return result.hasActionBindingProfile; }
      }
      public global::D3.Client.ActionBinding ActionBindingProfile {
        get { return result.ActionBindingProfile; }
        set { SetActionBindingProfile(value); }
      }
      public Builder SetActionBindingProfile(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingProfile = true;
        result.actionBindingProfile_ = value;
        return this;
      }
      public Builder SetActionBindingProfile(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingProfile = true;
        result.actionBindingProfile_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingProfile(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingProfile &&
            result.actionBindingProfile_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingProfile_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingProfile_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingProfile_ = value;
        }
        result.hasActionBindingProfile = true;
        return this;
      }
      public Builder ClearActionBindingProfile() {
        PrepareBuilder();
        result.hasActionBindingProfile = false;
        result.actionBindingProfile_ = null;
        return this;
      }
      
      public bool HasActionBindingAuctionhouse {
       get { return result.hasActionBindingAuctionhouse; }
      }
      public global::D3.Client.ActionBinding ActionBindingAuctionhouse {
        get { return result.ActionBindingAuctionhouse; }
        set { SetActionBindingAuctionhouse(value); }
      }
      public Builder SetActionBindingAuctionhouse(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingAuctionhouse = true;
        result.actionBindingAuctionhouse_ = value;
        return this;
      }
      public Builder SetActionBindingAuctionhouse(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingAuctionhouse = true;
        result.actionBindingAuctionhouse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingAuctionhouse(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingAuctionhouse &&
            result.actionBindingAuctionhouse_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingAuctionhouse_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingAuctionhouse_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingAuctionhouse_ = value;
        }
        result.hasActionBindingAuctionhouse = true;
        return this;
      }
      public Builder ClearActionBindingAuctionhouse() {
        PrepareBuilder();
        result.hasActionBindingAuctionhouse = false;
        result.actionBindingAuctionhouse_ = null;
        return this;
      }
      
      public bool HasActionBindingClear {
       get { return result.hasActionBindingClear; }
      }
      public global::D3.Client.ActionBinding ActionBindingClear {
        get { return result.ActionBindingClear; }
        set { SetActionBindingClear(value); }
      }
      public Builder SetActionBindingClear(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingClear = true;
        result.actionBindingClear_ = value;
        return this;
      }
      public Builder SetActionBindingClear(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingClear = true;
        result.actionBindingClear_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingClear(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingClear &&
            result.actionBindingClear_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingClear_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingClear_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingClear_ = value;
        }
        result.hasActionBindingClear = true;
        return this;
      }
      public Builder ClearActionBindingClear() {
        PrepareBuilder();
        result.hasActionBindingClear = false;
        result.actionBindingClear_ = null;
        return this;
      }
      
      public bool HasActionBindingConsole {
       get { return result.hasActionBindingConsole; }
      }
      public global::D3.Client.ActionBinding ActionBindingConsole {
        get { return result.ActionBindingConsole; }
        set { SetActionBindingConsole(value); }
      }
      public Builder SetActionBindingConsole(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingConsole = true;
        result.actionBindingConsole_ = value;
        return this;
      }
      public Builder SetActionBindingConsole(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingConsole = true;
        result.actionBindingConsole_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingConsole(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingConsole &&
            result.actionBindingConsole_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingConsole_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingConsole_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingConsole_ = value;
        }
        result.hasActionBindingConsole = true;
        return this;
      }
      public Builder ClearActionBindingConsole() {
        PrepareBuilder();
        result.hasActionBindingConsole = false;
        result.actionBindingConsole_ = null;
        return this;
      }
      
      public bool HasActionBindingMap {
       get { return result.hasActionBindingMap; }
      }
      public global::D3.Client.ActionBinding ActionBindingMap {
        get { return result.ActionBindingMap; }
        set { SetActionBindingMap(value); }
      }
      public Builder SetActionBindingMap(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingMap = true;
        result.actionBindingMap_ = value;
        return this;
      }
      public Builder SetActionBindingMap(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingMap = true;
        result.actionBindingMap_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingMap(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingMap &&
            result.actionBindingMap_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingMap_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingMap_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingMap_ = value;
        }
        result.hasActionBindingMap = true;
        return this;
      }
      public Builder ClearActionBindingMap() {
        PrepareBuilder();
        result.hasActionBindingMap = false;
        result.actionBindingMap_ = null;
        return this;
      }
      
      public bool HasActionBindingSkillcycle {
       get { return result.hasActionBindingSkillcycle; }
      }
      public global::D3.Client.ActionBinding ActionBindingSkillcycle {
        get { return result.ActionBindingSkillcycle; }
        set { SetActionBindingSkillcycle(value); }
      }
      public Builder SetActionBindingSkillcycle(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSkillcycle = true;
        result.actionBindingSkillcycle_ = value;
        return this;
      }
      public Builder SetActionBindingSkillcycle(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSkillcycle = true;
        result.actionBindingSkillcycle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSkillcycle(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSkillcycle &&
            result.actionBindingSkillcycle_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSkillcycle_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSkillcycle_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSkillcycle_ = value;
        }
        result.hasActionBindingSkillcycle = true;
        return this;
      }
      public Builder ClearActionBindingSkillcycle() {
        PrepareBuilder();
        result.hasActionBindingSkillcycle = false;
        result.actionBindingSkillcycle_ = null;
        return this;
      }
      
      public bool HasActionBindingTogglemonsterhpbars {
       get { return result.hasActionBindingTogglemonsterhpbars; }
      }
      public global::D3.Client.ActionBinding ActionBindingTogglemonsterhpbars {
        get { return result.ActionBindingTogglemonsterhpbars; }
        set { SetActionBindingTogglemonsterhpbars(value); }
      }
      public Builder SetActionBindingTogglemonsterhpbars(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingTogglemonsterhpbars = true;
        result.actionBindingTogglemonsterhpbars_ = value;
        return this;
      }
      public Builder SetActionBindingTogglemonsterhpbars(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingTogglemonsterhpbars = true;
        result.actionBindingTogglemonsterhpbars_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingTogglemonsterhpbars(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingTogglemonsterhpbars &&
            result.actionBindingTogglemonsterhpbars_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingTogglemonsterhpbars_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingTogglemonsterhpbars_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingTogglemonsterhpbars_ = value;
        }
        result.hasActionBindingTogglemonsterhpbars = true;
        return this;
      }
      public Builder ClearActionBindingTogglemonsterhpbars() {
        PrepareBuilder();
        result.hasActionBindingTogglemonsterhpbars = false;
        result.actionBindingTogglemonsterhpbars_ = null;
        return this;
      }
      
      public bool HasActionBindingToggleplayerhpbars {
       get { return result.hasActionBindingToggleplayerhpbars; }
      }
      public global::D3.Client.ActionBinding ActionBindingToggleplayerhpbars {
        get { return result.ActionBindingToggleplayerhpbars; }
        set { SetActionBindingToggleplayerhpbars(value); }
      }
      public Builder SetActionBindingToggleplayerhpbars(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingToggleplayerhpbars = true;
        result.actionBindingToggleplayerhpbars_ = value;
        return this;
      }
      public Builder SetActionBindingToggleplayerhpbars(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingToggleplayerhpbars = true;
        result.actionBindingToggleplayerhpbars_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingToggleplayerhpbars(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingToggleplayerhpbars &&
            result.actionBindingToggleplayerhpbars_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingToggleplayerhpbars_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingToggleplayerhpbars_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingToggleplayerhpbars_ = value;
        }
        result.hasActionBindingToggleplayerhpbars = true;
        return this;
      }
      public Builder ClearActionBindingToggleplayerhpbars() {
        PrepareBuilder();
        result.hasActionBindingToggleplayerhpbars = false;
        result.actionBindingToggleplayerhpbars_ = null;
        return this;
      }
      
      public bool HasActionBindingToggledamagenumbers {
       get { return result.hasActionBindingToggledamagenumbers; }
      }
      public global::D3.Client.ActionBinding ActionBindingToggledamagenumbers {
        get { return result.ActionBindingToggledamagenumbers; }
        set { SetActionBindingToggledamagenumbers(value); }
      }
      public Builder SetActionBindingToggledamagenumbers(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingToggledamagenumbers = true;
        result.actionBindingToggledamagenumbers_ = value;
        return this;
      }
      public Builder SetActionBindingToggledamagenumbers(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingToggledamagenumbers = true;
        result.actionBindingToggledamagenumbers_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingToggledamagenumbers(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingToggledamagenumbers &&
            result.actionBindingToggledamagenumbers_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingToggledamagenumbers_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingToggledamagenumbers_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingToggledamagenumbers_ = value;
        }
        result.hasActionBindingToggledamagenumbers = true;
        return this;
      }
      public Builder ClearActionBindingToggledamagenumbers() {
        PrepareBuilder();
        result.hasActionBindingToggledamagenumbers = false;
        result.actionBindingToggledamagenumbers_ = null;
        return this;
      }
      
      public bool HasActionBindingToggleitemsonground {
       get { return result.hasActionBindingToggleitemsonground; }
      }
      public global::D3.Client.ActionBinding ActionBindingToggleitemsonground {
        get { return result.ActionBindingToggleitemsonground; }
        set { SetActionBindingToggleitemsonground(value); }
      }
      public Builder SetActionBindingToggleitemsonground(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingToggleitemsonground = true;
        result.actionBindingToggleitemsonground_ = value;
        return this;
      }
      public Builder SetActionBindingToggleitemsonground(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingToggleitemsonground = true;
        result.actionBindingToggleitemsonground_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingToggleitemsonground(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingToggleitemsonground &&
            result.actionBindingToggleitemsonground_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingToggleitemsonground_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingToggleitemsonground_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingToggleitemsonground_ = value;
        }
        result.hasActionBindingToggleitemsonground = true;
        return this;
      }
      public Builder ClearActionBindingToggleitemsonground() {
        PrepareBuilder();
        result.hasActionBindingToggleitemsonground = false;
        result.actionBindingToggleitemsonground_ = null;
        return this;
      }
      
      public bool HasActionBindingRewhisper {
       get { return result.hasActionBindingRewhisper; }
      }
      public global::D3.Client.ActionBinding ActionBindingRewhisper {
        get { return result.ActionBindingRewhisper; }
        set { SetActionBindingRewhisper(value); }
      }
      public Builder SetActionBindingRewhisper(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingRewhisper = true;
        result.actionBindingRewhisper_ = value;
        return this;
      }
      public Builder SetActionBindingRewhisper(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingRewhisper = true;
        result.actionBindingRewhisper_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingRewhisper(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingRewhisper &&
            result.actionBindingRewhisper_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingRewhisper_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingRewhisper_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingRewhisper_ = value;
        }
        result.hasActionBindingRewhisper = true;
        return this;
      }
      public Builder ClearActionBindingRewhisper() {
        PrepareBuilder();
        result.hasActionBindingRewhisper = false;
        result.actionBindingRewhisper_ = null;
        return this;
      }
      
      public bool HasActionBindingWhisperreply {
       get { return result.hasActionBindingWhisperreply; }
      }
      public global::D3.Client.ActionBinding ActionBindingWhisperreply {
        get { return result.ActionBindingWhisperreply; }
        set { SetActionBindingWhisperreply(value); }
      }
      public Builder SetActionBindingWhisperreply(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingWhisperreply = true;
        result.actionBindingWhisperreply_ = value;
        return this;
      }
      public Builder SetActionBindingWhisperreply(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingWhisperreply = true;
        result.actionBindingWhisperreply_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingWhisperreply(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingWhisperreply &&
            result.actionBindingWhisperreply_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingWhisperreply_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingWhisperreply_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingWhisperreply_ = value;
        }
        result.hasActionBindingWhisperreply = true;
        return this;
      }
      public Builder ClearActionBindingWhisperreply() {
        PrepareBuilder();
        result.hasActionBindingWhisperreply = false;
        result.actionBindingWhisperreply_ = null;
        return this;
      }
      
      public bool HasActionBindingVoiceptt {
       get { return result.hasActionBindingVoiceptt; }
      }
      public global::D3.Client.ActionBinding ActionBindingVoiceptt {
        get { return result.ActionBindingVoiceptt; }
        set { SetActionBindingVoiceptt(value); }
      }
      public Builder SetActionBindingVoiceptt(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingVoiceptt = true;
        result.actionBindingVoiceptt_ = value;
        return this;
      }
      public Builder SetActionBindingVoiceptt(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingVoiceptt = true;
        result.actionBindingVoiceptt_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingVoiceptt(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingVoiceptt &&
            result.actionBindingVoiceptt_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingVoiceptt_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingVoiceptt_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingVoiceptt_ = value;
        }
        result.hasActionBindingVoiceptt = true;
        return this;
      }
      public Builder ClearActionBindingVoiceptt() {
        PrepareBuilder();
        result.hasActionBindingVoiceptt = false;
        result.actionBindingVoiceptt_ = null;
        return this;
      }
      
      public bool HasActionBindingSkill1 {
       get { return result.hasActionBindingSkill1; }
      }
      public global::D3.Client.ActionBinding ActionBindingSkill1 {
        get { return result.ActionBindingSkill1; }
        set { SetActionBindingSkill1(value); }
      }
      public Builder SetActionBindingSkill1(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSkill1 = true;
        result.actionBindingSkill1_ = value;
        return this;
      }
      public Builder SetActionBindingSkill1(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSkill1 = true;
        result.actionBindingSkill1_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSkill1(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSkill1 &&
            result.actionBindingSkill1_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSkill1_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSkill1_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSkill1_ = value;
        }
        result.hasActionBindingSkill1 = true;
        return this;
      }
      public Builder ClearActionBindingSkill1() {
        PrepareBuilder();
        result.hasActionBindingSkill1 = false;
        result.actionBindingSkill1_ = null;
        return this;
      }
      
      public bool HasActionBindingSkill2 {
       get { return result.hasActionBindingSkill2; }
      }
      public global::D3.Client.ActionBinding ActionBindingSkill2 {
        get { return result.ActionBindingSkill2; }
        set { SetActionBindingSkill2(value); }
      }
      public Builder SetActionBindingSkill2(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSkill2 = true;
        result.actionBindingSkill2_ = value;
        return this;
      }
      public Builder SetActionBindingSkill2(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSkill2 = true;
        result.actionBindingSkill2_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSkill2(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSkill2 &&
            result.actionBindingSkill2_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSkill2_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSkill2_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSkill2_ = value;
        }
        result.hasActionBindingSkill2 = true;
        return this;
      }
      public Builder ClearActionBindingSkill2() {
        PrepareBuilder();
        result.hasActionBindingSkill2 = false;
        result.actionBindingSkill2_ = null;
        return this;
      }
      
      public bool HasActionBindingSkill3 {
       get { return result.hasActionBindingSkill3; }
      }
      public global::D3.Client.ActionBinding ActionBindingSkill3 {
        get { return result.ActionBindingSkill3; }
        set { SetActionBindingSkill3(value); }
      }
      public Builder SetActionBindingSkill3(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSkill3 = true;
        result.actionBindingSkill3_ = value;
        return this;
      }
      public Builder SetActionBindingSkill3(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSkill3 = true;
        result.actionBindingSkill3_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSkill3(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSkill3 &&
            result.actionBindingSkill3_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSkill3_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSkill3_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSkill3_ = value;
        }
        result.hasActionBindingSkill3 = true;
        return this;
      }
      public Builder ClearActionBindingSkill3() {
        PrepareBuilder();
        result.hasActionBindingSkill3 = false;
        result.actionBindingSkill3_ = null;
        return this;
      }
      
      public bool HasActionBindingSkill4 {
       get { return result.hasActionBindingSkill4; }
      }
      public global::D3.Client.ActionBinding ActionBindingSkill4 {
        get { return result.ActionBindingSkill4; }
        set { SetActionBindingSkill4(value); }
      }
      public Builder SetActionBindingSkill4(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSkill4 = true;
        result.actionBindingSkill4_ = value;
        return this;
      }
      public Builder SetActionBindingSkill4(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSkill4 = true;
        result.actionBindingSkill4_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSkill4(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSkill4 &&
            result.actionBindingSkill4_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSkill4_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSkill4_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSkill4_ = value;
        }
        result.hasActionBindingSkill4 = true;
        return this;
      }
      public Builder ClearActionBindingSkill4() {
        PrepareBuilder();
        result.hasActionBindingSkill4 = false;
        result.actionBindingSkill4_ = null;
        return this;
      }
      
      public bool HasActionBindingPotion {
       get { return result.hasActionBindingPotion; }
      }
      public global::D3.Client.ActionBinding ActionBindingPotion {
        get { return result.ActionBindingPotion; }
        set { SetActionBindingPotion(value); }
      }
      public Builder SetActionBindingPotion(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingPotion = true;
        result.actionBindingPotion_ = value;
        return this;
      }
      public Builder SetActionBindingPotion(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingPotion = true;
        result.actionBindingPotion_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingPotion(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingPotion &&
            result.actionBindingPotion_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingPotion_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingPotion_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingPotion_ = value;
        }
        result.hasActionBindingPotion = true;
        return this;
      }
      public Builder ClearActionBindingPotion() {
        PrepareBuilder();
        result.hasActionBindingPotion = false;
        result.actionBindingPotion_ = null;
        return this;
      }
      
      public bool HasActionBindingBannerdrop {
       get { return result.hasActionBindingBannerdrop; }
      }
      public global::D3.Client.ActionBinding ActionBindingBannerdrop {
        get { return result.ActionBindingBannerdrop; }
        set { SetActionBindingBannerdrop(value); }
      }
      public Builder SetActionBindingBannerdrop(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingBannerdrop = true;
        result.actionBindingBannerdrop_ = value;
        return this;
      }
      public Builder SetActionBindingBannerdrop(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingBannerdrop = true;
        result.actionBindingBannerdrop_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingBannerdrop(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingBannerdrop &&
            result.actionBindingBannerdrop_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingBannerdrop_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingBannerdrop_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingBannerdrop_ = value;
        }
        result.hasActionBindingBannerdrop = true;
        return this;
      }
      public Builder ClearActionBindingBannerdrop() {
        PrepareBuilder();
        result.hasActionBindingBannerdrop = false;
        result.actionBindingBannerdrop_ = null;
        return this;
      }
      
      public bool HasActionBindingZoom {
       get { return result.hasActionBindingZoom; }
      }
      public global::D3.Client.ActionBinding ActionBindingZoom {
        get { return result.ActionBindingZoom; }
        set { SetActionBindingZoom(value); }
      }
      public Builder SetActionBindingZoom(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingZoom = true;
        result.actionBindingZoom_ = value;
        return this;
      }
      public Builder SetActionBindingZoom(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingZoom = true;
        result.actionBindingZoom_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingZoom(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingZoom &&
            result.actionBindingZoom_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingZoom_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingZoom_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingZoom_ = value;
        }
        result.hasActionBindingZoom = true;
        return this;
      }
      public Builder ClearActionBindingZoom() {
        PrepareBuilder();
        result.hasActionBindingZoom = false;
        result.actionBindingZoom_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotefollow {
       get { return result.hasActionBindingEmotefollow; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotefollow {
        get { return result.ActionBindingEmotefollow; }
        set { SetActionBindingEmotefollow(value); }
      }
      public Builder SetActionBindingEmotefollow(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotefollow = true;
        result.actionBindingEmotefollow_ = value;
        return this;
      }
      public Builder SetActionBindingEmotefollow(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotefollow = true;
        result.actionBindingEmotefollow_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotefollow(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotefollow &&
            result.actionBindingEmotefollow_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotefollow_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotefollow_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotefollow_ = value;
        }
        result.hasActionBindingEmotefollow = true;
        return this;
      }
      public Builder ClearActionBindingEmotefollow() {
        PrepareBuilder();
        result.hasActionBindingEmotefollow = false;
        result.actionBindingEmotefollow_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotegive {
       get { return result.hasActionBindingEmotegive; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotegive {
        get { return result.ActionBindingEmotegive; }
        set { SetActionBindingEmotegive(value); }
      }
      public Builder SetActionBindingEmotegive(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotegive = true;
        result.actionBindingEmotegive_ = value;
        return this;
      }
      public Builder SetActionBindingEmotegive(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotegive = true;
        result.actionBindingEmotegive_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotegive(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotegive &&
            result.actionBindingEmotegive_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotegive_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotegive_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotegive_ = value;
        }
        result.hasActionBindingEmotegive = true;
        return this;
      }
      public Builder ClearActionBindingEmotegive() {
        PrepareBuilder();
        result.hasActionBindingEmotegive = false;
        result.actionBindingEmotegive_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotethanks {
       get { return result.hasActionBindingEmotethanks; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotethanks {
        get { return result.ActionBindingEmotethanks; }
        set { SetActionBindingEmotethanks(value); }
      }
      public Builder SetActionBindingEmotethanks(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotethanks = true;
        result.actionBindingEmotethanks_ = value;
        return this;
      }
      public Builder SetActionBindingEmotethanks(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotethanks = true;
        result.actionBindingEmotethanks_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotethanks(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotethanks &&
            result.actionBindingEmotethanks_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotethanks_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotethanks_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotethanks_ = value;
        }
        result.hasActionBindingEmotethanks = true;
        return this;
      }
      public Builder ClearActionBindingEmotethanks() {
        PrepareBuilder();
        result.hasActionBindingEmotethanks = false;
        result.actionBindingEmotethanks_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotesorry {
       get { return result.hasActionBindingEmotesorry; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotesorry {
        get { return result.ActionBindingEmotesorry; }
        set { SetActionBindingEmotesorry(value); }
      }
      public Builder SetActionBindingEmotesorry(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotesorry = true;
        result.actionBindingEmotesorry_ = value;
        return this;
      }
      public Builder SetActionBindingEmotesorry(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotesorry = true;
        result.actionBindingEmotesorry_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotesorry(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotesorry &&
            result.actionBindingEmotesorry_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotesorry_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotesorry_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotesorry_ = value;
        }
        result.hasActionBindingEmotesorry = true;
        return this;
      }
      public Builder ClearActionBindingEmotesorry() {
        PrepareBuilder();
        result.hasActionBindingEmotesorry = false;
        result.actionBindingEmotesorry_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotebye {
       get { return result.hasActionBindingEmotebye; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotebye {
        get { return result.ActionBindingEmotebye; }
        set { SetActionBindingEmotebye(value); }
      }
      public Builder SetActionBindingEmotebye(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotebye = true;
        result.actionBindingEmotebye_ = value;
        return this;
      }
      public Builder SetActionBindingEmotebye(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotebye = true;
        result.actionBindingEmotebye_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotebye(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotebye &&
            result.actionBindingEmotebye_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotebye_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotebye_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotebye_ = value;
        }
        result.hasActionBindingEmotebye = true;
        return this;
      }
      public Builder ClearActionBindingEmotebye() {
        PrepareBuilder();
        result.hasActionBindingEmotebye = false;
        result.actionBindingEmotebye_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotedie {
       get { return result.hasActionBindingEmotedie; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotedie {
        get { return result.ActionBindingEmotedie; }
        set { SetActionBindingEmotedie(value); }
      }
      public Builder SetActionBindingEmotedie(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotedie = true;
        result.actionBindingEmotedie_ = value;
        return this;
      }
      public Builder SetActionBindingEmotedie(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotedie = true;
        result.actionBindingEmotedie_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotedie(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotedie &&
            result.actionBindingEmotedie_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotedie_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotedie_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotedie_ = value;
        }
        result.hasActionBindingEmotedie = true;
        return this;
      }
      public Builder ClearActionBindingEmotedie() {
        PrepareBuilder();
        result.hasActionBindingEmotedie = false;
        result.actionBindingEmotedie_ = null;
        return this;
      }
      
      public bool HasActionBindingEmoterun {
       get { return result.hasActionBindingEmoterun; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmoterun {
        get { return result.ActionBindingEmoterun; }
        set { SetActionBindingEmoterun(value); }
      }
      public Builder SetActionBindingEmoterun(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmoterun = true;
        result.actionBindingEmoterun_ = value;
        return this;
      }
      public Builder SetActionBindingEmoterun(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmoterun = true;
        result.actionBindingEmoterun_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmoterun(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmoterun &&
            result.actionBindingEmoterun_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmoterun_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmoterun_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmoterun_ = value;
        }
        result.hasActionBindingEmoterun = true;
        return this;
      }
      public Builder ClearActionBindingEmoterun() {
        PrepareBuilder();
        result.hasActionBindingEmoterun = false;
        result.actionBindingEmoterun_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotewait {
       get { return result.hasActionBindingEmotewait; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotewait {
        get { return result.ActionBindingEmotewait; }
        set { SetActionBindingEmotewait(value); }
      }
      public Builder SetActionBindingEmotewait(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotewait = true;
        result.actionBindingEmotewait_ = value;
        return this;
      }
      public Builder SetActionBindingEmotewait(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotewait = true;
        result.actionBindingEmotewait_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotewait(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotewait &&
            result.actionBindingEmotewait_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotewait_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotewait_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotewait_ = value;
        }
        result.hasActionBindingEmotewait = true;
        return this;
      }
      public Builder ClearActionBindingEmotewait() {
        PrepareBuilder();
        result.hasActionBindingEmotewait = false;
        result.actionBindingEmotewait_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotego {
       get { return result.hasActionBindingEmotego; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotego {
        get { return result.ActionBindingEmotego; }
        set { SetActionBindingEmotego(value); }
      }
      public Builder SetActionBindingEmotego(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotego = true;
        result.actionBindingEmotego_ = value;
        return this;
      }
      public Builder SetActionBindingEmotego(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotego = true;
        result.actionBindingEmotego_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotego(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotego &&
            result.actionBindingEmotego_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotego_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotego_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotego_ = value;
        }
        result.hasActionBindingEmotego = true;
        return this;
      }
      public Builder ClearActionBindingEmotego() {
        PrepareBuilder();
        result.hasActionBindingEmotego = false;
        result.actionBindingEmotego_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotehelp {
       get { return result.hasActionBindingEmotehelp; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotehelp {
        get { return result.ActionBindingEmotehelp; }
        set { SetActionBindingEmotehelp(value); }
      }
      public Builder SetActionBindingEmotehelp(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotehelp = true;
        result.actionBindingEmotehelp_ = value;
        return this;
      }
      public Builder SetActionBindingEmotehelp(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotehelp = true;
        result.actionBindingEmotehelp_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotehelp(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotehelp &&
            result.actionBindingEmotehelp_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotehelp_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotehelp_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotehelp_ = value;
        }
        result.hasActionBindingEmotehelp = true;
        return this;
      }
      public Builder ClearActionBindingEmotehelp() {
        PrepareBuilder();
        result.hasActionBindingEmotehelp = false;
        result.actionBindingEmotehelp_ = null;
        return this;
      }
      
      public bool HasActionBindingEmoteyes {
       get { return result.hasActionBindingEmoteyes; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmoteyes {
        get { return result.ActionBindingEmoteyes; }
        set { SetActionBindingEmoteyes(value); }
      }
      public Builder SetActionBindingEmoteyes(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmoteyes = true;
        result.actionBindingEmoteyes_ = value;
        return this;
      }
      public Builder SetActionBindingEmoteyes(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmoteyes = true;
        result.actionBindingEmoteyes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmoteyes(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmoteyes &&
            result.actionBindingEmoteyes_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmoteyes_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmoteyes_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmoteyes_ = value;
        }
        result.hasActionBindingEmoteyes = true;
        return this;
      }
      public Builder ClearActionBindingEmoteyes() {
        PrepareBuilder();
        result.hasActionBindingEmoteyes = false;
        result.actionBindingEmoteyes_ = null;
        return this;
      }
      
      public bool HasActionBindingEmoteno {
       get { return result.hasActionBindingEmoteno; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmoteno {
        get { return result.ActionBindingEmoteno; }
        set { SetActionBindingEmoteno(value); }
      }
      public Builder SetActionBindingEmoteno(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmoteno = true;
        result.actionBindingEmoteno_ = value;
        return this;
      }
      public Builder SetActionBindingEmoteno(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmoteno = true;
        result.actionBindingEmoteno_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmoteno(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmoteno &&
            result.actionBindingEmoteno_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmoteno_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmoteno_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmoteno_ = value;
        }
        result.hasActionBindingEmoteno = true;
        return this;
      }
      public Builder ClearActionBindingEmoteno() {
        PrepareBuilder();
        result.hasActionBindingEmoteno = false;
        result.actionBindingEmoteno_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotestay {
       get { return result.hasActionBindingEmotestay; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotestay {
        get { return result.ActionBindingEmotestay; }
        set { SetActionBindingEmotestay(value); }
      }
      public Builder SetActionBindingEmotestay(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotestay = true;
        result.actionBindingEmotestay_ = value;
        return this;
      }
      public Builder SetActionBindingEmotestay(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotestay = true;
        result.actionBindingEmotestay_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotestay(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotestay &&
            result.actionBindingEmotestay_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotestay_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotestay_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotestay_ = value;
        }
        result.hasActionBindingEmotestay = true;
        return this;
      }
      public Builder ClearActionBindingEmotestay() {
        PrepareBuilder();
        result.hasActionBindingEmotestay = false;
        result.actionBindingEmotestay_ = null;
        return this;
      }
      
      public bool HasActionBindingEmoteattack {
       get { return result.hasActionBindingEmoteattack; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmoteattack {
        get { return result.ActionBindingEmoteattack; }
        set { SetActionBindingEmoteattack(value); }
      }
      public Builder SetActionBindingEmoteattack(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmoteattack = true;
        result.actionBindingEmoteattack_ = value;
        return this;
      }
      public Builder SetActionBindingEmoteattack(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmoteattack = true;
        result.actionBindingEmoteattack_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmoteattack(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmoteattack &&
            result.actionBindingEmoteattack_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmoteattack_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmoteattack_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmoteattack_ = value;
        }
        result.hasActionBindingEmoteattack = true;
        return this;
      }
      public Builder ClearActionBindingEmoteattack() {
        PrepareBuilder();
        result.hasActionBindingEmoteattack = false;
        result.actionBindingEmoteattack_ = null;
        return this;
      }
      
      public bool HasActionBindingEmoteretreat {
       get { return result.hasActionBindingEmoteretreat; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmoteretreat {
        get { return result.ActionBindingEmoteretreat; }
        set { SetActionBindingEmoteretreat(value); }
      }
      public Builder SetActionBindingEmoteretreat(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmoteretreat = true;
        result.actionBindingEmoteretreat_ = value;
        return this;
      }
      public Builder SetActionBindingEmoteretreat(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmoteretreat = true;
        result.actionBindingEmoteretreat_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmoteretreat(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmoteretreat &&
            result.actionBindingEmoteretreat_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmoteretreat_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmoteretreat_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmoteretreat_ = value;
        }
        result.hasActionBindingEmoteretreat = true;
        return this;
      }
      public Builder ClearActionBindingEmoteretreat() {
        PrepareBuilder();
        result.hasActionBindingEmoteretreat = false;
        result.actionBindingEmoteretreat_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotehold {
       get { return result.hasActionBindingEmotehold; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotehold {
        get { return result.ActionBindingEmotehold; }
        set { SetActionBindingEmotehold(value); }
      }
      public Builder SetActionBindingEmotehold(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotehold = true;
        result.actionBindingEmotehold_ = value;
        return this;
      }
      public Builder SetActionBindingEmotehold(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotehold = true;
        result.actionBindingEmotehold_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotehold(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotehold &&
            result.actionBindingEmotehold_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotehold_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotehold_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotehold_ = value;
        }
        result.hasActionBindingEmotehold = true;
        return this;
      }
      public Builder ClearActionBindingEmotehold() {
        PrepareBuilder();
        result.hasActionBindingEmotehold = false;
        result.actionBindingEmotehold_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotetakeobjective {
       get { return result.hasActionBindingEmotetakeobjective; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotetakeobjective {
        get { return result.ActionBindingEmotetakeobjective; }
        set { SetActionBindingEmotetakeobjective(value); }
      }
      public Builder SetActionBindingEmotetakeobjective(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotetakeobjective = true;
        result.actionBindingEmotetakeobjective_ = value;
        return this;
      }
      public Builder SetActionBindingEmotetakeobjective(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotetakeobjective = true;
        result.actionBindingEmotetakeobjective_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotetakeobjective(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotetakeobjective &&
            result.actionBindingEmotetakeobjective_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotetakeobjective_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotetakeobjective_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotetakeobjective_ = value;
        }
        result.hasActionBindingEmotetakeobjective = true;
        return this;
      }
      public Builder ClearActionBindingEmotetakeobjective() {
        PrepareBuilder();
        result.hasActionBindingEmotetakeobjective = false;
        result.actionBindingEmotetakeobjective_ = null;
        return this;
      }
      
      public bool HasActionBindingEmotelaugh {
       get { return result.hasActionBindingEmotelaugh; }
      }
      public global::D3.Client.ActionBinding ActionBindingEmotelaugh {
        get { return result.ActionBindingEmotelaugh; }
        set { SetActionBindingEmotelaugh(value); }
      }
      public Builder SetActionBindingEmotelaugh(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingEmotelaugh = true;
        result.actionBindingEmotelaugh_ = value;
        return this;
      }
      public Builder SetActionBindingEmotelaugh(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingEmotelaugh = true;
        result.actionBindingEmotelaugh_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingEmotelaugh(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingEmotelaugh &&
            result.actionBindingEmotelaugh_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingEmotelaugh_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingEmotelaugh_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingEmotelaugh_ = value;
        }
        result.hasActionBindingEmotelaugh = true;
        return this;
      }
      public Builder ClearActionBindingEmotelaugh() {
        PrepareBuilder();
        result.hasActionBindingEmotelaugh = false;
        result.actionBindingEmotelaugh_ = null;
        return this;
      }
      
      public bool HasActionBindingHoldposition {
       get { return result.hasActionBindingHoldposition; }
      }
      public global::D3.Client.ActionBinding ActionBindingHoldposition {
        get { return result.ActionBindingHoldposition; }
        set { SetActionBindingHoldposition(value); }
      }
      public Builder SetActionBindingHoldposition(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingHoldposition = true;
        result.actionBindingHoldposition_ = value;
        return this;
      }
      public Builder SetActionBindingHoldposition(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingHoldposition = true;
        result.actionBindingHoldposition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingHoldposition(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingHoldposition &&
            result.actionBindingHoldposition_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingHoldposition_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingHoldposition_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingHoldposition_ = value;
        }
        result.hasActionBindingHoldposition = true;
        return this;
      }
      public Builder ClearActionBindingHoldposition() {
        PrepareBuilder();
        result.hasActionBindingHoldposition = false;
        result.actionBindingHoldposition_ = null;
        return this;
      }
      
      public bool HasActionBindingSystemmastervolumeup {
       get { return result.hasActionBindingSystemmastervolumeup; }
      }
      public global::D3.Client.ActionBinding ActionBindingSystemmastervolumeup {
        get { return result.ActionBindingSystemmastervolumeup; }
        set { SetActionBindingSystemmastervolumeup(value); }
      }
      public Builder SetActionBindingSystemmastervolumeup(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSystemmastervolumeup = true;
        result.actionBindingSystemmastervolumeup_ = value;
        return this;
      }
      public Builder SetActionBindingSystemmastervolumeup(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSystemmastervolumeup = true;
        result.actionBindingSystemmastervolumeup_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSystemmastervolumeup(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSystemmastervolumeup &&
            result.actionBindingSystemmastervolumeup_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSystemmastervolumeup_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSystemmastervolumeup_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSystemmastervolumeup_ = value;
        }
        result.hasActionBindingSystemmastervolumeup = true;
        return this;
      }
      public Builder ClearActionBindingSystemmastervolumeup() {
        PrepareBuilder();
        result.hasActionBindingSystemmastervolumeup = false;
        result.actionBindingSystemmastervolumeup_ = null;
        return this;
      }
      
      public bool HasActionBindingSystemmastervolumedown {
       get { return result.hasActionBindingSystemmastervolumedown; }
      }
      public global::D3.Client.ActionBinding ActionBindingSystemmastervolumedown {
        get { return result.ActionBindingSystemmastervolumedown; }
        set { SetActionBindingSystemmastervolumedown(value); }
      }
      public Builder SetActionBindingSystemmastervolumedown(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSystemmastervolumedown = true;
        result.actionBindingSystemmastervolumedown_ = value;
        return this;
      }
      public Builder SetActionBindingSystemmastervolumedown(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSystemmastervolumedown = true;
        result.actionBindingSystemmastervolumedown_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSystemmastervolumedown(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSystemmastervolumedown &&
            result.actionBindingSystemmastervolumedown_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSystemmastervolumedown_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSystemmastervolumedown_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSystemmastervolumedown_ = value;
        }
        result.hasActionBindingSystemmastervolumedown = true;
        return this;
      }
      public Builder ClearActionBindingSystemmastervolumedown() {
        PrepareBuilder();
        result.hasActionBindingSystemmastervolumedown = false;
        result.actionBindingSystemmastervolumedown_ = null;
        return this;
      }
      
      public bool HasActionBindingSystemtogglemusic {
       get { return result.hasActionBindingSystemtogglemusic; }
      }
      public global::D3.Client.ActionBinding ActionBindingSystemtogglemusic {
        get { return result.ActionBindingSystemtogglemusic; }
        set { SetActionBindingSystemtogglemusic(value); }
      }
      public Builder SetActionBindingSystemtogglemusic(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSystemtogglemusic = true;
        result.actionBindingSystemtogglemusic_ = value;
        return this;
      }
      public Builder SetActionBindingSystemtogglemusic(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSystemtogglemusic = true;
        result.actionBindingSystemtogglemusic_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSystemtogglemusic(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSystemtogglemusic &&
            result.actionBindingSystemtogglemusic_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSystemtogglemusic_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSystemtogglemusic_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSystemtogglemusic_ = value;
        }
        result.hasActionBindingSystemtogglemusic = true;
        return this;
      }
      public Builder ClearActionBindingSystemtogglemusic() {
        PrepareBuilder();
        result.hasActionBindingSystemtogglemusic = false;
        result.actionBindingSystemtogglemusic_ = null;
        return this;
      }
      
      public bool HasActionBindingSystemtogglesound {
       get { return result.hasActionBindingSystemtogglesound; }
      }
      public global::D3.Client.ActionBinding ActionBindingSystemtogglesound {
        get { return result.ActionBindingSystemtogglesound; }
        set { SetActionBindingSystemtogglesound(value); }
      }
      public Builder SetActionBindingSystemtogglesound(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSystemtogglesound = true;
        result.actionBindingSystemtogglesound_ = value;
        return this;
      }
      public Builder SetActionBindingSystemtogglesound(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSystemtogglesound = true;
        result.actionBindingSystemtogglesound_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSystemtogglesound(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSystemtogglesound &&
            result.actionBindingSystemtogglesound_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSystemtogglesound_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSystemtogglesound_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSystemtogglesound_ = value;
        }
        result.hasActionBindingSystemtogglesound = true;
        return this;
      }
      public Builder ClearActionBindingSystemtogglesound() {
        PrepareBuilder();
        result.hasActionBindingSystemtogglesound = false;
        result.actionBindingSystemtogglesound_ = null;
        return this;
      }
      
      public bool HasActionBindingSystemscreenshot {
       get { return result.hasActionBindingSystemscreenshot; }
      }
      public global::D3.Client.ActionBinding ActionBindingSystemscreenshot {
        get { return result.ActionBindingSystemscreenshot; }
        set { SetActionBindingSystemscreenshot(value); }
      }
      public Builder SetActionBindingSystemscreenshot(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSystemscreenshot = true;
        result.actionBindingSystemscreenshot_ = value;
        return this;
      }
      public Builder SetActionBindingSystemscreenshot(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSystemscreenshot = true;
        result.actionBindingSystemscreenshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSystemscreenshot(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSystemscreenshot &&
            result.actionBindingSystemscreenshot_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSystemscreenshot_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSystemscreenshot_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSystemscreenshot_ = value;
        }
        result.hasActionBindingSystemscreenshot = true;
        return this;
      }
      public Builder ClearActionBindingSystemscreenshot() {
        PrepareBuilder();
        result.hasActionBindingSystemscreenshot = false;
        result.actionBindingSystemscreenshot_ = null;
        return this;
      }
      
      public bool HasActionBindingStoneofrecall {
       get { return result.hasActionBindingStoneofrecall; }
      }
      public global::D3.Client.ActionBinding ActionBindingStoneofrecall {
        get { return result.ActionBindingStoneofrecall; }
        set { SetActionBindingStoneofrecall(value); }
      }
      public Builder SetActionBindingStoneofrecall(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingStoneofrecall = true;
        result.actionBindingStoneofrecall_ = value;
        return this;
      }
      public Builder SetActionBindingStoneofrecall(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingStoneofrecall = true;
        result.actionBindingStoneofrecall_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingStoneofrecall(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingStoneofrecall &&
            result.actionBindingStoneofrecall_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingStoneofrecall_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingStoneofrecall_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingStoneofrecall_ = value;
        }
        result.hasActionBindingStoneofrecall = true;
        return this;
      }
      public Builder ClearActionBindingStoneofrecall() {
        PrepareBuilder();
        result.hasActionBindingStoneofrecall = false;
        result.actionBindingStoneofrecall_ = null;
        return this;
      }
      
      public bool HasActionBindingBannerscreen {
       get { return result.hasActionBindingBannerscreen; }
      }
      public global::D3.Client.ActionBinding ActionBindingBannerscreen {
        get { return result.ActionBindingBannerscreen; }
        set { SetActionBindingBannerscreen(value); }
      }
      public Builder SetActionBindingBannerscreen(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingBannerscreen = true;
        result.actionBindingBannerscreen_ = value;
        return this;
      }
      public Builder SetActionBindingBannerscreen(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingBannerscreen = true;
        result.actionBindingBannerscreen_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingBannerscreen(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingBannerscreen &&
            result.actionBindingBannerscreen_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingBannerscreen_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingBannerscreen_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingBannerscreen_ = value;
        }
        result.hasActionBindingBannerscreen = true;
        return this;
      }
      public Builder ClearActionBindingBannerscreen() {
        PrepareBuilder();
        result.hasActionBindingBannerscreen = false;
        result.actionBindingBannerscreen_ = null;
        return this;
      }
      
      public bool HasActionBindingLmb {
       get { return result.hasActionBindingLmb; }
      }
      public global::D3.Client.ActionBinding ActionBindingLmb {
        get { return result.ActionBindingLmb; }
        set { SetActionBindingLmb(value); }
      }
      public Builder SetActionBindingLmb(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingLmb = true;
        result.actionBindingLmb_ = value;
        return this;
      }
      public Builder SetActionBindingLmb(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingLmb = true;
        result.actionBindingLmb_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingLmb(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingLmb &&
            result.actionBindingLmb_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingLmb_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingLmb_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingLmb_ = value;
        }
        result.hasActionBindingLmb = true;
        return this;
      }
      public Builder ClearActionBindingLmb() {
        PrepareBuilder();
        result.hasActionBindingLmb = false;
        result.actionBindingLmb_ = null;
        return this;
      }
      
      public bool HasActionBindingRmb {
       get { return result.hasActionBindingRmb; }
      }
      public global::D3.Client.ActionBinding ActionBindingRmb {
        get { return result.ActionBindingRmb; }
        set { SetActionBindingRmb(value); }
      }
      public Builder SetActionBindingRmb(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingRmb = true;
        result.actionBindingRmb_ = value;
        return this;
      }
      public Builder SetActionBindingRmb(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingRmb = true;
        result.actionBindingRmb_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingRmb(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingRmb &&
            result.actionBindingRmb_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingRmb_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingRmb_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingRmb_ = value;
        }
        result.hasActionBindingRmb = true;
        return this;
      }
      public Builder ClearActionBindingRmb() {
        PrepareBuilder();
        result.hasActionBindingRmb = false;
        result.actionBindingRmb_ = null;
        return this;
      }
      
      public bool HasActionBindingWalk {
       get { return result.hasActionBindingWalk; }
      }
      public global::D3.Client.ActionBinding ActionBindingWalk {
        get { return result.ActionBindingWalk; }
        set { SetActionBindingWalk(value); }
      }
      public Builder SetActionBindingWalk(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingWalk = true;
        result.actionBindingWalk_ = value;
        return this;
      }
      public Builder SetActionBindingWalk(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingWalk = true;
        result.actionBindingWalk_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingWalk(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingWalk &&
            result.actionBindingWalk_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingWalk_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingWalk_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingWalk_ = value;
        }
        result.hasActionBindingWalk = true;
        return this;
      }
      public Builder ClearActionBindingWalk() {
        PrepareBuilder();
        result.hasActionBindingWalk = false;
        result.actionBindingWalk_ = null;
        return this;
      }
      
      public bool HasActionBindingSystemtogglefps {
       get { return result.hasActionBindingSystemtogglefps; }
      }
      public global::D3.Client.ActionBinding ActionBindingSystemtogglefps {
        get { return result.ActionBindingSystemtogglefps; }
        set { SetActionBindingSystemtogglefps(value); }
      }
      public Builder SetActionBindingSystemtogglefps(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionBindingSystemtogglefps = true;
        result.actionBindingSystemtogglefps_ = value;
        return this;
      }
      public Builder SetActionBindingSystemtogglefps(global::D3.Client.ActionBinding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActionBindingSystemtogglefps = true;
        result.actionBindingSystemtogglefps_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActionBindingSystemtogglefps(global::D3.Client.ActionBinding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActionBindingSystemtogglefps &&
            result.actionBindingSystemtogglefps_ != global::D3.Client.ActionBinding.DefaultInstance) {
            result.actionBindingSystemtogglefps_ = global::D3.Client.ActionBinding.CreateBuilder(result.actionBindingSystemtogglefps_).MergeFrom(value).BuildPartial();
        } else {
          result.actionBindingSystemtogglefps_ = value;
        }
        result.hasActionBindingSystemtogglefps = true;
        return this;
      }
      public Builder ClearActionBindingSystemtogglefps() {
        PrepareBuilder();
        result.hasActionBindingSystemtogglefps = false;
        result.actionBindingSystemtogglefps_ = null;
        return this;
      }
      
      public bool HasNotifyDuration {
        get { return result.hasNotifyDuration; }
      }
      public uint NotifyDuration {
        get { return result.NotifyDuration; }
        set { SetNotifyDuration(value); }
      }
      public Builder SetNotifyDuration(uint value) {
        PrepareBuilder();
        result.hasNotifyDuration = true;
        result.notifyDuration_ = value;
        return this;
      }
      public Builder ClearNotifyDuration() {
        PrepareBuilder();
        result.hasNotifyDuration = false;
        result.notifyDuration_ = 0;
        return this;
      }
    }
    static Preferences() {
      object.ReferenceEquals(global::D3.Client.Settings.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
