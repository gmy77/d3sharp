// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.ItemCrafting {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class ItemCrafting {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_ItemCrafting_CrafterData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.ItemCrafting.CrafterData, global::D3.ItemCrafting.CrafterData.Builder> internal__static_D3_ItemCrafting_CrafterData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_ItemCrafting_CrafterSavedData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.ItemCrafting.CrafterSavedData, global::D3.ItemCrafting.CrafterSavedData.Builder> internal__static_D3_ItemCrafting_CrafterSavedData__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ItemCrafting() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChJJdGVtQ3JhZnRpbmcucHJvdG8SD0QzLkl0ZW1DcmFmdGluZyJfCgtDcmFm" + 
          "dGVyRGF0YRIPCgdyZWNpcGVzGAEgAygPEhoKEmF2YWlsYWJsZV9lbmNoYW50" + 
          "cxgCIAMoDxINCgVsZXZlbBgDIAIoBRIUCgxjb29sZG93bl9lbmQYBCACKBAi" + 
          "RgoQQ3JhZnRlclNhdmVkRGF0YRIyCgxjcmFmdGVyX2RhdGEYASADKAsyHC5E" + 
          "My5JdGVtQ3JhZnRpbmcuQ3JhZnRlckRhdGE=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_ItemCrafting_CrafterData__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_ItemCrafting_CrafterData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.ItemCrafting.CrafterData, global::D3.ItemCrafting.CrafterData.Builder>(internal__static_D3_ItemCrafting_CrafterData__Descriptor,
                new string[] { "Recipes", "AvailableEnchants", "Level", "CooldownEnd", });
        internal__static_D3_ItemCrafting_CrafterSavedData__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_ItemCrafting_CrafterSavedData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.ItemCrafting.CrafterSavedData, global::D3.ItemCrafting.CrafterSavedData.Builder>(internal__static_D3_ItemCrafting_CrafterSavedData__Descriptor,
                new string[] { "CrafterData", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CrafterData : pb::GeneratedMessage<CrafterData, CrafterData.Builder> {
    private CrafterData() { }
    private static readonly CrafterData defaultInstance = new CrafterData().MakeReadOnly();
    private static readonly string[] _crafterDataFieldNames = new string[] { "available_enchants", "cooldown_end", "level", "recipes" };
    private static readonly uint[] _crafterDataFieldTags = new uint[] { 21, 33, 24, 13 };
    public static CrafterData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CrafterData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CrafterData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.ItemCrafting.ItemCrafting.internal__static_D3_ItemCrafting_CrafterData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CrafterData, CrafterData.Builder> InternalFieldAccessors {
      get { return global::D3.ItemCrafting.ItemCrafting.internal__static_D3_ItemCrafting_CrafterData__FieldAccessorTable; }
    }
    
    public const int RecipesFieldNumber = 1;
    private pbc::PopsicleList<int> recipes_ = new pbc::PopsicleList<int>();
    public scg::IList<int> RecipesList {
      get { return pbc::Lists.AsReadOnly(recipes_); }
    }
    public int RecipesCount {
      get { return recipes_.Count; }
    }
    public int GetRecipes(int index) {
      return recipes_[index];
    }
    
    public const int AvailableEnchantsFieldNumber = 2;
    private pbc::PopsicleList<int> availableEnchants_ = new pbc::PopsicleList<int>();
    public scg::IList<int> AvailableEnchantsList {
      get { return pbc::Lists.AsReadOnly(availableEnchants_); }
    }
    public int AvailableEnchantsCount {
      get { return availableEnchants_.Count; }
    }
    public int GetAvailableEnchants(int index) {
      return availableEnchants_[index];
    }
    
    public const int LevelFieldNumber = 3;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int CooldownEndFieldNumber = 4;
    private bool hasCooldownEnd;
    private long cooldownEnd_;
    public bool HasCooldownEnd {
      get { return hasCooldownEnd; }
    }
    public long CooldownEnd {
      get { return cooldownEnd_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLevel) return false;
        if (!hasCooldownEnd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _crafterDataFieldNames;
      if (recipes_.Count > 0) {
        output.WriteSFixed32Array(1, field_names[3], recipes_);
      }
      if (availableEnchants_.Count > 0) {
        output.WriteSFixed32Array(2, field_names[0], availableEnchants_);
      }
      if (hasLevel) {
        output.WriteInt32(3, field_names[2], Level);
      }
      if (hasCooldownEnd) {
        output.WriteSFixed64(4, field_names[1], CooldownEnd);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * recipes_.Count;
          size += dataSize;
          size += 1 * recipes_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 4 * availableEnchants_.Count;
          size += dataSize;
          size += 1 * availableEnchants_.Count;
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
        }
        if (hasCooldownEnd) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(4, CooldownEnd);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CrafterData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrafterData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrafterData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrafterData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrafterData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrafterData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CrafterData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CrafterData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CrafterData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrafterData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CrafterData MakeReadOnly() {
      recipes_.MakeReadOnly();
      availableEnchants_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CrafterData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CrafterData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CrafterData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CrafterData result;
      
      private CrafterData PrepareBuilder() {
        if (resultIsReadOnly) {
          CrafterData original = result;
          result = new CrafterData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CrafterData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.ItemCrafting.CrafterData.Descriptor; }
      }
      
      public override CrafterData DefaultInstanceForType {
        get { return global::D3.ItemCrafting.CrafterData.DefaultInstance; }
      }
      
      public override CrafterData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CrafterData) {
          return MergeFrom((CrafterData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CrafterData other) {
        if (other == global::D3.ItemCrafting.CrafterData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.recipes_.Count != 0) {
          result.recipes_.Add(other.recipes_);
        }
        if (other.availableEnchants_.Count != 0) {
          result.availableEnchants_.Add(other.availableEnchants_);
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasCooldownEnd) {
          CooldownEnd = other.CooldownEnd;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_crafterDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _crafterDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadSFixed32Array(tag, field_name, result.recipes_);
              break;
            }
            case 18:
            case 21: {
              input.ReadSFixed32Array(tag, field_name, result.availableEnchants_);
              break;
            }
            case 24: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 33: {
              result.hasCooldownEnd = input.ReadSFixed64(ref result.cooldownEnd_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> RecipesList {
        get { return PrepareBuilder().recipes_; }
      }
      public int RecipesCount {
        get { return result.RecipesCount; }
      }
      public int GetRecipes(int index) {
        return result.GetRecipes(index);
      }
      public Builder SetRecipes(int index, int value) {
        PrepareBuilder();
        result.recipes_[index] = value;
        return this;
      }
      public Builder AddRecipes(int value) {
        PrepareBuilder();
        result.recipes_.Add(value);
        return this;
      }
      public Builder AddRangeRecipes(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.recipes_.Add(values);
        return this;
      }
      public Builder ClearRecipes() {
        PrepareBuilder();
        result.recipes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> AvailableEnchantsList {
        get { return PrepareBuilder().availableEnchants_; }
      }
      public int AvailableEnchantsCount {
        get { return result.AvailableEnchantsCount; }
      }
      public int GetAvailableEnchants(int index) {
        return result.GetAvailableEnchants(index);
      }
      public Builder SetAvailableEnchants(int index, int value) {
        PrepareBuilder();
        result.availableEnchants_[index] = value;
        return this;
      }
      public Builder AddAvailableEnchants(int value) {
        PrepareBuilder();
        result.availableEnchants_.Add(value);
        return this;
      }
      public Builder AddRangeAvailableEnchants(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.availableEnchants_.Add(values);
        return this;
      }
      public Builder ClearAvailableEnchants() {
        PrepareBuilder();
        result.availableEnchants_.Clear();
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasCooldownEnd {
        get { return result.hasCooldownEnd; }
      }
      public long CooldownEnd {
        get { return result.CooldownEnd; }
        set { SetCooldownEnd(value); }
      }
      public Builder SetCooldownEnd(long value) {
        PrepareBuilder();
        result.hasCooldownEnd = true;
        result.cooldownEnd_ = value;
        return this;
      }
      public Builder ClearCooldownEnd() {
        PrepareBuilder();
        result.hasCooldownEnd = false;
        result.cooldownEnd_ = 0;
        return this;
      }
    }
    static CrafterData() {
      object.ReferenceEquals(global::D3.ItemCrafting.ItemCrafting.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CrafterSavedData : pb::GeneratedMessage<CrafterSavedData, CrafterSavedData.Builder> {
    private CrafterSavedData() { }
    private static readonly CrafterSavedData defaultInstance = new CrafterSavedData().MakeReadOnly();
    private static readonly string[] _crafterSavedDataFieldNames = new string[] { "crafter_data" };
    private static readonly uint[] _crafterSavedDataFieldTags = new uint[] { 10 };
    public static CrafterSavedData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CrafterSavedData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CrafterSavedData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.ItemCrafting.ItemCrafting.internal__static_D3_ItemCrafting_CrafterSavedData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CrafterSavedData, CrafterSavedData.Builder> InternalFieldAccessors {
      get { return global::D3.ItemCrafting.ItemCrafting.internal__static_D3_ItemCrafting_CrafterSavedData__FieldAccessorTable; }
    }
    
    public const int CrafterDataFieldNumber = 1;
    private pbc::PopsicleList<global::D3.ItemCrafting.CrafterData> crafterData_ = new pbc::PopsicleList<global::D3.ItemCrafting.CrafterData>();
    public scg::IList<global::D3.ItemCrafting.CrafterData> CrafterDataList {
      get { return crafterData_; }
    }
    public int CrafterDataCount {
      get { return crafterData_.Count; }
    }
    public global::D3.ItemCrafting.CrafterData GetCrafterData(int index) {
      return crafterData_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.ItemCrafting.CrafterData element in CrafterDataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _crafterSavedDataFieldNames;
      if (crafterData_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], crafterData_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.ItemCrafting.CrafterData element in CrafterDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CrafterSavedData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CrafterSavedData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CrafterSavedData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CrafterSavedData MakeReadOnly() {
      crafterData_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CrafterSavedData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CrafterSavedData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CrafterSavedData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CrafterSavedData result;
      
      private CrafterSavedData PrepareBuilder() {
        if (resultIsReadOnly) {
          CrafterSavedData original = result;
          result = new CrafterSavedData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CrafterSavedData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.ItemCrafting.CrafterSavedData.Descriptor; }
      }
      
      public override CrafterSavedData DefaultInstanceForType {
        get { return global::D3.ItemCrafting.CrafterSavedData.DefaultInstance; }
      }
      
      public override CrafterSavedData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CrafterSavedData) {
          return MergeFrom((CrafterSavedData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CrafterSavedData other) {
        if (other == global::D3.ItemCrafting.CrafterSavedData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.crafterData_.Count != 0) {
          result.crafterData_.Add(other.crafterData_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_crafterSavedDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _crafterSavedDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.crafterData_, global::D3.ItemCrafting.CrafterData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.ItemCrafting.CrafterData> CrafterDataList {
        get { return PrepareBuilder().crafterData_; }
      }
      public int CrafterDataCount {
        get { return result.CrafterDataCount; }
      }
      public global::D3.ItemCrafting.CrafterData GetCrafterData(int index) {
        return result.GetCrafterData(index);
      }
      public Builder SetCrafterData(int index, global::D3.ItemCrafting.CrafterData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.crafterData_[index] = value;
        return this;
      }
      public Builder SetCrafterData(int index, global::D3.ItemCrafting.CrafterData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.crafterData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCrafterData(global::D3.ItemCrafting.CrafterData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.crafterData_.Add(value);
        return this;
      }
      public Builder AddCrafterData(global::D3.ItemCrafting.CrafterData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.crafterData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCrafterData(scg::IEnumerable<global::D3.ItemCrafting.CrafterData> values) {
        PrepareBuilder();
        result.crafterData_.Add(values);
        return this;
      }
      public Builder ClearCrafterData() {
        PrepareBuilder();
        result.crafterData_.Clear();
        return this;
      }
    }
    static CrafterSavedData() {
      object.ReferenceEquals(global::D3.ItemCrafting.ItemCrafting.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
