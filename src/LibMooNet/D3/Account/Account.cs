// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Account {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Account {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Account_BannerConfiguration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.BannerConfiguration, global::D3.Account.BannerConfiguration.Builder> internal__static_D3_Account_BannerConfiguration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_Digest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.Digest, global::D3.Account.Digest.Builder> internal__static_D3_Account_Digest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_SavedDefinition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.SavedDefinition, global::D3.Account.SavedDefinition.Builder> internal__static_D3_Account_SavedDefinition__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Account() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg1BY2NvdW50LnByb3RvEgpEMy5BY2NvdW50GhlBdHRyaWJ1dGVTZXJpYWxp" + 
          "emVyLnByb3RvGgtJdGVtcy5wcm90bxoTT25saW5lU2VydmljZS5wcm90bxoS" + 
          "SXRlbUNyYWZ0aW5nLnByb3RvIpcCChNCYW5uZXJDb25maWd1cmF0aW9uEhcK" + 
          "DGJhbm5lcl9zaGFwZRgBIAIoDToBMBIVCgpzaWdpbF9tYWluGAIgAigNOgEw" + 
          "EhcKDHNpZ2lsX2FjY2VudBgDIAIoDToBMBIYCg1wYXR0ZXJuX2NvbG9yGAQg" + 
          "AigNOgEwEhsKEGJhY2tncm91bmRfY29sb3IYBSACKA06ATASFgoLc2lnaWxf" + 
          "Y29sb3IYBiACKA06ATASGgoPc2lnaWxfcGxhY2VtZW50GAcgAigNOgEwEhIK" + 
          "B3BhdHRlcm4YCCACKA06ATASIAoRdXNlX3NpZ2lsX3ZhcmlhbnQYCSACKAg6" + 
          "BWZhbHNlEhYKC2VwaWNfYmFubmVyGAogASgNOgEwIsgBCgZEaWdlc3QSDwoH" + 
          "dmVyc2lvbhgBIAIoDRI3ChNsYXN0X3BsYXllZF9oZXJvX2lkGAIgAigLMhou" + 
          "RDMuT25saW5lU2VydmljZS5FbnRpdHlJZBI9ChRiYW5uZXJfY29uZmlndXJh" + 
          "dGlvbhgDIAIoCzIfLkQzLkFjY291bnQuQmFubmVyQ29uZmlndXJhdGlvbhIQ" + 
          "CgVmbGFncxgEIAIoDToBMCIjCgVGbGFncxIaChZIQVJEQ09SRV9IRVJPX1VO" + 
          "TE9DS0VEEAEi0AUKD1NhdmVkRGVmaW5pdGlvbhIPCgd2ZXJzaW9uGAEgAigN" + 
          "EiIKBmRpZ2VzdBgCIAEoCzISLkQzLkFjY291bnQuRGlnZXN0EkEKEHNhdmVk" + 
          "X2F0dHJpYnV0ZXMYAyACKAsyJy5EMy5BdHRyaWJ1dGVTZXJpYWxpemVyLlNh" + 
          "dmVkQXR0cmlidXRlcxJKChlzYXZlZF9hdHRyaWJ1dGVzX2hhcmRjb3JlGAQg" + 
          "ASgLMicuRDMuQXR0cmlidXRlU2VyaWFsaXplci5TYXZlZEF0dHJpYnV0ZXMS" + 
          "NQoZbm9ybWFsX3NoYXJlZF9zYXZlZF9pdGVtcxgFIAEoCzISLkQzLkl0ZW1z" + 
          "Lkl0ZW1MaXN0EjcKG2hhcmRjb3JlX3NoYXJlZF9zYXZlZF9pdGVtcxgGIAEo" + 
          "CzISLkQzLkl0ZW1zLkl0ZW1MaXN0Ej4KE2NyYWZ0ZXJfbm9ybWFsX2RhdGEY" + 
          "ByABKAsyIS5EMy5JdGVtQ3JhZnRpbmcuQ3JhZnRlclNhdmVkRGF0YRJAChVj" + 
          "cmFmdGVyX2hhcmRjb3JlX2RhdGEYCCABKAsyIS5EMy5JdGVtQ3JhZnRpbmcu" + 
          "Q3JhZnRlclNhdmVkRGF0YRIWCg5zZWVuX3R1dG9yaWFscxgJIAEoDBImCh5u" + 
          "dW1fdm90ZV9raWNrc19wYXJ0aWNpcGF0ZWRfaW4YCiABKBASIAoYbnVtX3Zv" + 
          "dGVfa2lja3NfaW5pdGlhdGVkGAsgASgQEiAKGG51bV9wdWJsaWNfZ2FtZXNf" + 
          "bm9fa2ljaxgMIAEoEBIZChF0aW1lc192b3RlX2tpY2tlZBgNIAEoEBIyCg5n" + 
          "b2xkX2lkX25vcm1hbBgOIAEoCzIaLkQzLk9ubGluZVNlcnZpY2UuRW50aXR5" + 
          "SWQSNAoQZ29sZF9pZF9oYXJkY29yZRgPIAEoCzIaLkQzLk9ubGluZVNlcnZp" + 
          "Y2UuRW50aXR5SWQ=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Account_BannerConfiguration__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Account_BannerConfiguration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.BannerConfiguration, global::D3.Account.BannerConfiguration.Builder>(internal__static_D3_Account_BannerConfiguration__Descriptor,
                new string[] { "BannerShape", "SigilMain", "SigilAccent", "PatternColor", "BackgroundColor", "SigilColor", "SigilPlacement", "Pattern", "UseSigilVariant", "EpicBanner", });
        internal__static_D3_Account_Digest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Account_Digest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.Digest, global::D3.Account.Digest.Builder>(internal__static_D3_Account_Digest__Descriptor,
                new string[] { "Version", "LastPlayedHeroId", "BannerConfiguration", "Flags", });
        internal__static_D3_Account_SavedDefinition__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Account_SavedDefinition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.SavedDefinition, global::D3.Account.SavedDefinition.Builder>(internal__static_D3_Account_SavedDefinition__Descriptor,
                new string[] { "Version", "Digest", "SavedAttributes", "SavedAttributesHardcore", "NormalSharedSavedItems", "HardcoreSharedSavedItems", "CrafterNormalData", "CrafterHardcoreData", "SeenTutorials", "NumVoteKicksParticipatedIn", "NumVoteKicksInitiated", "NumPublicGamesNoKick", "TimesVoteKicked", "GoldIdNormal", "GoldIdHardcore", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.AttributeSerializer.AttributeSerializer.Descriptor, 
          global::D3.Items.Items.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          global::D3.ItemCrafting.ItemCrafting.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BannerConfiguration : pb::GeneratedMessage<BannerConfiguration, BannerConfiguration.Builder> {
    private BannerConfiguration() { }
    private static readonly BannerConfiguration defaultInstance = new BannerConfiguration().MakeReadOnly();
    private static readonly string[] _bannerConfigurationFieldNames = new string[] { "background_color", "banner_shape", "epic_banner", "pattern", "pattern_color", "sigil_accent", "sigil_color", "sigil_main", "sigil_placement", "use_sigil_variant" };
    private static readonly uint[] _bannerConfigurationFieldTags = new uint[] { 40, 8, 80, 64, 32, 24, 48, 16, 56, 72 };
    public static BannerConfiguration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BannerConfiguration DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BannerConfiguration ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_BannerConfiguration__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BannerConfiguration, BannerConfiguration.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_BannerConfiguration__FieldAccessorTable; }
    }
    
    public const int BannerShapeFieldNumber = 1;
    private bool hasBannerShape;
    private uint bannerShape_;
    public bool HasBannerShape {
      get { return hasBannerShape; }
    }
    public uint BannerShape {
      get { return bannerShape_; }
    }
    
    public const int SigilMainFieldNumber = 2;
    private bool hasSigilMain;
    private uint sigilMain_;
    public bool HasSigilMain {
      get { return hasSigilMain; }
    }
    public uint SigilMain {
      get { return sigilMain_; }
    }
    
    public const int SigilAccentFieldNumber = 3;
    private bool hasSigilAccent;
    private uint sigilAccent_;
    public bool HasSigilAccent {
      get { return hasSigilAccent; }
    }
    public uint SigilAccent {
      get { return sigilAccent_; }
    }
    
    public const int PatternColorFieldNumber = 4;
    private bool hasPatternColor;
    private uint patternColor_;
    public bool HasPatternColor {
      get { return hasPatternColor; }
    }
    public uint PatternColor {
      get { return patternColor_; }
    }
    
    public const int BackgroundColorFieldNumber = 5;
    private bool hasBackgroundColor;
    private uint backgroundColor_;
    public bool HasBackgroundColor {
      get { return hasBackgroundColor; }
    }
    public uint BackgroundColor {
      get { return backgroundColor_; }
    }
    
    public const int SigilColorFieldNumber = 6;
    private bool hasSigilColor;
    private uint sigilColor_;
    public bool HasSigilColor {
      get { return hasSigilColor; }
    }
    public uint SigilColor {
      get { return sigilColor_; }
    }
    
    public const int SigilPlacementFieldNumber = 7;
    private bool hasSigilPlacement;
    private uint sigilPlacement_;
    public bool HasSigilPlacement {
      get { return hasSigilPlacement; }
    }
    public uint SigilPlacement {
      get { return sigilPlacement_; }
    }
    
    public const int PatternFieldNumber = 8;
    private bool hasPattern;
    private uint pattern_;
    public bool HasPattern {
      get { return hasPattern; }
    }
    public uint Pattern {
      get { return pattern_; }
    }
    
    public const int UseSigilVariantFieldNumber = 9;
    private bool hasUseSigilVariant;
    private bool useSigilVariant_;
    public bool HasUseSigilVariant {
      get { return hasUseSigilVariant; }
    }
    public bool UseSigilVariant {
      get { return useSigilVariant_; }
    }
    
    public const int EpicBannerFieldNumber = 10;
    private bool hasEpicBanner;
    private uint epicBanner_;
    public bool HasEpicBanner {
      get { return hasEpicBanner; }
    }
    public uint EpicBanner {
      get { return epicBanner_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBannerShape) return false;
        if (!hasSigilMain) return false;
        if (!hasSigilAccent) return false;
        if (!hasPatternColor) return false;
        if (!hasBackgroundColor) return false;
        if (!hasSigilColor) return false;
        if (!hasSigilPlacement) return false;
        if (!hasPattern) return false;
        if (!hasUseSigilVariant) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bannerConfigurationFieldNames;
      if (hasBannerShape) {
        output.WriteUInt32(1, field_names[1], BannerShape);
      }
      if (hasSigilMain) {
        output.WriteUInt32(2, field_names[7], SigilMain);
      }
      if (hasSigilAccent) {
        output.WriteUInt32(3, field_names[5], SigilAccent);
      }
      if (hasPatternColor) {
        output.WriteUInt32(4, field_names[4], PatternColor);
      }
      if (hasBackgroundColor) {
        output.WriteUInt32(5, field_names[0], BackgroundColor);
      }
      if (hasSigilColor) {
        output.WriteUInt32(6, field_names[6], SigilColor);
      }
      if (hasSigilPlacement) {
        output.WriteUInt32(7, field_names[8], SigilPlacement);
      }
      if (hasPattern) {
        output.WriteUInt32(8, field_names[3], Pattern);
      }
      if (hasUseSigilVariant) {
        output.WriteBool(9, field_names[9], UseSigilVariant);
      }
      if (hasEpicBanner) {
        output.WriteUInt32(10, field_names[2], EpicBanner);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBannerShape) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, BannerShape);
        }
        if (hasSigilMain) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SigilMain);
        }
        if (hasSigilAccent) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, SigilAccent);
        }
        if (hasPatternColor) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, PatternColor);
        }
        if (hasBackgroundColor) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, BackgroundColor);
        }
        if (hasSigilColor) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, SigilColor);
        }
        if (hasSigilPlacement) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, SigilPlacement);
        }
        if (hasPattern) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, Pattern);
        }
        if (hasUseSigilVariant) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, UseSigilVariant);
        }
        if (hasEpicBanner) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, EpicBanner);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BannerConfiguration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BannerConfiguration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BannerConfiguration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BannerConfiguration MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BannerConfiguration prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BannerConfiguration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BannerConfiguration cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BannerConfiguration result;
      
      private BannerConfiguration PrepareBuilder() {
        if (resultIsReadOnly) {
          BannerConfiguration original = result;
          result = new BannerConfiguration();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BannerConfiguration MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.BannerConfiguration.Descriptor; }
      }
      
      public override BannerConfiguration DefaultInstanceForType {
        get { return global::D3.Account.BannerConfiguration.DefaultInstance; }
      }
      
      public override BannerConfiguration BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BannerConfiguration) {
          return MergeFrom((BannerConfiguration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BannerConfiguration other) {
        if (other == global::D3.Account.BannerConfiguration.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBannerShape) {
          BannerShape = other.BannerShape;
        }
        if (other.HasSigilMain) {
          SigilMain = other.SigilMain;
        }
        if (other.HasSigilAccent) {
          SigilAccent = other.SigilAccent;
        }
        if (other.HasPatternColor) {
          PatternColor = other.PatternColor;
        }
        if (other.HasBackgroundColor) {
          BackgroundColor = other.BackgroundColor;
        }
        if (other.HasSigilColor) {
          SigilColor = other.SigilColor;
        }
        if (other.HasSigilPlacement) {
          SigilPlacement = other.SigilPlacement;
        }
        if (other.HasPattern) {
          Pattern = other.Pattern;
        }
        if (other.HasUseSigilVariant) {
          UseSigilVariant = other.UseSigilVariant;
        }
        if (other.HasEpicBanner) {
          EpicBanner = other.EpicBanner;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bannerConfigurationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bannerConfigurationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBannerShape = input.ReadUInt32(ref result.bannerShape_);
              break;
            }
            case 16: {
              result.hasSigilMain = input.ReadUInt32(ref result.sigilMain_);
              break;
            }
            case 24: {
              result.hasSigilAccent = input.ReadUInt32(ref result.sigilAccent_);
              break;
            }
            case 32: {
              result.hasPatternColor = input.ReadUInt32(ref result.patternColor_);
              break;
            }
            case 40: {
              result.hasBackgroundColor = input.ReadUInt32(ref result.backgroundColor_);
              break;
            }
            case 48: {
              result.hasSigilColor = input.ReadUInt32(ref result.sigilColor_);
              break;
            }
            case 56: {
              result.hasSigilPlacement = input.ReadUInt32(ref result.sigilPlacement_);
              break;
            }
            case 64: {
              result.hasPattern = input.ReadUInt32(ref result.pattern_);
              break;
            }
            case 72: {
              result.hasUseSigilVariant = input.ReadBool(ref result.useSigilVariant_);
              break;
            }
            case 80: {
              result.hasEpicBanner = input.ReadUInt32(ref result.epicBanner_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBannerShape {
        get { return result.hasBannerShape; }
      }
      public uint BannerShape {
        get { return result.BannerShape; }
        set { SetBannerShape(value); }
      }
      public Builder SetBannerShape(uint value) {
        PrepareBuilder();
        result.hasBannerShape = true;
        result.bannerShape_ = value;
        return this;
      }
      public Builder ClearBannerShape() {
        PrepareBuilder();
        result.hasBannerShape = false;
        result.bannerShape_ = 0;
        return this;
      }
      
      public bool HasSigilMain {
        get { return result.hasSigilMain; }
      }
      public uint SigilMain {
        get { return result.SigilMain; }
        set { SetSigilMain(value); }
      }
      public Builder SetSigilMain(uint value) {
        PrepareBuilder();
        result.hasSigilMain = true;
        result.sigilMain_ = value;
        return this;
      }
      public Builder ClearSigilMain() {
        PrepareBuilder();
        result.hasSigilMain = false;
        result.sigilMain_ = 0;
        return this;
      }
      
      public bool HasSigilAccent {
        get { return result.hasSigilAccent; }
      }
      public uint SigilAccent {
        get { return result.SigilAccent; }
        set { SetSigilAccent(value); }
      }
      public Builder SetSigilAccent(uint value) {
        PrepareBuilder();
        result.hasSigilAccent = true;
        result.sigilAccent_ = value;
        return this;
      }
      public Builder ClearSigilAccent() {
        PrepareBuilder();
        result.hasSigilAccent = false;
        result.sigilAccent_ = 0;
        return this;
      }
      
      public bool HasPatternColor {
        get { return result.hasPatternColor; }
      }
      public uint PatternColor {
        get { return result.PatternColor; }
        set { SetPatternColor(value); }
      }
      public Builder SetPatternColor(uint value) {
        PrepareBuilder();
        result.hasPatternColor = true;
        result.patternColor_ = value;
        return this;
      }
      public Builder ClearPatternColor() {
        PrepareBuilder();
        result.hasPatternColor = false;
        result.patternColor_ = 0;
        return this;
      }
      
      public bool HasBackgroundColor {
        get { return result.hasBackgroundColor; }
      }
      public uint BackgroundColor {
        get { return result.BackgroundColor; }
        set { SetBackgroundColor(value); }
      }
      public Builder SetBackgroundColor(uint value) {
        PrepareBuilder();
        result.hasBackgroundColor = true;
        result.backgroundColor_ = value;
        return this;
      }
      public Builder ClearBackgroundColor() {
        PrepareBuilder();
        result.hasBackgroundColor = false;
        result.backgroundColor_ = 0;
        return this;
      }
      
      public bool HasSigilColor {
        get { return result.hasSigilColor; }
      }
      public uint SigilColor {
        get { return result.SigilColor; }
        set { SetSigilColor(value); }
      }
      public Builder SetSigilColor(uint value) {
        PrepareBuilder();
        result.hasSigilColor = true;
        result.sigilColor_ = value;
        return this;
      }
      public Builder ClearSigilColor() {
        PrepareBuilder();
        result.hasSigilColor = false;
        result.sigilColor_ = 0;
        return this;
      }
      
      public bool HasSigilPlacement {
        get { return result.hasSigilPlacement; }
      }
      public uint SigilPlacement {
        get { return result.SigilPlacement; }
        set { SetSigilPlacement(value); }
      }
      public Builder SetSigilPlacement(uint value) {
        PrepareBuilder();
        result.hasSigilPlacement = true;
        result.sigilPlacement_ = value;
        return this;
      }
      public Builder ClearSigilPlacement() {
        PrepareBuilder();
        result.hasSigilPlacement = false;
        result.sigilPlacement_ = 0;
        return this;
      }
      
      public bool HasPattern {
        get { return result.hasPattern; }
      }
      public uint Pattern {
        get { return result.Pattern; }
        set { SetPattern(value); }
      }
      public Builder SetPattern(uint value) {
        PrepareBuilder();
        result.hasPattern = true;
        result.pattern_ = value;
        return this;
      }
      public Builder ClearPattern() {
        PrepareBuilder();
        result.hasPattern = false;
        result.pattern_ = 0;
        return this;
      }
      
      public bool HasUseSigilVariant {
        get { return result.hasUseSigilVariant; }
      }
      public bool UseSigilVariant {
        get { return result.UseSigilVariant; }
        set { SetUseSigilVariant(value); }
      }
      public Builder SetUseSigilVariant(bool value) {
        PrepareBuilder();
        result.hasUseSigilVariant = true;
        result.useSigilVariant_ = value;
        return this;
      }
      public Builder ClearUseSigilVariant() {
        PrepareBuilder();
        result.hasUseSigilVariant = false;
        result.useSigilVariant_ = false;
        return this;
      }
      
      public bool HasEpicBanner {
        get { return result.hasEpicBanner; }
      }
      public uint EpicBanner {
        get { return result.EpicBanner; }
        set { SetEpicBanner(value); }
      }
      public Builder SetEpicBanner(uint value) {
        PrepareBuilder();
        result.hasEpicBanner = true;
        result.epicBanner_ = value;
        return this;
      }
      public Builder ClearEpicBanner() {
        PrepareBuilder();
        result.hasEpicBanner = false;
        result.epicBanner_ = 0;
        return this;
      }
    }
    static BannerConfiguration() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Digest : pb::GeneratedMessage<Digest, Digest.Builder> {
    private Digest() { }
    private static readonly Digest defaultInstance = new Digest().MakeReadOnly();
    private static readonly string[] _digestFieldNames = new string[] { "banner_configuration", "flags", "last_played_hero_id", "version" };
    private static readonly uint[] _digestFieldTags = new uint[] { 26, 32, 18, 8 };
    public static Digest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Digest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Digest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_Digest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Digest, Digest.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_Digest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Flags {
        HARDCORE_HERO_UNLOCKED = 1,
      }
      
    }
    #endregion
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int LastPlayedHeroIdFieldNumber = 2;
    private bool hasLastPlayedHeroId;
    private global::D3.OnlineService.EntityId lastPlayedHeroId_;
    public bool HasLastPlayedHeroId {
      get { return hasLastPlayedHeroId; }
    }
    public global::D3.OnlineService.EntityId LastPlayedHeroId {
      get { return lastPlayedHeroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int BannerConfigurationFieldNumber = 3;
    private bool hasBannerConfiguration;
    private global::D3.Account.BannerConfiguration bannerConfiguration_;
    public bool HasBannerConfiguration {
      get { return hasBannerConfiguration; }
    }
    public global::D3.Account.BannerConfiguration BannerConfiguration {
      get { return bannerConfiguration_ ?? global::D3.Account.BannerConfiguration.DefaultInstance; }
    }
    
    public const int FlagsFieldNumber = 4;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasLastPlayedHeroId) return false;
        if (!hasBannerConfiguration) return false;
        if (!hasFlags) return false;
        if (!LastPlayedHeroId.IsInitialized) return false;
        if (!BannerConfiguration.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _digestFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[3], Version);
      }
      if (hasLastPlayedHeroId) {
        output.WriteMessage(2, field_names[2], LastPlayedHeroId);
      }
      if (hasBannerConfiguration) {
        output.WriteMessage(3, field_names[0], BannerConfiguration);
      }
      if (hasFlags) {
        output.WriteUInt32(4, field_names[1], Flags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasLastPlayedHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, LastPlayedHeroId);
        }
        if (hasBannerConfiguration) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, BannerConfiguration);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Flags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Digest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Digest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Digest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Digest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Digest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Digest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Digest result;
      
      private Digest PrepareBuilder() {
        if (resultIsReadOnly) {
          Digest original = result;
          result = new Digest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Digest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.Digest.Descriptor; }
      }
      
      public override Digest DefaultInstanceForType {
        get { return global::D3.Account.Digest.DefaultInstance; }
      }
      
      public override Digest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Digest) {
          return MergeFrom((Digest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Digest other) {
        if (other == global::D3.Account.Digest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasLastPlayedHeroId) {
          MergeLastPlayedHeroId(other.LastPlayedHeroId);
        }
        if (other.HasBannerConfiguration) {
          MergeBannerConfiguration(other.BannerConfiguration);
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_digestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _digestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasLastPlayedHeroId) {
                subBuilder.MergeFrom(LastPlayedHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LastPlayedHeroId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (result.hasBannerConfiguration) {
                subBuilder.MergeFrom(BannerConfiguration);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BannerConfiguration = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasLastPlayedHeroId {
       get { return result.hasLastPlayedHeroId; }
      }
      public global::D3.OnlineService.EntityId LastPlayedHeroId {
        get { return result.LastPlayedHeroId; }
        set { SetLastPlayedHeroId(value); }
      }
      public Builder SetLastPlayedHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastPlayedHeroId = true;
        result.lastPlayedHeroId_ = value;
        return this;
      }
      public Builder SetLastPlayedHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLastPlayedHeroId = true;
        result.lastPlayedHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLastPlayedHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLastPlayedHeroId &&
            result.lastPlayedHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.lastPlayedHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.lastPlayedHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.lastPlayedHeroId_ = value;
        }
        result.hasLastPlayedHeroId = true;
        return this;
      }
      public Builder ClearLastPlayedHeroId() {
        PrepareBuilder();
        result.hasLastPlayedHeroId = false;
        result.lastPlayedHeroId_ = null;
        return this;
      }
      
      public bool HasBannerConfiguration {
       get { return result.hasBannerConfiguration; }
      }
      public global::D3.Account.BannerConfiguration BannerConfiguration {
        get { return result.BannerConfiguration; }
        set { SetBannerConfiguration(value); }
      }
      public Builder SetBannerConfiguration(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBannerConfiguration = true;
        result.bannerConfiguration_ = value;
        return this;
      }
      public Builder SetBannerConfiguration(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBannerConfiguration = true;
        result.bannerConfiguration_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBannerConfiguration(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBannerConfiguration &&
            result.bannerConfiguration_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.bannerConfiguration_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.bannerConfiguration_).MergeFrom(value).BuildPartial();
        } else {
          result.bannerConfiguration_ = value;
        }
        result.hasBannerConfiguration = true;
        return this;
      }
      public Builder ClearBannerConfiguration() {
        PrepareBuilder();
        result.hasBannerConfiguration = false;
        result.bannerConfiguration_ = null;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
    }
    static Digest() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedDefinition : pb::GeneratedMessage<SavedDefinition, SavedDefinition.Builder> {
    private SavedDefinition() { }
    private static readonly SavedDefinition defaultInstance = new SavedDefinition().MakeReadOnly();
    private static readonly string[] _savedDefinitionFieldNames = new string[] { "crafter_hardcore_data", "crafter_normal_data", "digest", "gold_id_hardcore", "gold_id_normal", "hardcore_shared_saved_items", "normal_shared_saved_items", "num_public_games_no_kick", "num_vote_kicks_initiated", "num_vote_kicks_participated_in", "saved_attributes", "saved_attributes_hardcore", "seen_tutorials", "times_vote_kicked", "version" };
    private static readonly uint[] _savedDefinitionFieldTags = new uint[] { 66, 58, 18, 122, 114, 50, 42, 97, 89, 81, 26, 34, 74, 105, 8 };
    public static SavedDefinition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedDefinition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedDefinition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_SavedDefinition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedDefinition, SavedDefinition.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_SavedDefinition__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int DigestFieldNumber = 2;
    private bool hasDigest;
    private global::D3.Account.Digest digest_;
    public bool HasDigest {
      get { return hasDigest; }
    }
    public global::D3.Account.Digest Digest {
      get { return digest_ ?? global::D3.Account.Digest.DefaultInstance; }
    }
    
    public const int SavedAttributesFieldNumber = 3;
    private bool hasSavedAttributes;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributes_;
    public bool HasSavedAttributes {
      get { return hasSavedAttributes; }
    }
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
      get { return savedAttributes_ ?? global::D3.AttributeSerializer.SavedAttributes.DefaultInstance; }
    }
    
    public const int SavedAttributesHardcoreFieldNumber = 4;
    private bool hasSavedAttributesHardcore;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributesHardcore_;
    public bool HasSavedAttributesHardcore {
      get { return hasSavedAttributesHardcore; }
    }
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributesHardcore {
      get { return savedAttributesHardcore_ ?? global::D3.AttributeSerializer.SavedAttributes.DefaultInstance; }
    }
    
    public const int NormalSharedSavedItemsFieldNumber = 5;
    private bool hasNormalSharedSavedItems;
    private global::D3.Items.ItemList normalSharedSavedItems_;
    public bool HasNormalSharedSavedItems {
      get { return hasNormalSharedSavedItems; }
    }
    public global::D3.Items.ItemList NormalSharedSavedItems {
      get { return normalSharedSavedItems_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public const int HardcoreSharedSavedItemsFieldNumber = 6;
    private bool hasHardcoreSharedSavedItems;
    private global::D3.Items.ItemList hardcoreSharedSavedItems_;
    public bool HasHardcoreSharedSavedItems {
      get { return hasHardcoreSharedSavedItems; }
    }
    public global::D3.Items.ItemList HardcoreSharedSavedItems {
      get { return hardcoreSharedSavedItems_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public const int CrafterNormalDataFieldNumber = 7;
    private bool hasCrafterNormalData;
    private global::D3.ItemCrafting.CrafterSavedData crafterNormalData_;
    public bool HasCrafterNormalData {
      get { return hasCrafterNormalData; }
    }
    public global::D3.ItemCrafting.CrafterSavedData CrafterNormalData {
      get { return crafterNormalData_ ?? global::D3.ItemCrafting.CrafterSavedData.DefaultInstance; }
    }
    
    public const int CrafterHardcoreDataFieldNumber = 8;
    private bool hasCrafterHardcoreData;
    private global::D3.ItemCrafting.CrafterSavedData crafterHardcoreData_;
    public bool HasCrafterHardcoreData {
      get { return hasCrafterHardcoreData; }
    }
    public global::D3.ItemCrafting.CrafterSavedData CrafterHardcoreData {
      get { return crafterHardcoreData_ ?? global::D3.ItemCrafting.CrafterSavedData.DefaultInstance; }
    }
    
    public const int SeenTutorialsFieldNumber = 9;
    private bool hasSeenTutorials;
    private pb::ByteString seenTutorials_ = pb::ByteString.Empty;
    public bool HasSeenTutorials {
      get { return hasSeenTutorials; }
    }
    public pb::ByteString SeenTutorials {
      get { return seenTutorials_; }
    }
    
    public const int NumVoteKicksParticipatedInFieldNumber = 10;
    private bool hasNumVoteKicksParticipatedIn;
    private long numVoteKicksParticipatedIn_;
    public bool HasNumVoteKicksParticipatedIn {
      get { return hasNumVoteKicksParticipatedIn; }
    }
    public long NumVoteKicksParticipatedIn {
      get { return numVoteKicksParticipatedIn_; }
    }
    
    public const int NumVoteKicksInitiatedFieldNumber = 11;
    private bool hasNumVoteKicksInitiated;
    private long numVoteKicksInitiated_;
    public bool HasNumVoteKicksInitiated {
      get { return hasNumVoteKicksInitiated; }
    }
    public long NumVoteKicksInitiated {
      get { return numVoteKicksInitiated_; }
    }
    
    public const int NumPublicGamesNoKickFieldNumber = 12;
    private bool hasNumPublicGamesNoKick;
    private long numPublicGamesNoKick_;
    public bool HasNumPublicGamesNoKick {
      get { return hasNumPublicGamesNoKick; }
    }
    public long NumPublicGamesNoKick {
      get { return numPublicGamesNoKick_; }
    }
    
    public const int TimesVoteKickedFieldNumber = 13;
    private bool hasTimesVoteKicked;
    private long timesVoteKicked_;
    public bool HasTimesVoteKicked {
      get { return hasTimesVoteKicked; }
    }
    public long TimesVoteKicked {
      get { return timesVoteKicked_; }
    }
    
    public const int GoldIdNormalFieldNumber = 14;
    private bool hasGoldIdNormal;
    private global::D3.OnlineService.EntityId goldIdNormal_;
    public bool HasGoldIdNormal {
      get { return hasGoldIdNormal; }
    }
    public global::D3.OnlineService.EntityId GoldIdNormal {
      get { return goldIdNormal_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int GoldIdHardcoreFieldNumber = 15;
    private bool hasGoldIdHardcore;
    private global::D3.OnlineService.EntityId goldIdHardcore_;
    public bool HasGoldIdHardcore {
      get { return hasGoldIdHardcore; }
    }
    public global::D3.OnlineService.EntityId GoldIdHardcore {
      get { return goldIdHardcore_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasSavedAttributes) return false;
        if (HasDigest) {
          if (!Digest.IsInitialized) return false;
        }
        if (!SavedAttributes.IsInitialized) return false;
        if (HasSavedAttributesHardcore) {
          if (!SavedAttributesHardcore.IsInitialized) return false;
        }
        if (HasNormalSharedSavedItems) {
          if (!NormalSharedSavedItems.IsInitialized) return false;
        }
        if (HasHardcoreSharedSavedItems) {
          if (!HardcoreSharedSavedItems.IsInitialized) return false;
        }
        if (HasCrafterNormalData) {
          if (!CrafterNormalData.IsInitialized) return false;
        }
        if (HasCrafterHardcoreData) {
          if (!CrafterHardcoreData.IsInitialized) return false;
        }
        if (HasGoldIdNormal) {
          if (!GoldIdNormal.IsInitialized) return false;
        }
        if (HasGoldIdHardcore) {
          if (!GoldIdHardcore.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedDefinitionFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[14], Version);
      }
      if (hasDigest) {
        output.WriteMessage(2, field_names[2], Digest);
      }
      if (hasSavedAttributes) {
        output.WriteMessage(3, field_names[10], SavedAttributes);
      }
      if (hasSavedAttributesHardcore) {
        output.WriteMessage(4, field_names[11], SavedAttributesHardcore);
      }
      if (hasNormalSharedSavedItems) {
        output.WriteMessage(5, field_names[6], NormalSharedSavedItems);
      }
      if (hasHardcoreSharedSavedItems) {
        output.WriteMessage(6, field_names[5], HardcoreSharedSavedItems);
      }
      if (hasCrafterNormalData) {
        output.WriteMessage(7, field_names[1], CrafterNormalData);
      }
      if (hasCrafterHardcoreData) {
        output.WriteMessage(8, field_names[0], CrafterHardcoreData);
      }
      if (hasSeenTutorials) {
        output.WriteBytes(9, field_names[12], SeenTutorials);
      }
      if (hasNumVoteKicksParticipatedIn) {
        output.WriteSFixed64(10, field_names[9], NumVoteKicksParticipatedIn);
      }
      if (hasNumVoteKicksInitiated) {
        output.WriteSFixed64(11, field_names[8], NumVoteKicksInitiated);
      }
      if (hasNumPublicGamesNoKick) {
        output.WriteSFixed64(12, field_names[7], NumPublicGamesNoKick);
      }
      if (hasTimesVoteKicked) {
        output.WriteSFixed64(13, field_names[13], TimesVoteKicked);
      }
      if (hasGoldIdNormal) {
        output.WriteMessage(14, field_names[4], GoldIdNormal);
      }
      if (hasGoldIdHardcore) {
        output.WriteMessage(15, field_names[3], GoldIdHardcore);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Digest);
        }
        if (hasSavedAttributes) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SavedAttributes);
        }
        if (hasSavedAttributesHardcore) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, SavedAttributesHardcore);
        }
        if (hasNormalSharedSavedItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, NormalSharedSavedItems);
        }
        if (hasHardcoreSharedSavedItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, HardcoreSharedSavedItems);
        }
        if (hasCrafterNormalData) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, CrafterNormalData);
        }
        if (hasCrafterHardcoreData) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, CrafterHardcoreData);
        }
        if (hasSeenTutorials) {
          size += pb::CodedOutputStream.ComputeBytesSize(9, SeenTutorials);
        }
        if (hasNumVoteKicksParticipatedIn) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(10, NumVoteKicksParticipatedIn);
        }
        if (hasNumVoteKicksInitiated) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(11, NumVoteKicksInitiated);
        }
        if (hasNumPublicGamesNoKick) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(12, NumPublicGamesNoKick);
        }
        if (hasTimesVoteKicked) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(13, TimesVoteKicked);
        }
        if (hasGoldIdNormal) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, GoldIdNormal);
        }
        if (hasGoldIdHardcore) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, GoldIdHardcore);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedDefinition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedDefinition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedDefinition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedDefinition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedDefinition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedDefinition result;
      
      private SavedDefinition PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedDefinition original = result;
          result = new SavedDefinition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedDefinition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.SavedDefinition.Descriptor; }
      }
      
      public override SavedDefinition DefaultInstanceForType {
        get { return global::D3.Account.SavedDefinition.DefaultInstance; }
      }
      
      public override SavedDefinition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedDefinition) {
          return MergeFrom((SavedDefinition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedDefinition other) {
        if (other == global::D3.Account.SavedDefinition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasDigest) {
          MergeDigest(other.Digest);
        }
        if (other.HasSavedAttributes) {
          MergeSavedAttributes(other.SavedAttributes);
        }
        if (other.HasSavedAttributesHardcore) {
          MergeSavedAttributesHardcore(other.SavedAttributesHardcore);
        }
        if (other.HasNormalSharedSavedItems) {
          MergeNormalSharedSavedItems(other.NormalSharedSavedItems);
        }
        if (other.HasHardcoreSharedSavedItems) {
          MergeHardcoreSharedSavedItems(other.HardcoreSharedSavedItems);
        }
        if (other.HasCrafterNormalData) {
          MergeCrafterNormalData(other.CrafterNormalData);
        }
        if (other.HasCrafterHardcoreData) {
          MergeCrafterHardcoreData(other.CrafterHardcoreData);
        }
        if (other.HasSeenTutorials) {
          SeenTutorials = other.SeenTutorials;
        }
        if (other.HasNumVoteKicksParticipatedIn) {
          NumVoteKicksParticipatedIn = other.NumVoteKicksParticipatedIn;
        }
        if (other.HasNumVoteKicksInitiated) {
          NumVoteKicksInitiated = other.NumVoteKicksInitiated;
        }
        if (other.HasNumPublicGamesNoKick) {
          NumPublicGamesNoKick = other.NumPublicGamesNoKick;
        }
        if (other.HasTimesVoteKicked) {
          TimesVoteKicked = other.TimesVoteKicked;
        }
        if (other.HasGoldIdNormal) {
          MergeGoldIdNormal(other.GoldIdNormal);
        }
        if (other.HasGoldIdHardcore) {
          MergeGoldIdHardcore(other.GoldIdHardcore);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedDefinitionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedDefinitionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.Account.Digest.Builder subBuilder = global::D3.Account.Digest.CreateBuilder();
              if (result.hasDigest) {
                subBuilder.MergeFrom(Digest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Digest = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.AttributeSerializer.SavedAttributes.Builder subBuilder = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder();
              if (result.hasSavedAttributes) {
                subBuilder.MergeFrom(SavedAttributes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedAttributes = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.AttributeSerializer.SavedAttributes.Builder subBuilder = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder();
              if (result.hasSavedAttributesHardcore) {
                subBuilder.MergeFrom(SavedAttributesHardcore);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedAttributesHardcore = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasNormalSharedSavedItems) {
                subBuilder.MergeFrom(NormalSharedSavedItems);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NormalSharedSavedItems = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasHardcoreSharedSavedItems) {
                subBuilder.MergeFrom(HardcoreSharedSavedItems);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HardcoreSharedSavedItems = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::D3.ItemCrafting.CrafterSavedData.Builder subBuilder = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder();
              if (result.hasCrafterNormalData) {
                subBuilder.MergeFrom(CrafterNormalData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CrafterNormalData = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::D3.ItemCrafting.CrafterSavedData.Builder subBuilder = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder();
              if (result.hasCrafterHardcoreData) {
                subBuilder.MergeFrom(CrafterHardcoreData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CrafterHardcoreData = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              result.hasSeenTutorials = input.ReadBytes(ref result.seenTutorials_);
              break;
            }
            case 81: {
              result.hasNumVoteKicksParticipatedIn = input.ReadSFixed64(ref result.numVoteKicksParticipatedIn_);
              break;
            }
            case 89: {
              result.hasNumVoteKicksInitiated = input.ReadSFixed64(ref result.numVoteKicksInitiated_);
              break;
            }
            case 97: {
              result.hasNumPublicGamesNoKick = input.ReadSFixed64(ref result.numPublicGamesNoKick_);
              break;
            }
            case 105: {
              result.hasTimesVoteKicked = input.ReadSFixed64(ref result.timesVoteKicked_);
              break;
            }
            case 114: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasGoldIdNormal) {
                subBuilder.MergeFrom(GoldIdNormal);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GoldIdNormal = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasGoldIdHardcore) {
                subBuilder.MergeFrom(GoldIdHardcore);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GoldIdHardcore = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasDigest {
       get { return result.hasDigest; }
      }
      public global::D3.Account.Digest Digest {
        get { return result.Digest; }
        set { SetDigest(value); }
      }
      public Builder SetDigest(global::D3.Account.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDigest = true;
        result.digest_ = value;
        return this;
      }
      public Builder SetDigest(global::D3.Account.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDigest = true;
        result.digest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDigest(global::D3.Account.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDigest &&
            result.digest_ != global::D3.Account.Digest.DefaultInstance) {
            result.digest_ = global::D3.Account.Digest.CreateBuilder(result.digest_).MergeFrom(value).BuildPartial();
        } else {
          result.digest_ = value;
        }
        result.hasDigest = true;
        return this;
      }
      public Builder ClearDigest() {
        PrepareBuilder();
        result.hasDigest = false;
        result.digest_ = null;
        return this;
      }
      
      public bool HasSavedAttributes {
       get { return result.hasSavedAttributes; }
      }
      public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
        get { return result.SavedAttributes; }
        set { SetSavedAttributes(value); }
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavedAttributes = true;
        result.savedAttributes_ = value;
        return this;
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavedAttributes = true;
        result.savedAttributes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavedAttributes &&
            result.savedAttributes_ != global::D3.AttributeSerializer.SavedAttributes.DefaultInstance) {
            result.savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder(result.savedAttributes_).MergeFrom(value).BuildPartial();
        } else {
          result.savedAttributes_ = value;
        }
        result.hasSavedAttributes = true;
        return this;
      }
      public Builder ClearSavedAttributes() {
        PrepareBuilder();
        result.hasSavedAttributes = false;
        result.savedAttributes_ = null;
        return this;
      }
      
      public bool HasSavedAttributesHardcore {
       get { return result.hasSavedAttributesHardcore; }
      }
      public global::D3.AttributeSerializer.SavedAttributes SavedAttributesHardcore {
        get { return result.SavedAttributesHardcore; }
        set { SetSavedAttributesHardcore(value); }
      }
      public Builder SetSavedAttributesHardcore(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavedAttributesHardcore = true;
        result.savedAttributesHardcore_ = value;
        return this;
      }
      public Builder SetSavedAttributesHardcore(global::D3.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavedAttributesHardcore = true;
        result.savedAttributesHardcore_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedAttributesHardcore(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavedAttributesHardcore &&
            result.savedAttributesHardcore_ != global::D3.AttributeSerializer.SavedAttributes.DefaultInstance) {
            result.savedAttributesHardcore_ = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder(result.savedAttributesHardcore_).MergeFrom(value).BuildPartial();
        } else {
          result.savedAttributesHardcore_ = value;
        }
        result.hasSavedAttributesHardcore = true;
        return this;
      }
      public Builder ClearSavedAttributesHardcore() {
        PrepareBuilder();
        result.hasSavedAttributesHardcore = false;
        result.savedAttributesHardcore_ = null;
        return this;
      }
      
      public bool HasNormalSharedSavedItems {
       get { return result.hasNormalSharedSavedItems; }
      }
      public global::D3.Items.ItemList NormalSharedSavedItems {
        get { return result.NormalSharedSavedItems; }
        set { SetNormalSharedSavedItems(value); }
      }
      public Builder SetNormalSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNormalSharedSavedItems = true;
        result.normalSharedSavedItems_ = value;
        return this;
      }
      public Builder SetNormalSharedSavedItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNormalSharedSavedItems = true;
        result.normalSharedSavedItems_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNormalSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNormalSharedSavedItems &&
            result.normalSharedSavedItems_ != global::D3.Items.ItemList.DefaultInstance) {
            result.normalSharedSavedItems_ = global::D3.Items.ItemList.CreateBuilder(result.normalSharedSavedItems_).MergeFrom(value).BuildPartial();
        } else {
          result.normalSharedSavedItems_ = value;
        }
        result.hasNormalSharedSavedItems = true;
        return this;
      }
      public Builder ClearNormalSharedSavedItems() {
        PrepareBuilder();
        result.hasNormalSharedSavedItems = false;
        result.normalSharedSavedItems_ = null;
        return this;
      }
      
      public bool HasHardcoreSharedSavedItems {
       get { return result.hasHardcoreSharedSavedItems; }
      }
      public global::D3.Items.ItemList HardcoreSharedSavedItems {
        get { return result.HardcoreSharedSavedItems; }
        set { SetHardcoreSharedSavedItems(value); }
      }
      public Builder SetHardcoreSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHardcoreSharedSavedItems = true;
        result.hardcoreSharedSavedItems_ = value;
        return this;
      }
      public Builder SetHardcoreSharedSavedItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHardcoreSharedSavedItems = true;
        result.hardcoreSharedSavedItems_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHardcoreSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHardcoreSharedSavedItems &&
            result.hardcoreSharedSavedItems_ != global::D3.Items.ItemList.DefaultInstance) {
            result.hardcoreSharedSavedItems_ = global::D3.Items.ItemList.CreateBuilder(result.hardcoreSharedSavedItems_).MergeFrom(value).BuildPartial();
        } else {
          result.hardcoreSharedSavedItems_ = value;
        }
        result.hasHardcoreSharedSavedItems = true;
        return this;
      }
      public Builder ClearHardcoreSharedSavedItems() {
        PrepareBuilder();
        result.hasHardcoreSharedSavedItems = false;
        result.hardcoreSharedSavedItems_ = null;
        return this;
      }
      
      public bool HasCrafterNormalData {
       get { return result.hasCrafterNormalData; }
      }
      public global::D3.ItemCrafting.CrafterSavedData CrafterNormalData {
        get { return result.CrafterNormalData; }
        set { SetCrafterNormalData(value); }
      }
      public Builder SetCrafterNormalData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrafterNormalData = true;
        result.crafterNormalData_ = value;
        return this;
      }
      public Builder SetCrafterNormalData(global::D3.ItemCrafting.CrafterSavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCrafterNormalData = true;
        result.crafterNormalData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCrafterNormalData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCrafterNormalData &&
            result.crafterNormalData_ != global::D3.ItemCrafting.CrafterSavedData.DefaultInstance) {
            result.crafterNormalData_ = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder(result.crafterNormalData_).MergeFrom(value).BuildPartial();
        } else {
          result.crafterNormalData_ = value;
        }
        result.hasCrafterNormalData = true;
        return this;
      }
      public Builder ClearCrafterNormalData() {
        PrepareBuilder();
        result.hasCrafterNormalData = false;
        result.crafterNormalData_ = null;
        return this;
      }
      
      public bool HasCrafterHardcoreData {
       get { return result.hasCrafterHardcoreData; }
      }
      public global::D3.ItemCrafting.CrafterSavedData CrafterHardcoreData {
        get { return result.CrafterHardcoreData; }
        set { SetCrafterHardcoreData(value); }
      }
      public Builder SetCrafterHardcoreData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrafterHardcoreData = true;
        result.crafterHardcoreData_ = value;
        return this;
      }
      public Builder SetCrafterHardcoreData(global::D3.ItemCrafting.CrafterSavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCrafterHardcoreData = true;
        result.crafterHardcoreData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCrafterHardcoreData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCrafterHardcoreData &&
            result.crafterHardcoreData_ != global::D3.ItemCrafting.CrafterSavedData.DefaultInstance) {
            result.crafterHardcoreData_ = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder(result.crafterHardcoreData_).MergeFrom(value).BuildPartial();
        } else {
          result.crafterHardcoreData_ = value;
        }
        result.hasCrafterHardcoreData = true;
        return this;
      }
      public Builder ClearCrafterHardcoreData() {
        PrepareBuilder();
        result.hasCrafterHardcoreData = false;
        result.crafterHardcoreData_ = null;
        return this;
      }
      
      public bool HasSeenTutorials {
        get { return result.hasSeenTutorials; }
      }
      public pb::ByteString SeenTutorials {
        get { return result.SeenTutorials; }
        set { SetSeenTutorials(value); }
      }
      public Builder SetSeenTutorials(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeenTutorials = true;
        result.seenTutorials_ = value;
        return this;
      }
      public Builder ClearSeenTutorials() {
        PrepareBuilder();
        result.hasSeenTutorials = false;
        result.seenTutorials_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasNumVoteKicksParticipatedIn {
        get { return result.hasNumVoteKicksParticipatedIn; }
      }
      public long NumVoteKicksParticipatedIn {
        get { return result.NumVoteKicksParticipatedIn; }
        set { SetNumVoteKicksParticipatedIn(value); }
      }
      public Builder SetNumVoteKicksParticipatedIn(long value) {
        PrepareBuilder();
        result.hasNumVoteKicksParticipatedIn = true;
        result.numVoteKicksParticipatedIn_ = value;
        return this;
      }
      public Builder ClearNumVoteKicksParticipatedIn() {
        PrepareBuilder();
        result.hasNumVoteKicksParticipatedIn = false;
        result.numVoteKicksParticipatedIn_ = 0;
        return this;
      }
      
      public bool HasNumVoteKicksInitiated {
        get { return result.hasNumVoteKicksInitiated; }
      }
      public long NumVoteKicksInitiated {
        get { return result.NumVoteKicksInitiated; }
        set { SetNumVoteKicksInitiated(value); }
      }
      public Builder SetNumVoteKicksInitiated(long value) {
        PrepareBuilder();
        result.hasNumVoteKicksInitiated = true;
        result.numVoteKicksInitiated_ = value;
        return this;
      }
      public Builder ClearNumVoteKicksInitiated() {
        PrepareBuilder();
        result.hasNumVoteKicksInitiated = false;
        result.numVoteKicksInitiated_ = 0;
        return this;
      }
      
      public bool HasNumPublicGamesNoKick {
        get { return result.hasNumPublicGamesNoKick; }
      }
      public long NumPublicGamesNoKick {
        get { return result.NumPublicGamesNoKick; }
        set { SetNumPublicGamesNoKick(value); }
      }
      public Builder SetNumPublicGamesNoKick(long value) {
        PrepareBuilder();
        result.hasNumPublicGamesNoKick = true;
        result.numPublicGamesNoKick_ = value;
        return this;
      }
      public Builder ClearNumPublicGamesNoKick() {
        PrepareBuilder();
        result.hasNumPublicGamesNoKick = false;
        result.numPublicGamesNoKick_ = 0;
        return this;
      }
      
      public bool HasTimesVoteKicked {
        get { return result.hasTimesVoteKicked; }
      }
      public long TimesVoteKicked {
        get { return result.TimesVoteKicked; }
        set { SetTimesVoteKicked(value); }
      }
      public Builder SetTimesVoteKicked(long value) {
        PrepareBuilder();
        result.hasTimesVoteKicked = true;
        result.timesVoteKicked_ = value;
        return this;
      }
      public Builder ClearTimesVoteKicked() {
        PrepareBuilder();
        result.hasTimesVoteKicked = false;
        result.timesVoteKicked_ = 0;
        return this;
      }
      
      public bool HasGoldIdNormal {
       get { return result.hasGoldIdNormal; }
      }
      public global::D3.OnlineService.EntityId GoldIdNormal {
        get { return result.GoldIdNormal; }
        set { SetGoldIdNormal(value); }
      }
      public Builder SetGoldIdNormal(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGoldIdNormal = true;
        result.goldIdNormal_ = value;
        return this;
      }
      public Builder SetGoldIdNormal(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGoldIdNormal = true;
        result.goldIdNormal_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGoldIdNormal(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGoldIdNormal &&
            result.goldIdNormal_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.goldIdNormal_ = global::D3.OnlineService.EntityId.CreateBuilder(result.goldIdNormal_).MergeFrom(value).BuildPartial();
        } else {
          result.goldIdNormal_ = value;
        }
        result.hasGoldIdNormal = true;
        return this;
      }
      public Builder ClearGoldIdNormal() {
        PrepareBuilder();
        result.hasGoldIdNormal = false;
        result.goldIdNormal_ = null;
        return this;
      }
      
      public bool HasGoldIdHardcore {
       get { return result.hasGoldIdHardcore; }
      }
      public global::D3.OnlineService.EntityId GoldIdHardcore {
        get { return result.GoldIdHardcore; }
        set { SetGoldIdHardcore(value); }
      }
      public Builder SetGoldIdHardcore(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGoldIdHardcore = true;
        result.goldIdHardcore_ = value;
        return this;
      }
      public Builder SetGoldIdHardcore(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGoldIdHardcore = true;
        result.goldIdHardcore_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGoldIdHardcore(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGoldIdHardcore &&
            result.goldIdHardcore_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.goldIdHardcore_ = global::D3.OnlineService.EntityId.CreateBuilder(result.goldIdHardcore_).MergeFrom(value).BuildPartial();
        } else {
          result.goldIdHardcore_ = value;
        }
        result.hasGoldIdHardcore = true;
        return this;
      }
      public Builder ClearGoldIdHardcore() {
        PrepareBuilder();
        result.hasGoldIdHardcore = false;
        result.goldIdHardcore_ = null;
        return this;
      }
    }
    static SavedDefinition() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
