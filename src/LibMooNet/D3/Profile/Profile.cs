// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Profile {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Profile {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Profile_ClassInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.ClassInfo, global::D3.Profile.ClassInfo.Builder> internal__static_D3_Profile_ClassInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_SkillWithRune__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.SkillWithRune, global::D3.Profile.SkillWithRune.Builder> internal__static_D3_Profile_SkillWithRune__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_SkillsWithRunes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.SkillsWithRunes, global::D3.Profile.SkillsWithRunes.Builder> internal__static_D3_Profile_SkillsWithRunes__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_PassiveSkills__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PassiveSkills, global::D3.Profile.PassiveSkills.Builder> internal__static_D3_Profile_PassiveSkills__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_KillerInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.KillerInfo, global::D3.Profile.KillerInfo.Builder> internal__static_D3_Profile_KillerInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_HeroProfile__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.HeroProfile, global::D3.Profile.HeroProfile.Builder> internal__static_D3_Profile_HeroProfile__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_HeroProfileList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.HeroProfileList, global::D3.Profile.HeroProfileList.Builder> internal__static_D3_Profile_HeroProfileList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_AccountProfile__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.AccountProfile, global::D3.Profile.AccountProfile.Builder> internal__static_D3_Profile_AccountProfile__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Profile() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg1Qcm9maWxlLnByb3RvEgpEMy5Qcm9maWxlGhlBdHRyaWJ1dGVTZXJpYWxp" + 
          "emVyLnByb3RvGgtJdGVtcy5wcm90bxoTT25saW5lU2VydmljZS5wcm90bxoO" + 
          "R0JIYW5kbGUucHJvdG8iWQoJQ2xhc3NJbmZvEhMKCHBsYXl0aW1lGAEgASgE" + 
          "OgEwEhgKDWhpZ2hlc3RfbGV2ZWwYAiABKA06ATASHQoSaGlnaGVzdF9kaWZm" + 
          "aWN1bHR5GAMgASgNOgEwIjkKDVNraWxsV2l0aFJ1bmUSEQoFc2tpbGwYASAC" + 
          "KA86Ai0xEhUKCXJ1bmVfdHlwZRgCIAEoEToCLTEiOwoPU2tpbGxzV2l0aFJ1" + 
          "bmVzEigKBXJ1bmVzGAEgAygLMhkuRDMuUHJvZmlsZS5Ta2lsbFdpdGhSdW5l" + 
          "IiMKDVBhc3NpdmVTa2lsbHMSEgoKc25vX3RyYWl0cxgBIAMoDyJNCgpLaWxs" + 
          "ZXJJbmZvEhYKCnNub19raWxsZXIYASABKAU6Ai0xEg4KBnJhcml0eRgCIAEo" + 
          "DRIXCg9yYXJlX25hbWVfZ2JpZHMYAyADKAUi/gUKC0hlcm9Qcm9maWxlEhcK" + 
          "D21vbnN0ZXJzX2tpbGxlZBgBIAEoBBIVCg1lbGl0ZXNfa2lsbGVkGAIgASgE" + 
          "EhYKDmdvbGRfY29sbGVjdGVkGAMgASgEEhUKDWhpZ2hlc3RfbGV2ZWwYBCAB" + 
          "KA0SGgoSaGlnaGVzdF9kaWZmaWN1bHR5GAUgASgNEhMKC2NyZWF0ZV90aW1l" + 
          "GAYgASgNEhcKCGhhcmRjb3JlGAcgASgIOgVmYWxzZRIQCghzdHJlbmd0aBgI" + 
          "IAEoDRIRCglkZXh0ZXJpdHkYCSABKA0SFAoMaW50ZWxsaWdlbmNlGAogASgN" + 
          "EhAKCHZpdGFsaXR5GAsgASgNEg0KBWFybW9yGAwgASgNEgsKA2RwcxgNIAEo" + 
          "AhIVCg1yZXNpc3RfYXJjYW5lGA4gASgNEhMKC3Jlc2lzdF9maXJlGA8gASgN" + 
          "EhgKEHJlc2lzdF9saWdodG5pbmcYECABKA0SFQoNcmVzaXN0X3BvaXNvbhgR" + 
          "IAEoDRITCgtyZXNpc3RfY29sZBgSIAEoDRIlCgllcXVpcG1lbnQYEyABKAsy" + 
          "Ei5EMy5JdGVtcy5JdGVtTGlzdBI2ChFzbm9fYWN0aXZlX3NraWxscxgUIAEo" + 
          "CzIbLkQzLlByb2ZpbGUuU2tpbGxzV2l0aFJ1bmVzEi0KCnNub190cmFpdHMY" + 
          "FSABKAsyGS5EMy5Qcm9maWxlLlBhc3NpdmVTa2lsbHMSEgoKZGVhdGhfdGlt" + 
          "ZRgWIAEoDRIrCgtraWxsZXJfaW5mbxgXIAEoCzIWLkQzLlByb2ZpbGUuS2ls" + 
          "bGVySW5mbxIZChFzbm9fa2lsbF9sb2NhdGlvbhgYIAEoDRIrCgdoZXJvX2lk" + 
          "GBsgASgLMhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZBIXCg9kYW1hZ2Vf" + 
          "aW5jcmVhc2UYHCABKAISEwoLY3JpdF9jaGFuY2UYHSABKAISGAoQZGFtYWdl" + 
          "X3JlZHVjdGlvbhgeIAEoAhIMCgRsaWZlGB8gASgNIjkKD0hlcm9Qcm9maWxl" + 
          "TGlzdBImCgVoZXJvcxgBIAMoCzIXLkQzLlByb2ZpbGUuSGVyb1Byb2ZpbGUi" + 
          "twQKDkFjY291bnRQcm9maWxlEhoKEmhpZ2hlc3RfZGlmZmljdWx0eRgBIAEo" + 
          "DRIhChloaWdoZXN0X2Jvc3NfZGlmZmljdWx0eV8xGAIgASgNEiEKGWhpZ2hl" + 
          "c3RfYm9zc19kaWZmaWN1bHR5XzIYAyABKA0SIQoZaGlnaGVzdF9ib3NzX2Rp" + 
          "ZmZpY3VsdHlfMxgEIAEoDRIhChloaWdoZXN0X2Jvc3NfZGlmZmljdWx0eV80" + 
          "GAUgASgNEhoKD21vbnN0ZXJzX2tpbGxlZBgGIAEoBDoBMBIYCg1lbGl0ZXNf" + 
          "a2lsbGVkGAcgASgEOgEwEhkKDmdvbGRfY29sbGVjdGVkGAggASgEOgEwEh4K" + 
          "FmhpZ2hlc3RfaGFyZGNvcmVfbGV2ZWwYCSABKAQSIAoYaGFyZGNvcmVfbW9u" + 
          "c3RlcnNfa2lsbGVkGAogASgEEi4KD2NsYXNzX2JhcmJhcmlhbhgLIAEoCzIV" + 
          "LkQzLlByb2ZpbGUuQ2xhc3NJbmZvEjAKEWNsYXNzX2RlbW9uaHVudGVyGAwg" + 
          "ASgLMhUuRDMuUHJvZmlsZS5DbGFzc0luZm8SKQoKY2xhc3NfbW9uaxgNIAEo" + 
          "CzIVLkQzLlByb2ZpbGUuQ2xhc3NJbmZvEjAKEWNsYXNzX3dpdGNoZG9jdG9y" + 
          "GA4gASgLMhUuRDMuUHJvZmlsZS5DbGFzc0luZm8SKwoMY2xhc3Nfd2l6YXJk" + 
          "GA8gASgLMhUuRDMuUHJvZmlsZS5DbGFzc0luZm8=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Profile_ClassInfo__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Profile_ClassInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.ClassInfo, global::D3.Profile.ClassInfo.Builder>(internal__static_D3_Profile_ClassInfo__Descriptor,
                new string[] { "Playtime", "HighestLevel", "HighestDifficulty", });
        internal__static_D3_Profile_SkillWithRune__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Profile_SkillWithRune__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.SkillWithRune, global::D3.Profile.SkillWithRune.Builder>(internal__static_D3_Profile_SkillWithRune__Descriptor,
                new string[] { "Skill", "RuneType", });
        internal__static_D3_Profile_SkillsWithRunes__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Profile_SkillsWithRunes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.SkillsWithRunes, global::D3.Profile.SkillsWithRunes.Builder>(internal__static_D3_Profile_SkillsWithRunes__Descriptor,
                new string[] { "Runes", });
        internal__static_D3_Profile_PassiveSkills__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Profile_PassiveSkills__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PassiveSkills, global::D3.Profile.PassiveSkills.Builder>(internal__static_D3_Profile_PassiveSkills__Descriptor,
                new string[] { "SnoTraits", });
        internal__static_D3_Profile_KillerInfo__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Profile_KillerInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.KillerInfo, global::D3.Profile.KillerInfo.Builder>(internal__static_D3_Profile_KillerInfo__Descriptor,
                new string[] { "SnoKiller", "Rarity", "RareNameGbids", });
        internal__static_D3_Profile_HeroProfile__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Profile_HeroProfile__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.HeroProfile, global::D3.Profile.HeroProfile.Builder>(internal__static_D3_Profile_HeroProfile__Descriptor,
                new string[] { "MonstersKilled", "ElitesKilled", "GoldCollected", "HighestLevel", "HighestDifficulty", "CreateTime", "Hardcore", "Strength", "Dexterity", "Intelligence", "Vitality", "Armor", "Dps", "ResistArcane", "ResistFire", "ResistLightning", "ResistPoison", "ResistCold", "Equipment", "SnoActiveSkills", "SnoTraits", "DeathTime", "KillerInfo", "SnoKillLocation", "HeroId", "DamageIncrease", "CritChance", "DamageReduction", "Life", });
        internal__static_D3_Profile_HeroProfileList__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Profile_HeroProfileList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.HeroProfileList, global::D3.Profile.HeroProfileList.Builder>(internal__static_D3_Profile_HeroProfileList__Descriptor,
                new string[] { "Heros", });
        internal__static_D3_Profile_AccountProfile__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Profile_AccountProfile__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.AccountProfile, global::D3.Profile.AccountProfile.Builder>(internal__static_D3_Profile_AccountProfile__Descriptor,
                new string[] { "HighestDifficulty", "HighestBossDifficulty1", "HighestBossDifficulty2", "HighestBossDifficulty3", "HighestBossDifficulty4", "MonstersKilled", "ElitesKilled", "GoldCollected", "HighestHardcoreLevel", "HardcoreMonstersKilled", "ClassBarbarian", "ClassDemonhunter", "ClassMonk", "ClassWitchdoctor", "ClassWizard", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.AttributeSerializer.AttributeSerializer.Descriptor, 
          global::D3.Items.Items.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          global::D3.GameBalance.GBHandle.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ClassInfo : pb::GeneratedMessage<ClassInfo, ClassInfo.Builder> {
    private ClassInfo() { }
    private static readonly ClassInfo defaultInstance = new ClassInfo().MakeReadOnly();
    private static readonly string[] _classInfoFieldNames = new string[] { "highest_difficulty", "highest_level", "playtime" };
    private static readonly uint[] _classInfoFieldTags = new uint[] { 24, 16, 8 };
    public static ClassInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClassInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClassInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_ClassInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClassInfo, ClassInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_ClassInfo__FieldAccessorTable; }
    }
    
    public const int PlaytimeFieldNumber = 1;
    private bool hasPlaytime;
    private ulong playtime_;
    public bool HasPlaytime {
      get { return hasPlaytime; }
    }
    public ulong Playtime {
      get { return playtime_; }
    }
    
    public const int HighestLevelFieldNumber = 2;
    private bool hasHighestLevel;
    private uint highestLevel_;
    public bool HasHighestLevel {
      get { return hasHighestLevel; }
    }
    public uint HighestLevel {
      get { return highestLevel_; }
    }
    
    public const int HighestDifficultyFieldNumber = 3;
    private bool hasHighestDifficulty;
    private uint highestDifficulty_;
    public bool HasHighestDifficulty {
      get { return hasHighestDifficulty; }
    }
    public uint HighestDifficulty {
      get { return highestDifficulty_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _classInfoFieldNames;
      if (hasPlaytime) {
        output.WriteUInt64(1, field_names[2], Playtime);
      }
      if (hasHighestLevel) {
        output.WriteUInt32(2, field_names[1], HighestLevel);
      }
      if (hasHighestDifficulty) {
        output.WriteUInt32(3, field_names[0], HighestDifficulty);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlaytime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Playtime);
        }
        if (hasHighestLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, HighestLevel);
        }
        if (hasHighestDifficulty) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, HighestDifficulty);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClassInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClassInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClassInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClassInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClassInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClassInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClassInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClassInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClassInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClassInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClassInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClassInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ClassInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClassInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClassInfo result;
      
      private ClassInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ClassInfo original = result;
          result = new ClassInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClassInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.ClassInfo.Descriptor; }
      }
      
      public override ClassInfo DefaultInstanceForType {
        get { return global::D3.Profile.ClassInfo.DefaultInstance; }
      }
      
      public override ClassInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClassInfo) {
          return MergeFrom((ClassInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClassInfo other) {
        if (other == global::D3.Profile.ClassInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlaytime) {
          Playtime = other.Playtime;
        }
        if (other.HasHighestLevel) {
          HighestLevel = other.HighestLevel;
        }
        if (other.HasHighestDifficulty) {
          HighestDifficulty = other.HighestDifficulty;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_classInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _classInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlaytime = input.ReadUInt64(ref result.playtime_);
              break;
            }
            case 16: {
              result.hasHighestLevel = input.ReadUInt32(ref result.highestLevel_);
              break;
            }
            case 24: {
              result.hasHighestDifficulty = input.ReadUInt32(ref result.highestDifficulty_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlaytime {
        get { return result.hasPlaytime; }
      }
      public ulong Playtime {
        get { return result.Playtime; }
        set { SetPlaytime(value); }
      }
      public Builder SetPlaytime(ulong value) {
        PrepareBuilder();
        result.hasPlaytime = true;
        result.playtime_ = value;
        return this;
      }
      public Builder ClearPlaytime() {
        PrepareBuilder();
        result.hasPlaytime = false;
        result.playtime_ = 0UL;
        return this;
      }
      
      public bool HasHighestLevel {
        get { return result.hasHighestLevel; }
      }
      public uint HighestLevel {
        get { return result.HighestLevel; }
        set { SetHighestLevel(value); }
      }
      public Builder SetHighestLevel(uint value) {
        PrepareBuilder();
        result.hasHighestLevel = true;
        result.highestLevel_ = value;
        return this;
      }
      public Builder ClearHighestLevel() {
        PrepareBuilder();
        result.hasHighestLevel = false;
        result.highestLevel_ = 0;
        return this;
      }
      
      public bool HasHighestDifficulty {
        get { return result.hasHighestDifficulty; }
      }
      public uint HighestDifficulty {
        get { return result.HighestDifficulty; }
        set { SetHighestDifficulty(value); }
      }
      public Builder SetHighestDifficulty(uint value) {
        PrepareBuilder();
        result.hasHighestDifficulty = true;
        result.highestDifficulty_ = value;
        return this;
      }
      public Builder ClearHighestDifficulty() {
        PrepareBuilder();
        result.hasHighestDifficulty = false;
        result.highestDifficulty_ = 0;
        return this;
      }
    }
    static ClassInfo() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SkillWithRune : pb::GeneratedMessage<SkillWithRune, SkillWithRune.Builder> {
    private SkillWithRune() { }
    private static readonly SkillWithRune defaultInstance = new SkillWithRune().MakeReadOnly();
    private static readonly string[] _skillWithRuneFieldNames = new string[] { "rune_type", "skill" };
    private static readonly uint[] _skillWithRuneFieldTags = new uint[] { 16, 13 };
    public static SkillWithRune DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillWithRune DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillWithRune ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_SkillWithRune__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillWithRune, SkillWithRune.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_SkillWithRune__FieldAccessorTable; }
    }
    
    public const int SkillFieldNumber = 1;
    private bool hasSkill;
    private int skill_ = -1;
    public bool HasSkill {
      get { return hasSkill; }
    }
    public int Skill {
      get { return skill_; }
    }
    
    public const int RuneTypeFieldNumber = 2;
    private bool hasRuneType;
    private int runeType_ = -1;
    public bool HasRuneType {
      get { return hasRuneType; }
    }
    public int RuneType {
      get { return runeType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSkill) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillWithRuneFieldNames;
      if (hasSkill) {
        output.WriteSFixed32(1, field_names[1], Skill);
      }
      if (hasRuneType) {
        output.WriteSInt32(2, field_names[0], RuneType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSkill) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, Skill);
        }
        if (hasRuneType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, RuneType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillWithRune ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillWithRune ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillWithRune ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillWithRune ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillWithRune MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillWithRune prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillWithRune, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillWithRune cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillWithRune result;
      
      private SkillWithRune PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillWithRune original = result;
          result = new SkillWithRune();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillWithRune MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.SkillWithRune.Descriptor; }
      }
      
      public override SkillWithRune DefaultInstanceForType {
        get { return global::D3.Profile.SkillWithRune.DefaultInstance; }
      }
      
      public override SkillWithRune BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillWithRune) {
          return MergeFrom((SkillWithRune) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillWithRune other) {
        if (other == global::D3.Profile.SkillWithRune.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkill) {
          Skill = other.Skill;
        }
        if (other.HasRuneType) {
          RuneType = other.RuneType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillWithRuneFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillWithRuneFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSkill = input.ReadSFixed32(ref result.skill_);
              break;
            }
            case 16: {
              result.hasRuneType = input.ReadSInt32(ref result.runeType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkill {
        get { return result.hasSkill; }
      }
      public int Skill {
        get { return result.Skill; }
        set { SetSkill(value); }
      }
      public Builder SetSkill(int value) {
        PrepareBuilder();
        result.hasSkill = true;
        result.skill_ = value;
        return this;
      }
      public Builder ClearSkill() {
        PrepareBuilder();
        result.hasSkill = false;
        result.skill_ = -1;
        return this;
      }
      
      public bool HasRuneType {
        get { return result.hasRuneType; }
      }
      public int RuneType {
        get { return result.RuneType; }
        set { SetRuneType(value); }
      }
      public Builder SetRuneType(int value) {
        PrepareBuilder();
        result.hasRuneType = true;
        result.runeType_ = value;
        return this;
      }
      public Builder ClearRuneType() {
        PrepareBuilder();
        result.hasRuneType = false;
        result.runeType_ = -1;
        return this;
      }
    }
    static SkillWithRune() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SkillsWithRunes : pb::GeneratedMessage<SkillsWithRunes, SkillsWithRunes.Builder> {
    private SkillsWithRunes() { }
    private static readonly SkillsWithRunes defaultInstance = new SkillsWithRunes().MakeReadOnly();
    private static readonly string[] _skillsWithRunesFieldNames = new string[] { "runes" };
    private static readonly uint[] _skillsWithRunesFieldTags = new uint[] { 10 };
    public static SkillsWithRunes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillsWithRunes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillsWithRunes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_SkillsWithRunes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillsWithRunes, SkillsWithRunes.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_SkillsWithRunes__FieldAccessorTable; }
    }
    
    public const int RunesFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Profile.SkillWithRune> runes_ = new pbc::PopsicleList<global::D3.Profile.SkillWithRune>();
    public scg::IList<global::D3.Profile.SkillWithRune> RunesList {
      get { return runes_; }
    }
    public int RunesCount {
      get { return runes_.Count; }
    }
    public global::D3.Profile.SkillWithRune GetRunes(int index) {
      return runes_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Profile.SkillWithRune element in RunesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillsWithRunesFieldNames;
      if (runes_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], runes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Profile.SkillWithRune element in RunesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillsWithRunes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillsWithRunes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillsWithRunes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillsWithRunes MakeReadOnly() {
      runes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillsWithRunes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillsWithRunes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillsWithRunes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillsWithRunes result;
      
      private SkillsWithRunes PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillsWithRunes original = result;
          result = new SkillsWithRunes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillsWithRunes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.SkillsWithRunes.Descriptor; }
      }
      
      public override SkillsWithRunes DefaultInstanceForType {
        get { return global::D3.Profile.SkillsWithRunes.DefaultInstance; }
      }
      
      public override SkillsWithRunes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillsWithRunes) {
          return MergeFrom((SkillsWithRunes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillsWithRunes other) {
        if (other == global::D3.Profile.SkillsWithRunes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.runes_.Count != 0) {
          result.runes_.Add(other.runes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillsWithRunesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillsWithRunesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.runes_, global::D3.Profile.SkillWithRune.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Profile.SkillWithRune> RunesList {
        get { return PrepareBuilder().runes_; }
      }
      public int RunesCount {
        get { return result.RunesCount; }
      }
      public global::D3.Profile.SkillWithRune GetRunes(int index) {
        return result.GetRunes(index);
      }
      public Builder SetRunes(int index, global::D3.Profile.SkillWithRune value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.runes_[index] = value;
        return this;
      }
      public Builder SetRunes(int index, global::D3.Profile.SkillWithRune.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.runes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRunes(global::D3.Profile.SkillWithRune value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.runes_.Add(value);
        return this;
      }
      public Builder AddRunes(global::D3.Profile.SkillWithRune.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.runes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRunes(scg::IEnumerable<global::D3.Profile.SkillWithRune> values) {
        PrepareBuilder();
        result.runes_.Add(values);
        return this;
      }
      public Builder ClearRunes() {
        PrepareBuilder();
        result.runes_.Clear();
        return this;
      }
    }
    static SkillsWithRunes() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PassiveSkills : pb::GeneratedMessage<PassiveSkills, PassiveSkills.Builder> {
    private PassiveSkills() { }
    private static readonly PassiveSkills defaultInstance = new PassiveSkills().MakeReadOnly();
    private static readonly string[] _passiveSkillsFieldNames = new string[] { "sno_traits" };
    private static readonly uint[] _passiveSkillsFieldTags = new uint[] { 13 };
    public static PassiveSkills DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PassiveSkills DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PassiveSkills ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PassiveSkills__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PassiveSkills, PassiveSkills.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PassiveSkills__FieldAccessorTable; }
    }
    
    public const int SnoTraitsFieldNumber = 1;
    private pbc::PopsicleList<int> snoTraits_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoTraitsList {
      get { return pbc::Lists.AsReadOnly(snoTraits_); }
    }
    public int SnoTraitsCount {
      get { return snoTraits_.Count; }
    }
    public int GetSnoTraits(int index) {
      return snoTraits_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _passiveSkillsFieldNames;
      if (snoTraits_.Count > 0) {
        output.WriteSFixed32Array(1, field_names[0], snoTraits_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * snoTraits_.Count;
          size += dataSize;
          size += 1 * snoTraits_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PassiveSkills ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PassiveSkills ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PassiveSkills ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PassiveSkills ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PassiveSkills MakeReadOnly() {
      snoTraits_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PassiveSkills prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PassiveSkills, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PassiveSkills cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PassiveSkills result;
      
      private PassiveSkills PrepareBuilder() {
        if (resultIsReadOnly) {
          PassiveSkills original = result;
          result = new PassiveSkills();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PassiveSkills MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.PassiveSkills.Descriptor; }
      }
      
      public override PassiveSkills DefaultInstanceForType {
        get { return global::D3.Profile.PassiveSkills.DefaultInstance; }
      }
      
      public override PassiveSkills BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PassiveSkills) {
          return MergeFrom((PassiveSkills) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PassiveSkills other) {
        if (other == global::D3.Profile.PassiveSkills.DefaultInstance) return this;
        PrepareBuilder();
        if (other.snoTraits_.Count != 0) {
          result.snoTraits_.Add(other.snoTraits_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_passiveSkillsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _passiveSkillsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadSFixed32Array(tag, field_name, result.snoTraits_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> SnoTraitsList {
        get { return PrepareBuilder().snoTraits_; }
      }
      public int SnoTraitsCount {
        get { return result.SnoTraitsCount; }
      }
      public int GetSnoTraits(int index) {
        return result.GetSnoTraits(index);
      }
      public Builder SetSnoTraits(int index, int value) {
        PrepareBuilder();
        result.snoTraits_[index] = value;
        return this;
      }
      public Builder AddSnoTraits(int value) {
        PrepareBuilder();
        result.snoTraits_.Add(value);
        return this;
      }
      public Builder AddRangeSnoTraits(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.snoTraits_.Add(values);
        return this;
      }
      public Builder ClearSnoTraits() {
        PrepareBuilder();
        result.snoTraits_.Clear();
        return this;
      }
    }
    static PassiveSkills() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class KillerInfo : pb::GeneratedMessage<KillerInfo, KillerInfo.Builder> {
    private KillerInfo() { }
    private static readonly KillerInfo defaultInstance = new KillerInfo().MakeReadOnly();
    private static readonly string[] _killerInfoFieldNames = new string[] { "rare_name_gbids", "rarity", "sno_killer" };
    private static readonly uint[] _killerInfoFieldTags = new uint[] { 24, 16, 8 };
    public static KillerInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override KillerInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override KillerInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_KillerInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<KillerInfo, KillerInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_KillerInfo__FieldAccessorTable; }
    }
    
    public const int SnoKillerFieldNumber = 1;
    private bool hasSnoKiller;
    private int snoKiller_ = -1;
    public bool HasSnoKiller {
      get { return hasSnoKiller; }
    }
    public int SnoKiller {
      get { return snoKiller_; }
    }
    
    public const int RarityFieldNumber = 2;
    private bool hasRarity;
    private uint rarity_;
    public bool HasRarity {
      get { return hasRarity; }
    }
    public uint Rarity {
      get { return rarity_; }
    }
    
    public const int RareNameGbidsFieldNumber = 3;
    private pbc::PopsicleList<int> rareNameGbids_ = new pbc::PopsicleList<int>();
    public scg::IList<int> RareNameGbidsList {
      get { return pbc::Lists.AsReadOnly(rareNameGbids_); }
    }
    public int RareNameGbidsCount {
      get { return rareNameGbids_.Count; }
    }
    public int GetRareNameGbids(int index) {
      return rareNameGbids_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _killerInfoFieldNames;
      if (hasSnoKiller) {
        output.WriteInt32(1, field_names[2], SnoKiller);
      }
      if (hasRarity) {
        output.WriteUInt32(2, field_names[1], Rarity);
      }
      if (rareNameGbids_.Count > 0) {
        output.WriteInt32Array(3, field_names[0], rareNameGbids_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoKiller) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SnoKiller);
        }
        if (hasRarity) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Rarity);
        }
        {
          int dataSize = 0;
          foreach (int element in RareNameGbidsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * rareNameGbids_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static KillerInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KillerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KillerInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KillerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KillerInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KillerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static KillerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static KillerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static KillerInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KillerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private KillerInfo MakeReadOnly() {
      rareNameGbids_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(KillerInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<KillerInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(KillerInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private KillerInfo result;
      
      private KillerInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          KillerInfo original = result;
          result = new KillerInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override KillerInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.KillerInfo.Descriptor; }
      }
      
      public override KillerInfo DefaultInstanceForType {
        get { return global::D3.Profile.KillerInfo.DefaultInstance; }
      }
      
      public override KillerInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is KillerInfo) {
          return MergeFrom((KillerInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(KillerInfo other) {
        if (other == global::D3.Profile.KillerInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoKiller) {
          SnoKiller = other.SnoKiller;
        }
        if (other.HasRarity) {
          Rarity = other.Rarity;
        }
        if (other.rareNameGbids_.Count != 0) {
          result.rareNameGbids_.Add(other.rareNameGbids_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_killerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _killerInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSnoKiller = input.ReadInt32(ref result.snoKiller_);
              break;
            }
            case 16: {
              result.hasRarity = input.ReadUInt32(ref result.rarity_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.rareNameGbids_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoKiller {
        get { return result.hasSnoKiller; }
      }
      public int SnoKiller {
        get { return result.SnoKiller; }
        set { SetSnoKiller(value); }
      }
      public Builder SetSnoKiller(int value) {
        PrepareBuilder();
        result.hasSnoKiller = true;
        result.snoKiller_ = value;
        return this;
      }
      public Builder ClearSnoKiller() {
        PrepareBuilder();
        result.hasSnoKiller = false;
        result.snoKiller_ = -1;
        return this;
      }
      
      public bool HasRarity {
        get { return result.hasRarity; }
      }
      public uint Rarity {
        get { return result.Rarity; }
        set { SetRarity(value); }
      }
      public Builder SetRarity(uint value) {
        PrepareBuilder();
        result.hasRarity = true;
        result.rarity_ = value;
        return this;
      }
      public Builder ClearRarity() {
        PrepareBuilder();
        result.hasRarity = false;
        result.rarity_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> RareNameGbidsList {
        get { return PrepareBuilder().rareNameGbids_; }
      }
      public int RareNameGbidsCount {
        get { return result.RareNameGbidsCount; }
      }
      public int GetRareNameGbids(int index) {
        return result.GetRareNameGbids(index);
      }
      public Builder SetRareNameGbids(int index, int value) {
        PrepareBuilder();
        result.rareNameGbids_[index] = value;
        return this;
      }
      public Builder AddRareNameGbids(int value) {
        PrepareBuilder();
        result.rareNameGbids_.Add(value);
        return this;
      }
      public Builder AddRangeRareNameGbids(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.rareNameGbids_.Add(values);
        return this;
      }
      public Builder ClearRareNameGbids() {
        PrepareBuilder();
        result.rareNameGbids_.Clear();
        return this;
      }
    }
    static KillerInfo() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroProfile : pb::GeneratedMessage<HeroProfile, HeroProfile.Builder> {
    private HeroProfile() { }
    private static readonly HeroProfile defaultInstance = new HeroProfile().MakeReadOnly();
    private static readonly string[] _heroProfileFieldNames = new string[] { "armor", "create_time", "crit_chance", "damage_increase", "damage_reduction", "death_time", "dexterity", "dps", "elites_killed", "equipment", "gold_collected", "hardcore", "hero_id", "highest_difficulty", "highest_level", "intelligence", "killer_info", "life", "monsters_killed", "resist_arcane", "resist_cold", "resist_fire", "resist_lightning", "resist_poison", "sno_active_skills", "sno_kill_location", "sno_traits", "strength", "vitality" };
    private static readonly uint[] _heroProfileFieldTags = new uint[] { 96, 48, 237, 229, 245, 176, 72, 109, 16, 154, 24, 56, 218, 40, 32, 80, 186, 248, 8, 112, 144, 120, 128, 136, 162, 192, 170, 64, 88 };
    public static HeroProfile DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroProfile DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroProfile ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_HeroProfile__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroProfile, HeroProfile.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_HeroProfile__FieldAccessorTable; }
    }
    
    public const int MonstersKilledFieldNumber = 1;
    private bool hasMonstersKilled;
    private ulong monstersKilled_;
    public bool HasMonstersKilled {
      get { return hasMonstersKilled; }
    }
    public ulong MonstersKilled {
      get { return monstersKilled_; }
    }
    
    public const int ElitesKilledFieldNumber = 2;
    private bool hasElitesKilled;
    private ulong elitesKilled_;
    public bool HasElitesKilled {
      get { return hasElitesKilled; }
    }
    public ulong ElitesKilled {
      get { return elitesKilled_; }
    }
    
    public const int GoldCollectedFieldNumber = 3;
    private bool hasGoldCollected;
    private ulong goldCollected_;
    public bool HasGoldCollected {
      get { return hasGoldCollected; }
    }
    public ulong GoldCollected {
      get { return goldCollected_; }
    }
    
    public const int HighestLevelFieldNumber = 4;
    private bool hasHighestLevel;
    private uint highestLevel_;
    public bool HasHighestLevel {
      get { return hasHighestLevel; }
    }
    public uint HighestLevel {
      get { return highestLevel_; }
    }
    
    public const int HighestDifficultyFieldNumber = 5;
    private bool hasHighestDifficulty;
    private uint highestDifficulty_;
    public bool HasHighestDifficulty {
      get { return hasHighestDifficulty; }
    }
    public uint HighestDifficulty {
      get { return highestDifficulty_; }
    }
    
    public const int CreateTimeFieldNumber = 6;
    private bool hasCreateTime;
    private uint createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public uint CreateTime {
      get { return createTime_; }
    }
    
    public const int HardcoreFieldNumber = 7;
    private bool hasHardcore;
    private bool hardcore_;
    public bool HasHardcore {
      get { return hasHardcore; }
    }
    public bool Hardcore {
      get { return hardcore_; }
    }
    
    public const int StrengthFieldNumber = 8;
    private bool hasStrength;
    private uint strength_;
    public bool HasStrength {
      get { return hasStrength; }
    }
    public uint Strength {
      get { return strength_; }
    }
    
    public const int DexterityFieldNumber = 9;
    private bool hasDexterity;
    private uint dexterity_;
    public bool HasDexterity {
      get { return hasDexterity; }
    }
    public uint Dexterity {
      get { return dexterity_; }
    }
    
    public const int IntelligenceFieldNumber = 10;
    private bool hasIntelligence;
    private uint intelligence_;
    public bool HasIntelligence {
      get { return hasIntelligence; }
    }
    public uint Intelligence {
      get { return intelligence_; }
    }
    
    public const int VitalityFieldNumber = 11;
    private bool hasVitality;
    private uint vitality_;
    public bool HasVitality {
      get { return hasVitality; }
    }
    public uint Vitality {
      get { return vitality_; }
    }
    
    public const int ArmorFieldNumber = 12;
    private bool hasArmor;
    private uint armor_;
    public bool HasArmor {
      get { return hasArmor; }
    }
    public uint Armor {
      get { return armor_; }
    }
    
    public const int DpsFieldNumber = 13;
    private bool hasDps;
    private float dps_;
    public bool HasDps {
      get { return hasDps; }
    }
    public float Dps {
      get { return dps_; }
    }
    
    public const int ResistArcaneFieldNumber = 14;
    private bool hasResistArcane;
    private uint resistArcane_;
    public bool HasResistArcane {
      get { return hasResistArcane; }
    }
    public uint ResistArcane {
      get { return resistArcane_; }
    }
    
    public const int ResistFireFieldNumber = 15;
    private bool hasResistFire;
    private uint resistFire_;
    public bool HasResistFire {
      get { return hasResistFire; }
    }
    public uint ResistFire {
      get { return resistFire_; }
    }
    
    public const int ResistLightningFieldNumber = 16;
    private bool hasResistLightning;
    private uint resistLightning_;
    public bool HasResistLightning {
      get { return hasResistLightning; }
    }
    public uint ResistLightning {
      get { return resistLightning_; }
    }
    
    public const int ResistPoisonFieldNumber = 17;
    private bool hasResistPoison;
    private uint resistPoison_;
    public bool HasResistPoison {
      get { return hasResistPoison; }
    }
    public uint ResistPoison {
      get { return resistPoison_; }
    }
    
    public const int ResistColdFieldNumber = 18;
    private bool hasResistCold;
    private uint resistCold_;
    public bool HasResistCold {
      get { return hasResistCold; }
    }
    public uint ResistCold {
      get { return resistCold_; }
    }
    
    public const int EquipmentFieldNumber = 19;
    private bool hasEquipment;
    private global::D3.Items.ItemList equipment_;
    public bool HasEquipment {
      get { return hasEquipment; }
    }
    public global::D3.Items.ItemList Equipment {
      get { return equipment_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public const int SnoActiveSkillsFieldNumber = 20;
    private bool hasSnoActiveSkills;
    private global::D3.Profile.SkillsWithRunes snoActiveSkills_;
    public bool HasSnoActiveSkills {
      get { return hasSnoActiveSkills; }
    }
    public global::D3.Profile.SkillsWithRunes SnoActiveSkills {
      get { return snoActiveSkills_ ?? global::D3.Profile.SkillsWithRunes.DefaultInstance; }
    }
    
    public const int SnoTraitsFieldNumber = 21;
    private bool hasSnoTraits;
    private global::D3.Profile.PassiveSkills snoTraits_;
    public bool HasSnoTraits {
      get { return hasSnoTraits; }
    }
    public global::D3.Profile.PassiveSkills SnoTraits {
      get { return snoTraits_ ?? global::D3.Profile.PassiveSkills.DefaultInstance; }
    }
    
    public const int DeathTimeFieldNumber = 22;
    private bool hasDeathTime;
    private uint deathTime_;
    public bool HasDeathTime {
      get { return hasDeathTime; }
    }
    public uint DeathTime {
      get { return deathTime_; }
    }
    
    public const int KillerInfoFieldNumber = 23;
    private bool hasKillerInfo;
    private global::D3.Profile.KillerInfo killerInfo_;
    public bool HasKillerInfo {
      get { return hasKillerInfo; }
    }
    public global::D3.Profile.KillerInfo KillerInfo {
      get { return killerInfo_ ?? global::D3.Profile.KillerInfo.DefaultInstance; }
    }
    
    public const int SnoKillLocationFieldNumber = 24;
    private bool hasSnoKillLocation;
    private uint snoKillLocation_;
    public bool HasSnoKillLocation {
      get { return hasSnoKillLocation; }
    }
    public uint SnoKillLocation {
      get { return snoKillLocation_; }
    }
    
    public const int HeroIdFieldNumber = 27;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int DamageIncreaseFieldNumber = 28;
    private bool hasDamageIncrease;
    private float damageIncrease_;
    public bool HasDamageIncrease {
      get { return hasDamageIncrease; }
    }
    public float DamageIncrease {
      get { return damageIncrease_; }
    }
    
    public const int CritChanceFieldNumber = 29;
    private bool hasCritChance;
    private float critChance_;
    public bool HasCritChance {
      get { return hasCritChance; }
    }
    public float CritChance {
      get { return critChance_; }
    }
    
    public const int DamageReductionFieldNumber = 30;
    private bool hasDamageReduction;
    private float damageReduction_;
    public bool HasDamageReduction {
      get { return hasDamageReduction; }
    }
    public float DamageReduction {
      get { return damageReduction_; }
    }
    
    public const int LifeFieldNumber = 31;
    private bool hasLife;
    private uint life_;
    public bool HasLife {
      get { return hasLife; }
    }
    public uint Life {
      get { return life_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasEquipment) {
          if (!Equipment.IsInitialized) return false;
        }
        if (HasSnoActiveSkills) {
          if (!SnoActiveSkills.IsInitialized) return false;
        }
        if (HasHeroId) {
          if (!HeroId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroProfileFieldNames;
      if (hasMonstersKilled) {
        output.WriteUInt64(1, field_names[18], MonstersKilled);
      }
      if (hasElitesKilled) {
        output.WriteUInt64(2, field_names[8], ElitesKilled);
      }
      if (hasGoldCollected) {
        output.WriteUInt64(3, field_names[10], GoldCollected);
      }
      if (hasHighestLevel) {
        output.WriteUInt32(4, field_names[14], HighestLevel);
      }
      if (hasHighestDifficulty) {
        output.WriteUInt32(5, field_names[13], HighestDifficulty);
      }
      if (hasCreateTime) {
        output.WriteUInt32(6, field_names[1], CreateTime);
      }
      if (hasHardcore) {
        output.WriteBool(7, field_names[11], Hardcore);
      }
      if (hasStrength) {
        output.WriteUInt32(8, field_names[27], Strength);
      }
      if (hasDexterity) {
        output.WriteUInt32(9, field_names[6], Dexterity);
      }
      if (hasIntelligence) {
        output.WriteUInt32(10, field_names[15], Intelligence);
      }
      if (hasVitality) {
        output.WriteUInt32(11, field_names[28], Vitality);
      }
      if (hasArmor) {
        output.WriteUInt32(12, field_names[0], Armor);
      }
      if (hasDps) {
        output.WriteFloat(13, field_names[7], Dps);
      }
      if (hasResistArcane) {
        output.WriteUInt32(14, field_names[19], ResistArcane);
      }
      if (hasResistFire) {
        output.WriteUInt32(15, field_names[21], ResistFire);
      }
      if (hasResistLightning) {
        output.WriteUInt32(16, field_names[22], ResistLightning);
      }
      if (hasResistPoison) {
        output.WriteUInt32(17, field_names[23], ResistPoison);
      }
      if (hasResistCold) {
        output.WriteUInt32(18, field_names[20], ResistCold);
      }
      if (hasEquipment) {
        output.WriteMessage(19, field_names[9], Equipment);
      }
      if (hasSnoActiveSkills) {
        output.WriteMessage(20, field_names[24], SnoActiveSkills);
      }
      if (hasSnoTraits) {
        output.WriteMessage(21, field_names[26], SnoTraits);
      }
      if (hasDeathTime) {
        output.WriteUInt32(22, field_names[5], DeathTime);
      }
      if (hasKillerInfo) {
        output.WriteMessage(23, field_names[16], KillerInfo);
      }
      if (hasSnoKillLocation) {
        output.WriteUInt32(24, field_names[25], SnoKillLocation);
      }
      if (hasHeroId) {
        output.WriteMessage(27, field_names[12], HeroId);
      }
      if (hasDamageIncrease) {
        output.WriteFloat(28, field_names[3], DamageIncrease);
      }
      if (hasCritChance) {
        output.WriteFloat(29, field_names[2], CritChance);
      }
      if (hasDamageReduction) {
        output.WriteFloat(30, field_names[4], DamageReduction);
      }
      if (hasLife) {
        output.WriteUInt32(31, field_names[17], Life);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMonstersKilled) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, MonstersKilled);
        }
        if (hasElitesKilled) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ElitesKilled);
        }
        if (hasGoldCollected) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, GoldCollected);
        }
        if (hasHighestLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, HighestLevel);
        }
        if (hasHighestDifficulty) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, HighestDifficulty);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, CreateTime);
        }
        if (hasHardcore) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, Hardcore);
        }
        if (hasStrength) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, Strength);
        }
        if (hasDexterity) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, Dexterity);
        }
        if (hasIntelligence) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, Intelligence);
        }
        if (hasVitality) {
          size += pb::CodedOutputStream.ComputeUInt32Size(11, Vitality);
        }
        if (hasArmor) {
          size += pb::CodedOutputStream.ComputeUInt32Size(12, Armor);
        }
        if (hasDps) {
          size += pb::CodedOutputStream.ComputeFloatSize(13, Dps);
        }
        if (hasResistArcane) {
          size += pb::CodedOutputStream.ComputeUInt32Size(14, ResistArcane);
        }
        if (hasResistFire) {
          size += pb::CodedOutputStream.ComputeUInt32Size(15, ResistFire);
        }
        if (hasResistLightning) {
          size += pb::CodedOutputStream.ComputeUInt32Size(16, ResistLightning);
        }
        if (hasResistPoison) {
          size += pb::CodedOutputStream.ComputeUInt32Size(17, ResistPoison);
        }
        if (hasResistCold) {
          size += pb::CodedOutputStream.ComputeUInt32Size(18, ResistCold);
        }
        if (hasEquipment) {
          size += pb::CodedOutputStream.ComputeMessageSize(19, Equipment);
        }
        if (hasSnoActiveSkills) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, SnoActiveSkills);
        }
        if (hasSnoTraits) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, SnoTraits);
        }
        if (hasDeathTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(22, DeathTime);
        }
        if (hasKillerInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(23, KillerInfo);
        }
        if (hasSnoKillLocation) {
          size += pb::CodedOutputStream.ComputeUInt32Size(24, SnoKillLocation);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(27, HeroId);
        }
        if (hasDamageIncrease) {
          size += pb::CodedOutputStream.ComputeFloatSize(28, DamageIncrease);
        }
        if (hasCritChance) {
          size += pb::CodedOutputStream.ComputeFloatSize(29, CritChance);
        }
        if (hasDamageReduction) {
          size += pb::CodedOutputStream.ComputeFloatSize(30, DamageReduction);
        }
        if (hasLife) {
          size += pb::CodedOutputStream.ComputeUInt32Size(31, Life);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroProfile ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroProfile ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroProfile ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroProfile ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroProfile ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroProfile MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroProfile prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroProfile, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroProfile cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroProfile result;
      
      private HeroProfile PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroProfile original = result;
          result = new HeroProfile();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroProfile MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.HeroProfile.Descriptor; }
      }
      
      public override HeroProfile DefaultInstanceForType {
        get { return global::D3.Profile.HeroProfile.DefaultInstance; }
      }
      
      public override HeroProfile BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroProfile) {
          return MergeFrom((HeroProfile) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroProfile other) {
        if (other == global::D3.Profile.HeroProfile.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMonstersKilled) {
          MonstersKilled = other.MonstersKilled;
        }
        if (other.HasElitesKilled) {
          ElitesKilled = other.ElitesKilled;
        }
        if (other.HasGoldCollected) {
          GoldCollected = other.GoldCollected;
        }
        if (other.HasHighestLevel) {
          HighestLevel = other.HighestLevel;
        }
        if (other.HasHighestDifficulty) {
          HighestDifficulty = other.HighestDifficulty;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasHardcore) {
          Hardcore = other.Hardcore;
        }
        if (other.HasStrength) {
          Strength = other.Strength;
        }
        if (other.HasDexterity) {
          Dexterity = other.Dexterity;
        }
        if (other.HasIntelligence) {
          Intelligence = other.Intelligence;
        }
        if (other.HasVitality) {
          Vitality = other.Vitality;
        }
        if (other.HasArmor) {
          Armor = other.Armor;
        }
        if (other.HasDps) {
          Dps = other.Dps;
        }
        if (other.HasResistArcane) {
          ResistArcane = other.ResistArcane;
        }
        if (other.HasResistFire) {
          ResistFire = other.ResistFire;
        }
        if (other.HasResistLightning) {
          ResistLightning = other.ResistLightning;
        }
        if (other.HasResistPoison) {
          ResistPoison = other.ResistPoison;
        }
        if (other.HasResistCold) {
          ResistCold = other.ResistCold;
        }
        if (other.HasEquipment) {
          MergeEquipment(other.Equipment);
        }
        if (other.HasSnoActiveSkills) {
          MergeSnoActiveSkills(other.SnoActiveSkills);
        }
        if (other.HasSnoTraits) {
          MergeSnoTraits(other.SnoTraits);
        }
        if (other.HasDeathTime) {
          DeathTime = other.DeathTime;
        }
        if (other.HasKillerInfo) {
          MergeKillerInfo(other.KillerInfo);
        }
        if (other.HasSnoKillLocation) {
          SnoKillLocation = other.SnoKillLocation;
        }
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        if (other.HasDamageIncrease) {
          DamageIncrease = other.DamageIncrease;
        }
        if (other.HasCritChance) {
          CritChance = other.CritChance;
        }
        if (other.HasDamageReduction) {
          DamageReduction = other.DamageReduction;
        }
        if (other.HasLife) {
          Life = other.Life;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroProfileFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMonstersKilled = input.ReadUInt64(ref result.monstersKilled_);
              break;
            }
            case 16: {
              result.hasElitesKilled = input.ReadUInt64(ref result.elitesKilled_);
              break;
            }
            case 24: {
              result.hasGoldCollected = input.ReadUInt64(ref result.goldCollected_);
              break;
            }
            case 32: {
              result.hasHighestLevel = input.ReadUInt32(ref result.highestLevel_);
              break;
            }
            case 40: {
              result.hasHighestDifficulty = input.ReadUInt32(ref result.highestDifficulty_);
              break;
            }
            case 48: {
              result.hasCreateTime = input.ReadUInt32(ref result.createTime_);
              break;
            }
            case 56: {
              result.hasHardcore = input.ReadBool(ref result.hardcore_);
              break;
            }
            case 64: {
              result.hasStrength = input.ReadUInt32(ref result.strength_);
              break;
            }
            case 72: {
              result.hasDexterity = input.ReadUInt32(ref result.dexterity_);
              break;
            }
            case 80: {
              result.hasIntelligence = input.ReadUInt32(ref result.intelligence_);
              break;
            }
            case 88: {
              result.hasVitality = input.ReadUInt32(ref result.vitality_);
              break;
            }
            case 96: {
              result.hasArmor = input.ReadUInt32(ref result.armor_);
              break;
            }
            case 109: {
              result.hasDps = input.ReadFloat(ref result.dps_);
              break;
            }
            case 112: {
              result.hasResistArcane = input.ReadUInt32(ref result.resistArcane_);
              break;
            }
            case 120: {
              result.hasResistFire = input.ReadUInt32(ref result.resistFire_);
              break;
            }
            case 128: {
              result.hasResistLightning = input.ReadUInt32(ref result.resistLightning_);
              break;
            }
            case 136: {
              result.hasResistPoison = input.ReadUInt32(ref result.resistPoison_);
              break;
            }
            case 144: {
              result.hasResistCold = input.ReadUInt32(ref result.resistCold_);
              break;
            }
            case 154: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasEquipment) {
                subBuilder.MergeFrom(Equipment);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Equipment = subBuilder.BuildPartial();
              break;
            }
            case 162: {
              global::D3.Profile.SkillsWithRunes.Builder subBuilder = global::D3.Profile.SkillsWithRunes.CreateBuilder();
              if (result.hasSnoActiveSkills) {
                subBuilder.MergeFrom(SnoActiveSkills);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SnoActiveSkills = subBuilder.BuildPartial();
              break;
            }
            case 170: {
              global::D3.Profile.PassiveSkills.Builder subBuilder = global::D3.Profile.PassiveSkills.CreateBuilder();
              if (result.hasSnoTraits) {
                subBuilder.MergeFrom(SnoTraits);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SnoTraits = subBuilder.BuildPartial();
              break;
            }
            case 176: {
              result.hasDeathTime = input.ReadUInt32(ref result.deathTime_);
              break;
            }
            case 186: {
              global::D3.Profile.KillerInfo.Builder subBuilder = global::D3.Profile.KillerInfo.CreateBuilder();
              if (result.hasKillerInfo) {
                subBuilder.MergeFrom(KillerInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KillerInfo = subBuilder.BuildPartial();
              break;
            }
            case 192: {
              result.hasSnoKillLocation = input.ReadUInt32(ref result.snoKillLocation_);
              break;
            }
            case 218: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
            case 229: {
              result.hasDamageIncrease = input.ReadFloat(ref result.damageIncrease_);
              break;
            }
            case 237: {
              result.hasCritChance = input.ReadFloat(ref result.critChance_);
              break;
            }
            case 245: {
              result.hasDamageReduction = input.ReadFloat(ref result.damageReduction_);
              break;
            }
            case 248: {
              result.hasLife = input.ReadUInt32(ref result.life_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMonstersKilled {
        get { return result.hasMonstersKilled; }
      }
      public ulong MonstersKilled {
        get { return result.MonstersKilled; }
        set { SetMonstersKilled(value); }
      }
      public Builder SetMonstersKilled(ulong value) {
        PrepareBuilder();
        result.hasMonstersKilled = true;
        result.monstersKilled_ = value;
        return this;
      }
      public Builder ClearMonstersKilled() {
        PrepareBuilder();
        result.hasMonstersKilled = false;
        result.monstersKilled_ = 0UL;
        return this;
      }
      
      public bool HasElitesKilled {
        get { return result.hasElitesKilled; }
      }
      public ulong ElitesKilled {
        get { return result.ElitesKilled; }
        set { SetElitesKilled(value); }
      }
      public Builder SetElitesKilled(ulong value) {
        PrepareBuilder();
        result.hasElitesKilled = true;
        result.elitesKilled_ = value;
        return this;
      }
      public Builder ClearElitesKilled() {
        PrepareBuilder();
        result.hasElitesKilled = false;
        result.elitesKilled_ = 0UL;
        return this;
      }
      
      public bool HasGoldCollected {
        get { return result.hasGoldCollected; }
      }
      public ulong GoldCollected {
        get { return result.GoldCollected; }
        set { SetGoldCollected(value); }
      }
      public Builder SetGoldCollected(ulong value) {
        PrepareBuilder();
        result.hasGoldCollected = true;
        result.goldCollected_ = value;
        return this;
      }
      public Builder ClearGoldCollected() {
        PrepareBuilder();
        result.hasGoldCollected = false;
        result.goldCollected_ = 0UL;
        return this;
      }
      
      public bool HasHighestLevel {
        get { return result.hasHighestLevel; }
      }
      public uint HighestLevel {
        get { return result.HighestLevel; }
        set { SetHighestLevel(value); }
      }
      public Builder SetHighestLevel(uint value) {
        PrepareBuilder();
        result.hasHighestLevel = true;
        result.highestLevel_ = value;
        return this;
      }
      public Builder ClearHighestLevel() {
        PrepareBuilder();
        result.hasHighestLevel = false;
        result.highestLevel_ = 0;
        return this;
      }
      
      public bool HasHighestDifficulty {
        get { return result.hasHighestDifficulty; }
      }
      public uint HighestDifficulty {
        get { return result.HighestDifficulty; }
        set { SetHighestDifficulty(value); }
      }
      public Builder SetHighestDifficulty(uint value) {
        PrepareBuilder();
        result.hasHighestDifficulty = true;
        result.highestDifficulty_ = value;
        return this;
      }
      public Builder ClearHighestDifficulty() {
        PrepareBuilder();
        result.hasHighestDifficulty = false;
        result.highestDifficulty_ = 0;
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public uint CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(uint value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasHardcore {
        get { return result.hasHardcore; }
      }
      public bool Hardcore {
        get { return result.Hardcore; }
        set { SetHardcore(value); }
      }
      public Builder SetHardcore(bool value) {
        PrepareBuilder();
        result.hasHardcore = true;
        result.hardcore_ = value;
        return this;
      }
      public Builder ClearHardcore() {
        PrepareBuilder();
        result.hasHardcore = false;
        result.hardcore_ = false;
        return this;
      }
      
      public bool HasStrength {
        get { return result.hasStrength; }
      }
      public uint Strength {
        get { return result.Strength; }
        set { SetStrength(value); }
      }
      public Builder SetStrength(uint value) {
        PrepareBuilder();
        result.hasStrength = true;
        result.strength_ = value;
        return this;
      }
      public Builder ClearStrength() {
        PrepareBuilder();
        result.hasStrength = false;
        result.strength_ = 0;
        return this;
      }
      
      public bool HasDexterity {
        get { return result.hasDexterity; }
      }
      public uint Dexterity {
        get { return result.Dexterity; }
        set { SetDexterity(value); }
      }
      public Builder SetDexterity(uint value) {
        PrepareBuilder();
        result.hasDexterity = true;
        result.dexterity_ = value;
        return this;
      }
      public Builder ClearDexterity() {
        PrepareBuilder();
        result.hasDexterity = false;
        result.dexterity_ = 0;
        return this;
      }
      
      public bool HasIntelligence {
        get { return result.hasIntelligence; }
      }
      public uint Intelligence {
        get { return result.Intelligence; }
        set { SetIntelligence(value); }
      }
      public Builder SetIntelligence(uint value) {
        PrepareBuilder();
        result.hasIntelligence = true;
        result.intelligence_ = value;
        return this;
      }
      public Builder ClearIntelligence() {
        PrepareBuilder();
        result.hasIntelligence = false;
        result.intelligence_ = 0;
        return this;
      }
      
      public bool HasVitality {
        get { return result.hasVitality; }
      }
      public uint Vitality {
        get { return result.Vitality; }
        set { SetVitality(value); }
      }
      public Builder SetVitality(uint value) {
        PrepareBuilder();
        result.hasVitality = true;
        result.vitality_ = value;
        return this;
      }
      public Builder ClearVitality() {
        PrepareBuilder();
        result.hasVitality = false;
        result.vitality_ = 0;
        return this;
      }
      
      public bool HasArmor {
        get { return result.hasArmor; }
      }
      public uint Armor {
        get { return result.Armor; }
        set { SetArmor(value); }
      }
      public Builder SetArmor(uint value) {
        PrepareBuilder();
        result.hasArmor = true;
        result.armor_ = value;
        return this;
      }
      public Builder ClearArmor() {
        PrepareBuilder();
        result.hasArmor = false;
        result.armor_ = 0;
        return this;
      }
      
      public bool HasDps {
        get { return result.hasDps; }
      }
      public float Dps {
        get { return result.Dps; }
        set { SetDps(value); }
      }
      public Builder SetDps(float value) {
        PrepareBuilder();
        result.hasDps = true;
        result.dps_ = value;
        return this;
      }
      public Builder ClearDps() {
        PrepareBuilder();
        result.hasDps = false;
        result.dps_ = 0F;
        return this;
      }
      
      public bool HasResistArcane {
        get { return result.hasResistArcane; }
      }
      public uint ResistArcane {
        get { return result.ResistArcane; }
        set { SetResistArcane(value); }
      }
      public Builder SetResistArcane(uint value) {
        PrepareBuilder();
        result.hasResistArcane = true;
        result.resistArcane_ = value;
        return this;
      }
      public Builder ClearResistArcane() {
        PrepareBuilder();
        result.hasResistArcane = false;
        result.resistArcane_ = 0;
        return this;
      }
      
      public bool HasResistFire {
        get { return result.hasResistFire; }
      }
      public uint ResistFire {
        get { return result.ResistFire; }
        set { SetResistFire(value); }
      }
      public Builder SetResistFire(uint value) {
        PrepareBuilder();
        result.hasResistFire = true;
        result.resistFire_ = value;
        return this;
      }
      public Builder ClearResistFire() {
        PrepareBuilder();
        result.hasResistFire = false;
        result.resistFire_ = 0;
        return this;
      }
      
      public bool HasResistLightning {
        get { return result.hasResistLightning; }
      }
      public uint ResistLightning {
        get { return result.ResistLightning; }
        set { SetResistLightning(value); }
      }
      public Builder SetResistLightning(uint value) {
        PrepareBuilder();
        result.hasResistLightning = true;
        result.resistLightning_ = value;
        return this;
      }
      public Builder ClearResistLightning() {
        PrepareBuilder();
        result.hasResistLightning = false;
        result.resistLightning_ = 0;
        return this;
      }
      
      public bool HasResistPoison {
        get { return result.hasResistPoison; }
      }
      public uint ResistPoison {
        get { return result.ResistPoison; }
        set { SetResistPoison(value); }
      }
      public Builder SetResistPoison(uint value) {
        PrepareBuilder();
        result.hasResistPoison = true;
        result.resistPoison_ = value;
        return this;
      }
      public Builder ClearResistPoison() {
        PrepareBuilder();
        result.hasResistPoison = false;
        result.resistPoison_ = 0;
        return this;
      }
      
      public bool HasResistCold {
        get { return result.hasResistCold; }
      }
      public uint ResistCold {
        get { return result.ResistCold; }
        set { SetResistCold(value); }
      }
      public Builder SetResistCold(uint value) {
        PrepareBuilder();
        result.hasResistCold = true;
        result.resistCold_ = value;
        return this;
      }
      public Builder ClearResistCold() {
        PrepareBuilder();
        result.hasResistCold = false;
        result.resistCold_ = 0;
        return this;
      }
      
      public bool HasEquipment {
       get { return result.hasEquipment; }
      }
      public global::D3.Items.ItemList Equipment {
        get { return result.Equipment; }
        set { SetEquipment(value); }
      }
      public Builder SetEquipment(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEquipment = true;
        result.equipment_ = value;
        return this;
      }
      public Builder SetEquipment(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEquipment = true;
        result.equipment_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEquipment(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEquipment &&
            result.equipment_ != global::D3.Items.ItemList.DefaultInstance) {
            result.equipment_ = global::D3.Items.ItemList.CreateBuilder(result.equipment_).MergeFrom(value).BuildPartial();
        } else {
          result.equipment_ = value;
        }
        result.hasEquipment = true;
        return this;
      }
      public Builder ClearEquipment() {
        PrepareBuilder();
        result.hasEquipment = false;
        result.equipment_ = null;
        return this;
      }
      
      public bool HasSnoActiveSkills {
       get { return result.hasSnoActiveSkills; }
      }
      public global::D3.Profile.SkillsWithRunes SnoActiveSkills {
        get { return result.SnoActiveSkills; }
        set { SetSnoActiveSkills(value); }
      }
      public Builder SetSnoActiveSkills(global::D3.Profile.SkillsWithRunes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnoActiveSkills = true;
        result.snoActiveSkills_ = value;
        return this;
      }
      public Builder SetSnoActiveSkills(global::D3.Profile.SkillsWithRunes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnoActiveSkills = true;
        result.snoActiveSkills_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnoActiveSkills(global::D3.Profile.SkillsWithRunes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnoActiveSkills &&
            result.snoActiveSkills_ != global::D3.Profile.SkillsWithRunes.DefaultInstance) {
            result.snoActiveSkills_ = global::D3.Profile.SkillsWithRunes.CreateBuilder(result.snoActiveSkills_).MergeFrom(value).BuildPartial();
        } else {
          result.snoActiveSkills_ = value;
        }
        result.hasSnoActiveSkills = true;
        return this;
      }
      public Builder ClearSnoActiveSkills() {
        PrepareBuilder();
        result.hasSnoActiveSkills = false;
        result.snoActiveSkills_ = null;
        return this;
      }
      
      public bool HasSnoTraits {
       get { return result.hasSnoTraits; }
      }
      public global::D3.Profile.PassiveSkills SnoTraits {
        get { return result.SnoTraits; }
        set { SetSnoTraits(value); }
      }
      public Builder SetSnoTraits(global::D3.Profile.PassiveSkills value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnoTraits = true;
        result.snoTraits_ = value;
        return this;
      }
      public Builder SetSnoTraits(global::D3.Profile.PassiveSkills.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnoTraits = true;
        result.snoTraits_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnoTraits(global::D3.Profile.PassiveSkills value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnoTraits &&
            result.snoTraits_ != global::D3.Profile.PassiveSkills.DefaultInstance) {
            result.snoTraits_ = global::D3.Profile.PassiveSkills.CreateBuilder(result.snoTraits_).MergeFrom(value).BuildPartial();
        } else {
          result.snoTraits_ = value;
        }
        result.hasSnoTraits = true;
        return this;
      }
      public Builder ClearSnoTraits() {
        PrepareBuilder();
        result.hasSnoTraits = false;
        result.snoTraits_ = null;
        return this;
      }
      
      public bool HasDeathTime {
        get { return result.hasDeathTime; }
      }
      public uint DeathTime {
        get { return result.DeathTime; }
        set { SetDeathTime(value); }
      }
      public Builder SetDeathTime(uint value) {
        PrepareBuilder();
        result.hasDeathTime = true;
        result.deathTime_ = value;
        return this;
      }
      public Builder ClearDeathTime() {
        PrepareBuilder();
        result.hasDeathTime = false;
        result.deathTime_ = 0;
        return this;
      }
      
      public bool HasKillerInfo {
       get { return result.hasKillerInfo; }
      }
      public global::D3.Profile.KillerInfo KillerInfo {
        get { return result.KillerInfo; }
        set { SetKillerInfo(value); }
      }
      public Builder SetKillerInfo(global::D3.Profile.KillerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKillerInfo = true;
        result.killerInfo_ = value;
        return this;
      }
      public Builder SetKillerInfo(global::D3.Profile.KillerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKillerInfo = true;
        result.killerInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKillerInfo(global::D3.Profile.KillerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKillerInfo &&
            result.killerInfo_ != global::D3.Profile.KillerInfo.DefaultInstance) {
            result.killerInfo_ = global::D3.Profile.KillerInfo.CreateBuilder(result.killerInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.killerInfo_ = value;
        }
        result.hasKillerInfo = true;
        return this;
      }
      public Builder ClearKillerInfo() {
        PrepareBuilder();
        result.hasKillerInfo = false;
        result.killerInfo_ = null;
        return this;
      }
      
      public bool HasSnoKillLocation {
        get { return result.hasSnoKillLocation; }
      }
      public uint SnoKillLocation {
        get { return result.SnoKillLocation; }
        set { SetSnoKillLocation(value); }
      }
      public Builder SetSnoKillLocation(uint value) {
        PrepareBuilder();
        result.hasSnoKillLocation = true;
        result.snoKillLocation_ = value;
        return this;
      }
      public Builder ClearSnoKillLocation() {
        PrepareBuilder();
        result.hasSnoKillLocation = false;
        result.snoKillLocation_ = 0;
        return this;
      }
      
      public bool HasHeroId {
       get { return result.hasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = null;
        return this;
      }
      
      public bool HasDamageIncrease {
        get { return result.hasDamageIncrease; }
      }
      public float DamageIncrease {
        get { return result.DamageIncrease; }
        set { SetDamageIncrease(value); }
      }
      public Builder SetDamageIncrease(float value) {
        PrepareBuilder();
        result.hasDamageIncrease = true;
        result.damageIncrease_ = value;
        return this;
      }
      public Builder ClearDamageIncrease() {
        PrepareBuilder();
        result.hasDamageIncrease = false;
        result.damageIncrease_ = 0F;
        return this;
      }
      
      public bool HasCritChance {
        get { return result.hasCritChance; }
      }
      public float CritChance {
        get { return result.CritChance; }
        set { SetCritChance(value); }
      }
      public Builder SetCritChance(float value) {
        PrepareBuilder();
        result.hasCritChance = true;
        result.critChance_ = value;
        return this;
      }
      public Builder ClearCritChance() {
        PrepareBuilder();
        result.hasCritChance = false;
        result.critChance_ = 0F;
        return this;
      }
      
      public bool HasDamageReduction {
        get { return result.hasDamageReduction; }
      }
      public float DamageReduction {
        get { return result.DamageReduction; }
        set { SetDamageReduction(value); }
      }
      public Builder SetDamageReduction(float value) {
        PrepareBuilder();
        result.hasDamageReduction = true;
        result.damageReduction_ = value;
        return this;
      }
      public Builder ClearDamageReduction() {
        PrepareBuilder();
        result.hasDamageReduction = false;
        result.damageReduction_ = 0F;
        return this;
      }
      
      public bool HasLife {
        get { return result.hasLife; }
      }
      public uint Life {
        get { return result.Life; }
        set { SetLife(value); }
      }
      public Builder SetLife(uint value) {
        PrepareBuilder();
        result.hasLife = true;
        result.life_ = value;
        return this;
      }
      public Builder ClearLife() {
        PrepareBuilder();
        result.hasLife = false;
        result.life_ = 0;
        return this;
      }
    }
    static HeroProfile() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroProfileList : pb::GeneratedMessage<HeroProfileList, HeroProfileList.Builder> {
    private HeroProfileList() { }
    private static readonly HeroProfileList defaultInstance = new HeroProfileList().MakeReadOnly();
    private static readonly string[] _heroProfileListFieldNames = new string[] { "heros" };
    private static readonly uint[] _heroProfileListFieldTags = new uint[] { 10 };
    public static HeroProfileList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroProfileList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroProfileList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_HeroProfileList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroProfileList, HeroProfileList.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_HeroProfileList__FieldAccessorTable; }
    }
    
    public const int HerosFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Profile.HeroProfile> heros_ = new pbc::PopsicleList<global::D3.Profile.HeroProfile>();
    public scg::IList<global::D3.Profile.HeroProfile> HerosList {
      get { return heros_; }
    }
    public int HerosCount {
      get { return heros_.Count; }
    }
    public global::D3.Profile.HeroProfile GetHeros(int index) {
      return heros_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Profile.HeroProfile element in HerosList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroProfileListFieldNames;
      if (heros_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], heros_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Profile.HeroProfile element in HerosList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroProfileList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroProfileList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroProfileList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroProfileList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroProfileList MakeReadOnly() {
      heros_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroProfileList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroProfileList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroProfileList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroProfileList result;
      
      private HeroProfileList PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroProfileList original = result;
          result = new HeroProfileList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroProfileList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.HeroProfileList.Descriptor; }
      }
      
      public override HeroProfileList DefaultInstanceForType {
        get { return global::D3.Profile.HeroProfileList.DefaultInstance; }
      }
      
      public override HeroProfileList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroProfileList) {
          return MergeFrom((HeroProfileList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroProfileList other) {
        if (other == global::D3.Profile.HeroProfileList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.heros_.Count != 0) {
          result.heros_.Add(other.heros_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroProfileListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroProfileListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.heros_, global::D3.Profile.HeroProfile.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Profile.HeroProfile> HerosList {
        get { return PrepareBuilder().heros_; }
      }
      public int HerosCount {
        get { return result.HerosCount; }
      }
      public global::D3.Profile.HeroProfile GetHeros(int index) {
        return result.GetHeros(index);
      }
      public Builder SetHeros(int index, global::D3.Profile.HeroProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.heros_[index] = value;
        return this;
      }
      public Builder SetHeros(int index, global::D3.Profile.HeroProfile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.heros_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHeros(global::D3.Profile.HeroProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.heros_.Add(value);
        return this;
      }
      public Builder AddHeros(global::D3.Profile.HeroProfile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.heros_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHeros(scg::IEnumerable<global::D3.Profile.HeroProfile> values) {
        PrepareBuilder();
        result.heros_.Add(values);
        return this;
      }
      public Builder ClearHeros() {
        PrepareBuilder();
        result.heros_.Clear();
        return this;
      }
    }
    static HeroProfileList() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountProfile : pb::GeneratedMessage<AccountProfile, AccountProfile.Builder> {
    private AccountProfile() { }
    private static readonly AccountProfile defaultInstance = new AccountProfile().MakeReadOnly();
    private static readonly string[] _accountProfileFieldNames = new string[] { "class_barbarian", "class_demonhunter", "class_monk", "class_witchdoctor", "class_wizard", "elites_killed", "gold_collected", "hardcore_monsters_killed", "highest_boss_difficulty_1", "highest_boss_difficulty_2", "highest_boss_difficulty_3", "highest_boss_difficulty_4", "highest_difficulty", "highest_hardcore_level", "monsters_killed" };
    private static readonly uint[] _accountProfileFieldTags = new uint[] { 90, 98, 106, 114, 122, 56, 64, 80, 16, 24, 32, 40, 8, 72, 48 };
    public static AccountProfile DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountProfile DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountProfile ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_AccountProfile__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountProfile, AccountProfile.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_AccountProfile__FieldAccessorTable; }
    }
    
    public const int HighestDifficultyFieldNumber = 1;
    private bool hasHighestDifficulty;
    private uint highestDifficulty_;
    public bool HasHighestDifficulty {
      get { return hasHighestDifficulty; }
    }
    public uint HighestDifficulty {
      get { return highestDifficulty_; }
    }
    
    public const int HighestBossDifficulty1FieldNumber = 2;
    private bool hasHighestBossDifficulty1;
    private uint highestBossDifficulty1_;
    public bool HasHighestBossDifficulty1 {
      get { return hasHighestBossDifficulty1; }
    }
    public uint HighestBossDifficulty1 {
      get { return highestBossDifficulty1_; }
    }
    
    public const int HighestBossDifficulty2FieldNumber = 3;
    private bool hasHighestBossDifficulty2;
    private uint highestBossDifficulty2_;
    public bool HasHighestBossDifficulty2 {
      get { return hasHighestBossDifficulty2; }
    }
    public uint HighestBossDifficulty2 {
      get { return highestBossDifficulty2_; }
    }
    
    public const int HighestBossDifficulty3FieldNumber = 4;
    private bool hasHighestBossDifficulty3;
    private uint highestBossDifficulty3_;
    public bool HasHighestBossDifficulty3 {
      get { return hasHighestBossDifficulty3; }
    }
    public uint HighestBossDifficulty3 {
      get { return highestBossDifficulty3_; }
    }
    
    public const int HighestBossDifficulty4FieldNumber = 5;
    private bool hasHighestBossDifficulty4;
    private uint highestBossDifficulty4_;
    public bool HasHighestBossDifficulty4 {
      get { return hasHighestBossDifficulty4; }
    }
    public uint HighestBossDifficulty4 {
      get { return highestBossDifficulty4_; }
    }
    
    public const int MonstersKilledFieldNumber = 6;
    private bool hasMonstersKilled;
    private ulong monstersKilled_;
    public bool HasMonstersKilled {
      get { return hasMonstersKilled; }
    }
    public ulong MonstersKilled {
      get { return monstersKilled_; }
    }
    
    public const int ElitesKilledFieldNumber = 7;
    private bool hasElitesKilled;
    private ulong elitesKilled_;
    public bool HasElitesKilled {
      get { return hasElitesKilled; }
    }
    public ulong ElitesKilled {
      get { return elitesKilled_; }
    }
    
    public const int GoldCollectedFieldNumber = 8;
    private bool hasGoldCollected;
    private ulong goldCollected_;
    public bool HasGoldCollected {
      get { return hasGoldCollected; }
    }
    public ulong GoldCollected {
      get { return goldCollected_; }
    }
    
    public const int HighestHardcoreLevelFieldNumber = 9;
    private bool hasHighestHardcoreLevel;
    private ulong highestHardcoreLevel_;
    public bool HasHighestHardcoreLevel {
      get { return hasHighestHardcoreLevel; }
    }
    public ulong HighestHardcoreLevel {
      get { return highestHardcoreLevel_; }
    }
    
    public const int HardcoreMonstersKilledFieldNumber = 10;
    private bool hasHardcoreMonstersKilled;
    private ulong hardcoreMonstersKilled_;
    public bool HasHardcoreMonstersKilled {
      get { return hasHardcoreMonstersKilled; }
    }
    public ulong HardcoreMonstersKilled {
      get { return hardcoreMonstersKilled_; }
    }
    
    public const int ClassBarbarianFieldNumber = 11;
    private bool hasClassBarbarian;
    private global::D3.Profile.ClassInfo classBarbarian_;
    public bool HasClassBarbarian {
      get { return hasClassBarbarian; }
    }
    public global::D3.Profile.ClassInfo ClassBarbarian {
      get { return classBarbarian_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int ClassDemonhunterFieldNumber = 12;
    private bool hasClassDemonhunter;
    private global::D3.Profile.ClassInfo classDemonhunter_;
    public bool HasClassDemonhunter {
      get { return hasClassDemonhunter; }
    }
    public global::D3.Profile.ClassInfo ClassDemonhunter {
      get { return classDemonhunter_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int ClassMonkFieldNumber = 13;
    private bool hasClassMonk;
    private global::D3.Profile.ClassInfo classMonk_;
    public bool HasClassMonk {
      get { return hasClassMonk; }
    }
    public global::D3.Profile.ClassInfo ClassMonk {
      get { return classMonk_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int ClassWitchdoctorFieldNumber = 14;
    private bool hasClassWitchdoctor;
    private global::D3.Profile.ClassInfo classWitchdoctor_;
    public bool HasClassWitchdoctor {
      get { return hasClassWitchdoctor; }
    }
    public global::D3.Profile.ClassInfo ClassWitchdoctor {
      get { return classWitchdoctor_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int ClassWizardFieldNumber = 15;
    private bool hasClassWizard;
    private global::D3.Profile.ClassInfo classWizard_;
    public bool HasClassWizard {
      get { return hasClassWizard; }
    }
    public global::D3.Profile.ClassInfo ClassWizard {
      get { return classWizard_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountProfileFieldNames;
      if (hasHighestDifficulty) {
        output.WriteUInt32(1, field_names[12], HighestDifficulty);
      }
      if (hasHighestBossDifficulty1) {
        output.WriteUInt32(2, field_names[8], HighestBossDifficulty1);
      }
      if (hasHighestBossDifficulty2) {
        output.WriteUInt32(3, field_names[9], HighestBossDifficulty2);
      }
      if (hasHighestBossDifficulty3) {
        output.WriteUInt32(4, field_names[10], HighestBossDifficulty3);
      }
      if (hasHighestBossDifficulty4) {
        output.WriteUInt32(5, field_names[11], HighestBossDifficulty4);
      }
      if (hasMonstersKilled) {
        output.WriteUInt64(6, field_names[14], MonstersKilled);
      }
      if (hasElitesKilled) {
        output.WriteUInt64(7, field_names[5], ElitesKilled);
      }
      if (hasGoldCollected) {
        output.WriteUInt64(8, field_names[6], GoldCollected);
      }
      if (hasHighestHardcoreLevel) {
        output.WriteUInt64(9, field_names[13], HighestHardcoreLevel);
      }
      if (hasHardcoreMonstersKilled) {
        output.WriteUInt64(10, field_names[7], HardcoreMonstersKilled);
      }
      if (hasClassBarbarian) {
        output.WriteMessage(11, field_names[0], ClassBarbarian);
      }
      if (hasClassDemonhunter) {
        output.WriteMessage(12, field_names[1], ClassDemonhunter);
      }
      if (hasClassMonk) {
        output.WriteMessage(13, field_names[2], ClassMonk);
      }
      if (hasClassWitchdoctor) {
        output.WriteMessage(14, field_names[3], ClassWitchdoctor);
      }
      if (hasClassWizard) {
        output.WriteMessage(15, field_names[4], ClassWizard);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHighestDifficulty) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, HighestDifficulty);
        }
        if (hasHighestBossDifficulty1) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, HighestBossDifficulty1);
        }
        if (hasHighestBossDifficulty2) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, HighestBossDifficulty2);
        }
        if (hasHighestBossDifficulty3) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, HighestBossDifficulty3);
        }
        if (hasHighestBossDifficulty4) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, HighestBossDifficulty4);
        }
        if (hasMonstersKilled) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, MonstersKilled);
        }
        if (hasElitesKilled) {
          size += pb::CodedOutputStream.ComputeUInt64Size(7, ElitesKilled);
        }
        if (hasGoldCollected) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, GoldCollected);
        }
        if (hasHighestHardcoreLevel) {
          size += pb::CodedOutputStream.ComputeUInt64Size(9, HighestHardcoreLevel);
        }
        if (hasHardcoreMonstersKilled) {
          size += pb::CodedOutputStream.ComputeUInt64Size(10, HardcoreMonstersKilled);
        }
        if (hasClassBarbarian) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, ClassBarbarian);
        }
        if (hasClassDemonhunter) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, ClassDemonhunter);
        }
        if (hasClassMonk) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, ClassMonk);
        }
        if (hasClassWitchdoctor) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, ClassWitchdoctor);
        }
        if (hasClassWizard) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, ClassWizard);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountProfile ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountProfile ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountProfile ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountProfile ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountProfile ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountProfile MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountProfile prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountProfile, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountProfile cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountProfile result;
      
      private AccountProfile PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountProfile original = result;
          result = new AccountProfile();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountProfile MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.AccountProfile.Descriptor; }
      }
      
      public override AccountProfile DefaultInstanceForType {
        get { return global::D3.Profile.AccountProfile.DefaultInstance; }
      }
      
      public override AccountProfile BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountProfile) {
          return MergeFrom((AccountProfile) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountProfile other) {
        if (other == global::D3.Profile.AccountProfile.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHighestDifficulty) {
          HighestDifficulty = other.HighestDifficulty;
        }
        if (other.HasHighestBossDifficulty1) {
          HighestBossDifficulty1 = other.HighestBossDifficulty1;
        }
        if (other.HasHighestBossDifficulty2) {
          HighestBossDifficulty2 = other.HighestBossDifficulty2;
        }
        if (other.HasHighestBossDifficulty3) {
          HighestBossDifficulty3 = other.HighestBossDifficulty3;
        }
        if (other.HasHighestBossDifficulty4) {
          HighestBossDifficulty4 = other.HighestBossDifficulty4;
        }
        if (other.HasMonstersKilled) {
          MonstersKilled = other.MonstersKilled;
        }
        if (other.HasElitesKilled) {
          ElitesKilled = other.ElitesKilled;
        }
        if (other.HasGoldCollected) {
          GoldCollected = other.GoldCollected;
        }
        if (other.HasHighestHardcoreLevel) {
          HighestHardcoreLevel = other.HighestHardcoreLevel;
        }
        if (other.HasHardcoreMonstersKilled) {
          HardcoreMonstersKilled = other.HardcoreMonstersKilled;
        }
        if (other.HasClassBarbarian) {
          MergeClassBarbarian(other.ClassBarbarian);
        }
        if (other.HasClassDemonhunter) {
          MergeClassDemonhunter(other.ClassDemonhunter);
        }
        if (other.HasClassMonk) {
          MergeClassMonk(other.ClassMonk);
        }
        if (other.HasClassWitchdoctor) {
          MergeClassWitchdoctor(other.ClassWitchdoctor);
        }
        if (other.HasClassWizard) {
          MergeClassWizard(other.ClassWizard);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountProfileFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHighestDifficulty = input.ReadUInt32(ref result.highestDifficulty_);
              break;
            }
            case 16: {
              result.hasHighestBossDifficulty1 = input.ReadUInt32(ref result.highestBossDifficulty1_);
              break;
            }
            case 24: {
              result.hasHighestBossDifficulty2 = input.ReadUInt32(ref result.highestBossDifficulty2_);
              break;
            }
            case 32: {
              result.hasHighestBossDifficulty3 = input.ReadUInt32(ref result.highestBossDifficulty3_);
              break;
            }
            case 40: {
              result.hasHighestBossDifficulty4 = input.ReadUInt32(ref result.highestBossDifficulty4_);
              break;
            }
            case 48: {
              result.hasMonstersKilled = input.ReadUInt64(ref result.monstersKilled_);
              break;
            }
            case 56: {
              result.hasElitesKilled = input.ReadUInt64(ref result.elitesKilled_);
              break;
            }
            case 64: {
              result.hasGoldCollected = input.ReadUInt64(ref result.goldCollected_);
              break;
            }
            case 72: {
              result.hasHighestHardcoreLevel = input.ReadUInt64(ref result.highestHardcoreLevel_);
              break;
            }
            case 80: {
              result.hasHardcoreMonstersKilled = input.ReadUInt64(ref result.hardcoreMonstersKilled_);
              break;
            }
            case 90: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassBarbarian) {
                subBuilder.MergeFrom(ClassBarbarian);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassBarbarian = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassDemonhunter) {
                subBuilder.MergeFrom(ClassDemonhunter);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassDemonhunter = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassMonk) {
                subBuilder.MergeFrom(ClassMonk);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassMonk = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassWitchdoctor) {
                subBuilder.MergeFrom(ClassWitchdoctor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassWitchdoctor = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassWizard) {
                subBuilder.MergeFrom(ClassWizard);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassWizard = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHighestDifficulty {
        get { return result.hasHighestDifficulty; }
      }
      public uint HighestDifficulty {
        get { return result.HighestDifficulty; }
        set { SetHighestDifficulty(value); }
      }
      public Builder SetHighestDifficulty(uint value) {
        PrepareBuilder();
        result.hasHighestDifficulty = true;
        result.highestDifficulty_ = value;
        return this;
      }
      public Builder ClearHighestDifficulty() {
        PrepareBuilder();
        result.hasHighestDifficulty = false;
        result.highestDifficulty_ = 0;
        return this;
      }
      
      public bool HasHighestBossDifficulty1 {
        get { return result.hasHighestBossDifficulty1; }
      }
      public uint HighestBossDifficulty1 {
        get { return result.HighestBossDifficulty1; }
        set { SetHighestBossDifficulty1(value); }
      }
      public Builder SetHighestBossDifficulty1(uint value) {
        PrepareBuilder();
        result.hasHighestBossDifficulty1 = true;
        result.highestBossDifficulty1_ = value;
        return this;
      }
      public Builder ClearHighestBossDifficulty1() {
        PrepareBuilder();
        result.hasHighestBossDifficulty1 = false;
        result.highestBossDifficulty1_ = 0;
        return this;
      }
      
      public bool HasHighestBossDifficulty2 {
        get { return result.hasHighestBossDifficulty2; }
      }
      public uint HighestBossDifficulty2 {
        get { return result.HighestBossDifficulty2; }
        set { SetHighestBossDifficulty2(value); }
      }
      public Builder SetHighestBossDifficulty2(uint value) {
        PrepareBuilder();
        result.hasHighestBossDifficulty2 = true;
        result.highestBossDifficulty2_ = value;
        return this;
      }
      public Builder ClearHighestBossDifficulty2() {
        PrepareBuilder();
        result.hasHighestBossDifficulty2 = false;
        result.highestBossDifficulty2_ = 0;
        return this;
      }
      
      public bool HasHighestBossDifficulty3 {
        get { return result.hasHighestBossDifficulty3; }
      }
      public uint HighestBossDifficulty3 {
        get { return result.HighestBossDifficulty3; }
        set { SetHighestBossDifficulty3(value); }
      }
      public Builder SetHighestBossDifficulty3(uint value) {
        PrepareBuilder();
        result.hasHighestBossDifficulty3 = true;
        result.highestBossDifficulty3_ = value;
        return this;
      }
      public Builder ClearHighestBossDifficulty3() {
        PrepareBuilder();
        result.hasHighestBossDifficulty3 = false;
        result.highestBossDifficulty3_ = 0;
        return this;
      }
      
      public bool HasHighestBossDifficulty4 {
        get { return result.hasHighestBossDifficulty4; }
      }
      public uint HighestBossDifficulty4 {
        get { return result.HighestBossDifficulty4; }
        set { SetHighestBossDifficulty4(value); }
      }
      public Builder SetHighestBossDifficulty4(uint value) {
        PrepareBuilder();
        result.hasHighestBossDifficulty4 = true;
        result.highestBossDifficulty4_ = value;
        return this;
      }
      public Builder ClearHighestBossDifficulty4() {
        PrepareBuilder();
        result.hasHighestBossDifficulty4 = false;
        result.highestBossDifficulty4_ = 0;
        return this;
      }
      
      public bool HasMonstersKilled {
        get { return result.hasMonstersKilled; }
      }
      public ulong MonstersKilled {
        get { return result.MonstersKilled; }
        set { SetMonstersKilled(value); }
      }
      public Builder SetMonstersKilled(ulong value) {
        PrepareBuilder();
        result.hasMonstersKilled = true;
        result.monstersKilled_ = value;
        return this;
      }
      public Builder ClearMonstersKilled() {
        PrepareBuilder();
        result.hasMonstersKilled = false;
        result.monstersKilled_ = 0UL;
        return this;
      }
      
      public bool HasElitesKilled {
        get { return result.hasElitesKilled; }
      }
      public ulong ElitesKilled {
        get { return result.ElitesKilled; }
        set { SetElitesKilled(value); }
      }
      public Builder SetElitesKilled(ulong value) {
        PrepareBuilder();
        result.hasElitesKilled = true;
        result.elitesKilled_ = value;
        return this;
      }
      public Builder ClearElitesKilled() {
        PrepareBuilder();
        result.hasElitesKilled = false;
        result.elitesKilled_ = 0UL;
        return this;
      }
      
      public bool HasGoldCollected {
        get { return result.hasGoldCollected; }
      }
      public ulong GoldCollected {
        get { return result.GoldCollected; }
        set { SetGoldCollected(value); }
      }
      public Builder SetGoldCollected(ulong value) {
        PrepareBuilder();
        result.hasGoldCollected = true;
        result.goldCollected_ = value;
        return this;
      }
      public Builder ClearGoldCollected() {
        PrepareBuilder();
        result.hasGoldCollected = false;
        result.goldCollected_ = 0UL;
        return this;
      }
      
      public bool HasHighestHardcoreLevel {
        get { return result.hasHighestHardcoreLevel; }
      }
      public ulong HighestHardcoreLevel {
        get { return result.HighestHardcoreLevel; }
        set { SetHighestHardcoreLevel(value); }
      }
      public Builder SetHighestHardcoreLevel(ulong value) {
        PrepareBuilder();
        result.hasHighestHardcoreLevel = true;
        result.highestHardcoreLevel_ = value;
        return this;
      }
      public Builder ClearHighestHardcoreLevel() {
        PrepareBuilder();
        result.hasHighestHardcoreLevel = false;
        result.highestHardcoreLevel_ = 0UL;
        return this;
      }
      
      public bool HasHardcoreMonstersKilled {
        get { return result.hasHardcoreMonstersKilled; }
      }
      public ulong HardcoreMonstersKilled {
        get { return result.HardcoreMonstersKilled; }
        set { SetHardcoreMonstersKilled(value); }
      }
      public Builder SetHardcoreMonstersKilled(ulong value) {
        PrepareBuilder();
        result.hasHardcoreMonstersKilled = true;
        result.hardcoreMonstersKilled_ = value;
        return this;
      }
      public Builder ClearHardcoreMonstersKilled() {
        PrepareBuilder();
        result.hasHardcoreMonstersKilled = false;
        result.hardcoreMonstersKilled_ = 0UL;
        return this;
      }
      
      public bool HasClassBarbarian {
       get { return result.hasClassBarbarian; }
      }
      public global::D3.Profile.ClassInfo ClassBarbarian {
        get { return result.ClassBarbarian; }
        set { SetClassBarbarian(value); }
      }
      public Builder SetClassBarbarian(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassBarbarian = true;
        result.classBarbarian_ = value;
        return this;
      }
      public Builder SetClassBarbarian(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassBarbarian = true;
        result.classBarbarian_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassBarbarian(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassBarbarian &&
            result.classBarbarian_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classBarbarian_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classBarbarian_).MergeFrom(value).BuildPartial();
        } else {
          result.classBarbarian_ = value;
        }
        result.hasClassBarbarian = true;
        return this;
      }
      public Builder ClearClassBarbarian() {
        PrepareBuilder();
        result.hasClassBarbarian = false;
        result.classBarbarian_ = null;
        return this;
      }
      
      public bool HasClassDemonhunter {
       get { return result.hasClassDemonhunter; }
      }
      public global::D3.Profile.ClassInfo ClassDemonhunter {
        get { return result.ClassDemonhunter; }
        set { SetClassDemonhunter(value); }
      }
      public Builder SetClassDemonhunter(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassDemonhunter = true;
        result.classDemonhunter_ = value;
        return this;
      }
      public Builder SetClassDemonhunter(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassDemonhunter = true;
        result.classDemonhunter_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassDemonhunter(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassDemonhunter &&
            result.classDemonhunter_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classDemonhunter_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classDemonhunter_).MergeFrom(value).BuildPartial();
        } else {
          result.classDemonhunter_ = value;
        }
        result.hasClassDemonhunter = true;
        return this;
      }
      public Builder ClearClassDemonhunter() {
        PrepareBuilder();
        result.hasClassDemonhunter = false;
        result.classDemonhunter_ = null;
        return this;
      }
      
      public bool HasClassMonk {
       get { return result.hasClassMonk; }
      }
      public global::D3.Profile.ClassInfo ClassMonk {
        get { return result.ClassMonk; }
        set { SetClassMonk(value); }
      }
      public Builder SetClassMonk(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassMonk = true;
        result.classMonk_ = value;
        return this;
      }
      public Builder SetClassMonk(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassMonk = true;
        result.classMonk_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassMonk(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassMonk &&
            result.classMonk_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classMonk_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classMonk_).MergeFrom(value).BuildPartial();
        } else {
          result.classMonk_ = value;
        }
        result.hasClassMonk = true;
        return this;
      }
      public Builder ClearClassMonk() {
        PrepareBuilder();
        result.hasClassMonk = false;
        result.classMonk_ = null;
        return this;
      }
      
      public bool HasClassWitchdoctor {
       get { return result.hasClassWitchdoctor; }
      }
      public global::D3.Profile.ClassInfo ClassWitchdoctor {
        get { return result.ClassWitchdoctor; }
        set { SetClassWitchdoctor(value); }
      }
      public Builder SetClassWitchdoctor(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassWitchdoctor = true;
        result.classWitchdoctor_ = value;
        return this;
      }
      public Builder SetClassWitchdoctor(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassWitchdoctor = true;
        result.classWitchdoctor_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassWitchdoctor(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassWitchdoctor &&
            result.classWitchdoctor_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classWitchdoctor_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classWitchdoctor_).MergeFrom(value).BuildPartial();
        } else {
          result.classWitchdoctor_ = value;
        }
        result.hasClassWitchdoctor = true;
        return this;
      }
      public Builder ClearClassWitchdoctor() {
        PrepareBuilder();
        result.hasClassWitchdoctor = false;
        result.classWitchdoctor_ = null;
        return this;
      }
      
      public bool HasClassWizard {
       get { return result.hasClassWizard; }
      }
      public global::D3.Profile.ClassInfo ClassWizard {
        get { return result.ClassWizard; }
        set { SetClassWizard(value); }
      }
      public Builder SetClassWizard(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassWizard = true;
        result.classWizard_ = value;
        return this;
      }
      public Builder SetClassWizard(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassWizard = true;
        result.classWizard_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassWizard(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassWizard &&
            result.classWizard_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classWizard_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classWizard_).MergeFrom(value).BuildPartial();
        } else {
          result.classWizard_ = value;
        }
        result.hasClassWizard = true;
        return this;
      }
      public Builder ClearClassWizard() {
        PrepareBuilder();
        result.hasClassWizard = false;
        result.classWizard_ = null;
        return this;
      }
    }
    static AccountProfile() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
