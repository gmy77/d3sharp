// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Hero {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Hero {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Hero_VisualItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualItem, global::D3.Hero.VisualItem.Builder> internal__static_D3_Hero_VisualItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_VisualEquipment__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualEquipment, global::D3.Hero.VisualEquipment.Builder> internal__static_D3_Hero_VisualEquipment__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_QuestHistoryEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestHistoryEntry, global::D3.Hero.QuestHistoryEntry.Builder> internal__static_D3_Hero_QuestHistoryEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestRewardHistoryEntry, global::D3.Hero.QuestRewardHistoryEntry.Builder> internal__static_D3_Hero_QuestRewardHistoryEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_Digest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Digest, global::D3.Hero.Digest.Builder> internal__static_D3_Hero_Digest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_HotbarButtonData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.HotbarButtonData, global::D3.Hero.HotbarButtonData.Builder> internal__static_D3_Hero_HotbarButtonData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SkillKeyMapping__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SkillKeyMapping, global::D3.Hero.SkillKeyMapping.Builder> internal__static_D3_Hero_SkillKeyMapping__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedQuest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedQuest, global::D3.Hero.SavedQuest.Builder> internal__static_D3_Hero_SavedQuest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_LearnedLore__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.LearnedLore, global::D3.Hero.LearnedLore.Builder> internal__static_D3_Hero_LearnedLore__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedConversations__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedConversations, global::D3.Hero.SavedConversations.Builder> internal__static_D3_Hero_SavedConversations__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavePointData_Proto__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavePointData_Proto, global::D3.Hero.SavePointData_Proto.Builder> internal__static_D3_Hero_SavePointData_Proto__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedData, global::D3.Hero.SavedData.Builder> internal__static_D3_Hero_SavedData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_Timestamps__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Timestamps, global::D3.Hero.Timestamps.Builder> internal__static_D3_Hero_Timestamps__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedDefinition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedDefinition, global::D3.Hero.SavedDefinition.Builder> internal__static_D3_Hero_SavedDefinition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_NameSequence__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.NameSequence, global::D3.Hero.NameSequence.Builder> internal__static_D3_Hero_NameSequence__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_NameText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.NameText, global::D3.Hero.NameText.Builder> internal__static_D3_Hero_NameText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_Escrow__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Escrow, global::D3.Hero.Escrow.Builder> internal__static_D3_Hero_Escrow__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_HeroList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.HeroList, global::D3.Hero.HeroList.Builder> internal__static_D3_Hero_HeroList__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Hero() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgpIZXJvLnByb3RvEgdEMy5IZXJvGhlBdHRyaWJ1dGVTZXJpYWxpemVyLnBy" + 
          "b3RvGg5IaXJlbGluZy5wcm90bxoLSXRlbXMucHJvdG8aE09ubGluZVNlcnZp" + 
          "Y2UucHJvdG8iagoKVmlzdWFsSXRlbRIQCgRnYmlkGAEgASgPOgItMRITCghk" + 
          "eWVfdHlwZRgCIAEoEToBMBIbChBpdGVtX2VmZmVjdF90eXBlGAMgASgROgEw" + 
          "EhgKDGVmZmVjdF9sZXZlbBgEIAEoEToCLTEiOwoPVmlzdWFsRXF1aXBtZW50" + 
          "EigKC3Zpc3VhbF9pdGVtGAEgAygLMhMuRDMuSGVyby5WaXN1YWxJdGVtIkEK" + 
          "EVF1ZXN0SGlzdG9yeUVudHJ5EhUKCXNub19xdWVzdBgBIAIoDzoCLTESFQoK" + 
          "ZGlmZmljdWx0eRgCIAIoEToBMCJdChdRdWVzdFJld2FyZEhpc3RvcnlFbnRy" + 
          "eRIVCglzbm9fcXVlc3QYASACKA86Ai0xEhQKCHN0ZXBfdWlkGAIgAigROgIt" + 
          "MRIVCgpkaWZmaWN1bHR5GAMgAigROgEwIsgDCgZEaWdlc3QSDwoHdmVyc2lv" + 
          "bhgBIAIoDRIrCgdoZXJvX2lkGAIgAigLMhouRDMuT25saW5lU2VydmljZS5F" + 
          "bnRpdHlJZBIRCgloZXJvX25hbWUYAyABKAkSEgoKZ2JpZF9jbGFzcxgEIAIo" + 
          "DxINCgVsZXZlbBgFIAIoERIUCgxwbGF5ZXJfZmxhZ3MYBiACKA0SMgoQdmlz" + 
          "dWFsX2VxdWlwbWVudBgHIAIoCzIYLkQzLkhlcm8uVmlzdWFsRXF1aXBtZW50" + 
          "EjEKDXF1ZXN0X2hpc3RvcnkYCCADKAsyGi5EMy5IZXJvLlF1ZXN0SGlzdG9y" + 
          "eUVudHJ5EhcKD2xhc3RfcGxheWVkX2FjdBgKIAIoERIcChRoaWdoZXN0X3Vu" + 
          "bG9ja2VkX2FjdBgLIAIoERIeChZsYXN0X3BsYXllZF9kaWZmaWN1bHR5GAwg" + 
          "AigREiMKG2hpZ2hlc3RfdW5sb2NrZWRfZGlmZmljdWx0eRgNIAIoERIZChFs" + 
          "YXN0X3BsYXllZF9xdWVzdBgOIAIoDxIeChZsYXN0X3BsYXllZF9xdWVzdF9z" + 
          "dGVwGA8gAigREhYKC3RpbWVfcGxheWVkGBAgAigNOgEwIkAKEEhvdGJhckJ1" + 
          "dHRvbkRhdGESFQoJc25vX3Bvd2VyGAEgAigPOgItMRIVCglnYmlkX2l0ZW0Y" + 
          "AiACKA86Ai0xIlgKD1NraWxsS2V5TWFwcGluZxIVCglzbm9fcG93ZXIYASAC" + 
          "KA86Ai0xEhUKCWlkX2hvdGtleRgCIAIoEToCLTESFwoMc2tpbGxfYnV0dG9u" + 
          "GAMgAigROgEwIpoBCgpTYXZlZFF1ZXN0EhUKCXNub19xdWVzdBgBIAIoDzoC" + 
          "LTESFQoKZGlmZmljdWx0eRgCIAIoEToBMBIcChBjdXJyZW50X3N0ZXBfdWlk" + 
          "GAMgAigROgItMRIbCg9vYmplY3RpdmVfc3RhdGUYBCADKBFCAhABEiMKF2Zh" + 
          "aWx1cmVfY29uZGl0aW9uX3N0YXRlGAUgAygRQgIQASInCgtMZWFybmVkTG9y" + 
          "ZRIYChBzbm9fbG9yZV9sZWFybmVkGAEgAygPIlwKElNhdmVkQ29udmVyc2F0" + 
          "aW9ucxIlCh1wbGF5ZWRfY29udmVyc2F0aW9uc19iaXRmaWVsZBgBIAIoDBIf" + 
          "Chdzbm9fc2F2ZWRfY29udmVyc2F0aW9ucxgCIAMoDyJlChNTYXZlUG9pbnRE" + 
          "YXRhX1Byb3RvEhUKCXNub193b3JsZBgBIAIoDzoCLTESHAoQc2F2ZXBvaW50" + 
          "X251bWJlchgCIAIoEToCLTESGQoOY3JlYXRlc19wb3J0YWwYAyACKA06ATAi" + 
          "4gMKCVNhdmVkRGF0YRI8Chlob3RiYXJfYnV0dG9uX2Fzc2lnbm1lbnRzGAEg" + 
          "AygLMhkuRDMuSGVyby5Ib3RiYXJCdXR0b25EYXRhEi8KDXNraWxsX2tleV9t" + 
          "YXAYAiADKAsyGC5EMy5IZXJvLlNraWxsS2V5TWFwcGluZxIWCgt0aW1lX3Bs" + 
          "YXllZBgDIAIoDToBMBIeChNhY3RpdmF0ZWRfd2F5cG9pbnRzGAQgAigNOgEw" + 
          "EjMKE2hpcmVsaW5nX3NhdmVkX2RhdGEYBSACKAsyFi5EMy5IaXJlbGluZy5T" + 
          "YXZlZERhdGESGgoPbGFzdF9sZXZlbF90aW1lGAYgAigNOgEwEioKDGxlYXJu" + 
          "ZWRfbG9yZRgHIAIoCzIULkQzLkhlcm8uTGVhcm5lZExvcmUSOAoTc2F2ZWRf" + 
          "Y29udmVyc2F0aW9ucxgIIAIoCzIbLkQzLkhlcm8uU2F2ZWRDb252ZXJzYXRp" + 
          "b25zEhkKEXNub19hY3RpdmVfc2tpbGxzGAkgAygPEhIKCnNub190cmFpdHMY" + 
          "CiADKA8SFgoOc2Vlbl90dXRvcmlhbHMYCyADKA8SMAoKc2F2ZV9wb2ludBgM" + 
          "IAIoCzIcLkQzLkhlcm8uU2F2ZVBvaW50RGF0YV9Qcm90byI2CgpUaW1lc3Rh" + 
          "bXBzEhMKC2NyZWF0ZV90aW1lGAEgAigSEhMKC2RlbGV0ZV90aW1lGAIgASgS" + 
          "IrsCCg9TYXZlZERlZmluaXRpb24SDwoHdmVyc2lvbhgBIAIoDRIfCgZkaWdl" + 
          "c3QYAiABKAsyDy5EMy5IZXJvLkRpZ2VzdBJBChBzYXZlZF9hdHRyaWJ1dGVz" + 
          "GAMgAigLMicuRDMuQXR0cmlidXRlU2VyaWFsaXplci5TYXZlZEF0dHJpYnV0" + 
          "ZXMSJgoKc2F2ZWRfZGF0YRgEIAEoCzISLkQzLkhlcm8uU2F2ZWREYXRhEigK" + 
          "C3NhdmVkX3F1ZXN0GAUgAygLMhMuRDMuSGVyby5TYXZlZFF1ZXN0EiEKBWl0" + 
          "ZW1zGAYgASgLMhIuRDMuSXRlbXMuSXRlbUxpc3QSPgoUcXVlc3RfcmV3YXJk" + 
          "X2hpc3RvcnkYByADKAsyIC5EMy5IZXJvLlF1ZXN0UmV3YXJkSGlzdG9yeUVu" + 
          "dHJ5IiMKDE5hbWVTZXF1ZW5jZRITCghzZXF1ZW5jZRgBIAEoAzoBMCIYCghO" + 
          "YW1lVGV4dBIMCgRuYW1lGAEgAigJIqoBCgZFc2Nyb3cSDwoHdmVyc2lvbhgB" + 
          "IAIoDRImCglnZW5lcmF0b3IYAiABKAsyEy5EMy5JdGVtcy5HZW5lcmF0b3IS" + 
          "JQoJaGVyb19kYXRhGAMgASgLMhIuRDMuSGVyby5TYXZlZERhdGESDQoFc3Rh" + 
          "dGUYBCABKA0SMQoPc2VydmljZWRfdG9rZW5zGAUgAygLMhguRDMuT25saW5l" + 
          "U2VydmljZS5JdGVtSWQiOAoISGVyb0xpc3QSLAoIaGVyb19pZHMYASADKAsy" + 
          "Gi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlk");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Hero_VisualItem__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Hero_VisualItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualItem, global::D3.Hero.VisualItem.Builder>(internal__static_D3_Hero_VisualItem__Descriptor,
                new string[] { "Gbid", "DyeType", "ItemEffectType", "EffectLevel", });
        internal__static_D3_Hero_VisualEquipment__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Hero_VisualEquipment__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualEquipment, global::D3.Hero.VisualEquipment.Builder>(internal__static_D3_Hero_VisualEquipment__Descriptor,
                new string[] { "VisualItem", });
        internal__static_D3_Hero_QuestHistoryEntry__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Hero_QuestHistoryEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestHistoryEntry, global::D3.Hero.QuestHistoryEntry.Builder>(internal__static_D3_Hero_QuestHistoryEntry__Descriptor,
                new string[] { "SnoQuest", "Difficulty", });
        internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Hero_QuestRewardHistoryEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestRewardHistoryEntry, global::D3.Hero.QuestRewardHistoryEntry.Builder>(internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor,
                new string[] { "SnoQuest", "StepUid", "Difficulty", });
        internal__static_D3_Hero_Digest__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Hero_Digest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Digest, global::D3.Hero.Digest.Builder>(internal__static_D3_Hero_Digest__Descriptor,
                new string[] { "Version", "HeroId", "HeroName", "GbidClass", "Level", "PlayerFlags", "VisualEquipment", "QuestHistory", "LastPlayedAct", "HighestUnlockedAct", "LastPlayedDifficulty", "HighestUnlockedDifficulty", "LastPlayedQuest", "LastPlayedQuestStep", "TimePlayed", });
        internal__static_D3_Hero_HotbarButtonData__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Hero_HotbarButtonData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.HotbarButtonData, global::D3.Hero.HotbarButtonData.Builder>(internal__static_D3_Hero_HotbarButtonData__Descriptor,
                new string[] { "SnoPower", "GbidItem", });
        internal__static_D3_Hero_SkillKeyMapping__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Hero_SkillKeyMapping__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SkillKeyMapping, global::D3.Hero.SkillKeyMapping.Builder>(internal__static_D3_Hero_SkillKeyMapping__Descriptor,
                new string[] { "SnoPower", "IdHotkey", "SkillButton", });
        internal__static_D3_Hero_SavedQuest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Hero_SavedQuest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedQuest, global::D3.Hero.SavedQuest.Builder>(internal__static_D3_Hero_SavedQuest__Descriptor,
                new string[] { "SnoQuest", "Difficulty", "CurrentStepUid", "ObjectiveState", "FailureConditionState", });
        internal__static_D3_Hero_LearnedLore__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_Hero_LearnedLore__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.LearnedLore, global::D3.Hero.LearnedLore.Builder>(internal__static_D3_Hero_LearnedLore__Descriptor,
                new string[] { "SnoLoreLearned", });
        internal__static_D3_Hero_SavedConversations__Descriptor = Descriptor.MessageTypes[9];
        internal__static_D3_Hero_SavedConversations__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedConversations, global::D3.Hero.SavedConversations.Builder>(internal__static_D3_Hero_SavedConversations__Descriptor,
                new string[] { "PlayedConversationsBitfield", "SnoSavedConversations", });
        internal__static_D3_Hero_SavePointData_Proto__Descriptor = Descriptor.MessageTypes[10];
        internal__static_D3_Hero_SavePointData_Proto__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavePointData_Proto, global::D3.Hero.SavePointData_Proto.Builder>(internal__static_D3_Hero_SavePointData_Proto__Descriptor,
                new string[] { "SnoWorld", "SavepointNumber", "CreatesPortal", });
        internal__static_D3_Hero_SavedData__Descriptor = Descriptor.MessageTypes[11];
        internal__static_D3_Hero_SavedData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedData, global::D3.Hero.SavedData.Builder>(internal__static_D3_Hero_SavedData__Descriptor,
                new string[] { "HotbarButtonAssignments", "SkillKeyMap", "TimePlayed", "ActivatedWaypoints", "HirelingSavedData", "LastLevelTime", "LearnedLore", "SavedConversations", "SnoActiveSkills", "SnoTraits", "SeenTutorials", "SavePoint", });
        internal__static_D3_Hero_Timestamps__Descriptor = Descriptor.MessageTypes[12];
        internal__static_D3_Hero_Timestamps__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Timestamps, global::D3.Hero.Timestamps.Builder>(internal__static_D3_Hero_Timestamps__Descriptor,
                new string[] { "CreateTime", "DeleteTime", });
        internal__static_D3_Hero_SavedDefinition__Descriptor = Descriptor.MessageTypes[13];
        internal__static_D3_Hero_SavedDefinition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedDefinition, global::D3.Hero.SavedDefinition.Builder>(internal__static_D3_Hero_SavedDefinition__Descriptor,
                new string[] { "Version", "Digest", "SavedAttributes", "SavedData", "SavedQuest", "Items", "QuestRewardHistory", });
        internal__static_D3_Hero_NameSequence__Descriptor = Descriptor.MessageTypes[14];
        internal__static_D3_Hero_NameSequence__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.NameSequence, global::D3.Hero.NameSequence.Builder>(internal__static_D3_Hero_NameSequence__Descriptor,
                new string[] { "Sequence", });
        internal__static_D3_Hero_NameText__Descriptor = Descriptor.MessageTypes[15];
        internal__static_D3_Hero_NameText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.NameText, global::D3.Hero.NameText.Builder>(internal__static_D3_Hero_NameText__Descriptor,
                new string[] { "Name", });
        internal__static_D3_Hero_Escrow__Descriptor = Descriptor.MessageTypes[16];
        internal__static_D3_Hero_Escrow__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Escrow, global::D3.Hero.Escrow.Builder>(internal__static_D3_Hero_Escrow__Descriptor,
                new string[] { "Version", "Generator", "HeroData", "State", "ServicedTokens", });
        internal__static_D3_Hero_HeroList__Descriptor = Descriptor.MessageTypes[17];
        internal__static_D3_Hero_HeroList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.HeroList, global::D3.Hero.HeroList.Builder>(internal__static_D3_Hero_HeroList__Descriptor,
                new string[] { "HeroIds", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.AttributeSerializer.AttributeSerializer.Descriptor, 
          global::D3.Hireling.Hireling.Descriptor, 
          global::D3.Items.Items.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class VisualItem : pb::GeneratedMessage<VisualItem, VisualItem.Builder> {
    private VisualItem() { }
    private static readonly VisualItem defaultInstance = new VisualItem().MakeReadOnly();
    private static readonly string[] _visualItemFieldNames = new string[] { "dye_type", "effect_level", "gbid", "item_effect_type" };
    private static readonly uint[] _visualItemFieldTags = new uint[] { 16, 32, 13, 24 };
    public static VisualItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VisualItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VisualItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_VisualItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VisualItem, VisualItem.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_VisualItem__FieldAccessorTable; }
    }
    
    public const int GbidFieldNumber = 1;
    private bool hasGbid;
    private int gbid_ = -1;
    public bool HasGbid {
      get { return hasGbid; }
    }
    public int Gbid {
      get { return gbid_; }
    }
    
    public const int DyeTypeFieldNumber = 2;
    private bool hasDyeType;
    private int dyeType_;
    public bool HasDyeType {
      get { return hasDyeType; }
    }
    public int DyeType {
      get { return dyeType_; }
    }
    
    public const int ItemEffectTypeFieldNumber = 3;
    private bool hasItemEffectType;
    private int itemEffectType_;
    public bool HasItemEffectType {
      get { return hasItemEffectType; }
    }
    public int ItemEffectType {
      get { return itemEffectType_; }
    }
    
    public const int EffectLevelFieldNumber = 4;
    private bool hasEffectLevel;
    private int effectLevel_ = -1;
    public bool HasEffectLevel {
      get { return hasEffectLevel; }
    }
    public int EffectLevel {
      get { return effectLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _visualItemFieldNames;
      if (hasGbid) {
        output.WriteSFixed32(1, field_names[2], Gbid);
      }
      if (hasDyeType) {
        output.WriteSInt32(2, field_names[0], DyeType);
      }
      if (hasItemEffectType) {
        output.WriteSInt32(3, field_names[3], ItemEffectType);
      }
      if (hasEffectLevel) {
        output.WriteSInt32(4, field_names[1], EffectLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, Gbid);
        }
        if (hasDyeType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, DyeType);
        }
        if (hasItemEffectType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, ItemEffectType);
        }
        if (hasEffectLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, EffectLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VisualItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VisualItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VisualItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VisualItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VisualItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VisualItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<VisualItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VisualItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VisualItem result;
      
      private VisualItem PrepareBuilder() {
        if (resultIsReadOnly) {
          VisualItem original = result;
          result = new VisualItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VisualItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.VisualItem.Descriptor; }
      }
      
      public override VisualItem DefaultInstanceForType {
        get { return global::D3.Hero.VisualItem.DefaultInstance; }
      }
      
      public override VisualItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VisualItem) {
          return MergeFrom((VisualItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VisualItem other) {
        if (other == global::D3.Hero.VisualItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGbid) {
          Gbid = other.Gbid;
        }
        if (other.HasDyeType) {
          DyeType = other.DyeType;
        }
        if (other.HasItemEffectType) {
          ItemEffectType = other.ItemEffectType;
        }
        if (other.HasEffectLevel) {
          EffectLevel = other.EffectLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_visualItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _visualItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasGbid = input.ReadSFixed32(ref result.gbid_);
              break;
            }
            case 16: {
              result.hasDyeType = input.ReadSInt32(ref result.dyeType_);
              break;
            }
            case 24: {
              result.hasItemEffectType = input.ReadSInt32(ref result.itemEffectType_);
              break;
            }
            case 32: {
              result.hasEffectLevel = input.ReadSInt32(ref result.effectLevel_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGbid {
        get { return result.hasGbid; }
      }
      public int Gbid {
        get { return result.Gbid; }
        set { SetGbid(value); }
      }
      public Builder SetGbid(int value) {
        PrepareBuilder();
        result.hasGbid = true;
        result.gbid_ = value;
        return this;
      }
      public Builder ClearGbid() {
        PrepareBuilder();
        result.hasGbid = false;
        result.gbid_ = -1;
        return this;
      }
      
      public bool HasDyeType {
        get { return result.hasDyeType; }
      }
      public int DyeType {
        get { return result.DyeType; }
        set { SetDyeType(value); }
      }
      public Builder SetDyeType(int value) {
        PrepareBuilder();
        result.hasDyeType = true;
        result.dyeType_ = value;
        return this;
      }
      public Builder ClearDyeType() {
        PrepareBuilder();
        result.hasDyeType = false;
        result.dyeType_ = 0;
        return this;
      }
      
      public bool HasItemEffectType {
        get { return result.hasItemEffectType; }
      }
      public int ItemEffectType {
        get { return result.ItemEffectType; }
        set { SetItemEffectType(value); }
      }
      public Builder SetItemEffectType(int value) {
        PrepareBuilder();
        result.hasItemEffectType = true;
        result.itemEffectType_ = value;
        return this;
      }
      public Builder ClearItemEffectType() {
        PrepareBuilder();
        result.hasItemEffectType = false;
        result.itemEffectType_ = 0;
        return this;
      }
      
      public bool HasEffectLevel {
        get { return result.hasEffectLevel; }
      }
      public int EffectLevel {
        get { return result.EffectLevel; }
        set { SetEffectLevel(value); }
      }
      public Builder SetEffectLevel(int value) {
        PrepareBuilder();
        result.hasEffectLevel = true;
        result.effectLevel_ = value;
        return this;
      }
      public Builder ClearEffectLevel() {
        PrepareBuilder();
        result.hasEffectLevel = false;
        result.effectLevel_ = -1;
        return this;
      }
    }
    static VisualItem() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class VisualEquipment : pb::GeneratedMessage<VisualEquipment, VisualEquipment.Builder> {
    private VisualEquipment() { }
    private static readonly VisualEquipment defaultInstance = new VisualEquipment().MakeReadOnly();
    private static readonly string[] _visualEquipmentFieldNames = new string[] { "visual_item" };
    private static readonly uint[] _visualEquipmentFieldTags = new uint[] { 10 };
    public static VisualEquipment DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VisualEquipment DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VisualEquipment ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_VisualEquipment__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VisualEquipment, VisualEquipment.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_VisualEquipment__FieldAccessorTable; }
    }
    
    public const int VisualItemFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.VisualItem> visualItem_ = new pbc::PopsicleList<global::D3.Hero.VisualItem>();
    public scg::IList<global::D3.Hero.VisualItem> VisualItemList {
      get { return visualItem_; }
    }
    public int VisualItemCount {
      get { return visualItem_.Count; }
    }
    public global::D3.Hero.VisualItem GetVisualItem(int index) {
      return visualItem_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _visualEquipmentFieldNames;
      if (visualItem_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], visualItem_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.VisualItem element in VisualItemList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VisualEquipment ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VisualEquipment ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VisualEquipment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VisualEquipment ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VisualEquipment MakeReadOnly() {
      visualItem_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VisualEquipment prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<VisualEquipment, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VisualEquipment cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VisualEquipment result;
      
      private VisualEquipment PrepareBuilder() {
        if (resultIsReadOnly) {
          VisualEquipment original = result;
          result = new VisualEquipment();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VisualEquipment MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.VisualEquipment.Descriptor; }
      }
      
      public override VisualEquipment DefaultInstanceForType {
        get { return global::D3.Hero.VisualEquipment.DefaultInstance; }
      }
      
      public override VisualEquipment BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VisualEquipment) {
          return MergeFrom((VisualEquipment) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VisualEquipment other) {
        if (other == global::D3.Hero.VisualEquipment.DefaultInstance) return this;
        PrepareBuilder();
        if (other.visualItem_.Count != 0) {
          result.visualItem_.Add(other.visualItem_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_visualEquipmentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _visualEquipmentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.visualItem_, global::D3.Hero.VisualItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.VisualItem> VisualItemList {
        get { return PrepareBuilder().visualItem_; }
      }
      public int VisualItemCount {
        get { return result.VisualItemCount; }
      }
      public global::D3.Hero.VisualItem GetVisualItem(int index) {
        return result.GetVisualItem(index);
      }
      public Builder SetVisualItem(int index, global::D3.Hero.VisualItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.visualItem_[index] = value;
        return this;
      }
      public Builder SetVisualItem(int index, global::D3.Hero.VisualItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.visualItem_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVisualItem(global::D3.Hero.VisualItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.visualItem_.Add(value);
        return this;
      }
      public Builder AddVisualItem(global::D3.Hero.VisualItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.visualItem_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVisualItem(scg::IEnumerable<global::D3.Hero.VisualItem> values) {
        PrepareBuilder();
        result.visualItem_.Add(values);
        return this;
      }
      public Builder ClearVisualItem() {
        PrepareBuilder();
        result.visualItem_.Clear();
        return this;
      }
    }
    static VisualEquipment() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuestHistoryEntry : pb::GeneratedMessage<QuestHistoryEntry, QuestHistoryEntry.Builder> {
    private QuestHistoryEntry() { }
    private static readonly QuestHistoryEntry defaultInstance = new QuestHistoryEntry().MakeReadOnly();
    private static readonly string[] _questHistoryEntryFieldNames = new string[] { "difficulty", "sno_quest" };
    private static readonly uint[] _questHistoryEntryFieldTags = new uint[] { 16, 13 };
    public static QuestHistoryEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestHistoryEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuestHistoryEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_QuestHistoryEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestHistoryEntry, QuestHistoryEntry.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_QuestHistoryEntry__FieldAccessorTable; }
    }
    
    public const int SnoQuestFieldNumber = 1;
    private bool hasSnoQuest;
    private int snoQuest_ = -1;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int DifficultyFieldNumber = 2;
    private bool hasDifficulty;
    private int difficulty_;
    public bool HasDifficulty {
      get { return hasDifficulty; }
    }
    public int Difficulty {
      get { return difficulty_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoQuest) return false;
        if (!hasDifficulty) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questHistoryEntryFieldNames;
      if (hasSnoQuest) {
        output.WriteSFixed32(1, field_names[1], SnoQuest);
      }
      if (hasDifficulty) {
        output.WriteSInt32(2, field_names[0], Difficulty);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoQuest);
        }
        if (hasDifficulty) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Difficulty);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestHistoryEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuestHistoryEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestHistoryEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuestHistoryEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuestHistoryEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuestHistoryEntry result;
      
      private QuestHistoryEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          QuestHistoryEntry original = result;
          result = new QuestHistoryEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuestHistoryEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.QuestHistoryEntry.Descriptor; }
      }
      
      public override QuestHistoryEntry DefaultInstanceForType {
        get { return global::D3.Hero.QuestHistoryEntry.DefaultInstance; }
      }
      
      public override QuestHistoryEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestHistoryEntry) {
          return MergeFrom((QuestHistoryEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestHistoryEntry other) {
        if (other == global::D3.Hero.QuestHistoryEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasDifficulty) {
          Difficulty = other.Difficulty;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questHistoryEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questHistoryEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoQuest = input.ReadSFixed32(ref result.snoQuest_);
              break;
            }
            case 16: {
              result.hasDifficulty = input.ReadSInt32(ref result.difficulty_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoQuest {
        get { return result.hasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        PrepareBuilder();
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        PrepareBuilder();
        result.hasSnoQuest = false;
        result.snoQuest_ = -1;
        return this;
      }
      
      public bool HasDifficulty {
        get { return result.hasDifficulty; }
      }
      public int Difficulty {
        get { return result.Difficulty; }
        set { SetDifficulty(value); }
      }
      public Builder SetDifficulty(int value) {
        PrepareBuilder();
        result.hasDifficulty = true;
        result.difficulty_ = value;
        return this;
      }
      public Builder ClearDifficulty() {
        PrepareBuilder();
        result.hasDifficulty = false;
        result.difficulty_ = 0;
        return this;
      }
    }
    static QuestHistoryEntry() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuestRewardHistoryEntry : pb::GeneratedMessage<QuestRewardHistoryEntry, QuestRewardHistoryEntry.Builder> {
    private QuestRewardHistoryEntry() { }
    private static readonly QuestRewardHistoryEntry defaultInstance = new QuestRewardHistoryEntry().MakeReadOnly();
    private static readonly string[] _questRewardHistoryEntryFieldNames = new string[] { "difficulty", "sno_quest", "step_uid" };
    private static readonly uint[] _questRewardHistoryEntryFieldTags = new uint[] { 24, 13, 16 };
    public static QuestRewardHistoryEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestRewardHistoryEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuestRewardHistoryEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestRewardHistoryEntry, QuestRewardHistoryEntry.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_QuestRewardHistoryEntry__FieldAccessorTable; }
    }
    
    public const int SnoQuestFieldNumber = 1;
    private bool hasSnoQuest;
    private int snoQuest_ = -1;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int StepUidFieldNumber = 2;
    private bool hasStepUid;
    private int stepUid_ = -1;
    public bool HasStepUid {
      get { return hasStepUid; }
    }
    public int StepUid {
      get { return stepUid_; }
    }
    
    public const int DifficultyFieldNumber = 3;
    private bool hasDifficulty;
    private int difficulty_;
    public bool HasDifficulty {
      get { return hasDifficulty; }
    }
    public int Difficulty {
      get { return difficulty_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoQuest) return false;
        if (!hasStepUid) return false;
        if (!hasDifficulty) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questRewardHistoryEntryFieldNames;
      if (hasSnoQuest) {
        output.WriteSFixed32(1, field_names[1], SnoQuest);
      }
      if (hasStepUid) {
        output.WriteSInt32(2, field_names[2], StepUid);
      }
      if (hasDifficulty) {
        output.WriteSInt32(3, field_names[0], Difficulty);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoQuest);
        }
        if (hasStepUid) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, StepUid);
        }
        if (hasDifficulty) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, Difficulty);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestRewardHistoryEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuestRewardHistoryEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestRewardHistoryEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuestRewardHistoryEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuestRewardHistoryEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuestRewardHistoryEntry result;
      
      private QuestRewardHistoryEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          QuestRewardHistoryEntry original = result;
          result = new QuestRewardHistoryEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuestRewardHistoryEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.QuestRewardHistoryEntry.Descriptor; }
      }
      
      public override QuestRewardHistoryEntry DefaultInstanceForType {
        get { return global::D3.Hero.QuestRewardHistoryEntry.DefaultInstance; }
      }
      
      public override QuestRewardHistoryEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestRewardHistoryEntry) {
          return MergeFrom((QuestRewardHistoryEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestRewardHistoryEntry other) {
        if (other == global::D3.Hero.QuestRewardHistoryEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasStepUid) {
          StepUid = other.StepUid;
        }
        if (other.HasDifficulty) {
          Difficulty = other.Difficulty;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questRewardHistoryEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questRewardHistoryEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoQuest = input.ReadSFixed32(ref result.snoQuest_);
              break;
            }
            case 16: {
              result.hasStepUid = input.ReadSInt32(ref result.stepUid_);
              break;
            }
            case 24: {
              result.hasDifficulty = input.ReadSInt32(ref result.difficulty_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoQuest {
        get { return result.hasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        PrepareBuilder();
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        PrepareBuilder();
        result.hasSnoQuest = false;
        result.snoQuest_ = -1;
        return this;
      }
      
      public bool HasStepUid {
        get { return result.hasStepUid; }
      }
      public int StepUid {
        get { return result.StepUid; }
        set { SetStepUid(value); }
      }
      public Builder SetStepUid(int value) {
        PrepareBuilder();
        result.hasStepUid = true;
        result.stepUid_ = value;
        return this;
      }
      public Builder ClearStepUid() {
        PrepareBuilder();
        result.hasStepUid = false;
        result.stepUid_ = -1;
        return this;
      }
      
      public bool HasDifficulty {
        get { return result.hasDifficulty; }
      }
      public int Difficulty {
        get { return result.Difficulty; }
        set { SetDifficulty(value); }
      }
      public Builder SetDifficulty(int value) {
        PrepareBuilder();
        result.hasDifficulty = true;
        result.difficulty_ = value;
        return this;
      }
      public Builder ClearDifficulty() {
        PrepareBuilder();
        result.hasDifficulty = false;
        result.difficulty_ = 0;
        return this;
      }
    }
    static QuestRewardHistoryEntry() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Digest : pb::GeneratedMessage<Digest, Digest.Builder> {
    private Digest() { }
    private static readonly Digest defaultInstance = new Digest().MakeReadOnly();
    private static readonly string[] _digestFieldNames = new string[] { "gbid_class", "hero_id", "hero_name", "highest_unlocked_act", "highest_unlocked_difficulty", "last_played_act", "last_played_difficulty", "last_played_quest", "last_played_quest_step", "level", "player_flags", "quest_history", "time_played", "version", "visual_equipment" };
    private static readonly uint[] _digestFieldTags = new uint[] { 37, 18, 26, 88, 104, 80, 96, 117, 120, 40, 48, 66, 128, 8, 58 };
    public static Digest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Digest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Digest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Digest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Digest, Digest.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Digest__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int HeroIdFieldNumber = 2;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int HeroNameFieldNumber = 3;
    private bool hasHeroName;
    private string heroName_ = "";
    public bool HasHeroName {
      get { return hasHeroName; }
    }
    public string HeroName {
      get { return heroName_; }
    }
    
    public const int GbidClassFieldNumber = 4;
    private bool hasGbidClass;
    private int gbidClass_;
    public bool HasGbidClass {
      get { return hasGbidClass; }
    }
    public int GbidClass {
      get { return gbidClass_; }
    }
    
    public const int LevelFieldNumber = 5;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int PlayerFlagsFieldNumber = 6;
    private bool hasPlayerFlags;
    private uint playerFlags_;
    public bool HasPlayerFlags {
      get { return hasPlayerFlags; }
    }
    public uint PlayerFlags {
      get { return playerFlags_; }
    }
    
    public const int VisualEquipmentFieldNumber = 7;
    private bool hasVisualEquipment;
    private global::D3.Hero.VisualEquipment visualEquipment_;
    public bool HasVisualEquipment {
      get { return hasVisualEquipment; }
    }
    public global::D3.Hero.VisualEquipment VisualEquipment {
      get { return visualEquipment_ ?? global::D3.Hero.VisualEquipment.DefaultInstance; }
    }
    
    public const int QuestHistoryFieldNumber = 8;
    private pbc::PopsicleList<global::D3.Hero.QuestHistoryEntry> questHistory_ = new pbc::PopsicleList<global::D3.Hero.QuestHistoryEntry>();
    public scg::IList<global::D3.Hero.QuestHistoryEntry> QuestHistoryList {
      get { return questHistory_; }
    }
    public int QuestHistoryCount {
      get { return questHistory_.Count; }
    }
    public global::D3.Hero.QuestHistoryEntry GetQuestHistory(int index) {
      return questHistory_[index];
    }
    
    public const int LastPlayedActFieldNumber = 10;
    private bool hasLastPlayedAct;
    private int lastPlayedAct_;
    public bool HasLastPlayedAct {
      get { return hasLastPlayedAct; }
    }
    public int LastPlayedAct {
      get { return lastPlayedAct_; }
    }
    
    public const int HighestUnlockedActFieldNumber = 11;
    private bool hasHighestUnlockedAct;
    private int highestUnlockedAct_;
    public bool HasHighestUnlockedAct {
      get { return hasHighestUnlockedAct; }
    }
    public int HighestUnlockedAct {
      get { return highestUnlockedAct_; }
    }
    
    public const int LastPlayedDifficultyFieldNumber = 12;
    private bool hasLastPlayedDifficulty;
    private int lastPlayedDifficulty_;
    public bool HasLastPlayedDifficulty {
      get { return hasLastPlayedDifficulty; }
    }
    public int LastPlayedDifficulty {
      get { return lastPlayedDifficulty_; }
    }
    
    public const int HighestUnlockedDifficultyFieldNumber = 13;
    private bool hasHighestUnlockedDifficulty;
    private int highestUnlockedDifficulty_;
    public bool HasHighestUnlockedDifficulty {
      get { return hasHighestUnlockedDifficulty; }
    }
    public int HighestUnlockedDifficulty {
      get { return highestUnlockedDifficulty_; }
    }
    
    public const int LastPlayedQuestFieldNumber = 14;
    private bool hasLastPlayedQuest;
    private int lastPlayedQuest_;
    public bool HasLastPlayedQuest {
      get { return hasLastPlayedQuest; }
    }
    public int LastPlayedQuest {
      get { return lastPlayedQuest_; }
    }
    
    public const int LastPlayedQuestStepFieldNumber = 15;
    private bool hasLastPlayedQuestStep;
    private int lastPlayedQuestStep_;
    public bool HasLastPlayedQuestStep {
      get { return hasLastPlayedQuestStep; }
    }
    public int LastPlayedQuestStep {
      get { return lastPlayedQuestStep_; }
    }
    
    public const int TimePlayedFieldNumber = 16;
    private bool hasTimePlayed;
    private uint timePlayed_;
    public bool HasTimePlayed {
      get { return hasTimePlayed; }
    }
    public uint TimePlayed {
      get { return timePlayed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasHeroId) return false;
        if (!hasGbidClass) return false;
        if (!hasLevel) return false;
        if (!hasPlayerFlags) return false;
        if (!hasVisualEquipment) return false;
        if (!hasLastPlayedAct) return false;
        if (!hasHighestUnlockedAct) return false;
        if (!hasLastPlayedDifficulty) return false;
        if (!hasHighestUnlockedDifficulty) return false;
        if (!hasLastPlayedQuest) return false;
        if (!hasLastPlayedQuestStep) return false;
        if (!hasTimePlayed) return false;
        if (!HeroId.IsInitialized) return false;
        foreach (global::D3.Hero.QuestHistoryEntry element in QuestHistoryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _digestFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[13], Version);
      }
      if (hasHeroId) {
        output.WriteMessage(2, field_names[1], HeroId);
      }
      if (hasHeroName) {
        output.WriteString(3, field_names[2], HeroName);
      }
      if (hasGbidClass) {
        output.WriteSFixed32(4, field_names[0], GbidClass);
      }
      if (hasLevel) {
        output.WriteSInt32(5, field_names[9], Level);
      }
      if (hasPlayerFlags) {
        output.WriteUInt32(6, field_names[10], PlayerFlags);
      }
      if (hasVisualEquipment) {
        output.WriteMessage(7, field_names[14], VisualEquipment);
      }
      if (questHistory_.Count > 0) {
        output.WriteMessageArray(8, field_names[11], questHistory_);
      }
      if (hasLastPlayedAct) {
        output.WriteSInt32(10, field_names[5], LastPlayedAct);
      }
      if (hasHighestUnlockedAct) {
        output.WriteSInt32(11, field_names[3], HighestUnlockedAct);
      }
      if (hasLastPlayedDifficulty) {
        output.WriteSInt32(12, field_names[6], LastPlayedDifficulty);
      }
      if (hasHighestUnlockedDifficulty) {
        output.WriteSInt32(13, field_names[4], HighestUnlockedDifficulty);
      }
      if (hasLastPlayedQuest) {
        output.WriteSFixed32(14, field_names[7], LastPlayedQuest);
      }
      if (hasLastPlayedQuestStep) {
        output.WriteSInt32(15, field_names[8], LastPlayedQuestStep);
      }
      if (hasTimePlayed) {
        output.WriteUInt32(16, field_names[12], TimePlayed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeroId);
        }
        if (hasHeroName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, HeroName);
        }
        if (hasGbidClass) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(4, GbidClass);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, Level);
        }
        if (hasPlayerFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, PlayerFlags);
        }
        if (hasVisualEquipment) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, VisualEquipment);
        }
        foreach (global::D3.Hero.QuestHistoryEntry element in QuestHistoryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        if (hasLastPlayedAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(10, LastPlayedAct);
        }
        if (hasHighestUnlockedAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(11, HighestUnlockedAct);
        }
        if (hasLastPlayedDifficulty) {
          size += pb::CodedOutputStream.ComputeSInt32Size(12, LastPlayedDifficulty);
        }
        if (hasHighestUnlockedDifficulty) {
          size += pb::CodedOutputStream.ComputeSInt32Size(13, HighestUnlockedDifficulty);
        }
        if (hasLastPlayedQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(14, LastPlayedQuest);
        }
        if (hasLastPlayedQuestStep) {
          size += pb::CodedOutputStream.ComputeSInt32Size(15, LastPlayedQuestStep);
        }
        if (hasTimePlayed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(16, TimePlayed);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Digest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Digest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Digest MakeReadOnly() {
      questHistory_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Digest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Digest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Digest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Digest result;
      
      private Digest PrepareBuilder() {
        if (resultIsReadOnly) {
          Digest original = result;
          result = new Digest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Digest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.Digest.Descriptor; }
      }
      
      public override Digest DefaultInstanceForType {
        get { return global::D3.Hero.Digest.DefaultInstance; }
      }
      
      public override Digest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Digest) {
          return MergeFrom((Digest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Digest other) {
        if (other == global::D3.Hero.Digest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        if (other.HasHeroName) {
          HeroName = other.HeroName;
        }
        if (other.HasGbidClass) {
          GbidClass = other.GbidClass;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasPlayerFlags) {
          PlayerFlags = other.PlayerFlags;
        }
        if (other.HasVisualEquipment) {
          MergeVisualEquipment(other.VisualEquipment);
        }
        if (other.questHistory_.Count != 0) {
          result.questHistory_.Add(other.questHistory_);
        }
        if (other.HasLastPlayedAct) {
          LastPlayedAct = other.LastPlayedAct;
        }
        if (other.HasHighestUnlockedAct) {
          HighestUnlockedAct = other.HighestUnlockedAct;
        }
        if (other.HasLastPlayedDifficulty) {
          LastPlayedDifficulty = other.LastPlayedDifficulty;
        }
        if (other.HasHighestUnlockedDifficulty) {
          HighestUnlockedDifficulty = other.HighestUnlockedDifficulty;
        }
        if (other.HasLastPlayedQuest) {
          LastPlayedQuest = other.LastPlayedQuest;
        }
        if (other.HasLastPlayedQuestStep) {
          LastPlayedQuestStep = other.LastPlayedQuestStep;
        }
        if (other.HasTimePlayed) {
          TimePlayed = other.TimePlayed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_digestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _digestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasHeroName = input.ReadString(ref result.heroName_);
              break;
            }
            case 37: {
              result.hasGbidClass = input.ReadSFixed32(ref result.gbidClass_);
              break;
            }
            case 40: {
              result.hasLevel = input.ReadSInt32(ref result.level_);
              break;
            }
            case 48: {
              result.hasPlayerFlags = input.ReadUInt32(ref result.playerFlags_);
              break;
            }
            case 58: {
              global::D3.Hero.VisualEquipment.Builder subBuilder = global::D3.Hero.VisualEquipment.CreateBuilder();
              if (result.hasVisualEquipment) {
                subBuilder.MergeFrom(VisualEquipment);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VisualEquipment = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.questHistory_, global::D3.Hero.QuestHistoryEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 80: {
              result.hasLastPlayedAct = input.ReadSInt32(ref result.lastPlayedAct_);
              break;
            }
            case 88: {
              result.hasHighestUnlockedAct = input.ReadSInt32(ref result.highestUnlockedAct_);
              break;
            }
            case 96: {
              result.hasLastPlayedDifficulty = input.ReadSInt32(ref result.lastPlayedDifficulty_);
              break;
            }
            case 104: {
              result.hasHighestUnlockedDifficulty = input.ReadSInt32(ref result.highestUnlockedDifficulty_);
              break;
            }
            case 117: {
              result.hasLastPlayedQuest = input.ReadSFixed32(ref result.lastPlayedQuest_);
              break;
            }
            case 120: {
              result.hasLastPlayedQuestStep = input.ReadSInt32(ref result.lastPlayedQuestStep_);
              break;
            }
            case 128: {
              result.hasTimePlayed = input.ReadUInt32(ref result.timePlayed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasHeroId {
       get { return result.hasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = null;
        return this;
      }
      
      public bool HasHeroName {
        get { return result.hasHeroName; }
      }
      public string HeroName {
        get { return result.HeroName; }
        set { SetHeroName(value); }
      }
      public Builder SetHeroName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroName = true;
        result.heroName_ = value;
        return this;
      }
      public Builder ClearHeroName() {
        PrepareBuilder();
        result.hasHeroName = false;
        result.heroName_ = "";
        return this;
      }
      
      public bool HasGbidClass {
        get { return result.hasGbidClass; }
      }
      public int GbidClass {
        get { return result.GbidClass; }
        set { SetGbidClass(value); }
      }
      public Builder SetGbidClass(int value) {
        PrepareBuilder();
        result.hasGbidClass = true;
        result.gbidClass_ = value;
        return this;
      }
      public Builder ClearGbidClass() {
        PrepareBuilder();
        result.hasGbidClass = false;
        result.gbidClass_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasPlayerFlags {
        get { return result.hasPlayerFlags; }
      }
      public uint PlayerFlags {
        get { return result.PlayerFlags; }
        set { SetPlayerFlags(value); }
      }
      public Builder SetPlayerFlags(uint value) {
        PrepareBuilder();
        result.hasPlayerFlags = true;
        result.playerFlags_ = value;
        return this;
      }
      public Builder ClearPlayerFlags() {
        PrepareBuilder();
        result.hasPlayerFlags = false;
        result.playerFlags_ = 0;
        return this;
      }
      
      public bool HasVisualEquipment {
       get { return result.hasVisualEquipment; }
      }
      public global::D3.Hero.VisualEquipment VisualEquipment {
        get { return result.VisualEquipment; }
        set { SetVisualEquipment(value); }
      }
      public Builder SetVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVisualEquipment = true;
        result.visualEquipment_ = value;
        return this;
      }
      public Builder SetVisualEquipment(global::D3.Hero.VisualEquipment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVisualEquipment = true;
        result.visualEquipment_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVisualEquipment &&
            result.visualEquipment_ != global::D3.Hero.VisualEquipment.DefaultInstance) {
            result.visualEquipment_ = global::D3.Hero.VisualEquipment.CreateBuilder(result.visualEquipment_).MergeFrom(value).BuildPartial();
        } else {
          result.visualEquipment_ = value;
        }
        result.hasVisualEquipment = true;
        return this;
      }
      public Builder ClearVisualEquipment() {
        PrepareBuilder();
        result.hasVisualEquipment = false;
        result.visualEquipment_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.QuestHistoryEntry> QuestHistoryList {
        get { return PrepareBuilder().questHistory_; }
      }
      public int QuestHistoryCount {
        get { return result.QuestHistoryCount; }
      }
      public global::D3.Hero.QuestHistoryEntry GetQuestHistory(int index) {
        return result.GetQuestHistory(index);
      }
      public Builder SetQuestHistory(int index, global::D3.Hero.QuestHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questHistory_[index] = value;
        return this;
      }
      public Builder SetQuestHistory(int index, global::D3.Hero.QuestHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questHistory_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuestHistory(global::D3.Hero.QuestHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questHistory_.Add(value);
        return this;
      }
      public Builder AddQuestHistory(global::D3.Hero.QuestHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questHistory_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuestHistory(scg::IEnumerable<global::D3.Hero.QuestHistoryEntry> values) {
        PrepareBuilder();
        result.questHistory_.Add(values);
        return this;
      }
      public Builder ClearQuestHistory() {
        PrepareBuilder();
        result.questHistory_.Clear();
        return this;
      }
      
      public bool HasLastPlayedAct {
        get { return result.hasLastPlayedAct; }
      }
      public int LastPlayedAct {
        get { return result.LastPlayedAct; }
        set { SetLastPlayedAct(value); }
      }
      public Builder SetLastPlayedAct(int value) {
        PrepareBuilder();
        result.hasLastPlayedAct = true;
        result.lastPlayedAct_ = value;
        return this;
      }
      public Builder ClearLastPlayedAct() {
        PrepareBuilder();
        result.hasLastPlayedAct = false;
        result.lastPlayedAct_ = 0;
        return this;
      }
      
      public bool HasHighestUnlockedAct {
        get { return result.hasHighestUnlockedAct; }
      }
      public int HighestUnlockedAct {
        get { return result.HighestUnlockedAct; }
        set { SetHighestUnlockedAct(value); }
      }
      public Builder SetHighestUnlockedAct(int value) {
        PrepareBuilder();
        result.hasHighestUnlockedAct = true;
        result.highestUnlockedAct_ = value;
        return this;
      }
      public Builder ClearHighestUnlockedAct() {
        PrepareBuilder();
        result.hasHighestUnlockedAct = false;
        result.highestUnlockedAct_ = 0;
        return this;
      }
      
      public bool HasLastPlayedDifficulty {
        get { return result.hasLastPlayedDifficulty; }
      }
      public int LastPlayedDifficulty {
        get { return result.LastPlayedDifficulty; }
        set { SetLastPlayedDifficulty(value); }
      }
      public Builder SetLastPlayedDifficulty(int value) {
        PrepareBuilder();
        result.hasLastPlayedDifficulty = true;
        result.lastPlayedDifficulty_ = value;
        return this;
      }
      public Builder ClearLastPlayedDifficulty() {
        PrepareBuilder();
        result.hasLastPlayedDifficulty = false;
        result.lastPlayedDifficulty_ = 0;
        return this;
      }
      
      public bool HasHighestUnlockedDifficulty {
        get { return result.hasHighestUnlockedDifficulty; }
      }
      public int HighestUnlockedDifficulty {
        get { return result.HighestUnlockedDifficulty; }
        set { SetHighestUnlockedDifficulty(value); }
      }
      public Builder SetHighestUnlockedDifficulty(int value) {
        PrepareBuilder();
        result.hasHighestUnlockedDifficulty = true;
        result.highestUnlockedDifficulty_ = value;
        return this;
      }
      public Builder ClearHighestUnlockedDifficulty() {
        PrepareBuilder();
        result.hasHighestUnlockedDifficulty = false;
        result.highestUnlockedDifficulty_ = 0;
        return this;
      }
      
      public bool HasLastPlayedQuest {
        get { return result.hasLastPlayedQuest; }
      }
      public int LastPlayedQuest {
        get { return result.LastPlayedQuest; }
        set { SetLastPlayedQuest(value); }
      }
      public Builder SetLastPlayedQuest(int value) {
        PrepareBuilder();
        result.hasLastPlayedQuest = true;
        result.lastPlayedQuest_ = value;
        return this;
      }
      public Builder ClearLastPlayedQuest() {
        PrepareBuilder();
        result.hasLastPlayedQuest = false;
        result.lastPlayedQuest_ = 0;
        return this;
      }
      
      public bool HasLastPlayedQuestStep {
        get { return result.hasLastPlayedQuestStep; }
      }
      public int LastPlayedQuestStep {
        get { return result.LastPlayedQuestStep; }
        set { SetLastPlayedQuestStep(value); }
      }
      public Builder SetLastPlayedQuestStep(int value) {
        PrepareBuilder();
        result.hasLastPlayedQuestStep = true;
        result.lastPlayedQuestStep_ = value;
        return this;
      }
      public Builder ClearLastPlayedQuestStep() {
        PrepareBuilder();
        result.hasLastPlayedQuestStep = false;
        result.lastPlayedQuestStep_ = 0;
        return this;
      }
      
      public bool HasTimePlayed {
        get { return result.hasTimePlayed; }
      }
      public uint TimePlayed {
        get { return result.TimePlayed; }
        set { SetTimePlayed(value); }
      }
      public Builder SetTimePlayed(uint value) {
        PrepareBuilder();
        result.hasTimePlayed = true;
        result.timePlayed_ = value;
        return this;
      }
      public Builder ClearTimePlayed() {
        PrepareBuilder();
        result.hasTimePlayed = false;
        result.timePlayed_ = 0;
        return this;
      }
    }
    static Digest() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HotbarButtonData : pb::GeneratedMessage<HotbarButtonData, HotbarButtonData.Builder> {
    private HotbarButtonData() { }
    private static readonly HotbarButtonData defaultInstance = new HotbarButtonData().MakeReadOnly();
    private static readonly string[] _hotbarButtonDataFieldNames = new string[] { "gbid_item", "sno_power" };
    private static readonly uint[] _hotbarButtonDataFieldTags = new uint[] { 21, 13 };
    public static HotbarButtonData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HotbarButtonData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HotbarButtonData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_HotbarButtonData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HotbarButtonData, HotbarButtonData.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_HotbarButtonData__FieldAccessorTable; }
    }
    
    public const int SnoPowerFieldNumber = 1;
    private bool hasSnoPower;
    private int snoPower_ = -1;
    public bool HasSnoPower {
      get { return hasSnoPower; }
    }
    public int SnoPower {
      get { return snoPower_; }
    }
    
    public const int GbidItemFieldNumber = 2;
    private bool hasGbidItem;
    private int gbidItem_ = -1;
    public bool HasGbidItem {
      get { return hasGbidItem; }
    }
    public int GbidItem {
      get { return gbidItem_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoPower) return false;
        if (!hasGbidItem) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _hotbarButtonDataFieldNames;
      if (hasSnoPower) {
        output.WriteSFixed32(1, field_names[1], SnoPower);
      }
      if (hasGbidItem) {
        output.WriteSFixed32(2, field_names[0], GbidItem);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoPower) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoPower);
        }
        if (hasGbidItem) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, GbidItem);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HotbarButtonData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HotbarButtonData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HotbarButtonData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HotbarButtonData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HotbarButtonData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HotbarButtonData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HotbarButtonData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HotbarButtonData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HotbarButtonData result;
      
      private HotbarButtonData PrepareBuilder() {
        if (resultIsReadOnly) {
          HotbarButtonData original = result;
          result = new HotbarButtonData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HotbarButtonData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.HotbarButtonData.Descriptor; }
      }
      
      public override HotbarButtonData DefaultInstanceForType {
        get { return global::D3.Hero.HotbarButtonData.DefaultInstance; }
      }
      
      public override HotbarButtonData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HotbarButtonData) {
          return MergeFrom((HotbarButtonData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HotbarButtonData other) {
        if (other == global::D3.Hero.HotbarButtonData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoPower) {
          SnoPower = other.SnoPower;
        }
        if (other.HasGbidItem) {
          GbidItem = other.GbidItem;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_hotbarButtonDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _hotbarButtonDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoPower = input.ReadSFixed32(ref result.snoPower_);
              break;
            }
            case 21: {
              result.hasGbidItem = input.ReadSFixed32(ref result.gbidItem_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoPower {
        get { return result.hasSnoPower; }
      }
      public int SnoPower {
        get { return result.SnoPower; }
        set { SetSnoPower(value); }
      }
      public Builder SetSnoPower(int value) {
        PrepareBuilder();
        result.hasSnoPower = true;
        result.snoPower_ = value;
        return this;
      }
      public Builder ClearSnoPower() {
        PrepareBuilder();
        result.hasSnoPower = false;
        result.snoPower_ = -1;
        return this;
      }
      
      public bool HasGbidItem {
        get { return result.hasGbidItem; }
      }
      public int GbidItem {
        get { return result.GbidItem; }
        set { SetGbidItem(value); }
      }
      public Builder SetGbidItem(int value) {
        PrepareBuilder();
        result.hasGbidItem = true;
        result.gbidItem_ = value;
        return this;
      }
      public Builder ClearGbidItem() {
        PrepareBuilder();
        result.hasGbidItem = false;
        result.gbidItem_ = -1;
        return this;
      }
    }
    static HotbarButtonData() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SkillKeyMapping : pb::GeneratedMessage<SkillKeyMapping, SkillKeyMapping.Builder> {
    private SkillKeyMapping() { }
    private static readonly SkillKeyMapping defaultInstance = new SkillKeyMapping().MakeReadOnly();
    private static readonly string[] _skillKeyMappingFieldNames = new string[] { "id_hotkey", "skill_button", "sno_power" };
    private static readonly uint[] _skillKeyMappingFieldTags = new uint[] { 16, 24, 13 };
    public static SkillKeyMapping DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillKeyMapping DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillKeyMapping ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SkillKeyMapping__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillKeyMapping, SkillKeyMapping.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SkillKeyMapping__FieldAccessorTable; }
    }
    
    public const int SnoPowerFieldNumber = 1;
    private bool hasSnoPower;
    private int snoPower_ = -1;
    public bool HasSnoPower {
      get { return hasSnoPower; }
    }
    public int SnoPower {
      get { return snoPower_; }
    }
    
    public const int IdHotkeyFieldNumber = 2;
    private bool hasIdHotkey;
    private int idHotkey_ = -1;
    public bool HasIdHotkey {
      get { return hasIdHotkey; }
    }
    public int IdHotkey {
      get { return idHotkey_; }
    }
    
    public const int SkillButtonFieldNumber = 3;
    private bool hasSkillButton;
    private int skillButton_;
    public bool HasSkillButton {
      get { return hasSkillButton; }
    }
    public int SkillButton {
      get { return skillButton_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoPower) return false;
        if (!hasIdHotkey) return false;
        if (!hasSkillButton) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillKeyMappingFieldNames;
      if (hasSnoPower) {
        output.WriteSFixed32(1, field_names[2], SnoPower);
      }
      if (hasIdHotkey) {
        output.WriteSInt32(2, field_names[0], IdHotkey);
      }
      if (hasSkillButton) {
        output.WriteSInt32(3, field_names[1], SkillButton);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoPower) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoPower);
        }
        if (hasIdHotkey) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, IdHotkey);
        }
        if (hasSkillButton) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, SkillButton);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillKeyMapping ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillKeyMapping ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillKeyMapping ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillKeyMapping ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillKeyMapping MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillKeyMapping prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillKeyMapping, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillKeyMapping cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillKeyMapping result;
      
      private SkillKeyMapping PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillKeyMapping original = result;
          result = new SkillKeyMapping();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillKeyMapping MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SkillKeyMapping.Descriptor; }
      }
      
      public override SkillKeyMapping DefaultInstanceForType {
        get { return global::D3.Hero.SkillKeyMapping.DefaultInstance; }
      }
      
      public override SkillKeyMapping BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillKeyMapping) {
          return MergeFrom((SkillKeyMapping) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillKeyMapping other) {
        if (other == global::D3.Hero.SkillKeyMapping.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoPower) {
          SnoPower = other.SnoPower;
        }
        if (other.HasIdHotkey) {
          IdHotkey = other.IdHotkey;
        }
        if (other.HasSkillButton) {
          SkillButton = other.SkillButton;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillKeyMappingFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillKeyMappingFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoPower = input.ReadSFixed32(ref result.snoPower_);
              break;
            }
            case 16: {
              result.hasIdHotkey = input.ReadSInt32(ref result.idHotkey_);
              break;
            }
            case 24: {
              result.hasSkillButton = input.ReadSInt32(ref result.skillButton_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoPower {
        get { return result.hasSnoPower; }
      }
      public int SnoPower {
        get { return result.SnoPower; }
        set { SetSnoPower(value); }
      }
      public Builder SetSnoPower(int value) {
        PrepareBuilder();
        result.hasSnoPower = true;
        result.snoPower_ = value;
        return this;
      }
      public Builder ClearSnoPower() {
        PrepareBuilder();
        result.hasSnoPower = false;
        result.snoPower_ = -1;
        return this;
      }
      
      public bool HasIdHotkey {
        get { return result.hasIdHotkey; }
      }
      public int IdHotkey {
        get { return result.IdHotkey; }
        set { SetIdHotkey(value); }
      }
      public Builder SetIdHotkey(int value) {
        PrepareBuilder();
        result.hasIdHotkey = true;
        result.idHotkey_ = value;
        return this;
      }
      public Builder ClearIdHotkey() {
        PrepareBuilder();
        result.hasIdHotkey = false;
        result.idHotkey_ = -1;
        return this;
      }
      
      public bool HasSkillButton {
        get { return result.hasSkillButton; }
      }
      public int SkillButton {
        get { return result.SkillButton; }
        set { SetSkillButton(value); }
      }
      public Builder SetSkillButton(int value) {
        PrepareBuilder();
        result.hasSkillButton = true;
        result.skillButton_ = value;
        return this;
      }
      public Builder ClearSkillButton() {
        PrepareBuilder();
        result.hasSkillButton = false;
        result.skillButton_ = 0;
        return this;
      }
    }
    static SkillKeyMapping() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedQuest : pb::GeneratedMessage<SavedQuest, SavedQuest.Builder> {
    private SavedQuest() { }
    private static readonly SavedQuest defaultInstance = new SavedQuest().MakeReadOnly();
    private static readonly string[] _savedQuestFieldNames = new string[] { "current_step_uid", "difficulty", "failure_condition_state", "objective_state", "sno_quest" };
    private static readonly uint[] _savedQuestFieldTags = new uint[] { 24, 16, 42, 34, 13 };
    public static SavedQuest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedQuest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedQuest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedQuest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedQuest, SavedQuest.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedQuest__FieldAccessorTable; }
    }
    
    public const int SnoQuestFieldNumber = 1;
    private bool hasSnoQuest;
    private int snoQuest_ = -1;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int DifficultyFieldNumber = 2;
    private bool hasDifficulty;
    private int difficulty_;
    public bool HasDifficulty {
      get { return hasDifficulty; }
    }
    public int Difficulty {
      get { return difficulty_; }
    }
    
    public const int CurrentStepUidFieldNumber = 3;
    private bool hasCurrentStepUid;
    private int currentStepUid_ = -1;
    public bool HasCurrentStepUid {
      get { return hasCurrentStepUid; }
    }
    public int CurrentStepUid {
      get { return currentStepUid_; }
    }
    
    public const int ObjectiveStateFieldNumber = 4;
    private int objectiveStateMemoizedSerializedSize;
    private pbc::PopsicleList<int> objectiveState_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ObjectiveStateList {
      get { return pbc::Lists.AsReadOnly(objectiveState_); }
    }
    public int ObjectiveStateCount {
      get { return objectiveState_.Count; }
    }
    public int GetObjectiveState(int index) {
      return objectiveState_[index];
    }
    
    public const int FailureConditionStateFieldNumber = 5;
    private int failureConditionStateMemoizedSerializedSize;
    private pbc::PopsicleList<int> failureConditionState_ = new pbc::PopsicleList<int>();
    public scg::IList<int> FailureConditionStateList {
      get { return pbc::Lists.AsReadOnly(failureConditionState_); }
    }
    public int FailureConditionStateCount {
      get { return failureConditionState_.Count; }
    }
    public int GetFailureConditionState(int index) {
      return failureConditionState_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoQuest) return false;
        if (!hasDifficulty) return false;
        if (!hasCurrentStepUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedQuestFieldNames;
      if (hasSnoQuest) {
        output.WriteSFixed32(1, field_names[4], SnoQuest);
      }
      if (hasDifficulty) {
        output.WriteSInt32(2, field_names[1], Difficulty);
      }
      if (hasCurrentStepUid) {
        output.WriteSInt32(3, field_names[0], CurrentStepUid);
      }
      if (objectiveState_.Count > 0) {
        output.WritePackedSInt32Array(4, field_names[3], objectiveStateMemoizedSerializedSize, objectiveState_);
      }
      if (failureConditionState_.Count > 0) {
        output.WritePackedSInt32Array(5, field_names[2], failureConditionStateMemoizedSerializedSize, failureConditionState_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoQuest);
        }
        if (hasDifficulty) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Difficulty);
        }
        if (hasCurrentStepUid) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, CurrentStepUid);
        }
        {
          int dataSize = 0;
          foreach (int element in ObjectiveStateList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          if (objectiveState_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          objectiveStateMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (int element in FailureConditionStateList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          if (failureConditionState_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          failureConditionStateMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedQuest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedQuest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedQuest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedQuest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedQuest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedQuest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedQuest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedQuest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedQuest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedQuest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedQuest MakeReadOnly() {
      objectiveState_.MakeReadOnly();
      failureConditionState_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedQuest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedQuest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedQuest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedQuest result;
      
      private SavedQuest PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedQuest original = result;
          result = new SavedQuest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedQuest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedQuest.Descriptor; }
      }
      
      public override SavedQuest DefaultInstanceForType {
        get { return global::D3.Hero.SavedQuest.DefaultInstance; }
      }
      
      public override SavedQuest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedQuest) {
          return MergeFrom((SavedQuest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedQuest other) {
        if (other == global::D3.Hero.SavedQuest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasDifficulty) {
          Difficulty = other.Difficulty;
        }
        if (other.HasCurrentStepUid) {
          CurrentStepUid = other.CurrentStepUid;
        }
        if (other.objectiveState_.Count != 0) {
          result.objectiveState_.Add(other.objectiveState_);
        }
        if (other.failureConditionState_.Count != 0) {
          result.failureConditionState_.Add(other.failureConditionState_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedQuestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedQuestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoQuest = input.ReadSFixed32(ref result.snoQuest_);
              break;
            }
            case 16: {
              result.hasDifficulty = input.ReadSInt32(ref result.difficulty_);
              break;
            }
            case 24: {
              result.hasCurrentStepUid = input.ReadSInt32(ref result.currentStepUid_);
              break;
            }
            case 34:
            case 32: {
              input.ReadSInt32Array(tag, field_name, result.objectiveState_);
              break;
            }
            case 42:
            case 40: {
              input.ReadSInt32Array(tag, field_name, result.failureConditionState_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoQuest {
        get { return result.hasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        PrepareBuilder();
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        PrepareBuilder();
        result.hasSnoQuest = false;
        result.snoQuest_ = -1;
        return this;
      }
      
      public bool HasDifficulty {
        get { return result.hasDifficulty; }
      }
      public int Difficulty {
        get { return result.Difficulty; }
        set { SetDifficulty(value); }
      }
      public Builder SetDifficulty(int value) {
        PrepareBuilder();
        result.hasDifficulty = true;
        result.difficulty_ = value;
        return this;
      }
      public Builder ClearDifficulty() {
        PrepareBuilder();
        result.hasDifficulty = false;
        result.difficulty_ = 0;
        return this;
      }
      
      public bool HasCurrentStepUid {
        get { return result.hasCurrentStepUid; }
      }
      public int CurrentStepUid {
        get { return result.CurrentStepUid; }
        set { SetCurrentStepUid(value); }
      }
      public Builder SetCurrentStepUid(int value) {
        PrepareBuilder();
        result.hasCurrentStepUid = true;
        result.currentStepUid_ = value;
        return this;
      }
      public Builder ClearCurrentStepUid() {
        PrepareBuilder();
        result.hasCurrentStepUid = false;
        result.currentStepUid_ = -1;
        return this;
      }
      
      public pbc::IPopsicleList<int> ObjectiveStateList {
        get { return PrepareBuilder().objectiveState_; }
      }
      public int ObjectiveStateCount {
        get { return result.ObjectiveStateCount; }
      }
      public int GetObjectiveState(int index) {
        return result.GetObjectiveState(index);
      }
      public Builder SetObjectiveState(int index, int value) {
        PrepareBuilder();
        result.objectiveState_[index] = value;
        return this;
      }
      public Builder AddObjectiveState(int value) {
        PrepareBuilder();
        result.objectiveState_.Add(value);
        return this;
      }
      public Builder AddRangeObjectiveState(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.objectiveState_.Add(values);
        return this;
      }
      public Builder ClearObjectiveState() {
        PrepareBuilder();
        result.objectiveState_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> FailureConditionStateList {
        get { return PrepareBuilder().failureConditionState_; }
      }
      public int FailureConditionStateCount {
        get { return result.FailureConditionStateCount; }
      }
      public int GetFailureConditionState(int index) {
        return result.GetFailureConditionState(index);
      }
      public Builder SetFailureConditionState(int index, int value) {
        PrepareBuilder();
        result.failureConditionState_[index] = value;
        return this;
      }
      public Builder AddFailureConditionState(int value) {
        PrepareBuilder();
        result.failureConditionState_.Add(value);
        return this;
      }
      public Builder AddRangeFailureConditionState(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.failureConditionState_.Add(values);
        return this;
      }
      public Builder ClearFailureConditionState() {
        PrepareBuilder();
        result.failureConditionState_.Clear();
        return this;
      }
    }
    static SavedQuest() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LearnedLore : pb::GeneratedMessage<LearnedLore, LearnedLore.Builder> {
    private LearnedLore() { }
    private static readonly LearnedLore defaultInstance = new LearnedLore().MakeReadOnly();
    private static readonly string[] _learnedLoreFieldNames = new string[] { "sno_lore_learned" };
    private static readonly uint[] _learnedLoreFieldTags = new uint[] { 13 };
    public static LearnedLore DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LearnedLore DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LearnedLore ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_LearnedLore__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LearnedLore, LearnedLore.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_LearnedLore__FieldAccessorTable; }
    }
    
    public const int SnoLoreLearnedFieldNumber = 1;
    private pbc::PopsicleList<int> snoLoreLearned_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoLoreLearnedList {
      get { return pbc::Lists.AsReadOnly(snoLoreLearned_); }
    }
    public int SnoLoreLearnedCount {
      get { return snoLoreLearned_.Count; }
    }
    public int GetSnoLoreLearned(int index) {
      return snoLoreLearned_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _learnedLoreFieldNames;
      if (snoLoreLearned_.Count > 0) {
        output.WriteSFixed32Array(1, field_names[0], snoLoreLearned_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * snoLoreLearned_.Count;
          size += dataSize;
          size += 1 * snoLoreLearned_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LearnedLore ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LearnedLore ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LearnedLore ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LearnedLore ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LearnedLore ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LearnedLore ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LearnedLore ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LearnedLore ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LearnedLore ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LearnedLore ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LearnedLore MakeReadOnly() {
      snoLoreLearned_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LearnedLore prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LearnedLore, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LearnedLore cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LearnedLore result;
      
      private LearnedLore PrepareBuilder() {
        if (resultIsReadOnly) {
          LearnedLore original = result;
          result = new LearnedLore();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LearnedLore MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.LearnedLore.Descriptor; }
      }
      
      public override LearnedLore DefaultInstanceForType {
        get { return global::D3.Hero.LearnedLore.DefaultInstance; }
      }
      
      public override LearnedLore BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LearnedLore) {
          return MergeFrom((LearnedLore) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LearnedLore other) {
        if (other == global::D3.Hero.LearnedLore.DefaultInstance) return this;
        PrepareBuilder();
        if (other.snoLoreLearned_.Count != 0) {
          result.snoLoreLearned_.Add(other.snoLoreLearned_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_learnedLoreFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _learnedLoreFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadSFixed32Array(tag, field_name, result.snoLoreLearned_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> SnoLoreLearnedList {
        get { return PrepareBuilder().snoLoreLearned_; }
      }
      public int SnoLoreLearnedCount {
        get { return result.SnoLoreLearnedCount; }
      }
      public int GetSnoLoreLearned(int index) {
        return result.GetSnoLoreLearned(index);
      }
      public Builder SetSnoLoreLearned(int index, int value) {
        PrepareBuilder();
        result.snoLoreLearned_[index] = value;
        return this;
      }
      public Builder AddSnoLoreLearned(int value) {
        PrepareBuilder();
        result.snoLoreLearned_.Add(value);
        return this;
      }
      public Builder AddRangeSnoLoreLearned(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.snoLoreLearned_.Add(values);
        return this;
      }
      public Builder ClearSnoLoreLearned() {
        PrepareBuilder();
        result.snoLoreLearned_.Clear();
        return this;
      }
    }
    static LearnedLore() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedConversations : pb::GeneratedMessage<SavedConversations, SavedConversations.Builder> {
    private SavedConversations() { }
    private static readonly SavedConversations defaultInstance = new SavedConversations().MakeReadOnly();
    private static readonly string[] _savedConversationsFieldNames = new string[] { "played_conversations_bitfield", "sno_saved_conversations" };
    private static readonly uint[] _savedConversationsFieldTags = new uint[] { 10, 21 };
    public static SavedConversations DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedConversations DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedConversations ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedConversations__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedConversations, SavedConversations.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedConversations__FieldAccessorTable; }
    }
    
    public const int PlayedConversationsBitfieldFieldNumber = 1;
    private bool hasPlayedConversationsBitfield;
    private pb::ByteString playedConversationsBitfield_ = pb::ByteString.Empty;
    public bool HasPlayedConversationsBitfield {
      get { return hasPlayedConversationsBitfield; }
    }
    public pb::ByteString PlayedConversationsBitfield {
      get { return playedConversationsBitfield_; }
    }
    
    public const int SnoSavedConversationsFieldNumber = 2;
    private pbc::PopsicleList<int> snoSavedConversations_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoSavedConversationsList {
      get { return pbc::Lists.AsReadOnly(snoSavedConversations_); }
    }
    public int SnoSavedConversationsCount {
      get { return snoSavedConversations_.Count; }
    }
    public int GetSnoSavedConversations(int index) {
      return snoSavedConversations_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayedConversationsBitfield) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedConversationsFieldNames;
      if (hasPlayedConversationsBitfield) {
        output.WriteBytes(1, field_names[0], PlayedConversationsBitfield);
      }
      if (snoSavedConversations_.Count > 0) {
        output.WriteSFixed32Array(2, field_names[1], snoSavedConversations_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayedConversationsBitfield) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, PlayedConversationsBitfield);
        }
        {
          int dataSize = 0;
          dataSize = 4 * snoSavedConversations_.Count;
          size += dataSize;
          size += 1 * snoSavedConversations_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedConversations ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedConversations ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedConversations ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedConversations ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedConversations ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedConversations ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedConversations ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedConversations ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedConversations ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedConversations ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedConversations MakeReadOnly() {
      snoSavedConversations_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedConversations prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedConversations, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedConversations cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedConversations result;
      
      private SavedConversations PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedConversations original = result;
          result = new SavedConversations();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedConversations MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedConversations.Descriptor; }
      }
      
      public override SavedConversations DefaultInstanceForType {
        get { return global::D3.Hero.SavedConversations.DefaultInstance; }
      }
      
      public override SavedConversations BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedConversations) {
          return MergeFrom((SavedConversations) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedConversations other) {
        if (other == global::D3.Hero.SavedConversations.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayedConversationsBitfield) {
          PlayedConversationsBitfield = other.PlayedConversationsBitfield;
        }
        if (other.snoSavedConversations_.Count != 0) {
          result.snoSavedConversations_.Add(other.snoSavedConversations_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedConversationsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedConversationsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayedConversationsBitfield = input.ReadBytes(ref result.playedConversationsBitfield_);
              break;
            }
            case 18:
            case 21: {
              input.ReadSFixed32Array(tag, field_name, result.snoSavedConversations_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayedConversationsBitfield {
        get { return result.hasPlayedConversationsBitfield; }
      }
      public pb::ByteString PlayedConversationsBitfield {
        get { return result.PlayedConversationsBitfield; }
        set { SetPlayedConversationsBitfield(value); }
      }
      public Builder SetPlayedConversationsBitfield(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayedConversationsBitfield = true;
        result.playedConversationsBitfield_ = value;
        return this;
      }
      public Builder ClearPlayedConversationsBitfield() {
        PrepareBuilder();
        result.hasPlayedConversationsBitfield = false;
        result.playedConversationsBitfield_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<int> SnoSavedConversationsList {
        get { return PrepareBuilder().snoSavedConversations_; }
      }
      public int SnoSavedConversationsCount {
        get { return result.SnoSavedConversationsCount; }
      }
      public int GetSnoSavedConversations(int index) {
        return result.GetSnoSavedConversations(index);
      }
      public Builder SetSnoSavedConversations(int index, int value) {
        PrepareBuilder();
        result.snoSavedConversations_[index] = value;
        return this;
      }
      public Builder AddSnoSavedConversations(int value) {
        PrepareBuilder();
        result.snoSavedConversations_.Add(value);
        return this;
      }
      public Builder AddRangeSnoSavedConversations(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.snoSavedConversations_.Add(values);
        return this;
      }
      public Builder ClearSnoSavedConversations() {
        PrepareBuilder();
        result.snoSavedConversations_.Clear();
        return this;
      }
    }
    static SavedConversations() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavePointData_Proto : pb::GeneratedMessage<SavePointData_Proto, SavePointData_Proto.Builder> {
    private SavePointData_Proto() { }
    private static readonly SavePointData_Proto defaultInstance = new SavePointData_Proto().MakeReadOnly();
    private static readonly string[] _savePointDataProtoFieldNames = new string[] { "creates_portal", "savepoint_number", "sno_world" };
    private static readonly uint[] _savePointDataProtoFieldTags = new uint[] { 24, 16, 13 };
    public static SavePointData_Proto DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavePointData_Proto DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavePointData_Proto ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavePointData_Proto__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavePointData_Proto, SavePointData_Proto.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavePointData_Proto__FieldAccessorTable; }
    }
    
    public const int SnoWorldFieldNumber = 1;
    private bool hasSnoWorld;
    private int snoWorld_ = -1;
    public bool HasSnoWorld {
      get { return hasSnoWorld; }
    }
    public int SnoWorld {
      get { return snoWorld_; }
    }
    
    public const int SavepointNumberFieldNumber = 2;
    private bool hasSavepointNumber;
    private int savepointNumber_ = -1;
    public bool HasSavepointNumber {
      get { return hasSavepointNumber; }
    }
    public int SavepointNumber {
      get { return savepointNumber_; }
    }
    
    public const int CreatesPortalFieldNumber = 3;
    private bool hasCreatesPortal;
    private uint createsPortal_;
    public bool HasCreatesPortal {
      get { return hasCreatesPortal; }
    }
    public uint CreatesPortal {
      get { return createsPortal_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoWorld) return false;
        if (!hasSavepointNumber) return false;
        if (!hasCreatesPortal) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savePointDataProtoFieldNames;
      if (hasSnoWorld) {
        output.WriteSFixed32(1, field_names[2], SnoWorld);
      }
      if (hasSavepointNumber) {
        output.WriteSInt32(2, field_names[1], SavepointNumber);
      }
      if (hasCreatesPortal) {
        output.WriteUInt32(3, field_names[0], CreatesPortal);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoWorld) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoWorld);
        }
        if (hasSavepointNumber) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, SavepointNumber);
        }
        if (hasCreatesPortal) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, CreatesPortal);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavePointData_Proto ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavePointData_Proto ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavePointData_Proto ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavePointData_Proto MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavePointData_Proto prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavePointData_Proto, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavePointData_Proto cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavePointData_Proto result;
      
      private SavePointData_Proto PrepareBuilder() {
        if (resultIsReadOnly) {
          SavePointData_Proto original = result;
          result = new SavePointData_Proto();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavePointData_Proto MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavePointData_Proto.Descriptor; }
      }
      
      public override SavePointData_Proto DefaultInstanceForType {
        get { return global::D3.Hero.SavePointData_Proto.DefaultInstance; }
      }
      
      public override SavePointData_Proto BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavePointData_Proto) {
          return MergeFrom((SavePointData_Proto) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavePointData_Proto other) {
        if (other == global::D3.Hero.SavePointData_Proto.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoWorld) {
          SnoWorld = other.SnoWorld;
        }
        if (other.HasSavepointNumber) {
          SavepointNumber = other.SavepointNumber;
        }
        if (other.HasCreatesPortal) {
          CreatesPortal = other.CreatesPortal;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savePointDataProtoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savePointDataProtoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoWorld = input.ReadSFixed32(ref result.snoWorld_);
              break;
            }
            case 16: {
              result.hasSavepointNumber = input.ReadSInt32(ref result.savepointNumber_);
              break;
            }
            case 24: {
              result.hasCreatesPortal = input.ReadUInt32(ref result.createsPortal_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoWorld {
        get { return result.hasSnoWorld; }
      }
      public int SnoWorld {
        get { return result.SnoWorld; }
        set { SetSnoWorld(value); }
      }
      public Builder SetSnoWorld(int value) {
        PrepareBuilder();
        result.hasSnoWorld = true;
        result.snoWorld_ = value;
        return this;
      }
      public Builder ClearSnoWorld() {
        PrepareBuilder();
        result.hasSnoWorld = false;
        result.snoWorld_ = -1;
        return this;
      }
      
      public bool HasSavepointNumber {
        get { return result.hasSavepointNumber; }
      }
      public int SavepointNumber {
        get { return result.SavepointNumber; }
        set { SetSavepointNumber(value); }
      }
      public Builder SetSavepointNumber(int value) {
        PrepareBuilder();
        result.hasSavepointNumber = true;
        result.savepointNumber_ = value;
        return this;
      }
      public Builder ClearSavepointNumber() {
        PrepareBuilder();
        result.hasSavepointNumber = false;
        result.savepointNumber_ = -1;
        return this;
      }
      
      public bool HasCreatesPortal {
        get { return result.hasCreatesPortal; }
      }
      public uint CreatesPortal {
        get { return result.CreatesPortal; }
        set { SetCreatesPortal(value); }
      }
      public Builder SetCreatesPortal(uint value) {
        PrepareBuilder();
        result.hasCreatesPortal = true;
        result.createsPortal_ = value;
        return this;
      }
      public Builder ClearCreatesPortal() {
        PrepareBuilder();
        result.hasCreatesPortal = false;
        result.createsPortal_ = 0;
        return this;
      }
    }
    static SavePointData_Proto() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedData : pb::GeneratedMessage<SavedData, SavedData.Builder> {
    private SavedData() { }
    private static readonly SavedData defaultInstance = new SavedData().MakeReadOnly();
    private static readonly string[] _savedDataFieldNames = new string[] { "activated_waypoints", "hireling_saved_data", "hotbar_button_assignments", "last_level_time", "learned_lore", "save_point", "saved_conversations", "seen_tutorials", "skill_key_map", "sno_active_skills", "sno_traits", "time_played" };
    private static readonly uint[] _savedDataFieldTags = new uint[] { 32, 42, 10, 48, 58, 98, 66, 93, 18, 77, 85, 24 };
    public static SavedData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedData, SavedData.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedData__FieldAccessorTable; }
    }
    
    public const int HotbarButtonAssignmentsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.HotbarButtonData> hotbarButtonAssignments_ = new pbc::PopsicleList<global::D3.Hero.HotbarButtonData>();
    public scg::IList<global::D3.Hero.HotbarButtonData> HotbarButtonAssignmentsList {
      get { return hotbarButtonAssignments_; }
    }
    public int HotbarButtonAssignmentsCount {
      get { return hotbarButtonAssignments_.Count; }
    }
    public global::D3.Hero.HotbarButtonData GetHotbarButtonAssignments(int index) {
      return hotbarButtonAssignments_[index];
    }
    
    public const int SkillKeyMapFieldNumber = 2;
    private pbc::PopsicleList<global::D3.Hero.SkillKeyMapping> skillKeyMap_ = new pbc::PopsicleList<global::D3.Hero.SkillKeyMapping>();
    public scg::IList<global::D3.Hero.SkillKeyMapping> SkillKeyMapList {
      get { return skillKeyMap_; }
    }
    public int SkillKeyMapCount {
      get { return skillKeyMap_.Count; }
    }
    public global::D3.Hero.SkillKeyMapping GetSkillKeyMap(int index) {
      return skillKeyMap_[index];
    }
    
    public const int TimePlayedFieldNumber = 3;
    private bool hasTimePlayed;
    private uint timePlayed_;
    public bool HasTimePlayed {
      get { return hasTimePlayed; }
    }
    public uint TimePlayed {
      get { return timePlayed_; }
    }
    
    public const int ActivatedWaypointsFieldNumber = 4;
    private bool hasActivatedWaypoints;
    private uint activatedWaypoints_;
    public bool HasActivatedWaypoints {
      get { return hasActivatedWaypoints; }
    }
    public uint ActivatedWaypoints {
      get { return activatedWaypoints_; }
    }
    
    public const int HirelingSavedDataFieldNumber = 5;
    private bool hasHirelingSavedData;
    private global::D3.Hireling.SavedData hirelingSavedData_;
    public bool HasHirelingSavedData {
      get { return hasHirelingSavedData; }
    }
    public global::D3.Hireling.SavedData HirelingSavedData {
      get { return hirelingSavedData_ ?? global::D3.Hireling.SavedData.DefaultInstance; }
    }
    
    public const int LastLevelTimeFieldNumber = 6;
    private bool hasLastLevelTime;
    private uint lastLevelTime_;
    public bool HasLastLevelTime {
      get { return hasLastLevelTime; }
    }
    public uint LastLevelTime {
      get { return lastLevelTime_; }
    }
    
    public const int LearnedLoreFieldNumber = 7;
    private bool hasLearnedLore;
    private global::D3.Hero.LearnedLore learnedLore_;
    public bool HasLearnedLore {
      get { return hasLearnedLore; }
    }
    public global::D3.Hero.LearnedLore LearnedLore {
      get { return learnedLore_ ?? global::D3.Hero.LearnedLore.DefaultInstance; }
    }
    
    public const int SavedConversationsFieldNumber = 8;
    private bool hasSavedConversations;
    private global::D3.Hero.SavedConversations savedConversations_;
    public bool HasSavedConversations {
      get { return hasSavedConversations; }
    }
    public global::D3.Hero.SavedConversations SavedConversations {
      get { return savedConversations_ ?? global::D3.Hero.SavedConversations.DefaultInstance; }
    }
    
    public const int SnoActiveSkillsFieldNumber = 9;
    private pbc::PopsicleList<int> snoActiveSkills_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoActiveSkillsList {
      get { return pbc::Lists.AsReadOnly(snoActiveSkills_); }
    }
    public int SnoActiveSkillsCount {
      get { return snoActiveSkills_.Count; }
    }
    public int GetSnoActiveSkills(int index) {
      return snoActiveSkills_[index];
    }
    
    public const int SnoTraitsFieldNumber = 10;
    private pbc::PopsicleList<int> snoTraits_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoTraitsList {
      get { return pbc::Lists.AsReadOnly(snoTraits_); }
    }
    public int SnoTraitsCount {
      get { return snoTraits_.Count; }
    }
    public int GetSnoTraits(int index) {
      return snoTraits_[index];
    }
    
    public const int SeenTutorialsFieldNumber = 11;
    private pbc::PopsicleList<int> seenTutorials_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SeenTutorialsList {
      get { return pbc::Lists.AsReadOnly(seenTutorials_); }
    }
    public int SeenTutorialsCount {
      get { return seenTutorials_.Count; }
    }
    public int GetSeenTutorials(int index) {
      return seenTutorials_[index];
    }
    
    public const int SavePointFieldNumber = 12;
    private bool hasSavePoint;
    private global::D3.Hero.SavePointData_Proto savePoint_;
    public bool HasSavePoint {
      get { return hasSavePoint; }
    }
    public global::D3.Hero.SavePointData_Proto SavePoint {
      get { return savePoint_ ?? global::D3.Hero.SavePointData_Proto.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimePlayed) return false;
        if (!hasActivatedWaypoints) return false;
        if (!hasHirelingSavedData) return false;
        if (!hasLastLevelTime) return false;
        if (!hasLearnedLore) return false;
        if (!hasSavedConversations) return false;
        if (!hasSavePoint) return false;
        foreach (global::D3.Hero.HotbarButtonData element in HotbarButtonAssignmentsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::D3.Hero.SkillKeyMapping element in SkillKeyMapList) {
          if (!element.IsInitialized) return false;
        }
        if (!HirelingSavedData.IsInitialized) return false;
        if (!SavedConversations.IsInitialized) return false;
        if (!SavePoint.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedDataFieldNames;
      if (hotbarButtonAssignments_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], hotbarButtonAssignments_);
      }
      if (skillKeyMap_.Count > 0) {
        output.WriteMessageArray(2, field_names[8], skillKeyMap_);
      }
      if (hasTimePlayed) {
        output.WriteUInt32(3, field_names[11], TimePlayed);
      }
      if (hasActivatedWaypoints) {
        output.WriteUInt32(4, field_names[0], ActivatedWaypoints);
      }
      if (hasHirelingSavedData) {
        output.WriteMessage(5, field_names[1], HirelingSavedData);
      }
      if (hasLastLevelTime) {
        output.WriteUInt32(6, field_names[3], LastLevelTime);
      }
      if (hasLearnedLore) {
        output.WriteMessage(7, field_names[4], LearnedLore);
      }
      if (hasSavedConversations) {
        output.WriteMessage(8, field_names[6], SavedConversations);
      }
      if (snoActiveSkills_.Count > 0) {
        output.WriteSFixed32Array(9, field_names[9], snoActiveSkills_);
      }
      if (snoTraits_.Count > 0) {
        output.WriteSFixed32Array(10, field_names[10], snoTraits_);
      }
      if (seenTutorials_.Count > 0) {
        output.WriteSFixed32Array(11, field_names[7], seenTutorials_);
      }
      if (hasSavePoint) {
        output.WriteMessage(12, field_names[5], SavePoint);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.HotbarButtonData element in HotbarButtonAssignmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::D3.Hero.SkillKeyMapping element in SkillKeyMapList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasTimePlayed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, TimePlayed);
        }
        if (hasActivatedWaypoints) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, ActivatedWaypoints);
        }
        if (hasHirelingSavedData) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, HirelingSavedData);
        }
        if (hasLastLevelTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, LastLevelTime);
        }
        if (hasLearnedLore) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, LearnedLore);
        }
        if (hasSavedConversations) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, SavedConversations);
        }
        {
          int dataSize = 0;
          dataSize = 4 * snoActiveSkills_.Count;
          size += dataSize;
          size += 1 * snoActiveSkills_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 4 * snoTraits_.Count;
          size += dataSize;
          size += 1 * snoTraits_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 4 * seenTutorials_.Count;
          size += dataSize;
          size += 1 * seenTutorials_.Count;
        }
        if (hasSavePoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, SavePoint);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedData MakeReadOnly() {
      hotbarButtonAssignments_.MakeReadOnly();
      skillKeyMap_.MakeReadOnly();
      snoActiveSkills_.MakeReadOnly();
      snoTraits_.MakeReadOnly();
      seenTutorials_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedData result;
      
      private SavedData PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedData original = result;
          result = new SavedData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedData.Descriptor; }
      }
      
      public override SavedData DefaultInstanceForType {
        get { return global::D3.Hero.SavedData.DefaultInstance; }
      }
      
      public override SavedData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedData) {
          return MergeFrom((SavedData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedData other) {
        if (other == global::D3.Hero.SavedData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.hotbarButtonAssignments_.Count != 0) {
          result.hotbarButtonAssignments_.Add(other.hotbarButtonAssignments_);
        }
        if (other.skillKeyMap_.Count != 0) {
          result.skillKeyMap_.Add(other.skillKeyMap_);
        }
        if (other.HasTimePlayed) {
          TimePlayed = other.TimePlayed;
        }
        if (other.HasActivatedWaypoints) {
          ActivatedWaypoints = other.ActivatedWaypoints;
        }
        if (other.HasHirelingSavedData) {
          MergeHirelingSavedData(other.HirelingSavedData);
        }
        if (other.HasLastLevelTime) {
          LastLevelTime = other.LastLevelTime;
        }
        if (other.HasLearnedLore) {
          MergeLearnedLore(other.LearnedLore);
        }
        if (other.HasSavedConversations) {
          MergeSavedConversations(other.SavedConversations);
        }
        if (other.snoActiveSkills_.Count != 0) {
          result.snoActiveSkills_.Add(other.snoActiveSkills_);
        }
        if (other.snoTraits_.Count != 0) {
          result.snoTraits_.Add(other.snoTraits_);
        }
        if (other.seenTutorials_.Count != 0) {
          result.seenTutorials_.Add(other.seenTutorials_);
        }
        if (other.HasSavePoint) {
          MergeSavePoint(other.SavePoint);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.hotbarButtonAssignments_, global::D3.Hero.HotbarButtonData.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.skillKeyMap_, global::D3.Hero.SkillKeyMapping.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasTimePlayed = input.ReadUInt32(ref result.timePlayed_);
              break;
            }
            case 32: {
              result.hasActivatedWaypoints = input.ReadUInt32(ref result.activatedWaypoints_);
              break;
            }
            case 42: {
              global::D3.Hireling.SavedData.Builder subBuilder = global::D3.Hireling.SavedData.CreateBuilder();
              if (result.hasHirelingSavedData) {
                subBuilder.MergeFrom(HirelingSavedData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HirelingSavedData = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasLastLevelTime = input.ReadUInt32(ref result.lastLevelTime_);
              break;
            }
            case 58: {
              global::D3.Hero.LearnedLore.Builder subBuilder = global::D3.Hero.LearnedLore.CreateBuilder();
              if (result.hasLearnedLore) {
                subBuilder.MergeFrom(LearnedLore);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LearnedLore = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::D3.Hero.SavedConversations.Builder subBuilder = global::D3.Hero.SavedConversations.CreateBuilder();
              if (result.hasSavedConversations) {
                subBuilder.MergeFrom(SavedConversations);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedConversations = subBuilder.BuildPartial();
              break;
            }
            case 74:
            case 77: {
              input.ReadSFixed32Array(tag, field_name, result.snoActiveSkills_);
              break;
            }
            case 82:
            case 85: {
              input.ReadSFixed32Array(tag, field_name, result.snoTraits_);
              break;
            }
            case 90:
            case 93: {
              input.ReadSFixed32Array(tag, field_name, result.seenTutorials_);
              break;
            }
            case 98: {
              global::D3.Hero.SavePointData_Proto.Builder subBuilder = global::D3.Hero.SavePointData_Proto.CreateBuilder();
              if (result.hasSavePoint) {
                subBuilder.MergeFrom(SavePoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavePoint = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.HotbarButtonData> HotbarButtonAssignmentsList {
        get { return PrepareBuilder().hotbarButtonAssignments_; }
      }
      public int HotbarButtonAssignmentsCount {
        get { return result.HotbarButtonAssignmentsCount; }
      }
      public global::D3.Hero.HotbarButtonData GetHotbarButtonAssignments(int index) {
        return result.GetHotbarButtonAssignments(index);
      }
      public Builder SetHotbarButtonAssignments(int index, global::D3.Hero.HotbarButtonData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hotbarButtonAssignments_[index] = value;
        return this;
      }
      public Builder SetHotbarButtonAssignments(int index, global::D3.Hero.HotbarButtonData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hotbarButtonAssignments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHotbarButtonAssignments(global::D3.Hero.HotbarButtonData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hotbarButtonAssignments_.Add(value);
        return this;
      }
      public Builder AddHotbarButtonAssignments(global::D3.Hero.HotbarButtonData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hotbarButtonAssignments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHotbarButtonAssignments(scg::IEnumerable<global::D3.Hero.HotbarButtonData> values) {
        PrepareBuilder();
        result.hotbarButtonAssignments_.Add(values);
        return this;
      }
      public Builder ClearHotbarButtonAssignments() {
        PrepareBuilder();
        result.hotbarButtonAssignments_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.SkillKeyMapping> SkillKeyMapList {
        get { return PrepareBuilder().skillKeyMap_; }
      }
      public int SkillKeyMapCount {
        get { return result.SkillKeyMapCount; }
      }
      public global::D3.Hero.SkillKeyMapping GetSkillKeyMap(int index) {
        return result.GetSkillKeyMap(index);
      }
      public Builder SetSkillKeyMap(int index, global::D3.Hero.SkillKeyMapping value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillKeyMap_[index] = value;
        return this;
      }
      public Builder SetSkillKeyMap(int index, global::D3.Hero.SkillKeyMapping.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skillKeyMap_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkillKeyMap(global::D3.Hero.SkillKeyMapping value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillKeyMap_.Add(value);
        return this;
      }
      public Builder AddSkillKeyMap(global::D3.Hero.SkillKeyMapping.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skillKeyMap_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkillKeyMap(scg::IEnumerable<global::D3.Hero.SkillKeyMapping> values) {
        PrepareBuilder();
        result.skillKeyMap_.Add(values);
        return this;
      }
      public Builder ClearSkillKeyMap() {
        PrepareBuilder();
        result.skillKeyMap_.Clear();
        return this;
      }
      
      public bool HasTimePlayed {
        get { return result.hasTimePlayed; }
      }
      public uint TimePlayed {
        get { return result.TimePlayed; }
        set { SetTimePlayed(value); }
      }
      public Builder SetTimePlayed(uint value) {
        PrepareBuilder();
        result.hasTimePlayed = true;
        result.timePlayed_ = value;
        return this;
      }
      public Builder ClearTimePlayed() {
        PrepareBuilder();
        result.hasTimePlayed = false;
        result.timePlayed_ = 0;
        return this;
      }
      
      public bool HasActivatedWaypoints {
        get { return result.hasActivatedWaypoints; }
      }
      public uint ActivatedWaypoints {
        get { return result.ActivatedWaypoints; }
        set { SetActivatedWaypoints(value); }
      }
      public Builder SetActivatedWaypoints(uint value) {
        PrepareBuilder();
        result.hasActivatedWaypoints = true;
        result.activatedWaypoints_ = value;
        return this;
      }
      public Builder ClearActivatedWaypoints() {
        PrepareBuilder();
        result.hasActivatedWaypoints = false;
        result.activatedWaypoints_ = 0;
        return this;
      }
      
      public bool HasHirelingSavedData {
       get { return result.hasHirelingSavedData; }
      }
      public global::D3.Hireling.SavedData HirelingSavedData {
        get { return result.HirelingSavedData; }
        set { SetHirelingSavedData(value); }
      }
      public Builder SetHirelingSavedData(global::D3.Hireling.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHirelingSavedData = true;
        result.hirelingSavedData_ = value;
        return this;
      }
      public Builder SetHirelingSavedData(global::D3.Hireling.SavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHirelingSavedData = true;
        result.hirelingSavedData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHirelingSavedData(global::D3.Hireling.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHirelingSavedData &&
            result.hirelingSavedData_ != global::D3.Hireling.SavedData.DefaultInstance) {
            result.hirelingSavedData_ = global::D3.Hireling.SavedData.CreateBuilder(result.hirelingSavedData_).MergeFrom(value).BuildPartial();
        } else {
          result.hirelingSavedData_ = value;
        }
        result.hasHirelingSavedData = true;
        return this;
      }
      public Builder ClearHirelingSavedData() {
        PrepareBuilder();
        result.hasHirelingSavedData = false;
        result.hirelingSavedData_ = null;
        return this;
      }
      
      public bool HasLastLevelTime {
        get { return result.hasLastLevelTime; }
      }
      public uint LastLevelTime {
        get { return result.LastLevelTime; }
        set { SetLastLevelTime(value); }
      }
      public Builder SetLastLevelTime(uint value) {
        PrepareBuilder();
        result.hasLastLevelTime = true;
        result.lastLevelTime_ = value;
        return this;
      }
      public Builder ClearLastLevelTime() {
        PrepareBuilder();
        result.hasLastLevelTime = false;
        result.lastLevelTime_ = 0;
        return this;
      }
      
      public bool HasLearnedLore {
       get { return result.hasLearnedLore; }
      }
      public global::D3.Hero.LearnedLore LearnedLore {
        get { return result.LearnedLore; }
        set { SetLearnedLore(value); }
      }
      public Builder SetLearnedLore(global::D3.Hero.LearnedLore value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLearnedLore = true;
        result.learnedLore_ = value;
        return this;
      }
      public Builder SetLearnedLore(global::D3.Hero.LearnedLore.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLearnedLore = true;
        result.learnedLore_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLearnedLore(global::D3.Hero.LearnedLore value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLearnedLore &&
            result.learnedLore_ != global::D3.Hero.LearnedLore.DefaultInstance) {
            result.learnedLore_ = global::D3.Hero.LearnedLore.CreateBuilder(result.learnedLore_).MergeFrom(value).BuildPartial();
        } else {
          result.learnedLore_ = value;
        }
        result.hasLearnedLore = true;
        return this;
      }
      public Builder ClearLearnedLore() {
        PrepareBuilder();
        result.hasLearnedLore = false;
        result.learnedLore_ = null;
        return this;
      }
      
      public bool HasSavedConversations {
       get { return result.hasSavedConversations; }
      }
      public global::D3.Hero.SavedConversations SavedConversations {
        get { return result.SavedConversations; }
        set { SetSavedConversations(value); }
      }
      public Builder SetSavedConversations(global::D3.Hero.SavedConversations value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavedConversations = true;
        result.savedConversations_ = value;
        return this;
      }
      public Builder SetSavedConversations(global::D3.Hero.SavedConversations.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavedConversations = true;
        result.savedConversations_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedConversations(global::D3.Hero.SavedConversations value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavedConversations &&
            result.savedConversations_ != global::D3.Hero.SavedConversations.DefaultInstance) {
            result.savedConversations_ = global::D3.Hero.SavedConversations.CreateBuilder(result.savedConversations_).MergeFrom(value).BuildPartial();
        } else {
          result.savedConversations_ = value;
        }
        result.hasSavedConversations = true;
        return this;
      }
      public Builder ClearSavedConversations() {
        PrepareBuilder();
        result.hasSavedConversations = false;
        result.savedConversations_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> SnoActiveSkillsList {
        get { return PrepareBuilder().snoActiveSkills_; }
      }
      public int SnoActiveSkillsCount {
        get { return result.SnoActiveSkillsCount; }
      }
      public int GetSnoActiveSkills(int index) {
        return result.GetSnoActiveSkills(index);
      }
      public Builder SetSnoActiveSkills(int index, int value) {
        PrepareBuilder();
        result.snoActiveSkills_[index] = value;
        return this;
      }
      public Builder AddSnoActiveSkills(int value) {
        PrepareBuilder();
        result.snoActiveSkills_.Add(value);
        return this;
      }
      public Builder AddRangeSnoActiveSkills(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.snoActiveSkills_.Add(values);
        return this;
      }
      public Builder ClearSnoActiveSkills() {
        PrepareBuilder();
        result.snoActiveSkills_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> SnoTraitsList {
        get { return PrepareBuilder().snoTraits_; }
      }
      public int SnoTraitsCount {
        get { return result.SnoTraitsCount; }
      }
      public int GetSnoTraits(int index) {
        return result.GetSnoTraits(index);
      }
      public Builder SetSnoTraits(int index, int value) {
        PrepareBuilder();
        result.snoTraits_[index] = value;
        return this;
      }
      public Builder AddSnoTraits(int value) {
        PrepareBuilder();
        result.snoTraits_.Add(value);
        return this;
      }
      public Builder AddRangeSnoTraits(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.snoTraits_.Add(values);
        return this;
      }
      public Builder ClearSnoTraits() {
        PrepareBuilder();
        result.snoTraits_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> SeenTutorialsList {
        get { return PrepareBuilder().seenTutorials_; }
      }
      public int SeenTutorialsCount {
        get { return result.SeenTutorialsCount; }
      }
      public int GetSeenTutorials(int index) {
        return result.GetSeenTutorials(index);
      }
      public Builder SetSeenTutorials(int index, int value) {
        PrepareBuilder();
        result.seenTutorials_[index] = value;
        return this;
      }
      public Builder AddSeenTutorials(int value) {
        PrepareBuilder();
        result.seenTutorials_.Add(value);
        return this;
      }
      public Builder AddRangeSeenTutorials(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.seenTutorials_.Add(values);
        return this;
      }
      public Builder ClearSeenTutorials() {
        PrepareBuilder();
        result.seenTutorials_.Clear();
        return this;
      }
      
      public bool HasSavePoint {
       get { return result.hasSavePoint; }
      }
      public global::D3.Hero.SavePointData_Proto SavePoint {
        get { return result.SavePoint; }
        set { SetSavePoint(value); }
      }
      public Builder SetSavePoint(global::D3.Hero.SavePointData_Proto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavePoint = true;
        result.savePoint_ = value;
        return this;
      }
      public Builder SetSavePoint(global::D3.Hero.SavePointData_Proto.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavePoint = true;
        result.savePoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavePoint(global::D3.Hero.SavePointData_Proto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavePoint &&
            result.savePoint_ != global::D3.Hero.SavePointData_Proto.DefaultInstance) {
            result.savePoint_ = global::D3.Hero.SavePointData_Proto.CreateBuilder(result.savePoint_).MergeFrom(value).BuildPartial();
        } else {
          result.savePoint_ = value;
        }
        result.hasSavePoint = true;
        return this;
      }
      public Builder ClearSavePoint() {
        PrepareBuilder();
        result.hasSavePoint = false;
        result.savePoint_ = null;
        return this;
      }
    }
    static SavedData() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Timestamps : pb::GeneratedMessage<Timestamps, Timestamps.Builder> {
    private Timestamps() { }
    private static readonly Timestamps defaultInstance = new Timestamps().MakeReadOnly();
    private static readonly string[] _timestampsFieldNames = new string[] { "create_time", "delete_time" };
    private static readonly uint[] _timestampsFieldTags = new uint[] { 8, 16 };
    public static Timestamps DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Timestamps DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Timestamps ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Timestamps__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Timestamps, Timestamps.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Timestamps__FieldAccessorTable; }
    }
    
    public const int CreateTimeFieldNumber = 1;
    private bool hasCreateTime;
    private long createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public long CreateTime {
      get { return createTime_; }
    }
    
    public const int DeleteTimeFieldNumber = 2;
    private bool hasDeleteTime;
    private long deleteTime_;
    public bool HasDeleteTime {
      get { return hasDeleteTime; }
    }
    public long DeleteTime {
      get { return deleteTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCreateTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _timestampsFieldNames;
      if (hasCreateTime) {
        output.WriteSInt64(1, field_names[0], CreateTime);
      }
      if (hasDeleteTime) {
        output.WriteSInt64(2, field_names[1], DeleteTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(1, CreateTime);
        }
        if (hasDeleteTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(2, DeleteTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Timestamps ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Timestamps ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Timestamps ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Timestamps ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Timestamps ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Timestamps ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Timestamps ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Timestamps ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Timestamps ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Timestamps ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Timestamps MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Timestamps prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Timestamps, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Timestamps cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Timestamps result;
      
      private Timestamps PrepareBuilder() {
        if (resultIsReadOnly) {
          Timestamps original = result;
          result = new Timestamps();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Timestamps MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.Timestamps.Descriptor; }
      }
      
      public override Timestamps DefaultInstanceForType {
        get { return global::D3.Hero.Timestamps.DefaultInstance; }
      }
      
      public override Timestamps BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Timestamps) {
          return MergeFrom((Timestamps) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Timestamps other) {
        if (other == global::D3.Hero.Timestamps.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasDeleteTime) {
          DeleteTime = other.DeleteTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_timestampsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _timestampsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCreateTime = input.ReadSInt64(ref result.createTime_);
              break;
            }
            case 16: {
              result.hasDeleteTime = input.ReadSInt64(ref result.deleteTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public long CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(long value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasDeleteTime {
        get { return result.hasDeleteTime; }
      }
      public long DeleteTime {
        get { return result.DeleteTime; }
        set { SetDeleteTime(value); }
      }
      public Builder SetDeleteTime(long value) {
        PrepareBuilder();
        result.hasDeleteTime = true;
        result.deleteTime_ = value;
        return this;
      }
      public Builder ClearDeleteTime() {
        PrepareBuilder();
        result.hasDeleteTime = false;
        result.deleteTime_ = 0;
        return this;
      }
    }
    static Timestamps() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedDefinition : pb::GeneratedMessage<SavedDefinition, SavedDefinition.Builder> {
    private SavedDefinition() { }
    private static readonly SavedDefinition defaultInstance = new SavedDefinition().MakeReadOnly();
    private static readonly string[] _savedDefinitionFieldNames = new string[] { "digest", "items", "quest_reward_history", "saved_attributes", "saved_data", "saved_quest", "version" };
    private static readonly uint[] _savedDefinitionFieldTags = new uint[] { 18, 50, 58, 26, 34, 42, 8 };
    public static SavedDefinition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedDefinition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedDefinition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedDefinition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedDefinition, SavedDefinition.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedDefinition__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int DigestFieldNumber = 2;
    private bool hasDigest;
    private global::D3.Hero.Digest digest_;
    public bool HasDigest {
      get { return hasDigest; }
    }
    public global::D3.Hero.Digest Digest {
      get { return digest_ ?? global::D3.Hero.Digest.DefaultInstance; }
    }
    
    public const int SavedAttributesFieldNumber = 3;
    private bool hasSavedAttributes;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributes_;
    public bool HasSavedAttributes {
      get { return hasSavedAttributes; }
    }
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
      get { return savedAttributes_ ?? global::D3.AttributeSerializer.SavedAttributes.DefaultInstance; }
    }
    
    public const int SavedDataFieldNumber = 4;
    private bool hasSavedData;
    private global::D3.Hero.SavedData savedData_;
    public bool HasSavedData {
      get { return hasSavedData; }
    }
    public global::D3.Hero.SavedData SavedData {
      get { return savedData_ ?? global::D3.Hero.SavedData.DefaultInstance; }
    }
    
    public const int SavedQuestFieldNumber = 5;
    private pbc::PopsicleList<global::D3.Hero.SavedQuest> savedQuest_ = new pbc::PopsicleList<global::D3.Hero.SavedQuest>();
    public scg::IList<global::D3.Hero.SavedQuest> SavedQuestList {
      get { return savedQuest_; }
    }
    public int SavedQuestCount {
      get { return savedQuest_.Count; }
    }
    public global::D3.Hero.SavedQuest GetSavedQuest(int index) {
      return savedQuest_[index];
    }
    
    public const int ItemsFieldNumber = 6;
    private bool hasItems;
    private global::D3.Items.ItemList items_;
    public bool HasItems {
      get { return hasItems; }
    }
    public global::D3.Items.ItemList Items {
      get { return items_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public const int QuestRewardHistoryFieldNumber = 7;
    private pbc::PopsicleList<global::D3.Hero.QuestRewardHistoryEntry> questRewardHistory_ = new pbc::PopsicleList<global::D3.Hero.QuestRewardHistoryEntry>();
    public scg::IList<global::D3.Hero.QuestRewardHistoryEntry> QuestRewardHistoryList {
      get { return questRewardHistory_; }
    }
    public int QuestRewardHistoryCount {
      get { return questRewardHistory_.Count; }
    }
    public global::D3.Hero.QuestRewardHistoryEntry GetQuestRewardHistory(int index) {
      return questRewardHistory_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasSavedAttributes) return false;
        if (HasDigest) {
          if (!Digest.IsInitialized) return false;
        }
        if (!SavedAttributes.IsInitialized) return false;
        if (HasSavedData) {
          if (!SavedData.IsInitialized) return false;
        }
        foreach (global::D3.Hero.SavedQuest element in SavedQuestList) {
          if (!element.IsInitialized) return false;
        }
        if (HasItems) {
          if (!Items.IsInitialized) return false;
        }
        foreach (global::D3.Hero.QuestRewardHistoryEntry element in QuestRewardHistoryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedDefinitionFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[6], Version);
      }
      if (hasDigest) {
        output.WriteMessage(2, field_names[0], Digest);
      }
      if (hasSavedAttributes) {
        output.WriteMessage(3, field_names[3], SavedAttributes);
      }
      if (hasSavedData) {
        output.WriteMessage(4, field_names[4], SavedData);
      }
      if (savedQuest_.Count > 0) {
        output.WriteMessageArray(5, field_names[5], savedQuest_);
      }
      if (hasItems) {
        output.WriteMessage(6, field_names[1], Items);
      }
      if (questRewardHistory_.Count > 0) {
        output.WriteMessageArray(7, field_names[2], questRewardHistory_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Digest);
        }
        if (hasSavedAttributes) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SavedAttributes);
        }
        if (hasSavedData) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, SavedData);
        }
        foreach (global::D3.Hero.SavedQuest element in SavedQuestList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (hasItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Items);
        }
        foreach (global::D3.Hero.QuestRewardHistoryEntry element in QuestRewardHistoryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedDefinition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedDefinition MakeReadOnly() {
      savedQuest_.MakeReadOnly();
      questRewardHistory_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedDefinition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedDefinition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedDefinition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedDefinition result;
      
      private SavedDefinition PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedDefinition original = result;
          result = new SavedDefinition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedDefinition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedDefinition.Descriptor; }
      }
      
      public override SavedDefinition DefaultInstanceForType {
        get { return global::D3.Hero.SavedDefinition.DefaultInstance; }
      }
      
      public override SavedDefinition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedDefinition) {
          return MergeFrom((SavedDefinition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedDefinition other) {
        if (other == global::D3.Hero.SavedDefinition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasDigest) {
          MergeDigest(other.Digest);
        }
        if (other.HasSavedAttributes) {
          MergeSavedAttributes(other.SavedAttributes);
        }
        if (other.HasSavedData) {
          MergeSavedData(other.SavedData);
        }
        if (other.savedQuest_.Count != 0) {
          result.savedQuest_.Add(other.savedQuest_);
        }
        if (other.HasItems) {
          MergeItems(other.Items);
        }
        if (other.questRewardHistory_.Count != 0) {
          result.questRewardHistory_.Add(other.questRewardHistory_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedDefinitionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedDefinitionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.Hero.Digest.Builder subBuilder = global::D3.Hero.Digest.CreateBuilder();
              if (result.hasDigest) {
                subBuilder.MergeFrom(Digest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Digest = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.AttributeSerializer.SavedAttributes.Builder subBuilder = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder();
              if (result.hasSavedAttributes) {
                subBuilder.MergeFrom(SavedAttributes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedAttributes = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.Hero.SavedData.Builder subBuilder = global::D3.Hero.SavedData.CreateBuilder();
              if (result.hasSavedData) {
                subBuilder.MergeFrom(SavedData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedData = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.savedQuest_, global::D3.Hero.SavedQuest.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasItems) {
                subBuilder.MergeFrom(Items);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Items = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.questRewardHistory_, global::D3.Hero.QuestRewardHistoryEntry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasDigest {
       get { return result.hasDigest; }
      }
      public global::D3.Hero.Digest Digest {
        get { return result.Digest; }
        set { SetDigest(value); }
      }
      public Builder SetDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDigest = true;
        result.digest_ = value;
        return this;
      }
      public Builder SetDigest(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDigest = true;
        result.digest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDigest &&
            result.digest_ != global::D3.Hero.Digest.DefaultInstance) {
            result.digest_ = global::D3.Hero.Digest.CreateBuilder(result.digest_).MergeFrom(value).BuildPartial();
        } else {
          result.digest_ = value;
        }
        result.hasDigest = true;
        return this;
      }
      public Builder ClearDigest() {
        PrepareBuilder();
        result.hasDigest = false;
        result.digest_ = null;
        return this;
      }
      
      public bool HasSavedAttributes {
       get { return result.hasSavedAttributes; }
      }
      public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
        get { return result.SavedAttributes; }
        set { SetSavedAttributes(value); }
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavedAttributes = true;
        result.savedAttributes_ = value;
        return this;
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavedAttributes = true;
        result.savedAttributes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavedAttributes &&
            result.savedAttributes_ != global::D3.AttributeSerializer.SavedAttributes.DefaultInstance) {
            result.savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder(result.savedAttributes_).MergeFrom(value).BuildPartial();
        } else {
          result.savedAttributes_ = value;
        }
        result.hasSavedAttributes = true;
        return this;
      }
      public Builder ClearSavedAttributes() {
        PrepareBuilder();
        result.hasSavedAttributes = false;
        result.savedAttributes_ = null;
        return this;
      }
      
      public bool HasSavedData {
       get { return result.hasSavedData; }
      }
      public global::D3.Hero.SavedData SavedData {
        get { return result.SavedData; }
        set { SetSavedData(value); }
      }
      public Builder SetSavedData(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavedData = true;
        result.savedData_ = value;
        return this;
      }
      public Builder SetSavedData(global::D3.Hero.SavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavedData = true;
        result.savedData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedData(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavedData &&
            result.savedData_ != global::D3.Hero.SavedData.DefaultInstance) {
            result.savedData_ = global::D3.Hero.SavedData.CreateBuilder(result.savedData_).MergeFrom(value).BuildPartial();
        } else {
          result.savedData_ = value;
        }
        result.hasSavedData = true;
        return this;
      }
      public Builder ClearSavedData() {
        PrepareBuilder();
        result.hasSavedData = false;
        result.savedData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.SavedQuest> SavedQuestList {
        get { return PrepareBuilder().savedQuest_; }
      }
      public int SavedQuestCount {
        get { return result.SavedQuestCount; }
      }
      public global::D3.Hero.SavedQuest GetSavedQuest(int index) {
        return result.GetSavedQuest(index);
      }
      public Builder SetSavedQuest(int index, global::D3.Hero.SavedQuest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.savedQuest_[index] = value;
        return this;
      }
      public Builder SetSavedQuest(int index, global::D3.Hero.SavedQuest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.savedQuest_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSavedQuest(global::D3.Hero.SavedQuest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.savedQuest_.Add(value);
        return this;
      }
      public Builder AddSavedQuest(global::D3.Hero.SavedQuest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.savedQuest_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSavedQuest(scg::IEnumerable<global::D3.Hero.SavedQuest> values) {
        PrepareBuilder();
        result.savedQuest_.Add(values);
        return this;
      }
      public Builder ClearSavedQuest() {
        PrepareBuilder();
        result.savedQuest_.Clear();
        return this;
      }
      
      public bool HasItems {
       get { return result.hasItems; }
      }
      public global::D3.Items.ItemList Items {
        get { return result.Items; }
        set { SetItems(value); }
      }
      public Builder SetItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = value;
        return this;
      }
      public Builder SetItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItems &&
            result.items_ != global::D3.Items.ItemList.DefaultInstance) {
            result.items_ = global::D3.Items.ItemList.CreateBuilder(result.items_).MergeFrom(value).BuildPartial();
        } else {
          result.items_ = value;
        }
        result.hasItems = true;
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.hasItems = false;
        result.items_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.QuestRewardHistoryEntry> QuestRewardHistoryList {
        get { return PrepareBuilder().questRewardHistory_; }
      }
      public int QuestRewardHistoryCount {
        get { return result.QuestRewardHistoryCount; }
      }
      public global::D3.Hero.QuestRewardHistoryEntry GetQuestRewardHistory(int index) {
        return result.GetQuestRewardHistory(index);
      }
      public Builder SetQuestRewardHistory(int index, global::D3.Hero.QuestRewardHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questRewardHistory_[index] = value;
        return this;
      }
      public Builder SetQuestRewardHistory(int index, global::D3.Hero.QuestRewardHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questRewardHistory_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuestRewardHistory(global::D3.Hero.QuestRewardHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questRewardHistory_.Add(value);
        return this;
      }
      public Builder AddQuestRewardHistory(global::D3.Hero.QuestRewardHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questRewardHistory_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuestRewardHistory(scg::IEnumerable<global::D3.Hero.QuestRewardHistoryEntry> values) {
        PrepareBuilder();
        result.questRewardHistory_.Add(values);
        return this;
      }
      public Builder ClearQuestRewardHistory() {
        PrepareBuilder();
        result.questRewardHistory_.Clear();
        return this;
      }
    }
    static SavedDefinition() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NameSequence : pb::GeneratedMessage<NameSequence, NameSequence.Builder> {
    private NameSequence() { }
    private static readonly NameSequence defaultInstance = new NameSequence().MakeReadOnly();
    private static readonly string[] _nameSequenceFieldNames = new string[] { "sequence" };
    private static readonly uint[] _nameSequenceFieldTags = new uint[] { 8 };
    public static NameSequence DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NameSequence DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NameSequence ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_NameSequence__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NameSequence, NameSequence.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_NameSequence__FieldAccessorTable; }
    }
    
    public const int SequenceFieldNumber = 1;
    private bool hasSequence;
    private long sequence_;
    public bool HasSequence {
      get { return hasSequence; }
    }
    public long Sequence {
      get { return sequence_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nameSequenceFieldNames;
      if (hasSequence) {
        output.WriteInt64(1, field_names[0], Sequence);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSequence) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Sequence);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NameSequence ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameSequence ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameSequence ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameSequence ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameSequence ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameSequence ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NameSequence ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NameSequence ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NameSequence ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameSequence ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NameSequence MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NameSequence prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NameSequence, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NameSequence cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NameSequence result;
      
      private NameSequence PrepareBuilder() {
        if (resultIsReadOnly) {
          NameSequence original = result;
          result = new NameSequence();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NameSequence MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.NameSequence.Descriptor; }
      }
      
      public override NameSequence DefaultInstanceForType {
        get { return global::D3.Hero.NameSequence.DefaultInstance; }
      }
      
      public override NameSequence BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NameSequence) {
          return MergeFrom((NameSequence) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NameSequence other) {
        if (other == global::D3.Hero.NameSequence.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSequence) {
          Sequence = other.Sequence;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nameSequenceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nameSequenceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSequence = input.ReadInt64(ref result.sequence_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSequence {
        get { return result.hasSequence; }
      }
      public long Sequence {
        get { return result.Sequence; }
        set { SetSequence(value); }
      }
      public Builder SetSequence(long value) {
        PrepareBuilder();
        result.hasSequence = true;
        result.sequence_ = value;
        return this;
      }
      public Builder ClearSequence() {
        PrepareBuilder();
        result.hasSequence = false;
        result.sequence_ = 0L;
        return this;
      }
    }
    static NameSequence() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NameText : pb::GeneratedMessage<NameText, NameText.Builder> {
    private NameText() { }
    private static readonly NameText defaultInstance = new NameText().MakeReadOnly();
    private static readonly string[] _nameTextFieldNames = new string[] { "name" };
    private static readonly uint[] _nameTextFieldTags = new uint[] { 10 };
    public static NameText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NameText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NameText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_NameText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NameText, NameText.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_NameText__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nameTextFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NameText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NameText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NameText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NameText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NameText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NameText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NameText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NameText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NameText result;
      
      private NameText PrepareBuilder() {
        if (resultIsReadOnly) {
          NameText original = result;
          result = new NameText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NameText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.NameText.Descriptor; }
      }
      
      public override NameText DefaultInstanceForType {
        get { return global::D3.Hero.NameText.DefaultInstance; }
      }
      
      public override NameText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NameText) {
          return MergeFrom((NameText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NameText other) {
        if (other == global::D3.Hero.NameText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nameTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nameTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static NameText() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Escrow : pb::GeneratedMessage<Escrow, Escrow.Builder> {
    private Escrow() { }
    private static readonly Escrow defaultInstance = new Escrow().MakeReadOnly();
    private static readonly string[] _escrowFieldNames = new string[] { "generator", "hero_data", "serviced_tokens", "state", "version" };
    private static readonly uint[] _escrowFieldTags = new uint[] { 18, 26, 42, 32, 8 };
    public static Escrow DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Escrow DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Escrow ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Escrow__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Escrow, Escrow.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Escrow__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int GeneratorFieldNumber = 2;
    private bool hasGenerator;
    private global::D3.Items.Generator generator_;
    public bool HasGenerator {
      get { return hasGenerator; }
    }
    public global::D3.Items.Generator Generator {
      get { return generator_ ?? global::D3.Items.Generator.DefaultInstance; }
    }
    
    public const int HeroDataFieldNumber = 3;
    private bool hasHeroData;
    private global::D3.Hero.SavedData heroData_;
    public bool HasHeroData {
      get { return hasHeroData; }
    }
    public global::D3.Hero.SavedData HeroData {
      get { return heroData_ ?? global::D3.Hero.SavedData.DefaultInstance; }
    }
    
    public const int StateFieldNumber = 4;
    private bool hasState;
    private uint state_;
    public bool HasState {
      get { return hasState; }
    }
    public uint State {
      get { return state_; }
    }
    
    public const int ServicedTokensFieldNumber = 5;
    private pbc::PopsicleList<global::D3.OnlineService.ItemId> servicedTokens_ = new pbc::PopsicleList<global::D3.OnlineService.ItemId>();
    public scg::IList<global::D3.OnlineService.ItemId> ServicedTokensList {
      get { return servicedTokens_; }
    }
    public int ServicedTokensCount {
      get { return servicedTokens_.Count; }
    }
    public global::D3.OnlineService.ItemId GetServicedTokens(int index) {
      return servicedTokens_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (HasGenerator) {
          if (!Generator.IsInitialized) return false;
        }
        if (HasHeroData) {
          if (!HeroData.IsInitialized) return false;
        }
        foreach (global::D3.OnlineService.ItemId element in ServicedTokensList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _escrowFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[4], Version);
      }
      if (hasGenerator) {
        output.WriteMessage(2, field_names[0], Generator);
      }
      if (hasHeroData) {
        output.WriteMessage(3, field_names[1], HeroData);
      }
      if (hasState) {
        output.WriteUInt32(4, field_names[3], State);
      }
      if (servicedTokens_.Count > 0) {
        output.WriteMessageArray(5, field_names[2], servicedTokens_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasGenerator) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Generator);
        }
        if (hasHeroData) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, HeroData);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, State);
        }
        foreach (global::D3.OnlineService.ItemId element in ServicedTokensList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Escrow ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Escrow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Escrow ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Escrow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Escrow ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Escrow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Escrow ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Escrow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Escrow ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Escrow ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Escrow MakeReadOnly() {
      servicedTokens_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Escrow prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Escrow, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Escrow cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Escrow result;
      
      private Escrow PrepareBuilder() {
        if (resultIsReadOnly) {
          Escrow original = result;
          result = new Escrow();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Escrow MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.Escrow.Descriptor; }
      }
      
      public override Escrow DefaultInstanceForType {
        get { return global::D3.Hero.Escrow.DefaultInstance; }
      }
      
      public override Escrow BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Escrow) {
          return MergeFrom((Escrow) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Escrow other) {
        if (other == global::D3.Hero.Escrow.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasGenerator) {
          MergeGenerator(other.Generator);
        }
        if (other.HasHeroData) {
          MergeHeroData(other.HeroData);
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.servicedTokens_.Count != 0) {
          result.servicedTokens_.Add(other.servicedTokens_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_escrowFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _escrowFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (result.hasGenerator) {
                subBuilder.MergeFrom(Generator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Generator = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Hero.SavedData.Builder subBuilder = global::D3.Hero.SavedData.CreateBuilder();
              if (result.hasHeroData) {
                subBuilder.MergeFrom(HeroData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroData = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasState = input.ReadUInt32(ref result.state_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.servicedTokens_, global::D3.OnlineService.ItemId.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasGenerator {
       get { return result.hasGenerator; }
      }
      public global::D3.Items.Generator Generator {
        get { return result.Generator; }
        set { SetGenerator(value); }
      }
      public Builder SetGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder SetGenerator(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGenerator &&
            result.generator_ != global::D3.Items.Generator.DefaultInstance) {
            result.generator_ = global::D3.Items.Generator.CreateBuilder(result.generator_).MergeFrom(value).BuildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder ClearGenerator() {
        PrepareBuilder();
        result.hasGenerator = false;
        result.generator_ = null;
        return this;
      }
      
      public bool HasHeroData {
       get { return result.hasHeroData; }
      }
      public global::D3.Hero.SavedData HeroData {
        get { return result.HeroData; }
        set { SetHeroData(value); }
      }
      public Builder SetHeroData(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroData = true;
        result.heroData_ = value;
        return this;
      }
      public Builder SetHeroData(global::D3.Hero.SavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroData = true;
        result.heroData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroData(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroData &&
            result.heroData_ != global::D3.Hero.SavedData.DefaultInstance) {
            result.heroData_ = global::D3.Hero.SavedData.CreateBuilder(result.heroData_).MergeFrom(value).BuildPartial();
        } else {
          result.heroData_ = value;
        }
        result.hasHeroData = true;
        return this;
      }
      public Builder ClearHeroData() {
        PrepareBuilder();
        result.hasHeroData = false;
        result.heroData_ = null;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public uint State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(uint value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.OnlineService.ItemId> ServicedTokensList {
        get { return PrepareBuilder().servicedTokens_; }
      }
      public int ServicedTokensCount {
        get { return result.ServicedTokensCount; }
      }
      public global::D3.OnlineService.ItemId GetServicedTokens(int index) {
        return result.GetServicedTokens(index);
      }
      public Builder SetServicedTokens(int index, global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.servicedTokens_[index] = value;
        return this;
      }
      public Builder SetServicedTokens(int index, global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.servicedTokens_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddServicedTokens(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.servicedTokens_.Add(value);
        return this;
      }
      public Builder AddServicedTokens(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.servicedTokens_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeServicedTokens(scg::IEnumerable<global::D3.OnlineService.ItemId> values) {
        PrepareBuilder();
        result.servicedTokens_.Add(values);
        return this;
      }
      public Builder ClearServicedTokens() {
        PrepareBuilder();
        result.servicedTokens_.Clear();
        return this;
      }
    }
    static Escrow() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroList : pb::GeneratedMessage<HeroList, HeroList.Builder> {
    private HeroList() { }
    private static readonly HeroList defaultInstance = new HeroList().MakeReadOnly();
    private static readonly string[] _heroListFieldNames = new string[] { "hero_ids" };
    private static readonly uint[] _heroListFieldTags = new uint[] { 10 };
    public static HeroList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_HeroList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroList, HeroList.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_HeroList__FieldAccessorTable; }
    }
    
    public const int HeroIdsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.OnlineService.EntityId> heroIds_ = new pbc::PopsicleList<global::D3.OnlineService.EntityId>();
    public scg::IList<global::D3.OnlineService.EntityId> HeroIdsList {
      get { return heroIds_; }
    }
    public int HeroIdsCount {
      get { return heroIds_.Count; }
    }
    public global::D3.OnlineService.EntityId GetHeroIds(int index) {
      return heroIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.OnlineService.EntityId element in HeroIdsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroListFieldNames;
      if (heroIds_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], heroIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.OnlineService.EntityId element in HeroIdsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroList MakeReadOnly() {
      heroIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroList result;
      
      private HeroList PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroList original = result;
          result = new HeroList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.HeroList.Descriptor; }
      }
      
      public override HeroList DefaultInstanceForType {
        get { return global::D3.Hero.HeroList.DefaultInstance; }
      }
      
      public override HeroList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroList) {
          return MergeFrom((HeroList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroList other) {
        if (other == global::D3.Hero.HeroList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.heroIds_.Count != 0) {
          result.heroIds_.Add(other.heroIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.heroIds_, global::D3.OnlineService.EntityId.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.OnlineService.EntityId> HeroIdsList {
        get { return PrepareBuilder().heroIds_; }
      }
      public int HeroIdsCount {
        get { return result.HeroIdsCount; }
      }
      public global::D3.OnlineService.EntityId GetHeroIds(int index) {
        return result.GetHeroIds(index);
      }
      public Builder SetHeroIds(int index, global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.heroIds_[index] = value;
        return this;
      }
      public Builder SetHeroIds(int index, global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.heroIds_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHeroIds(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.heroIds_.Add(value);
        return this;
      }
      public Builder AddHeroIds(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.heroIds_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHeroIds(scg::IEnumerable<global::D3.OnlineService.EntityId> values) {
        PrepareBuilder();
        result.heroIds_.Add(values);
        return this;
      }
      public Builder ClearHeroIds() {
        PrepareBuilder();
        result.heroIds_.Clear();
        return this;
      }
    }
    static HeroList() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
