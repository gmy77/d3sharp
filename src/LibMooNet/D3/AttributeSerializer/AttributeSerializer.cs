// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.AttributeSerializer {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class AttributeSerializer {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_AttributeSerializer_SavedAttribute__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.AttributeSerializer.SavedAttribute, global::D3.AttributeSerializer.SavedAttribute.Builder> internal__static_D3_AttributeSerializer_SavedAttribute__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_AttributeSerializer_SavedAttributes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.AttributeSerializer.SavedAttributes, global::D3.AttributeSerializer.SavedAttributes.Builder> internal__static_D3_AttributeSerializer_SavedAttributes__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static AttributeSerializer() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChlBdHRyaWJ1dGVTZXJpYWxpemVyLnByb3RvEhZEMy5BdHRyaWJ1dGVTZXJp" + 
          "YWxpemVyGg5HQkhhbmRsZS5wcm90byIsCg5TYXZlZEF0dHJpYnV0ZRILCgNr" + 
          "ZXkYASACKBESDQoFdmFsdWUYAiACKBEieAoPU2F2ZWRBdHRyaWJ1dGVzEikK" + 
          "CWdiX2hhbmRsZRgBIAIoCzIWLkQzLkdhbWVCYWxhbmNlLkhhbmRsZRI6Cgph" + 
          "dHRyaWJ1dGVzGAIgAygLMiYuRDMuQXR0cmlidXRlU2VyaWFsaXplci5TYXZl" + 
          "ZEF0dHJpYnV0ZQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_AttributeSerializer_SavedAttribute__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_AttributeSerializer_SavedAttribute__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.AttributeSerializer.SavedAttribute, global::D3.AttributeSerializer.SavedAttribute.Builder>(internal__static_D3_AttributeSerializer_SavedAttribute__Descriptor,
                new string[] { "Key", "Value", });
        internal__static_D3_AttributeSerializer_SavedAttributes__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_AttributeSerializer_SavedAttributes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.AttributeSerializer.SavedAttributes, global::D3.AttributeSerializer.SavedAttributes.Builder>(internal__static_D3_AttributeSerializer_SavedAttributes__Descriptor,
                new string[] { "GbHandle", "Attributes", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.GameBalance.GBHandle.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedAttribute : pb::GeneratedMessage<SavedAttribute, SavedAttribute.Builder> {
    private SavedAttribute() { }
    private static readonly SavedAttribute defaultInstance = new SavedAttribute().MakeReadOnly();
    private static readonly string[] _savedAttributeFieldNames = new string[] { "key", "value" };
    private static readonly uint[] _savedAttributeFieldTags = new uint[] { 8, 16 };
    public static SavedAttribute DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedAttribute DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedAttribute ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.AttributeSerializer.AttributeSerializer.internal__static_D3_AttributeSerializer_SavedAttribute__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedAttribute, SavedAttribute.Builder> InternalFieldAccessors {
      get { return global::D3.AttributeSerializer.AttributeSerializer.internal__static_D3_AttributeSerializer_SavedAttribute__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private int key_;
    public bool HasKey {
      get { return hasKey; }
    }
    public int Key {
      get { return key_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedAttributeFieldNames;
      if (hasKey) {
        output.WriteSInt32(1, field_names[0], Key);
      }
      if (hasValue) {
        output.WriteSInt32(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, Key);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedAttribute ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedAttribute ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedAttribute ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedAttribute ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedAttribute ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedAttribute ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedAttribute ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedAttribute ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedAttribute ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedAttribute ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedAttribute MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedAttribute prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedAttribute, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedAttribute cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedAttribute result;
      
      private SavedAttribute PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedAttribute original = result;
          result = new SavedAttribute();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedAttribute MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.AttributeSerializer.SavedAttribute.Descriptor; }
      }
      
      public override SavedAttribute DefaultInstanceForType {
        get { return global::D3.AttributeSerializer.SavedAttribute.DefaultInstance; }
      }
      
      public override SavedAttribute BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedAttribute) {
          return MergeFrom((SavedAttribute) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedAttribute other) {
        if (other == global::D3.AttributeSerializer.SavedAttribute.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedAttributeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedAttributeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKey = input.ReadSInt32(ref result.key_);
              break;
            }
            case 16: {
              result.hasValue = input.ReadSInt32(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public int Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(int value) {
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
    }
    static SavedAttribute() {
      object.ReferenceEquals(global::D3.AttributeSerializer.AttributeSerializer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedAttributes : pb::GeneratedMessage<SavedAttributes, SavedAttributes.Builder> {
    private SavedAttributes() { }
    private static readonly SavedAttributes defaultInstance = new SavedAttributes().MakeReadOnly();
    private static readonly string[] _savedAttributesFieldNames = new string[] { "attributes", "gb_handle" };
    private static readonly uint[] _savedAttributesFieldTags = new uint[] { 18, 10 };
    public static SavedAttributes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedAttributes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedAttributes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.AttributeSerializer.AttributeSerializer.internal__static_D3_AttributeSerializer_SavedAttributes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedAttributes, SavedAttributes.Builder> InternalFieldAccessors {
      get { return global::D3.AttributeSerializer.AttributeSerializer.internal__static_D3_AttributeSerializer_SavedAttributes__FieldAccessorTable; }
    }
    
    public const int GbHandleFieldNumber = 1;
    private bool hasGbHandle;
    private global::D3.GameBalance.Handle gbHandle_;
    public bool HasGbHandle {
      get { return hasGbHandle; }
    }
    public global::D3.GameBalance.Handle GbHandle {
      get { return gbHandle_ ?? global::D3.GameBalance.Handle.DefaultInstance; }
    }
    
    public const int AttributesFieldNumber = 2;
    private pbc::PopsicleList<global::D3.AttributeSerializer.SavedAttribute> attributes_ = new pbc::PopsicleList<global::D3.AttributeSerializer.SavedAttribute>();
    public scg::IList<global::D3.AttributeSerializer.SavedAttribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::D3.AttributeSerializer.SavedAttribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGbHandle) return false;
        if (!GbHandle.IsInitialized) return false;
        foreach (global::D3.AttributeSerializer.SavedAttribute element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedAttributesFieldNames;
      if (hasGbHandle) {
        output.WriteMessage(1, field_names[1], GbHandle);
      }
      if (attributes_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], attributes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGbHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GbHandle);
        }
        foreach (global::D3.AttributeSerializer.SavedAttribute element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedAttributes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedAttributes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedAttributes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedAttributes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedAttributes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedAttributes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedAttributes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedAttributes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedAttributes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedAttributes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedAttributes MakeReadOnly() {
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedAttributes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedAttributes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedAttributes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedAttributes result;
      
      private SavedAttributes PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedAttributes original = result;
          result = new SavedAttributes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedAttributes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.AttributeSerializer.SavedAttributes.Descriptor; }
      }
      
      public override SavedAttributes DefaultInstanceForType {
        get { return global::D3.AttributeSerializer.SavedAttributes.DefaultInstance; }
      }
      
      public override SavedAttributes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedAttributes) {
          return MergeFrom((SavedAttributes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedAttributes other) {
        if (other == global::D3.AttributeSerializer.SavedAttributes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGbHandle) {
          MergeGbHandle(other.GbHandle);
        }
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedAttributesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedAttributesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.GameBalance.Handle.Builder subBuilder = global::D3.GameBalance.Handle.CreateBuilder();
              if (result.hasGbHandle) {
                subBuilder.MergeFrom(GbHandle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GbHandle = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::D3.AttributeSerializer.SavedAttribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGbHandle {
       get { return result.hasGbHandle; }
      }
      public global::D3.GameBalance.Handle GbHandle {
        get { return result.GbHandle; }
        set { SetGbHandle(value); }
      }
      public Builder SetGbHandle(global::D3.GameBalance.Handle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGbHandle = true;
        result.gbHandle_ = value;
        return this;
      }
      public Builder SetGbHandle(global::D3.GameBalance.Handle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGbHandle = true;
        result.gbHandle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGbHandle(global::D3.GameBalance.Handle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGbHandle &&
            result.gbHandle_ != global::D3.GameBalance.Handle.DefaultInstance) {
            result.gbHandle_ = global::D3.GameBalance.Handle.CreateBuilder(result.gbHandle_).MergeFrom(value).BuildPartial();
        } else {
          result.gbHandle_ = value;
        }
        result.hasGbHandle = true;
        return this;
      }
      public Builder ClearGbHandle() {
        PrepareBuilder();
        result.hasGbHandle = false;
        result.gbHandle_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.AttributeSerializer.SavedAttribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::D3.AttributeSerializer.SavedAttribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::D3.AttributeSerializer.SavedAttribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::D3.AttributeSerializer.SavedAttribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::D3.AttributeSerializer.SavedAttribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::D3.AttributeSerializer.SavedAttribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::D3.AttributeSerializer.SavedAttribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
    }
    static SavedAttributes() {
      object.ReferenceEquals(global::D3.AttributeSerializer.AttributeSerializer.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
