// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.AuctionHouse {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class AuctionHouse {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_AuctionHouse_InventoryOperation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.InventoryOperation, global::D3.AuctionHouse.InventoryOperation.Builder> internal__static_D3_AuctionHouse_InventoryOperation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_AuctionHouse_InventoryOperations__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.InventoryOperations, global::D3.AuctionHouse.InventoryOperations.Builder> internal__static_D3_AuctionHouse_InventoryOperations__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_AuctionHouse_Item__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.Item, global::D3.AuctionHouse.Item.Builder> internal__static_D3_AuctionHouse_Item__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_AuctionHouse_Escrow__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.Escrow, global::D3.AuctionHouse.Escrow.Builder> internal__static_D3_AuctionHouse_Escrow__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_AuctionHouse_AuthorizeInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.AuthorizeInfo, global::D3.AuctionHouse.AuthorizeInfo.Builder> internal__static_D3_AuctionHouse_AuthorizeInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_AuctionHouse_ClaimInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.ClaimInfo, global::D3.AuctionHouse.ClaimInfo.Builder> internal__static_D3_AuctionHouse_ClaimInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_AuctionHouse_AccountInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.AccountInfo, global::D3.AuctionHouse.AccountInfo.Builder> internal__static_D3_AuctionHouse_AccountInfo__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static AuctionHouse() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChJBdWN0aW9uSG91c2UucHJvdG8SD0QzLkF1Y3Rpb25Ib3VzZRoOR0JIYW5k" + 
          "bGUucHJvdG8aE09ubGluZVNlcnZpY2UucHJvdG8aC0l0ZW1zLnByb3RvGgpI" + 
          "ZXJvLnByb3RvIqsCChJJbnZlbnRvcnlPcGVyYXRpb24SQAoJb3BlcmF0aW9u" + 
          "GAEgAigOMi0uRDMuQXVjdGlvbkhvdXNlLkludmVudG9yeU9wZXJhdGlvbi5P" + 
          "cGVyYXRpb24SNwoTdHJhbnNhY3Rpb25faGVyb19pZBgCIAIoCzIaLkQzLk9u" + 
          "bGluZVNlcnZpY2UuRW50aXR5SWQSJAoCaWQYAyACKAsyGC5EMy5PbmxpbmVT" + 
          "ZXJ2aWNlLkl0ZW1JZBIRCglpdGVtX3Nsb3QYBCABKBESFAoMc3F1YXJlX2lu" + 
          "ZGV4GAUgASgREiYKCWdlbmVyYXRvchgGIAEoCzITLkQzLkl0ZW1zLkdlbmVy" + 
          "YXRvciIjCglPcGVyYXRpb24SCgoGUkVNT1ZFEAASCgoGVVBEQVRFEAEiTgoT" + 
          "SW52ZW50b3J5T3BlcmF0aW9ucxI3CgpvcGVyYXRpb25zGAEgAygLMiMuRDMu" + 
          "QXVjdGlvbkhvdXNlLkludmVudG9yeU9wZXJhdGlvbiJUCgRJdGVtEiQKAmlk" + 
          "GAEgAigLMhguRDMuT25saW5lU2VydmljZS5JdGVtSWQSJgoJZ2VuZXJhdG9y" + 
          "GAIgAigLMhMuRDMuSXRlbXMuR2VuZXJhdG9yIr0BCgZFc2Nyb3cSDwoHdmVy" + 
          "c2lvbhgBIAIoDRIrCgxhdWN0aW9uX2l0ZW0YAiABKAsyFS5EMy5BdWN0aW9u" + 
          "SG91c2UuSXRlbRIgCgRoZXJvGAMgASgLMhIuRDMuSGVyby5TYXZlZERhdGES" + 
          "MwoPc2VydmljZWRfdG9rZW5zGAQgAygLMhouRDMuT25saW5lU2VydmljZS5F" + 
          "bnRpdHlJZCIeCgdWZXJzaW9uEhMKD0NVUlJFTlRfVkVSU0lPThABIqQBCg1B" + 
          "dXRob3JpemVJbmZvEi8KC2xvY2F0aW9uX2lkGAEgAigLMhouRDMuT25saW5l" + 
          "U2VydmljZS5FbnRpdHlJZBI3ChN0cmFuc2FjdGlvbl9oZXJvX2lkGAIgAigL" + 
          "MhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZBIpCgdpdGVtX2lkGAMgASgL" + 
          "MhguRDMuT25saW5lU2VydmljZS5JdGVtSWQiRAoJQ2xhaW1JbmZvEjcKE3Ry" + 
          "YW5zYWN0aW9uX2hlcm9faWQYASACKAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVu" + 
          "dGl0eUlkImwKC0FjY291bnRJbmZvEi4KCmFjY291bnRfaWQYASACKAsyGi5E" + 
          "My5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkEi0KCWVzY3Jvd19pZBgCIAIoCzIa" + 
          "LkQzLk9ubGluZVNlcnZpY2UuRW50aXR5SWQ=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_AuctionHouse_InventoryOperation__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_AuctionHouse_InventoryOperation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.InventoryOperation, global::D3.AuctionHouse.InventoryOperation.Builder>(internal__static_D3_AuctionHouse_InventoryOperation__Descriptor,
                new string[] { "Operation", "TransactionHeroId", "Id", "ItemSlot", "SquareIndex", "Generator", });
        internal__static_D3_AuctionHouse_InventoryOperations__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_AuctionHouse_InventoryOperations__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.InventoryOperations, global::D3.AuctionHouse.InventoryOperations.Builder>(internal__static_D3_AuctionHouse_InventoryOperations__Descriptor,
                new string[] { "Operations", });
        internal__static_D3_AuctionHouse_Item__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_AuctionHouse_Item__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.Item, global::D3.AuctionHouse.Item.Builder>(internal__static_D3_AuctionHouse_Item__Descriptor,
                new string[] { "Id", "Generator", });
        internal__static_D3_AuctionHouse_Escrow__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_AuctionHouse_Escrow__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.Escrow, global::D3.AuctionHouse.Escrow.Builder>(internal__static_D3_AuctionHouse_Escrow__Descriptor,
                new string[] { "Version", "AuctionItem", "Hero", "ServicedTokens", });
        internal__static_D3_AuctionHouse_AuthorizeInfo__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_AuctionHouse_AuthorizeInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.AuthorizeInfo, global::D3.AuctionHouse.AuthorizeInfo.Builder>(internal__static_D3_AuctionHouse_AuthorizeInfo__Descriptor,
                new string[] { "LocationId", "TransactionHeroId", "ItemId", });
        internal__static_D3_AuctionHouse_ClaimInfo__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_AuctionHouse_ClaimInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.ClaimInfo, global::D3.AuctionHouse.ClaimInfo.Builder>(internal__static_D3_AuctionHouse_ClaimInfo__Descriptor,
                new string[] { "TransactionHeroId", });
        internal__static_D3_AuctionHouse_AccountInfo__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_AuctionHouse_AccountInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.AuctionHouse.AccountInfo, global::D3.AuctionHouse.AccountInfo.Builder>(internal__static_D3_AuctionHouse_AccountInfo__Descriptor,
                new string[] { "AccountId", "EscrowId", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.GameBalance.GBHandle.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          global::D3.Items.Items.Descriptor, 
          global::D3.Hero.Hero.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InventoryOperation : pb::GeneratedMessage<InventoryOperation, InventoryOperation.Builder> {
    private InventoryOperation() { }
    private static readonly InventoryOperation defaultInstance = new InventoryOperation().MakeReadOnly();
    private static readonly string[] _inventoryOperationFieldNames = new string[] { "generator", "id", "item_slot", "operation", "square_index", "transaction_hero_id" };
    private static readonly uint[] _inventoryOperationFieldTags = new uint[] { 50, 26, 32, 8, 40, 18 };
    public static InventoryOperation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InventoryOperation DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InventoryOperation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_InventoryOperation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InventoryOperation, InventoryOperation.Builder> InternalFieldAccessors {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_InventoryOperation__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Operation {
        REMOVE = 0,
        UPDATE = 1,
      }
      
    }
    #endregion
    
    public const int OperationFieldNumber = 1;
    private bool hasOperation;
    private global::D3.AuctionHouse.InventoryOperation.Types.Operation operation_ = global::D3.AuctionHouse.InventoryOperation.Types.Operation.REMOVE;
    public bool HasOperation {
      get { return hasOperation; }
    }
    public global::D3.AuctionHouse.InventoryOperation.Types.Operation Operation {
      get { return operation_; }
    }
    
    public const int TransactionHeroIdFieldNumber = 2;
    private bool hasTransactionHeroId;
    private global::D3.OnlineService.EntityId transactionHeroId_;
    public bool HasTransactionHeroId {
      get { return hasTransactionHeroId; }
    }
    public global::D3.OnlineService.EntityId TransactionHeroId {
      get { return transactionHeroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int IdFieldNumber = 3;
    private bool hasId;
    private global::D3.OnlineService.ItemId id_;
    public bool HasId {
      get { return hasId; }
    }
    public global::D3.OnlineService.ItemId Id {
      get { return id_ ?? global::D3.OnlineService.ItemId.DefaultInstance; }
    }
    
    public const int ItemSlotFieldNumber = 4;
    private bool hasItemSlot;
    private int itemSlot_;
    public bool HasItemSlot {
      get { return hasItemSlot; }
    }
    public int ItemSlot {
      get { return itemSlot_; }
    }
    
    public const int SquareIndexFieldNumber = 5;
    private bool hasSquareIndex;
    private int squareIndex_;
    public bool HasSquareIndex {
      get { return hasSquareIndex; }
    }
    public int SquareIndex {
      get { return squareIndex_; }
    }
    
    public const int GeneratorFieldNumber = 6;
    private bool hasGenerator;
    private global::D3.Items.Generator generator_;
    public bool HasGenerator {
      get { return hasGenerator; }
    }
    public global::D3.Items.Generator Generator {
      get { return generator_ ?? global::D3.Items.Generator.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOperation) return false;
        if (!hasTransactionHeroId) return false;
        if (!hasId) return false;
        if (!TransactionHeroId.IsInitialized) return false;
        if (!Id.IsInitialized) return false;
        if (HasGenerator) {
          if (!Generator.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _inventoryOperationFieldNames;
      if (hasOperation) {
        output.WriteEnum(1, field_names[3], (int) Operation, Operation);
      }
      if (hasTransactionHeroId) {
        output.WriteMessage(2, field_names[5], TransactionHeroId);
      }
      if (hasId) {
        output.WriteMessage(3, field_names[1], Id);
      }
      if (hasItemSlot) {
        output.WriteSInt32(4, field_names[2], ItemSlot);
      }
      if (hasSquareIndex) {
        output.WriteSInt32(5, field_names[4], SquareIndex);
      }
      if (hasGenerator) {
        output.WriteMessage(6, field_names[0], Generator);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOperation) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Operation);
        }
        if (hasTransactionHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, TransactionHeroId);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Id);
        }
        if (hasItemSlot) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, ItemSlot);
        }
        if (hasSquareIndex) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, SquareIndex);
        }
        if (hasGenerator) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Generator);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InventoryOperation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InventoryOperation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InventoryOperation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InventoryOperation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InventoryOperation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InventoryOperation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InventoryOperation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InventoryOperation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InventoryOperation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InventoryOperation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InventoryOperation MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InventoryOperation prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InventoryOperation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InventoryOperation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InventoryOperation result;
      
      private InventoryOperation PrepareBuilder() {
        if (resultIsReadOnly) {
          InventoryOperation original = result;
          result = new InventoryOperation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InventoryOperation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.AuctionHouse.InventoryOperation.Descriptor; }
      }
      
      public override InventoryOperation DefaultInstanceForType {
        get { return global::D3.AuctionHouse.InventoryOperation.DefaultInstance; }
      }
      
      public override InventoryOperation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InventoryOperation) {
          return MergeFrom((InventoryOperation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InventoryOperation other) {
        if (other == global::D3.AuctionHouse.InventoryOperation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOperation) {
          Operation = other.Operation;
        }
        if (other.HasTransactionHeroId) {
          MergeTransactionHeroId(other.TransactionHeroId);
        }
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasItemSlot) {
          ItemSlot = other.ItemSlot;
        }
        if (other.HasSquareIndex) {
          SquareIndex = other.SquareIndex;
        }
        if (other.HasGenerator) {
          MergeGenerator(other.Generator);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_inventoryOperationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _inventoryOperationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.operation_, out unknown)) {
                result.hasOperation = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasTransactionHeroId) {
                subBuilder.MergeFrom(TransactionHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TransactionHeroId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (result.hasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasItemSlot = input.ReadSInt32(ref result.itemSlot_);
              break;
            }
            case 40: {
              result.hasSquareIndex = input.ReadSInt32(ref result.squareIndex_);
              break;
            }
            case 50: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (result.hasGenerator) {
                subBuilder.MergeFrom(Generator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Generator = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOperation {
       get { return result.hasOperation; }
      }
      public global::D3.AuctionHouse.InventoryOperation.Types.Operation Operation {
        get { return result.Operation; }
        set { SetOperation(value); }
      }
      public Builder SetOperation(global::D3.AuctionHouse.InventoryOperation.Types.Operation value) {
        PrepareBuilder();
        result.hasOperation = true;
        result.operation_ = value;
        return this;
      }
      public Builder ClearOperation() {
        PrepareBuilder();
        result.hasOperation = false;
        result.operation_ = global::D3.AuctionHouse.InventoryOperation.Types.Operation.REMOVE;
        return this;
      }
      
      public bool HasTransactionHeroId {
       get { return result.hasTransactionHeroId; }
      }
      public global::D3.OnlineService.EntityId TransactionHeroId {
        get { return result.TransactionHeroId; }
        set { SetTransactionHeroId(value); }
      }
      public Builder SetTransactionHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTransactionHeroId = true;
        result.transactionHeroId_ = value;
        return this;
      }
      public Builder SetTransactionHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTransactionHeroId = true;
        result.transactionHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTransactionHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTransactionHeroId &&
            result.transactionHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.transactionHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.transactionHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.transactionHeroId_ = value;
        }
        result.hasTransactionHeroId = true;
        return this;
      }
      public Builder ClearTransactionHeroId() {
        PrepareBuilder();
        result.hasTransactionHeroId = false;
        result.transactionHeroId_ = null;
        return this;
      }
      
      public bool HasId {
       get { return result.hasId; }
      }
      public global::D3.OnlineService.ItemId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasId &&
            result.id_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.id_ = global::D3.OnlineService.ItemId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = null;
        return this;
      }
      
      public bool HasItemSlot {
        get { return result.hasItemSlot; }
      }
      public int ItemSlot {
        get { return result.ItemSlot; }
        set { SetItemSlot(value); }
      }
      public Builder SetItemSlot(int value) {
        PrepareBuilder();
        result.hasItemSlot = true;
        result.itemSlot_ = value;
        return this;
      }
      public Builder ClearItemSlot() {
        PrepareBuilder();
        result.hasItemSlot = false;
        result.itemSlot_ = 0;
        return this;
      }
      
      public bool HasSquareIndex {
        get { return result.hasSquareIndex; }
      }
      public int SquareIndex {
        get { return result.SquareIndex; }
        set { SetSquareIndex(value); }
      }
      public Builder SetSquareIndex(int value) {
        PrepareBuilder();
        result.hasSquareIndex = true;
        result.squareIndex_ = value;
        return this;
      }
      public Builder ClearSquareIndex() {
        PrepareBuilder();
        result.hasSquareIndex = false;
        result.squareIndex_ = 0;
        return this;
      }
      
      public bool HasGenerator {
       get { return result.hasGenerator; }
      }
      public global::D3.Items.Generator Generator {
        get { return result.Generator; }
        set { SetGenerator(value); }
      }
      public Builder SetGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder SetGenerator(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGenerator &&
            result.generator_ != global::D3.Items.Generator.DefaultInstance) {
            result.generator_ = global::D3.Items.Generator.CreateBuilder(result.generator_).MergeFrom(value).BuildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder ClearGenerator() {
        PrepareBuilder();
        result.hasGenerator = false;
        result.generator_ = null;
        return this;
      }
    }
    static InventoryOperation() {
      object.ReferenceEquals(global::D3.AuctionHouse.AuctionHouse.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InventoryOperations : pb::GeneratedMessage<InventoryOperations, InventoryOperations.Builder> {
    private InventoryOperations() { }
    private static readonly InventoryOperations defaultInstance = new InventoryOperations().MakeReadOnly();
    private static readonly string[] _inventoryOperationsFieldNames = new string[] { "operations" };
    private static readonly uint[] _inventoryOperationsFieldTags = new uint[] { 10 };
    public static InventoryOperations DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InventoryOperations DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InventoryOperations ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_InventoryOperations__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InventoryOperations, InventoryOperations.Builder> InternalFieldAccessors {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_InventoryOperations__FieldAccessorTable; }
    }
    
    public const int OperationsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.AuctionHouse.InventoryOperation> operations_ = new pbc::PopsicleList<global::D3.AuctionHouse.InventoryOperation>();
    public scg::IList<global::D3.AuctionHouse.InventoryOperation> OperationsList {
      get { return operations_; }
    }
    public int OperationsCount {
      get { return operations_.Count; }
    }
    public global::D3.AuctionHouse.InventoryOperation GetOperations(int index) {
      return operations_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.AuctionHouse.InventoryOperation element in OperationsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _inventoryOperationsFieldNames;
      if (operations_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], operations_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.AuctionHouse.InventoryOperation element in OperationsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InventoryOperations ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InventoryOperations ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InventoryOperations ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InventoryOperations ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InventoryOperations ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InventoryOperations ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InventoryOperations ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InventoryOperations ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InventoryOperations ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InventoryOperations ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InventoryOperations MakeReadOnly() {
      operations_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InventoryOperations prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InventoryOperations, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InventoryOperations cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InventoryOperations result;
      
      private InventoryOperations PrepareBuilder() {
        if (resultIsReadOnly) {
          InventoryOperations original = result;
          result = new InventoryOperations();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InventoryOperations MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.AuctionHouse.InventoryOperations.Descriptor; }
      }
      
      public override InventoryOperations DefaultInstanceForType {
        get { return global::D3.AuctionHouse.InventoryOperations.DefaultInstance; }
      }
      
      public override InventoryOperations BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InventoryOperations) {
          return MergeFrom((InventoryOperations) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InventoryOperations other) {
        if (other == global::D3.AuctionHouse.InventoryOperations.DefaultInstance) return this;
        PrepareBuilder();
        if (other.operations_.Count != 0) {
          result.operations_.Add(other.operations_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_inventoryOperationsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _inventoryOperationsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.operations_, global::D3.AuctionHouse.InventoryOperation.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.AuctionHouse.InventoryOperation> OperationsList {
        get { return PrepareBuilder().operations_; }
      }
      public int OperationsCount {
        get { return result.OperationsCount; }
      }
      public global::D3.AuctionHouse.InventoryOperation GetOperations(int index) {
        return result.GetOperations(index);
      }
      public Builder SetOperations(int index, global::D3.AuctionHouse.InventoryOperation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.operations_[index] = value;
        return this;
      }
      public Builder SetOperations(int index, global::D3.AuctionHouse.InventoryOperation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.operations_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOperations(global::D3.AuctionHouse.InventoryOperation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.operations_.Add(value);
        return this;
      }
      public Builder AddOperations(global::D3.AuctionHouse.InventoryOperation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.operations_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOperations(scg::IEnumerable<global::D3.AuctionHouse.InventoryOperation> values) {
        PrepareBuilder();
        result.operations_.Add(values);
        return this;
      }
      public Builder ClearOperations() {
        PrepareBuilder();
        result.operations_.Clear();
        return this;
      }
    }
    static InventoryOperations() {
      object.ReferenceEquals(global::D3.AuctionHouse.AuctionHouse.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Item : pb::GeneratedMessage<Item, Item.Builder> {
    private Item() { }
    private static readonly Item defaultInstance = new Item().MakeReadOnly();
    private static readonly string[] _itemFieldNames = new string[] { "generator", "id" };
    private static readonly uint[] _itemFieldTags = new uint[] { 18, 10 };
    public static Item DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Item DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Item ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_Item__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Item, Item.Builder> InternalFieldAccessors {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_Item__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::D3.OnlineService.ItemId id_;
    public bool HasId {
      get { return hasId; }
    }
    public global::D3.OnlineService.ItemId Id {
      get { return id_ ?? global::D3.OnlineService.ItemId.DefaultInstance; }
    }
    
    public const int GeneratorFieldNumber = 2;
    private bool hasGenerator;
    private global::D3.Items.Generator generator_;
    public bool HasGenerator {
      get { return hasGenerator; }
    }
    public global::D3.Items.Generator Generator {
      get { return generator_ ?? global::D3.Items.Generator.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasGenerator) return false;
        if (!Id.IsInitialized) return false;
        if (!Generator.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _itemFieldNames;
      if (hasId) {
        output.WriteMessage(1, field_names[1], Id);
      }
      if (hasGenerator) {
        output.WriteMessage(2, field_names[0], Generator);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (hasGenerator) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Generator);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Item ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Item ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Item ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Item ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Item ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Item ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Item ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Item ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Item ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Item ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Item MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Item prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Item, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Item cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Item result;
      
      private Item PrepareBuilder() {
        if (resultIsReadOnly) {
          Item original = result;
          result = new Item();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Item MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.AuctionHouse.Item.Descriptor; }
      }
      
      public override Item DefaultInstanceForType {
        get { return global::D3.AuctionHouse.Item.DefaultInstance; }
      }
      
      public override Item BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Item) {
          return MergeFrom((Item) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Item other) {
        if (other == global::D3.AuctionHouse.Item.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasGenerator) {
          MergeGenerator(other.Generator);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_itemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _itemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (result.hasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (result.hasGenerator) {
                subBuilder.MergeFrom(Generator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Generator = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
       get { return result.hasId; }
      }
      public global::D3.OnlineService.ItemId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasId &&
            result.id_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.id_ = global::D3.OnlineService.ItemId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = null;
        return this;
      }
      
      public bool HasGenerator {
       get { return result.hasGenerator; }
      }
      public global::D3.Items.Generator Generator {
        get { return result.Generator; }
        set { SetGenerator(value); }
      }
      public Builder SetGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder SetGenerator(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGenerator &&
            result.generator_ != global::D3.Items.Generator.DefaultInstance) {
            result.generator_ = global::D3.Items.Generator.CreateBuilder(result.generator_).MergeFrom(value).BuildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder ClearGenerator() {
        PrepareBuilder();
        result.hasGenerator = false;
        result.generator_ = null;
        return this;
      }
    }
    static Item() {
      object.ReferenceEquals(global::D3.AuctionHouse.AuctionHouse.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Escrow : pb::GeneratedMessage<Escrow, Escrow.Builder> {
    private Escrow() { }
    private static readonly Escrow defaultInstance = new Escrow().MakeReadOnly();
    private static readonly string[] _escrowFieldNames = new string[] { "auction_item", "hero", "serviced_tokens", "version" };
    private static readonly uint[] _escrowFieldTags = new uint[] { 18, 26, 34, 8 };
    public static Escrow DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Escrow DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Escrow ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_Escrow__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Escrow, Escrow.Builder> InternalFieldAccessors {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_Escrow__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Version {
        CURRENT_VERSION = 1,
      }
      
    }
    #endregion
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int AuctionItemFieldNumber = 2;
    private bool hasAuctionItem;
    private global::D3.AuctionHouse.Item auctionItem_;
    public bool HasAuctionItem {
      get { return hasAuctionItem; }
    }
    public global::D3.AuctionHouse.Item AuctionItem {
      get { return auctionItem_ ?? global::D3.AuctionHouse.Item.DefaultInstance; }
    }
    
    public const int HeroFieldNumber = 3;
    private bool hasHero;
    private global::D3.Hero.SavedData hero_;
    public bool HasHero {
      get { return hasHero; }
    }
    public global::D3.Hero.SavedData Hero {
      get { return hero_ ?? global::D3.Hero.SavedData.DefaultInstance; }
    }
    
    public const int ServicedTokensFieldNumber = 4;
    private pbc::PopsicleList<global::D3.OnlineService.EntityId> servicedTokens_ = new pbc::PopsicleList<global::D3.OnlineService.EntityId>();
    public scg::IList<global::D3.OnlineService.EntityId> ServicedTokensList {
      get { return servicedTokens_; }
    }
    public int ServicedTokensCount {
      get { return servicedTokens_.Count; }
    }
    public global::D3.OnlineService.EntityId GetServicedTokens(int index) {
      return servicedTokens_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (HasAuctionItem) {
          if (!AuctionItem.IsInitialized) return false;
        }
        if (HasHero) {
          if (!Hero.IsInitialized) return false;
        }
        foreach (global::D3.OnlineService.EntityId element in ServicedTokensList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _escrowFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[3], Version);
      }
      if (hasAuctionItem) {
        output.WriteMessage(2, field_names[0], AuctionItem);
      }
      if (hasHero) {
        output.WriteMessage(3, field_names[1], Hero);
      }
      if (servicedTokens_.Count > 0) {
        output.WriteMessageArray(4, field_names[2], servicedTokens_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasAuctionItem) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, AuctionItem);
        }
        if (hasHero) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Hero);
        }
        foreach (global::D3.OnlineService.EntityId element in ServicedTokensList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Escrow ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Escrow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Escrow ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Escrow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Escrow ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Escrow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Escrow ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Escrow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Escrow ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Escrow ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Escrow MakeReadOnly() {
      servicedTokens_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Escrow prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Escrow, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Escrow cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Escrow result;
      
      private Escrow PrepareBuilder() {
        if (resultIsReadOnly) {
          Escrow original = result;
          result = new Escrow();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Escrow MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.AuctionHouse.Escrow.Descriptor; }
      }
      
      public override Escrow DefaultInstanceForType {
        get { return global::D3.AuctionHouse.Escrow.DefaultInstance; }
      }
      
      public override Escrow BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Escrow) {
          return MergeFrom((Escrow) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Escrow other) {
        if (other == global::D3.AuctionHouse.Escrow.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasAuctionItem) {
          MergeAuctionItem(other.AuctionItem);
        }
        if (other.HasHero) {
          MergeHero(other.Hero);
        }
        if (other.servicedTokens_.Count != 0) {
          result.servicedTokens_.Add(other.servicedTokens_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_escrowFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _escrowFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.AuctionHouse.Item.Builder subBuilder = global::D3.AuctionHouse.Item.CreateBuilder();
              if (result.hasAuctionItem) {
                subBuilder.MergeFrom(AuctionItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AuctionItem = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Hero.SavedData.Builder subBuilder = global::D3.Hero.SavedData.CreateBuilder();
              if (result.hasHero) {
                subBuilder.MergeFrom(Hero);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Hero = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.servicedTokens_, global::D3.OnlineService.EntityId.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasAuctionItem {
       get { return result.hasAuctionItem; }
      }
      public global::D3.AuctionHouse.Item AuctionItem {
        get { return result.AuctionItem; }
        set { SetAuctionItem(value); }
      }
      public Builder SetAuctionItem(global::D3.AuctionHouse.Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuctionItem = true;
        result.auctionItem_ = value;
        return this;
      }
      public Builder SetAuctionItem(global::D3.AuctionHouse.Item.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAuctionItem = true;
        result.auctionItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAuctionItem(global::D3.AuctionHouse.Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAuctionItem &&
            result.auctionItem_ != global::D3.AuctionHouse.Item.DefaultInstance) {
            result.auctionItem_ = global::D3.AuctionHouse.Item.CreateBuilder(result.auctionItem_).MergeFrom(value).BuildPartial();
        } else {
          result.auctionItem_ = value;
        }
        result.hasAuctionItem = true;
        return this;
      }
      public Builder ClearAuctionItem() {
        PrepareBuilder();
        result.hasAuctionItem = false;
        result.auctionItem_ = null;
        return this;
      }
      
      public bool HasHero {
       get { return result.hasHero; }
      }
      public global::D3.Hero.SavedData Hero {
        get { return result.Hero; }
        set { SetHero(value); }
      }
      public Builder SetHero(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHero = true;
        result.hero_ = value;
        return this;
      }
      public Builder SetHero(global::D3.Hero.SavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHero = true;
        result.hero_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHero(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHero &&
            result.hero_ != global::D3.Hero.SavedData.DefaultInstance) {
            result.hero_ = global::D3.Hero.SavedData.CreateBuilder(result.hero_).MergeFrom(value).BuildPartial();
        } else {
          result.hero_ = value;
        }
        result.hasHero = true;
        return this;
      }
      public Builder ClearHero() {
        PrepareBuilder();
        result.hasHero = false;
        result.hero_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.OnlineService.EntityId> ServicedTokensList {
        get { return PrepareBuilder().servicedTokens_; }
      }
      public int ServicedTokensCount {
        get { return result.ServicedTokensCount; }
      }
      public global::D3.OnlineService.EntityId GetServicedTokens(int index) {
        return result.GetServicedTokens(index);
      }
      public Builder SetServicedTokens(int index, global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.servicedTokens_[index] = value;
        return this;
      }
      public Builder SetServicedTokens(int index, global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.servicedTokens_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddServicedTokens(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.servicedTokens_.Add(value);
        return this;
      }
      public Builder AddServicedTokens(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.servicedTokens_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeServicedTokens(scg::IEnumerable<global::D3.OnlineService.EntityId> values) {
        PrepareBuilder();
        result.servicedTokens_.Add(values);
        return this;
      }
      public Builder ClearServicedTokens() {
        PrepareBuilder();
        result.servicedTokens_.Clear();
        return this;
      }
    }
    static Escrow() {
      object.ReferenceEquals(global::D3.AuctionHouse.AuctionHouse.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AuthorizeInfo : pb::GeneratedMessage<AuthorizeInfo, AuthorizeInfo.Builder> {
    private AuthorizeInfo() { }
    private static readonly AuthorizeInfo defaultInstance = new AuthorizeInfo().MakeReadOnly();
    private static readonly string[] _authorizeInfoFieldNames = new string[] { "item_id", "location_id", "transaction_hero_id" };
    private static readonly uint[] _authorizeInfoFieldTags = new uint[] { 26, 10, 18 };
    public static AuthorizeInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AuthorizeInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AuthorizeInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_AuthorizeInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AuthorizeInfo, AuthorizeInfo.Builder> InternalFieldAccessors {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_AuthorizeInfo__FieldAccessorTable; }
    }
    
    public const int LocationIdFieldNumber = 1;
    private bool hasLocationId;
    private global::D3.OnlineService.EntityId locationId_;
    public bool HasLocationId {
      get { return hasLocationId; }
    }
    public global::D3.OnlineService.EntityId LocationId {
      get { return locationId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int TransactionHeroIdFieldNumber = 2;
    private bool hasTransactionHeroId;
    private global::D3.OnlineService.EntityId transactionHeroId_;
    public bool HasTransactionHeroId {
      get { return hasTransactionHeroId; }
    }
    public global::D3.OnlineService.EntityId TransactionHeroId {
      get { return transactionHeroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int ItemIdFieldNumber = 3;
    private bool hasItemId;
    private global::D3.OnlineService.ItemId itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public global::D3.OnlineService.ItemId ItemId {
      get { return itemId_ ?? global::D3.OnlineService.ItemId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocationId) return false;
        if (!hasTransactionHeroId) return false;
        if (!LocationId.IsInitialized) return false;
        if (!TransactionHeroId.IsInitialized) return false;
        if (HasItemId) {
          if (!ItemId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _authorizeInfoFieldNames;
      if (hasLocationId) {
        output.WriteMessage(1, field_names[1], LocationId);
      }
      if (hasTransactionHeroId) {
        output.WriteMessage(2, field_names[2], TransactionHeroId);
      }
      if (hasItemId) {
        output.WriteMessage(3, field_names[0], ItemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLocationId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, LocationId);
        }
        if (hasTransactionHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, TransactionHeroId);
        }
        if (hasItemId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ItemId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AuthorizeInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthorizeInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthorizeInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthorizeInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthorizeInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthorizeInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AuthorizeInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AuthorizeInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AuthorizeInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthorizeInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AuthorizeInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AuthorizeInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AuthorizeInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AuthorizeInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AuthorizeInfo result;
      
      private AuthorizeInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          AuthorizeInfo original = result;
          result = new AuthorizeInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AuthorizeInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.AuctionHouse.AuthorizeInfo.Descriptor; }
      }
      
      public override AuthorizeInfo DefaultInstanceForType {
        get { return global::D3.AuctionHouse.AuthorizeInfo.DefaultInstance; }
      }
      
      public override AuthorizeInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AuthorizeInfo) {
          return MergeFrom((AuthorizeInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AuthorizeInfo other) {
        if (other == global::D3.AuctionHouse.AuthorizeInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocationId) {
          MergeLocationId(other.LocationId);
        }
        if (other.HasTransactionHeroId) {
          MergeTransactionHeroId(other.TransactionHeroId);
        }
        if (other.HasItemId) {
          MergeItemId(other.ItemId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_authorizeInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _authorizeInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasLocationId) {
                subBuilder.MergeFrom(LocationId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LocationId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasTransactionHeroId) {
                subBuilder.MergeFrom(TransactionHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TransactionHeroId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (result.hasItemId) {
                subBuilder.MergeFrom(ItemId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ItemId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocationId {
       get { return result.hasLocationId; }
      }
      public global::D3.OnlineService.EntityId LocationId {
        get { return result.LocationId; }
        set { SetLocationId(value); }
      }
      public Builder SetLocationId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocationId = true;
        result.locationId_ = value;
        return this;
      }
      public Builder SetLocationId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocationId = true;
        result.locationId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocationId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocationId &&
            result.locationId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.locationId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.locationId_).MergeFrom(value).BuildPartial();
        } else {
          result.locationId_ = value;
        }
        result.hasLocationId = true;
        return this;
      }
      public Builder ClearLocationId() {
        PrepareBuilder();
        result.hasLocationId = false;
        result.locationId_ = null;
        return this;
      }
      
      public bool HasTransactionHeroId {
       get { return result.hasTransactionHeroId; }
      }
      public global::D3.OnlineService.EntityId TransactionHeroId {
        get { return result.TransactionHeroId; }
        set { SetTransactionHeroId(value); }
      }
      public Builder SetTransactionHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTransactionHeroId = true;
        result.transactionHeroId_ = value;
        return this;
      }
      public Builder SetTransactionHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTransactionHeroId = true;
        result.transactionHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTransactionHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTransactionHeroId &&
            result.transactionHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.transactionHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.transactionHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.transactionHeroId_ = value;
        }
        result.hasTransactionHeroId = true;
        return this;
      }
      public Builder ClearTransactionHeroId() {
        PrepareBuilder();
        result.hasTransactionHeroId = false;
        result.transactionHeroId_ = null;
        return this;
      }
      
      public bool HasItemId {
       get { return result.hasItemId; }
      }
      public global::D3.OnlineService.ItemId ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder SetItemId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItemId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItemId &&
            result.itemId_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.itemId_ = global::D3.OnlineService.ItemId.CreateBuilder(result.itemId_).MergeFrom(value).BuildPartial();
        } else {
          result.itemId_ = value;
        }
        result.hasItemId = true;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = null;
        return this;
      }
    }
    static AuthorizeInfo() {
      object.ReferenceEquals(global::D3.AuctionHouse.AuctionHouse.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ClaimInfo : pb::GeneratedMessage<ClaimInfo, ClaimInfo.Builder> {
    private ClaimInfo() { }
    private static readonly ClaimInfo defaultInstance = new ClaimInfo().MakeReadOnly();
    private static readonly string[] _claimInfoFieldNames = new string[] { "transaction_hero_id" };
    private static readonly uint[] _claimInfoFieldTags = new uint[] { 10 };
    public static ClaimInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClaimInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClaimInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_ClaimInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClaimInfo, ClaimInfo.Builder> InternalFieldAccessors {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_ClaimInfo__FieldAccessorTable; }
    }
    
    public const int TransactionHeroIdFieldNumber = 1;
    private bool hasTransactionHeroId;
    private global::D3.OnlineService.EntityId transactionHeroId_;
    public bool HasTransactionHeroId {
      get { return hasTransactionHeroId; }
    }
    public global::D3.OnlineService.EntityId TransactionHeroId {
      get { return transactionHeroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTransactionHeroId) return false;
        if (!TransactionHeroId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _claimInfoFieldNames;
      if (hasTransactionHeroId) {
        output.WriteMessage(1, field_names[0], TransactionHeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTransactionHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TransactionHeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClaimInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClaimInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClaimInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClaimInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClaimInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClaimInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClaimInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClaimInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClaimInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClaimInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClaimInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClaimInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ClaimInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClaimInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClaimInfo result;
      
      private ClaimInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ClaimInfo original = result;
          result = new ClaimInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClaimInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.AuctionHouse.ClaimInfo.Descriptor; }
      }
      
      public override ClaimInfo DefaultInstanceForType {
        get { return global::D3.AuctionHouse.ClaimInfo.DefaultInstance; }
      }
      
      public override ClaimInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClaimInfo) {
          return MergeFrom((ClaimInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClaimInfo other) {
        if (other == global::D3.AuctionHouse.ClaimInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTransactionHeroId) {
          MergeTransactionHeroId(other.TransactionHeroId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_claimInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _claimInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasTransactionHeroId) {
                subBuilder.MergeFrom(TransactionHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TransactionHeroId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTransactionHeroId {
       get { return result.hasTransactionHeroId; }
      }
      public global::D3.OnlineService.EntityId TransactionHeroId {
        get { return result.TransactionHeroId; }
        set { SetTransactionHeroId(value); }
      }
      public Builder SetTransactionHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTransactionHeroId = true;
        result.transactionHeroId_ = value;
        return this;
      }
      public Builder SetTransactionHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTransactionHeroId = true;
        result.transactionHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTransactionHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTransactionHeroId &&
            result.transactionHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.transactionHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.transactionHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.transactionHeroId_ = value;
        }
        result.hasTransactionHeroId = true;
        return this;
      }
      public Builder ClearTransactionHeroId() {
        PrepareBuilder();
        result.hasTransactionHeroId = false;
        result.transactionHeroId_ = null;
        return this;
      }
    }
    static ClaimInfo() {
      object.ReferenceEquals(global::D3.AuctionHouse.AuctionHouse.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountInfo : pb::GeneratedMessage<AccountInfo, AccountInfo.Builder> {
    private AccountInfo() { }
    private static readonly AccountInfo defaultInstance = new AccountInfo().MakeReadOnly();
    private static readonly string[] _accountInfoFieldNames = new string[] { "account_id", "escrow_id" };
    private static readonly uint[] _accountInfoFieldTags = new uint[] { 10, 18 };
    public static AccountInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_AccountInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountInfo, AccountInfo.Builder> InternalFieldAccessors {
      get { return global::D3.AuctionHouse.AuctionHouse.internal__static_D3_AuctionHouse_AccountInfo__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int EscrowIdFieldNumber = 2;
    private bool hasEscrowId;
    private global::D3.OnlineService.EntityId escrowId_;
    public bool HasEscrowId {
      get { return hasEscrowId; }
    }
    public global::D3.OnlineService.EntityId EscrowId {
      get { return escrowId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasEscrowId) return false;
        if (!AccountId.IsInitialized) return false;
        if (!EscrowId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountInfoFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasEscrowId) {
        output.WriteMessage(2, field_names[1], EscrowId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasEscrowId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, EscrowId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountInfo result;
      
      private AccountInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountInfo original = result;
          result = new AccountInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.AuctionHouse.AccountInfo.Descriptor; }
      }
      
      public override AccountInfo DefaultInstanceForType {
        get { return global::D3.AuctionHouse.AccountInfo.DefaultInstance; }
      }
      
      public override AccountInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountInfo) {
          return MergeFrom((AccountInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountInfo other) {
        if (other == global::D3.AuctionHouse.AccountInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasEscrowId) {
          MergeEscrowId(other.EscrowId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasEscrowId) {
                subBuilder.MergeFrom(EscrowId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EscrowId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasEscrowId {
       get { return result.hasEscrowId; }
      }
      public global::D3.OnlineService.EntityId EscrowId {
        get { return result.EscrowId; }
        set { SetEscrowId(value); }
      }
      public Builder SetEscrowId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEscrowId = true;
        result.escrowId_ = value;
        return this;
      }
      public Builder SetEscrowId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEscrowId = true;
        result.escrowId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEscrowId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEscrowId &&
            result.escrowId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.escrowId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.escrowId_).MergeFrom(value).BuildPartial();
        } else {
          result.escrowId_ = value;
        }
        result.hasEscrowId = true;
        return this;
      }
      public Builder ClearEscrowId() {
        PrepareBuilder();
        result.hasEscrowId = false;
        result.escrowId_ = null;
        return this;
      }
    }
    static AccountInfo() {
      object.ReferenceEquals(global::D3.AuctionHouse.AuctionHouse.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
