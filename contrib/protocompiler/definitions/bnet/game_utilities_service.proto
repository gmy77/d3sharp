import "bnet/game_master_service.proto";
import "bnet/server_pool_service.proto";
import "bnet/attribute.proto";
import "bnet/entity.proto";
import "bnet/rpc.proto";

package bnet.protocol.game_utilities;

option cc_generic_services = false;

message ClientRequest
{
    repeated .bnet.protocol.attribute.Attribute attribute = 1;
    optional .bnet.protocol.ProcessId host = 2;
    optional .bnet.protocol.EntityId bnet_account_id = 3;
    optional .bnet.protocol.EntityId game_account_id = 4;
}

message ClientResponse
{
    repeated .bnet.protocol.attribute.Attribute attribute = 1;
}

message ServerRequest
{
    repeated .bnet.protocol.attribute.Attribute attribute = 1;
    required fixed32 program = 2;
    optional .bnet.protocol.ProcessId host = 3;
}

message ServerResponse
{
    repeated .bnet.protocol.attribute.Attribute attribute = 1;
}

message PresenceChannelCreatedRequest
{
    required .bnet.protocol.EntityId id = 1;
    optional .bnet.protocol.EntityId game_account_id = 3;
    optional .bnet.protocol.EntityId bnet_account_id = 4;
    optional .bnet.protocol.ProcessId host = 5;
}

message PlayerVariablesRequest
{
    required .bnet.protocol.EntityId bnet_account_id = 1;
    required .bnet.protocol.EntityId game_account_id = 2;
    repeated string variable = 4;
    optional .bnet.protocol.ProcessId host = 5;
}

message GameVariablesRequest
{
    repeated .bnet.protocol.attribute.Attribute attribute = 1;
    repeated string variable = 2;
    optional .bnet.protocol.ProcessId host = 3;
}

message VariablesResponse
{
    repeated float value = 1 [packed=true];
}

message GameAccountOnlineNotification
{
    required .bnet.protocol.EntityId game_account_id = 1;
    optional .bnet.protocol.ProcessId host = 2;
}

message GameAccountOfflineNotification
{
    required .bnet.protocol.EntityId game_account_id = 1;
    optional .bnet.protocol.ProcessId host = 2;
}

service GameUtilities
{
    rpc ProcessClientRequest(.bnet.protocol.game_utilities.ClientRequest) returns(.bnet.protocol.game_utilities.ClientResponse)
    {
        option (method_id) = 1;
    }
    rpc PresenceChannelCreated(.bnet.protocol.game_utilities.PresenceChannelCreatedRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 2;
    }
    rpc GetPlayerVariables(.bnet.protocol.game_utilities.PlayerVariablesRequest) returns(.bnet.protocol.game_utilities.VariablesResponse)
    {
        option (method_id) = 3;
    }
    rpc GetGameVariables(.bnet.protocol.game_utilities.GameVariablesRequest) returns(.bnet.protocol.game_utilities.VariablesResponse)
    {
        option (method_id) = 4;
    }
    rpc GetLoad(.bnet.protocol.server_pool.GetLoadRequest) returns(.bnet.protocol.server_pool.ServerState)
    {
        option (method_id) = 5;
    }
    rpc ProcessServerRequest(.bnet.protocol.game_utilities.ServerRequest) returns(.bnet.protocol.game_utilities.ServerResponse)
    {
        option (method_id) = 6;
    }
    rpc NotifyGameAccountOnline(.bnet.protocol.game_utilities.GameAccountOnlineNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 7;
    }
    rpc NotifyGameAccountOffline(.bnet.protocol.game_utilities.GameAccountOfflineNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 8;
    }
}

