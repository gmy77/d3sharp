import "bnet/rpc.proto";
import "bnet/search_types.proto";

package bnet.protocol.search;

option cc_generic_services = false;

message FindMatchesRequest
{
    required string universe = 1;
    repeated .bnet.protocol.search.Filter filters = 2;
    optional uint32 starting_index = 3 [default = 0];
    optional uint32 count = 4 [default = 0];
}

message FindMatchesResponse
{
    required uint32 total_count_capped = 1;
    repeated .bnet.protocol.search.Object objects = 2;
    optional uint32 total_count_uncapped = 3;
}

message SetObjectRequest
{
    repeated .bnet.protocol.search.Object objects = 1;
}

message RemoveObjectsRequest
{
    required bytes start_id = 1;
    required bytes end_id = 2;
}

message SearchConfig
{
}

message SearchUniverseLicenseConfig
{
    required string universe = 1;
    optional uint32 search_enabled_license = 2 [default = 0];
    optional uint32 search_disabled_license = 3 [default = 0];
}

message SearchLicenseConfig
{
    repeated .bnet.protocol.search.SearchUniverseLicenseConfig universe_licenses = 1;
}

service SearchService
{
    rpc FindMatches(.bnet.protocol.search.FindMatchesRequest) returns(.bnet.protocol.search.FindMatchesResponse)
    {
        option (method_id) = 1;
    }
    rpc SetObject(.bnet.protocol.search.SetObjectRequest) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 2;
    }
    rpc RemoveObjects(.bnet.protocol.search.RemoveObjectsRequest) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 3;
    }
}

