import "lib/protocol/entity.proto";
import "lib/protocol/invitation.proto";
import "lib/rpc/rpc.proto";
import "service/channel/definition/channel.proto";
import "service/channel_invitation/definition/channel_invitation_types.proto";

package bnet.protocol.channel_invitation;

option cc_generic_services = false;

message AcceptInvitationRequest
{
    optional .bnet.protocol.EntityId agent_id = 1;
    required fixed64 invitation_id = 2;
    required uint64 object_id = 3;
}

message AcceptInvitationResponse
{
    required uint64 object_id = 1;
}

message SubscribeRequest
{
    optional .bnet.protocol.EntityId agent_id = 1;
    required uint64 object_id = 2;
}

message SubscribeResponse
{
    repeated .bnet.protocol.channel_invitation.InvitationCollection collection = 1;
    repeated .bnet.protocol.invitation.Invitation received_invitation = 2;
}

message UnsubscribeRequest
{
    optional .bnet.protocol.EntityId agent_id = 1;
}

message SuggestInvitationRequest
{
    optional .bnet.protocol.EntityId agent_id = 1;
    required .bnet.protocol.EntityId channel_id = 2;
    required .bnet.protocol.EntityId target_id = 3;
    optional .bnet.protocol.EntityId approval_id = 4;
}

message RevokeInvitationRequest
{
    optional .bnet.protocol.EntityId agent_id = 1;
    optional .bnet.protocol.EntityId target_id = 2;
    required fixed64 invitation_id = 3;
    required .bnet.protocol.EntityId channel_id = 4;
}

message HasRoomForInvitationRequest
{
    required uint32 service_type = 1;
}

message InvitationAddedNotification
{
    required .bnet.protocol.invitation.Invitation invitation = 1;
}

message InvitationRemovedNotification
{
    required .bnet.protocol.invitation.Invitation invitation = 1;
    optional uint32 reason = 2;
}

message SuggestionAddedNotification
{
    required .bnet.protocol.invitation.Suggestion suggestion = 1;
}

service ChannelInvitationService
{
    rpc Subscribe(.bnet.protocol.channel_invitation.SubscribeRequest) returns(.bnet.protocol.channel_invitation.SubscribeResponse)
    {
        option (method_id) = 1;
    }
    rpc Unsubscribe(.bnet.protocol.channel_invitation.UnsubscribeRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 2;
    }
    rpc SendInvitation(.bnet.protocol.invitation.SendInvitationRequest) returns(.bnet.protocol.invitation.SendInvitationResponse)
    {
        option (method_id) = 3;
    }
    rpc AcceptInvitation(.bnet.protocol.channel_invitation.AcceptInvitationRequest) returns(.bnet.protocol.channel_invitation.AcceptInvitationResponse)
    {
        option (method_id) = 4;
    }
    rpc DeclineInvitation(.bnet.protocol.invitation.GenericRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 5;
    }
    rpc RevokeInvitation(.bnet.protocol.channel_invitation.RevokeInvitationRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 6;
    }
    rpc SuggestInvitation(.bnet.protocol.channel_invitation.SuggestInvitationRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 7;
    }
}

service ChannelInvitationNotify
{
    rpc NotifyReceivedInvitationAdded(.bnet.protocol.channel_invitation.InvitationAddedNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 1;
    }
    rpc NotifyReceivedInvitationRemoved(.bnet.protocol.channel_invitation.InvitationRemovedNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 2;
    }
    rpc NotifyReceivedSuggestionAdded(.bnet.protocol.channel_invitation.SuggestionAddedNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 3;
    }
    rpc HasRoomForInvitation(.bnet.protocol.channel_invitation.HasRoomForInvitationRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 4;
    }
}

