import "lib/rpc/rpc.proto";
import "lib/protocol/entity.proto";
import "lib/protocol/attribute.proto";
import "service/toon/definition/toon.proto";

package bnet.protocol.toon.external;

option cc_generic_services = false;

message ToonListRequest
{
}

message ToonListResponse
{
    repeated .bnet.protocol.EntityId toons = 2;
}

message SelectToonRequest
{
    required .bnet.protocol.EntityId toon = 1;
}

message SelectToonResponse
{
}

message CreateToonRequest
{
    optional string name = 1;
    repeated .bnet.protocol.attribute.Attribute attribute = 2;
}

message CreateToonResponse
{
    required uint32 token = 1;
}

message ToonCreatedNotification
{
    optional .bnet.protocol.EntityId toon = 1;
    required uint32 token = 2;
    required uint32 error_code = 3;
}

message DeleteToonRequest
{
    required .bnet.protocol.EntityId toon = 1;
}

message DeleteToonResponse
{
}

service ToonServiceExternal
{
    rpc ToonList(.bnet.protocol.toon.external.ToonListRequest) returns(.bnet.protocol.toon.external.ToonListResponse)
    {
        option (method_id) = 1;
    }
    rpc SelectToon(.bnet.protocol.toon.external.SelectToonRequest) returns(.bnet.protocol.toon.external.SelectToonResponse)
    {
        option (method_id) = 2;
    }
    rpc CreateToon(.bnet.protocol.toon.external.CreateToonRequest) returns(.bnet.protocol.toon.external.CreateToonResponse)
    {
        option (method_id) = 3;
    }
    rpc DeleteToon(.bnet.protocol.toon.external.DeleteToonRequest) returns(.bnet.protocol.toon.external.DeleteToonResponse)
    {
        option (method_id) = 4;
    }
}

service ToonNotifyExternal
{
    rpc NotifyToonCreated(.bnet.protocol.toon.external.ToonCreatedNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 1;
    }
}

