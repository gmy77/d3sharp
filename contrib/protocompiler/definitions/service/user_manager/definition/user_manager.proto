import "lib/protocol/attribute.proto";
import "lib/protocol/entity.proto";
import "lib/rpc/rpc.proto";

package bnet.protocol.user_manager;

option cc_generic_services = false;

message PlayerReport
{
    enum UserComplaintCode
    {
        USER_COMPLAINT_SPAM = 0;
        USER_COMPLAINT_HARASSMENT = 1;
        USER_COMPLAINT_REAL_LIFE_THREAT = 2;
        USER_COMPLAINT_INAPPROPRIATE_NAME = 3;
        USER_COMPLAINT_HACKING = 4;
        USER_COMPLAINT_ANY = 5;
    }

    required .bnet.protocol.user_manager.PlayerReport.UserComplaintCode complaint_code = 1;
    required string complaint_note = 2;
}

message RecentPlayer
{
    required .bnet.protocol.EntityId player = 1;
    optional fixed64 timestamp_played = 2;
    repeated .bnet.protocol.attribute.Attribute attributes = 3;
}

message SubscribeToUserManagerRequest
{
    required uint64 object_id = 1;
}

message SubscribeToUserManagerResponse
{
    repeated .bnet.protocol.user_manager.RecentPlayer recent_players = 2;
    repeated .bnet.protocol.EntityId blocked_toons = 3;
    repeated .bnet.protocol.EntityId ignored_inviters = 4;
}

message ReportToonRequest
{
    enum BlockAction
    {
        SESSION_BLOCK_GAME_ACCOUNT = 1;
    }

    required .bnet.protocol.EntityId target_id = 1;
    required .bnet.protocol.user_manager.PlayerReport report = 2;
    optional .bnet.protocol.user_manager.ReportToonRequest.BlockAction blocking_action = 3;
}

message ReportToonResponse
{
    optional .bnet.protocol.EntityId reported_toon = 1;
}

message AddRecentPlayersRequest
{
    repeated .bnet.protocol.user_manager.RecentPlayer players = 1;
}

message AddRecentPlayersResponse
{
    repeated .bnet.protocol.user_manager.RecentPlayer players_added = 1;
    repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 3;
}

message RemoveRecentPlayersRequest
{
    repeated .bnet.protocol.user_manager.RecentPlayer players = 2;
}

message RemoveRecentPlayersResponse
{
    repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 1;
}

message ReportAccountRequest
{
    required .bnet.protocol.EntityId target_account = 1;
    required .bnet.protocol.user_manager.PlayerReport report = 2;
}

message ReportAccountResponse
{
    optional .bnet.protocol.EntityId reported_account = 1;
}

message IgnoreInviterRequest
{
    required .bnet.protocol.EntityId target_id = 1;
}

message UnignoreInvitersRequest
{
    repeated .bnet.protocol.EntityId target_id = 1;
}

message BlockToonRequest
{
    required .bnet.protocol.EntityId target_id = 1;
}

message UnblockToonsRequest
{
    repeated .bnet.protocol.EntityId target_id = 1;
}

message UnblockToonsResponse
{
    repeated .bnet.protocol.EntityId unblocked_toon = 1;
}

message UnignoreInvitersResponse
{
    repeated .bnet.protocol.EntityId unignored_inviter = 1;
}

message InviterIgnoredNotification
{
    repeated .bnet.protocol.EntityId players = 1;
}

service UserManagerService
{
    rpc SubscribeToUserManager(.bnet.protocol.user_manager.SubscribeToUserManagerRequest) returns(.bnet.protocol.user_manager.SubscribeToUserManagerResponse)
    {
        option (method_id) = 1;
    }
    rpc AddRecentPlayers(.bnet.protocol.user_manager.AddRecentPlayersRequest) returns(.bnet.protocol.user_manager.AddRecentPlayersResponse)
    {
        option (method_id) = 5;
    }
    rpc RemoveRecentPlayers(.bnet.protocol.user_manager.RemoveRecentPlayersRequest) returns(.bnet.protocol.user_manager.RemoveRecentPlayersResponse)
    {
        option (method_id) = 6;
    }
    rpc ReportToon(.bnet.protocol.user_manager.ReportToonRequest) returns(.bnet.protocol.user_manager.ReportToonResponse)
    {
        option (method_id) = 7;
    }
    rpc BlockToon(.bnet.protocol.user_manager.BlockToonRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 8;
    }
    rpc UnblockToons(.bnet.protocol.user_manager.UnblockToonsRequest) returns(.bnet.protocol.user_manager.UnblockToonsResponse)
    {
        option (method_id) = 13;
    }
    rpc ReportAccount(.bnet.protocol.user_manager.ReportAccountRequest) returns(.bnet.protocol.user_manager.ReportAccountResponse)
    {
        option (method_id) = 10;
    }
    rpc IgnoreInviter(.bnet.protocol.user_manager.IgnoreInviterRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 11;
    }
    rpc UnignoreInviters(.bnet.protocol.user_manager.UnignoreInvitersRequest) returns(.bnet.protocol.user_manager.UnignoreInvitersResponse)
    {
        option (method_id) = 14;
    }
}

service UserManagerNotify
{
    rpc NotifyInviterIgnored(.bnet.protocol.user_manager.InviterIgnoredNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 3;
    }
    rpc NotifyInviterUnignored(.bnet.protocol.user_manager.InviterIgnoredNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 4;
    }
}

