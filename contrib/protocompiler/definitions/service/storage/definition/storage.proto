import "lib/protocol/descriptor.proto";
import "lib/protocol/entity.proto";
import "lib/rpc/rpc.proto";

package bnet.protocol.storage;

option cc_generic_services = false;

message TableId
{
    required bytes hash = 1;
}

message ColumnId
{
    required bytes hash = 1;
}

message RowId
{
    required bytes hash = 1;
}

message Privilege
{
    enum Permission
    {
        OWNER = 1;
        FRIEND = 2;
        OTHER = 4;
        GAME = 8;
        ALL = 15;
    }

    optional fixed64 bits = 1 [default = 0];
    optional fixed32 program = 2 [default = 0];
}

message Predicate
{
    enum Op
    {
        IS_CLEAR = 1;
        NOT_CLEAR = 2;
        IS_EQUALS = 3;
        NOT_EQUALS = 4;
        IS_GREATER_THAN = 5;
        NOT_GREATER_THAN = 6;
        IS_LESS_THAN = 7;
        NOT_LESS_THAN = 8;
        IS_BETWEEN = 9;
        NOT_BETWEEN = 10;
    }

    required .bnet.protocol.storage.Predicate.Op op = 1;
    required .bnet.protocol.Path field = 2;
    repeated sint64 sint_data = 3 [packed=true];
    repeated uint64 uint_data = 4 [packed=true];
    repeated float float_data = 5 [packed=true];
    repeated double double_data = 6 [packed=true];
    repeated bytes bytes_data = 7;
}

message Command
{
    enum Op
    {
        ROW_DELETE = 1;
        ROW_FETCH = 2;
        COL_DELETE = 3;
        COL_FETCH = 4;
        COL_WRITE = 5;
        COL_MERGE = 6;
        FLD_CLEAR = 7;
        FLD_FETCH = 8;
        FLD_WRITE = 9;
        FLD_MERGE = 10;
        FLD_INCR = 11;
        FLD_TEST = 12;
        FLD_SCAN = 13;
        ROW_TEST = 14;
        COL_TEST = 15;
        FLD_SMAX = 16;
        COL_COND = 17;
        FLD_COND = 18;
        COND_POP = 19;
        LOG_DEBUG = 20;
        COL_COPY = 21;
    }

    enum Cond
    {
        COND_ALWAYS = 0;
        COND_NOT_EXISTS = 1;
        COND_NOT_EQUAL = 2;
        COND_LESS_THAN = 3;
        COND_NOT_GREATER = 4;
        COND_EQUALS = 5;
        COND_NOT_LESS = 6;
        COND_GREATER_THAN = 7;
        COND_NEVER = 8;
    }

    required .bnet.protocol.storage.Command.Op op = 1;
    optional bytes data = 2;
    repeated .bnet.protocol.Path fields = 3;
    optional fixed64 min_version = 4;
    optional fixed64 max_version = 5;
    repeated .bnet.protocol.storage.Predicate predicate = 6;
    optional uint32 limit = 7;
    optional .bnet.protocol.storage.Command.Cond condition = 8;
    optional string message = 11;
    optional bool no_data = 12 [default = false];
    optional string using_index = 13;
    optional fixed64 input_version = 14;
}

message Operation
{
    required .bnet.protocol.storage.TableId table_id = 1;
    optional .bnet.protocol.storage.ColumnId column_id = 2;
    optional .bnet.protocol.storage.RowId row_id = 3;
    optional bytes row_key = 4;
    optional fixed64 version = 5;
    repeated .bnet.protocol.storage.Command rops = 6;
    optional fixed64 mutate_version = 7;
    optional .bnet.protocol.storage.Privilege privilege = 8;
}

message Cell
{
    required .bnet.protocol.storage.ColumnId column_id = 1;
    required .bnet.protocol.storage.RowId row_id = 2;
    optional bytes row_key = 3;
    optional fixed64 version = 4;
    optional bytes data = 5;
}

message OperationResult
{
    optional uint32 error_code = 1 [default = 0];
    required .bnet.protocol.storage.TableId table_id = 2;
    repeated .bnet.protocol.storage.Cell data = 3;
}

message OpenTableRequest
{
    optional string schema = 1 [default = "DEFAULT"];
    optional .bnet.protocol.storage.Privilege privilege = 2;
    required .bnet.protocol.storage.TableId table_id = 3;
    optional .bnet.protocol.EntityId agent_id = 4;
    optional string process_name = 5;
}

message OpenTableResponse
{
}

message OpenColumnRequest
{
    optional string schema = 1 [default = "DEFAULT"];
    optional .bnet.protocol.storage.Privilege privilege = 2;
    required .bnet.protocol.storage.TableId table_id = 4;
    required .bnet.protocol.storage.ColumnId column_id = 5;
    optional string proto_type = 6;
    optional .bnet.protocol.EntityId agent_id = 7;
    optional string process_name = 8;
}

message OpenColumnResponse
{
    optional bool server_field_ops = 2 [default = false];
}

message ExecuteRequest
{
    optional string schema = 1 [default = "DEFAULT"];
    optional .bnet.protocol.storage.Privilege privilege = 2;
    optional bool read_only = 3 [default = false];
    optional bool wants_row_key = 4 [default = false];
    optional bool wants_column_name = 5 [default = false];
    optional uint32 max_data_size = 6 [default = 16777215];
    repeated .bnet.protocol.storage.Operation operations = 7;
    optional uint32 timeout = 12;
    optional .bnet.protocol.EntityId agent_id = 9;
    optional string query_name = 10 [default = "NoName"];
    optional string process_name = 11;
}

message ExecuteResponse
{
    optional uint32 error_code = 1 [default = 0];
    repeated .bnet.protocol.storage.OperationResult results = 2;
    optional string error_message = 3;
}

service StorageService
{
    rpc Execute(.bnet.protocol.storage.ExecuteRequest) returns(.bnet.protocol.storage.ExecuteResponse)
    {
        option (method_id) = 1;
        option (timeout) = 30;
    }
    rpc OpenTable(.bnet.protocol.storage.OpenTableRequest) returns(.bnet.protocol.storage.OpenTableResponse)
    {
        option (method_id) = 2;
    }
    rpc OpenColumn(.bnet.protocol.storage.OpenColumnRequest) returns(.bnet.protocol.storage.OpenColumnResponse)
    {
        option (method_id) = 3;
    }
}

