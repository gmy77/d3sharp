import "lib/protocol/attribute.proto";
import "lib/protocol/entity.proto";
import "lib/rpc/rpc.proto";

package bnet.protocol.notification;

option cc_generic_services = false;

message Notification
{
    optional .bnet.protocol.EntityId sender_id = 1;
    optional .bnet.protocol.EntityId sender_game_account = 2;
    required .bnet.protocol.EntityId target_id = 3;
    required string type = 4;
    repeated .bnet.protocol.attribute.Attribute attribute = 5;
}

message FindClientRequest
{
    required .bnet.protocol.EntityId entity_id = 1;
}

message FindClientResponse
{
    required uint32 label = 1;
    optional .bnet.protocol.ProcessId client_process_id = 2;
}

message RegisterClientRequest
{
    required .bnet.protocol.EntityId entity_id = 1;
}

message UnregisterClientRequest
{
    required .bnet.protocol.EntityId entity_id = 1;
}

service NotificationService
{
    rpc SendNotification(.bnet.protocol.notification.Notification) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 1;
    }
    rpc RegisterClient(.bnet.protocol.notification.RegisterClientRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 2;
    }
    rpc UnregisterClient(.bnet.protocol.notification.UnregisterClientRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 3;
    }
    rpc FindClient(.bnet.protocol.notification.FindClientRequest) returns(.bnet.protocol.notification.FindClientResponse)
    {
        option (method_id) = 4;
    }
}

service NotificationListener
{
    rpc OnNotificationReceived(.bnet.protocol.notification.Notification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 1;
    }
}

