import "lib/rpc/rpc.proto";

package bnet.protocol.connection;

option cc_generic_services = false;

message ConnectRequest
{
    optional .bnet.protocol.ProcessId client_id = 1;
}

message ConnectResponse
{
    required .bnet.protocol.ProcessId server_id = 1;
    optional .bnet.protocol.ProcessId client_id = 2;
}

message BoundService
{
    required fixed32 hash = 1;
    required uint32 id = 2;
}

message BindRequest
{
    repeated fixed32 imported_service_hash = 1 [packed=true];
    repeated .bnet.protocol.connection.BoundService exported_service = 2;
}

message BindResponse
{
    repeated uint32 imported_service_id = 1 [packed=true];
}

message EchoRequest
{
    optional fixed64 time = 1;
    optional bool network_only = 2 [default = false];
    optional bytes payload = 3;
}

message EchoResponse
{
    optional fixed64 time = 1;
    optional bytes payload = 2;
}

message DisconnectRequest
{
    required uint32 error_code = 1;
}

message DisconnectNotification
{
    required uint32 error_code = 1;
    optional string reason = 2;
}

message NullRequest
{
}

message EncryptRequest
{
}

service ConnectionService
{
    rpc Connect(.bnet.protocol.connection.ConnectRequest) returns(.bnet.protocol.connection.ConnectResponse)
    {
        option (method_id) = 1;
    }
    rpc Bind(.bnet.protocol.connection.BindRequest) returns(.bnet.protocol.connection.BindResponse)
    {
        option (method_id) = 2;
    }
    rpc Echo(.bnet.protocol.connection.EchoRequest) returns(.bnet.protocol.connection.EchoResponse)
    {
        option (method_id) = 3;
    }
    rpc ForceDisconnect(.bnet.protocol.connection.DisconnectNotification) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 4;
    }
    rpc Null(.bnet.protocol.connection.NullRequest) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 5;
    }
    rpc Encrypt(.bnet.protocol.connection.EncryptRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 6;
    }
    rpc RequestDisconnect(.bnet.protocol.connection.DisconnectRequest) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 7;
    }
}

